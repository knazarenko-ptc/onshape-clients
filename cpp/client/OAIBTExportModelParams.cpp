/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * OpenAPI spec version: 1.111
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIBTExportModelParams.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIBTExportModelParams::OAIBTExportModelParams(QString json) {
    init();
    this->fromJson(json);
}

OAIBTExportModelParams::OAIBTExportModelParams() {
    init();
}

OAIBTExportModelParams::~OAIBTExportModelParams() {
    this->cleanup();
}

void
OAIBTExportModelParams::init() {
    angle_tolerance = 0.0;
    m_angle_tolerance_isSet = false;
    batch_flat_patterns = false;
    m_batch_flat_patterns_isSet = false;
    chord_tolerance = 0.0;
    m_chord_tolerance_isSet = false;
    cloud_object_id = new QString("");
    m_cloud_object_id_isSet = false;
    cloud_storage_account_id = new QString("");
    m_cloud_storage_account_id_isSet = false;
    configuration = new QString("");
    m_configuration_isSet = false;
    deep_search_for_foreign_data = false;
    m_deep_search_for_foreign_data_isSet = false;
    destination_name = new QString("");
    m_destination_name_isSet = false;
    document_id = new QString("");
    m_document_id_isSet = false;
    document_version_id = new QString("");
    m_document_version_id_isSet = false;
    element_id = new QString("");
    m_element_id_isSet = false;
    element_ids = new QString("");
    m_element_ids_isSet = false;
    email_link = false;
    m_email_link_isSet = false;
    email_message = new QString("");
    m_email_message_isSet = false;
    email_subject = new QString("");
    m_email_subject_isSet = false;
    email_to = new QString("");
    m_email_to_isSet = false;
    extract_to_s3 = false;
    m_extract_to_s3_isSet = false;
    feature_ids = new QString("");
    m_feature_ids_isSet = false;
    flatten = false;
    m_flatten_isSet = false;
    format = new QString("");
    m_format_isSet = false;
    from_user_id = new QString("");
    m_from_user_id_isSet = false;
    grouping = new QString("");
    m_grouping_isSet = false;
    include_bend_centerlines = false;
    m_include_bend_centerlines_isSet = false;
    include_bend_lines = false;
    m_include_bend_lines_isSet = false;
    include_custom_properties = false;
    m_include_custom_properties_isSet = false;
    include_custom_properties_data = false;
    m_include_custom_properties_data_isSet = false;
    include_export_ids = false;
    m_include_export_ids_isSet = false;
    include_foreign_data = false;
    m_include_foreign_data_isSet = false;
    include_items_data = false;
    m_include_items_data_isSet = false;
    include_linked_documents = false;
    m_include_linked_documents_isSet = false;
    include_release_management_data = false;
    m_include_release_management_data_isSet = false;
    include_sketches = false;
    m_include_sketches_isSet = false;
    include_std = false;
    m_include_std_isSet = false;
    is_parting_out = false;
    m_is_parting_out_isSet = false;
    link_document_id = new QString("");
    m_link_document_id_isSet = false;
    link_document_workspace_id = new QString("");
    m_link_document_workspace_id_isSet = false;
    max_facet_width = 0.0;
    m_max_facet_width_isSet = false;
    microversion = new QString("");
    m_microversion_isSet = false;
    min_facet_width = 0.0;
    m_min_facet_width_isSet = false;
    mode = new QString("");
    m_mode_isSet = false;
    part_ids = new QString("");
    m_part_ids_isSet = false;
    part_query = new QString("");
    m_part_query_isSet = false;
    password = new QString("");
    m_password_isSet = false;
    password_required = false;
    m_password_required_isSet = false;
    resolution = new QString("");
    m_resolution_isSet = false;
    scale = 0.0;
    m_scale_isSet = false;
    send_copy_to_me = false;
    m_send_copy_to_me_isSet = false;
    sheet_metal_flat = false;
    m_sheet_metal_flat_isSet = false;
    splines_as_polylines = false;
    m_splines_as_polylines_isSet = false;
    store_in_document = false;
    m_store_in_document_isSet = false;
    trigger_auto_download = false;
    m_trigger_auto_download_isSet = false;
    units = new QString("");
    m_units_isSet = false;
    user_id = new QString("");
    m_user_id_isSet = false;
    valid_for_days = 0;
    m_valid_for_days_isSet = false;
    version = new QString("");
    m_version_isSet = false;
    view = new QString("");
    m_view_isSet = false;
    workspace_id = new QString("");
    m_workspace_id_isSet = false;
    zip_single_file_output = false;
    m_zip_single_file_output_isSet = false;
}

void
OAIBTExportModelParams::cleanup() {



    if(cloud_object_id != nullptr) { 
        delete cloud_object_id;
    }
    if(cloud_storage_account_id != nullptr) { 
        delete cloud_storage_account_id;
    }
    if(configuration != nullptr) { 
        delete configuration;
    }

    if(destination_name != nullptr) { 
        delete destination_name;
    }
    if(document_id != nullptr) { 
        delete document_id;
    }
    if(document_version_id != nullptr) { 
        delete document_version_id;
    }
    if(element_id != nullptr) { 
        delete element_id;
    }
    if(element_ids != nullptr) { 
        delete element_ids;
    }

    if(email_message != nullptr) { 
        delete email_message;
    }
    if(email_subject != nullptr) { 
        delete email_subject;
    }
    if(email_to != nullptr) { 
        delete email_to;
    }

    if(feature_ids != nullptr) { 
        delete feature_ids;
    }

    if(format != nullptr) { 
        delete format;
    }
    if(from_user_id != nullptr) { 
        delete from_user_id;
    }
    if(grouping != nullptr) { 
        delete grouping;
    }












    if(link_document_id != nullptr) { 
        delete link_document_id;
    }
    if(link_document_workspace_id != nullptr) { 
        delete link_document_workspace_id;
    }

    if(microversion != nullptr) { 
        delete microversion;
    }

    if(mode != nullptr) { 
        delete mode;
    }
    if(part_ids != nullptr) { 
        delete part_ids;
    }
    if(part_query != nullptr) { 
        delete part_query;
    }
    if(password != nullptr) { 
        delete password;
    }

    if(resolution != nullptr) { 
        delete resolution;
    }






    if(units != nullptr) { 
        delete units;
    }
    if(user_id != nullptr) { 
        delete user_id;
    }

    if(version != nullptr) { 
        delete version;
    }
    if(view != nullptr) { 
        delete view;
    }
    if(workspace_id != nullptr) { 
        delete workspace_id;
    }

}

OAIBTExportModelParams*
OAIBTExportModelParams::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIBTExportModelParams::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&angle_tolerance, pJson["angleTolerance"], "double", "");
    
    ::OpenAPI::setValue(&batch_flat_patterns, pJson["batchFlatPatterns"], "bool", "");
    
    ::OpenAPI::setValue(&chord_tolerance, pJson["chordTolerance"], "double", "");
    
    ::OpenAPI::setValue(&cloud_object_id, pJson["cloudObjectId"], "QString", "QString");
    
    ::OpenAPI::setValue(&cloud_storage_account_id, pJson["cloudStorageAccountId"], "QString", "QString");
    
    ::OpenAPI::setValue(&configuration, pJson["configuration"], "QString", "QString");
    
    ::OpenAPI::setValue(&deep_search_for_foreign_data, pJson["deepSearchForForeignData"], "bool", "");
    
    ::OpenAPI::setValue(&destination_name, pJson["destinationName"], "QString", "QString");
    
    ::OpenAPI::setValue(&document_id, pJson["documentId"], "QString", "QString");
    
    ::OpenAPI::setValue(&document_version_id, pJson["documentVersionId"], "QString", "QString");
    
    ::OpenAPI::setValue(&element_id, pJson["elementId"], "QString", "QString");
    
    ::OpenAPI::setValue(&element_ids, pJson["elementIds"], "QString", "QString");
    
    ::OpenAPI::setValue(&email_link, pJson["emailLink"], "bool", "");
    
    ::OpenAPI::setValue(&email_message, pJson["emailMessage"], "QString", "QString");
    
    ::OpenAPI::setValue(&email_subject, pJson["emailSubject"], "QString", "QString");
    
    ::OpenAPI::setValue(&email_to, pJson["emailTo"], "QString", "QString");
    
    ::OpenAPI::setValue(&extract_to_s3, pJson["extractToS3"], "bool", "");
    
    ::OpenAPI::setValue(&feature_ids, pJson["featureIds"], "QString", "QString");
    
    ::OpenAPI::setValue(&flatten, pJson["flatten"], "bool", "");
    
    ::OpenAPI::setValue(&format, pJson["format"], "QString", "QString");
    
    ::OpenAPI::setValue(&from_user_id, pJson["fromUserId"], "QString", "QString");
    
    ::OpenAPI::setValue(&grouping, pJson["grouping"], "QString", "QString");
    
    ::OpenAPI::setValue(&include_bend_centerlines, pJson["includeBendCenterlines"], "bool", "");
    
    ::OpenAPI::setValue(&include_bend_lines, pJson["includeBendLines"], "bool", "");
    
    ::OpenAPI::setValue(&include_custom_properties, pJson["includeCustomProperties"], "bool", "");
    
    ::OpenAPI::setValue(&include_custom_properties_data, pJson["includeCustomPropertiesData"], "bool", "");
    
    ::OpenAPI::setValue(&include_export_ids, pJson["includeExportIds"], "bool", "");
    
    ::OpenAPI::setValue(&include_foreign_data, pJson["includeForeignData"], "bool", "");
    
    ::OpenAPI::setValue(&include_items_data, pJson["includeItemsData"], "bool", "");
    
    ::OpenAPI::setValue(&include_linked_documents, pJson["includeLinkedDocuments"], "bool", "");
    
    ::OpenAPI::setValue(&include_release_management_data, pJson["includeReleaseManagementData"], "bool", "");
    
    ::OpenAPI::setValue(&include_sketches, pJson["includeSketches"], "bool", "");
    
    ::OpenAPI::setValue(&include_std, pJson["includeStd"], "bool", "");
    
    ::OpenAPI::setValue(&is_parting_out, pJson["isPartingOut"], "bool", "");
    
    ::OpenAPI::setValue(&link_document_id, pJson["linkDocumentId"], "QString", "QString");
    
    ::OpenAPI::setValue(&link_document_workspace_id, pJson["linkDocumentWorkspaceId"], "QString", "QString");
    
    ::OpenAPI::setValue(&max_facet_width, pJson["maxFacetWidth"], "double", "");
    
    ::OpenAPI::setValue(&microversion, pJson["microversion"], "QString", "QString");
    
    ::OpenAPI::setValue(&min_facet_width, pJson["minFacetWidth"], "double", "");
    
    ::OpenAPI::setValue(&mode, pJson["mode"], "QString", "QString");
    
    ::OpenAPI::setValue(&part_ids, pJson["partIds"], "QString", "QString");
    
    ::OpenAPI::setValue(&part_query, pJson["partQuery"], "QString", "QString");
    
    ::OpenAPI::setValue(&password, pJson["password"], "QString", "QString");
    
    ::OpenAPI::setValue(&password_required, pJson["passwordRequired"], "bool", "");
    
    ::OpenAPI::setValue(&resolution, pJson["resolution"], "QString", "QString");
    
    ::OpenAPI::setValue(&scale, pJson["scale"], "double", "");
    
    ::OpenAPI::setValue(&send_copy_to_me, pJson["sendCopyToMe"], "bool", "");
    
    ::OpenAPI::setValue(&sheet_metal_flat, pJson["sheetMetalFlat"], "bool", "");
    
    ::OpenAPI::setValue(&splines_as_polylines, pJson["splinesAsPolylines"], "bool", "");
    
    ::OpenAPI::setValue(&store_in_document, pJson["storeInDocument"], "bool", "");
    
    ::OpenAPI::setValue(&trigger_auto_download, pJson["triggerAutoDownload"], "bool", "");
    
    ::OpenAPI::setValue(&units, pJson["units"], "QString", "QString");
    
    ::OpenAPI::setValue(&user_id, pJson["userId"], "QString", "QString");
    
    ::OpenAPI::setValue(&valid_for_days, pJson["validForDays"], "qint32", "");
    
    ::OpenAPI::setValue(&version, pJson["version"], "QString", "QString");
    
    ::OpenAPI::setValue(&view, pJson["view"], "QString", "QString");
    
    ::OpenAPI::setValue(&workspace_id, pJson["workspaceId"], "QString", "QString");
    
    ::OpenAPI::setValue(&zip_single_file_output, pJson["zipSingleFileOutput"], "bool", "");
    
}

QString
OAIBTExportModelParams::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIBTExportModelParams::asJsonObject() {
    QJsonObject obj;
    if(m_angle_tolerance_isSet){
        obj.insert("angleTolerance", QJsonValue(angle_tolerance));
    }
    if(m_batch_flat_patterns_isSet){
        obj.insert("batchFlatPatterns", QJsonValue(batch_flat_patterns));
    }
    if(m_chord_tolerance_isSet){
        obj.insert("chordTolerance", QJsonValue(chord_tolerance));
    }
    if(cloud_object_id != nullptr && *cloud_object_id != QString("")){
        toJsonValue(QString("cloudObjectId"), cloud_object_id, obj, QString("QString"));
    }
    if(cloud_storage_account_id != nullptr && *cloud_storage_account_id != QString("")){
        toJsonValue(QString("cloudStorageAccountId"), cloud_storage_account_id, obj, QString("QString"));
    }
    if(configuration != nullptr && *configuration != QString("")){
        toJsonValue(QString("configuration"), configuration, obj, QString("QString"));
    }
    if(m_deep_search_for_foreign_data_isSet){
        obj.insert("deepSearchForForeignData", QJsonValue(deep_search_for_foreign_data));
    }
    if(destination_name != nullptr && *destination_name != QString("")){
        toJsonValue(QString("destinationName"), destination_name, obj, QString("QString"));
    }
    if(document_id != nullptr && *document_id != QString("")){
        toJsonValue(QString("documentId"), document_id, obj, QString("QString"));
    }
    if(document_version_id != nullptr && *document_version_id != QString("")){
        toJsonValue(QString("documentVersionId"), document_version_id, obj, QString("QString"));
    }
    if(element_id != nullptr && *element_id != QString("")){
        toJsonValue(QString("elementId"), element_id, obj, QString("QString"));
    }
    if(element_ids != nullptr && *element_ids != QString("")){
        toJsonValue(QString("elementIds"), element_ids, obj, QString("QString"));
    }
    if(m_email_link_isSet){
        obj.insert("emailLink", QJsonValue(email_link));
    }
    if(email_message != nullptr && *email_message != QString("")){
        toJsonValue(QString("emailMessage"), email_message, obj, QString("QString"));
    }
    if(email_subject != nullptr && *email_subject != QString("")){
        toJsonValue(QString("emailSubject"), email_subject, obj, QString("QString"));
    }
    if(email_to != nullptr && *email_to != QString("")){
        toJsonValue(QString("emailTo"), email_to, obj, QString("QString"));
    }
    if(m_extract_to_s3_isSet){
        obj.insert("extractToS3", QJsonValue(extract_to_s3));
    }
    if(feature_ids != nullptr && *feature_ids != QString("")){
        toJsonValue(QString("featureIds"), feature_ids, obj, QString("QString"));
    }
    if(m_flatten_isSet){
        obj.insert("flatten", QJsonValue(flatten));
    }
    if(format != nullptr && *format != QString("")){
        toJsonValue(QString("format"), format, obj, QString("QString"));
    }
    if(from_user_id != nullptr && *from_user_id != QString("")){
        toJsonValue(QString("fromUserId"), from_user_id, obj, QString("QString"));
    }
    if(grouping != nullptr && *grouping != QString("")){
        toJsonValue(QString("grouping"), grouping, obj, QString("QString"));
    }
    if(m_include_bend_centerlines_isSet){
        obj.insert("includeBendCenterlines", QJsonValue(include_bend_centerlines));
    }
    if(m_include_bend_lines_isSet){
        obj.insert("includeBendLines", QJsonValue(include_bend_lines));
    }
    if(m_include_custom_properties_isSet){
        obj.insert("includeCustomProperties", QJsonValue(include_custom_properties));
    }
    if(m_include_custom_properties_data_isSet){
        obj.insert("includeCustomPropertiesData", QJsonValue(include_custom_properties_data));
    }
    if(m_include_export_ids_isSet){
        obj.insert("includeExportIds", QJsonValue(include_export_ids));
    }
    if(m_include_foreign_data_isSet){
        obj.insert("includeForeignData", QJsonValue(include_foreign_data));
    }
    if(m_include_items_data_isSet){
        obj.insert("includeItemsData", QJsonValue(include_items_data));
    }
    if(m_include_linked_documents_isSet){
        obj.insert("includeLinkedDocuments", QJsonValue(include_linked_documents));
    }
    if(m_include_release_management_data_isSet){
        obj.insert("includeReleaseManagementData", QJsonValue(include_release_management_data));
    }
    if(m_include_sketches_isSet){
        obj.insert("includeSketches", QJsonValue(include_sketches));
    }
    if(m_include_std_isSet){
        obj.insert("includeStd", QJsonValue(include_std));
    }
    if(m_is_parting_out_isSet){
        obj.insert("isPartingOut", QJsonValue(is_parting_out));
    }
    if(link_document_id != nullptr && *link_document_id != QString("")){
        toJsonValue(QString("linkDocumentId"), link_document_id, obj, QString("QString"));
    }
    if(link_document_workspace_id != nullptr && *link_document_workspace_id != QString("")){
        toJsonValue(QString("linkDocumentWorkspaceId"), link_document_workspace_id, obj, QString("QString"));
    }
    if(m_max_facet_width_isSet){
        obj.insert("maxFacetWidth", QJsonValue(max_facet_width));
    }
    if(microversion != nullptr && *microversion != QString("")){
        toJsonValue(QString("microversion"), microversion, obj, QString("QString"));
    }
    if(m_min_facet_width_isSet){
        obj.insert("minFacetWidth", QJsonValue(min_facet_width));
    }
    if(mode != nullptr && *mode != QString("")){
        toJsonValue(QString("mode"), mode, obj, QString("QString"));
    }
    if(part_ids != nullptr && *part_ids != QString("")){
        toJsonValue(QString("partIds"), part_ids, obj, QString("QString"));
    }
    if(part_query != nullptr && *part_query != QString("")){
        toJsonValue(QString("partQuery"), part_query, obj, QString("QString"));
    }
    if(password != nullptr && *password != QString("")){
        toJsonValue(QString("password"), password, obj, QString("QString"));
    }
    if(m_password_required_isSet){
        obj.insert("passwordRequired", QJsonValue(password_required));
    }
    if(resolution != nullptr && *resolution != QString("")){
        toJsonValue(QString("resolution"), resolution, obj, QString("QString"));
    }
    if(m_scale_isSet){
        obj.insert("scale", QJsonValue(scale));
    }
    if(m_send_copy_to_me_isSet){
        obj.insert("sendCopyToMe", QJsonValue(send_copy_to_me));
    }
    if(m_sheet_metal_flat_isSet){
        obj.insert("sheetMetalFlat", QJsonValue(sheet_metal_flat));
    }
    if(m_splines_as_polylines_isSet){
        obj.insert("splinesAsPolylines", QJsonValue(splines_as_polylines));
    }
    if(m_store_in_document_isSet){
        obj.insert("storeInDocument", QJsonValue(store_in_document));
    }
    if(m_trigger_auto_download_isSet){
        obj.insert("triggerAutoDownload", QJsonValue(trigger_auto_download));
    }
    if(units != nullptr && *units != QString("")){
        toJsonValue(QString("units"), units, obj, QString("QString"));
    }
    if(user_id != nullptr && *user_id != QString("")){
        toJsonValue(QString("userId"), user_id, obj, QString("QString"));
    }
    if(m_valid_for_days_isSet){
        obj.insert("validForDays", QJsonValue(valid_for_days));
    }
    if(version != nullptr && *version != QString("")){
        toJsonValue(QString("version"), version, obj, QString("QString"));
    }
    if(view != nullptr && *view != QString("")){
        toJsonValue(QString("view"), view, obj, QString("QString"));
    }
    if(workspace_id != nullptr && *workspace_id != QString("")){
        toJsonValue(QString("workspaceId"), workspace_id, obj, QString("QString"));
    }
    if(m_zip_single_file_output_isSet){
        obj.insert("zipSingleFileOutput", QJsonValue(zip_single_file_output));
    }

    return obj;
}

double
OAIBTExportModelParams::getAngleTolerance() {
    return angle_tolerance;
}
void
OAIBTExportModelParams::setAngleTolerance(double angle_tolerance) {
    this->angle_tolerance = angle_tolerance;
    this->m_angle_tolerance_isSet = true;
}

bool
OAIBTExportModelParams::isBatchFlatPatterns() {
    return batch_flat_patterns;
}
void
OAIBTExportModelParams::setBatchFlatPatterns(bool batch_flat_patterns) {
    this->batch_flat_patterns = batch_flat_patterns;
    this->m_batch_flat_patterns_isSet = true;
}

double
OAIBTExportModelParams::getChordTolerance() {
    return chord_tolerance;
}
void
OAIBTExportModelParams::setChordTolerance(double chord_tolerance) {
    this->chord_tolerance = chord_tolerance;
    this->m_chord_tolerance_isSet = true;
}

QString*
OAIBTExportModelParams::getCloudObjectId() {
    return cloud_object_id;
}
void
OAIBTExportModelParams::setCloudObjectId(QString* cloud_object_id) {
    this->cloud_object_id = cloud_object_id;
    this->m_cloud_object_id_isSet = true;
}

QString*
OAIBTExportModelParams::getCloudStorageAccountId() {
    return cloud_storage_account_id;
}
void
OAIBTExportModelParams::setCloudStorageAccountId(QString* cloud_storage_account_id) {
    this->cloud_storage_account_id = cloud_storage_account_id;
    this->m_cloud_storage_account_id_isSet = true;
}

QString*
OAIBTExportModelParams::getConfiguration() {
    return configuration;
}
void
OAIBTExportModelParams::setConfiguration(QString* configuration) {
    this->configuration = configuration;
    this->m_configuration_isSet = true;
}

bool
OAIBTExportModelParams::isDeepSearchForForeignData() {
    return deep_search_for_foreign_data;
}
void
OAIBTExportModelParams::setDeepSearchForForeignData(bool deep_search_for_foreign_data) {
    this->deep_search_for_foreign_data = deep_search_for_foreign_data;
    this->m_deep_search_for_foreign_data_isSet = true;
}

QString*
OAIBTExportModelParams::getDestinationName() {
    return destination_name;
}
void
OAIBTExportModelParams::setDestinationName(QString* destination_name) {
    this->destination_name = destination_name;
    this->m_destination_name_isSet = true;
}

QString*
OAIBTExportModelParams::getDocumentId() {
    return document_id;
}
void
OAIBTExportModelParams::setDocumentId(QString* document_id) {
    this->document_id = document_id;
    this->m_document_id_isSet = true;
}

QString*
OAIBTExportModelParams::getDocumentVersionId() {
    return document_version_id;
}
void
OAIBTExportModelParams::setDocumentVersionId(QString* document_version_id) {
    this->document_version_id = document_version_id;
    this->m_document_version_id_isSet = true;
}

QString*
OAIBTExportModelParams::getElementId() {
    return element_id;
}
void
OAIBTExportModelParams::setElementId(QString* element_id) {
    this->element_id = element_id;
    this->m_element_id_isSet = true;
}

QString*
OAIBTExportModelParams::getElementIds() {
    return element_ids;
}
void
OAIBTExportModelParams::setElementIds(QString* element_ids) {
    this->element_ids = element_ids;
    this->m_element_ids_isSet = true;
}

bool
OAIBTExportModelParams::isEmailLink() {
    return email_link;
}
void
OAIBTExportModelParams::setEmailLink(bool email_link) {
    this->email_link = email_link;
    this->m_email_link_isSet = true;
}

QString*
OAIBTExportModelParams::getEmailMessage() {
    return email_message;
}
void
OAIBTExportModelParams::setEmailMessage(QString* email_message) {
    this->email_message = email_message;
    this->m_email_message_isSet = true;
}

QString*
OAIBTExportModelParams::getEmailSubject() {
    return email_subject;
}
void
OAIBTExportModelParams::setEmailSubject(QString* email_subject) {
    this->email_subject = email_subject;
    this->m_email_subject_isSet = true;
}

QString*
OAIBTExportModelParams::getEmailTo() {
    return email_to;
}
void
OAIBTExportModelParams::setEmailTo(QString* email_to) {
    this->email_to = email_to;
    this->m_email_to_isSet = true;
}

bool
OAIBTExportModelParams::isExtractToS3() {
    return extract_to_s3;
}
void
OAIBTExportModelParams::setExtractToS3(bool extract_to_s3) {
    this->extract_to_s3 = extract_to_s3;
    this->m_extract_to_s3_isSet = true;
}

QString*
OAIBTExportModelParams::getFeatureIds() {
    return feature_ids;
}
void
OAIBTExportModelParams::setFeatureIds(QString* feature_ids) {
    this->feature_ids = feature_ids;
    this->m_feature_ids_isSet = true;
}

bool
OAIBTExportModelParams::isFlatten() {
    return flatten;
}
void
OAIBTExportModelParams::setFlatten(bool flatten) {
    this->flatten = flatten;
    this->m_flatten_isSet = true;
}

QString*
OAIBTExportModelParams::getFormat() {
    return format;
}
void
OAIBTExportModelParams::setFormat(QString* format) {
    this->format = format;
    this->m_format_isSet = true;
}

QString*
OAIBTExportModelParams::getFromUserId() {
    return from_user_id;
}
void
OAIBTExportModelParams::setFromUserId(QString* from_user_id) {
    this->from_user_id = from_user_id;
    this->m_from_user_id_isSet = true;
}

QString*
OAIBTExportModelParams::getGrouping() {
    return grouping;
}
void
OAIBTExportModelParams::setGrouping(QString* grouping) {
    this->grouping = grouping;
    this->m_grouping_isSet = true;
}

bool
OAIBTExportModelParams::isIncludeBendCenterlines() {
    return include_bend_centerlines;
}
void
OAIBTExportModelParams::setIncludeBendCenterlines(bool include_bend_centerlines) {
    this->include_bend_centerlines = include_bend_centerlines;
    this->m_include_bend_centerlines_isSet = true;
}

bool
OAIBTExportModelParams::isIncludeBendLines() {
    return include_bend_lines;
}
void
OAIBTExportModelParams::setIncludeBendLines(bool include_bend_lines) {
    this->include_bend_lines = include_bend_lines;
    this->m_include_bend_lines_isSet = true;
}

bool
OAIBTExportModelParams::isIncludeCustomProperties() {
    return include_custom_properties;
}
void
OAIBTExportModelParams::setIncludeCustomProperties(bool include_custom_properties) {
    this->include_custom_properties = include_custom_properties;
    this->m_include_custom_properties_isSet = true;
}

bool
OAIBTExportModelParams::isIncludeCustomPropertiesData() {
    return include_custom_properties_data;
}
void
OAIBTExportModelParams::setIncludeCustomPropertiesData(bool include_custom_properties_data) {
    this->include_custom_properties_data = include_custom_properties_data;
    this->m_include_custom_properties_data_isSet = true;
}

bool
OAIBTExportModelParams::isIncludeExportIds() {
    return include_export_ids;
}
void
OAIBTExportModelParams::setIncludeExportIds(bool include_export_ids) {
    this->include_export_ids = include_export_ids;
    this->m_include_export_ids_isSet = true;
}

bool
OAIBTExportModelParams::isIncludeForeignData() {
    return include_foreign_data;
}
void
OAIBTExportModelParams::setIncludeForeignData(bool include_foreign_data) {
    this->include_foreign_data = include_foreign_data;
    this->m_include_foreign_data_isSet = true;
}

bool
OAIBTExportModelParams::isIncludeItemsData() {
    return include_items_data;
}
void
OAIBTExportModelParams::setIncludeItemsData(bool include_items_data) {
    this->include_items_data = include_items_data;
    this->m_include_items_data_isSet = true;
}

bool
OAIBTExportModelParams::isIncludeLinkedDocuments() {
    return include_linked_documents;
}
void
OAIBTExportModelParams::setIncludeLinkedDocuments(bool include_linked_documents) {
    this->include_linked_documents = include_linked_documents;
    this->m_include_linked_documents_isSet = true;
}

bool
OAIBTExportModelParams::isIncludeReleaseManagementData() {
    return include_release_management_data;
}
void
OAIBTExportModelParams::setIncludeReleaseManagementData(bool include_release_management_data) {
    this->include_release_management_data = include_release_management_data;
    this->m_include_release_management_data_isSet = true;
}

bool
OAIBTExportModelParams::isIncludeSketches() {
    return include_sketches;
}
void
OAIBTExportModelParams::setIncludeSketches(bool include_sketches) {
    this->include_sketches = include_sketches;
    this->m_include_sketches_isSet = true;
}

bool
OAIBTExportModelParams::isIncludeStd() {
    return include_std;
}
void
OAIBTExportModelParams::setIncludeStd(bool include_std) {
    this->include_std = include_std;
    this->m_include_std_isSet = true;
}

bool
OAIBTExportModelParams::isIsPartingOut() {
    return is_parting_out;
}
void
OAIBTExportModelParams::setIsPartingOut(bool is_parting_out) {
    this->is_parting_out = is_parting_out;
    this->m_is_parting_out_isSet = true;
}

QString*
OAIBTExportModelParams::getLinkDocumentId() {
    return link_document_id;
}
void
OAIBTExportModelParams::setLinkDocumentId(QString* link_document_id) {
    this->link_document_id = link_document_id;
    this->m_link_document_id_isSet = true;
}

QString*
OAIBTExportModelParams::getLinkDocumentWorkspaceId() {
    return link_document_workspace_id;
}
void
OAIBTExportModelParams::setLinkDocumentWorkspaceId(QString* link_document_workspace_id) {
    this->link_document_workspace_id = link_document_workspace_id;
    this->m_link_document_workspace_id_isSet = true;
}

double
OAIBTExportModelParams::getMaxFacetWidth() {
    return max_facet_width;
}
void
OAIBTExportModelParams::setMaxFacetWidth(double max_facet_width) {
    this->max_facet_width = max_facet_width;
    this->m_max_facet_width_isSet = true;
}

QString*
OAIBTExportModelParams::getMicroversion() {
    return microversion;
}
void
OAIBTExportModelParams::setMicroversion(QString* microversion) {
    this->microversion = microversion;
    this->m_microversion_isSet = true;
}

double
OAIBTExportModelParams::getMinFacetWidth() {
    return min_facet_width;
}
void
OAIBTExportModelParams::setMinFacetWidth(double min_facet_width) {
    this->min_facet_width = min_facet_width;
    this->m_min_facet_width_isSet = true;
}

QString*
OAIBTExportModelParams::getMode() {
    return mode;
}
void
OAIBTExportModelParams::setMode(QString* mode) {
    this->mode = mode;
    this->m_mode_isSet = true;
}

QString*
OAIBTExportModelParams::getPartIds() {
    return part_ids;
}
void
OAIBTExportModelParams::setPartIds(QString* part_ids) {
    this->part_ids = part_ids;
    this->m_part_ids_isSet = true;
}

QString*
OAIBTExportModelParams::getPartQuery() {
    return part_query;
}
void
OAIBTExportModelParams::setPartQuery(QString* part_query) {
    this->part_query = part_query;
    this->m_part_query_isSet = true;
}

QString*
OAIBTExportModelParams::getPassword() {
    return password;
}
void
OAIBTExportModelParams::setPassword(QString* password) {
    this->password = password;
    this->m_password_isSet = true;
}

bool
OAIBTExportModelParams::isPasswordRequired() {
    return password_required;
}
void
OAIBTExportModelParams::setPasswordRequired(bool password_required) {
    this->password_required = password_required;
    this->m_password_required_isSet = true;
}

QString*
OAIBTExportModelParams::getResolution() {
    return resolution;
}
void
OAIBTExportModelParams::setResolution(QString* resolution) {
    this->resolution = resolution;
    this->m_resolution_isSet = true;
}

double
OAIBTExportModelParams::getScale() {
    return scale;
}
void
OAIBTExportModelParams::setScale(double scale) {
    this->scale = scale;
    this->m_scale_isSet = true;
}

bool
OAIBTExportModelParams::isSendCopyToMe() {
    return send_copy_to_me;
}
void
OAIBTExportModelParams::setSendCopyToMe(bool send_copy_to_me) {
    this->send_copy_to_me = send_copy_to_me;
    this->m_send_copy_to_me_isSet = true;
}

bool
OAIBTExportModelParams::isSheetMetalFlat() {
    return sheet_metal_flat;
}
void
OAIBTExportModelParams::setSheetMetalFlat(bool sheet_metal_flat) {
    this->sheet_metal_flat = sheet_metal_flat;
    this->m_sheet_metal_flat_isSet = true;
}

bool
OAIBTExportModelParams::isSplinesAsPolylines() {
    return splines_as_polylines;
}
void
OAIBTExportModelParams::setSplinesAsPolylines(bool splines_as_polylines) {
    this->splines_as_polylines = splines_as_polylines;
    this->m_splines_as_polylines_isSet = true;
}

bool
OAIBTExportModelParams::isStoreInDocument() {
    return store_in_document;
}
void
OAIBTExportModelParams::setStoreInDocument(bool store_in_document) {
    this->store_in_document = store_in_document;
    this->m_store_in_document_isSet = true;
}

bool
OAIBTExportModelParams::isTriggerAutoDownload() {
    return trigger_auto_download;
}
void
OAIBTExportModelParams::setTriggerAutoDownload(bool trigger_auto_download) {
    this->trigger_auto_download = trigger_auto_download;
    this->m_trigger_auto_download_isSet = true;
}

QString*
OAIBTExportModelParams::getUnits() {
    return units;
}
void
OAIBTExportModelParams::setUnits(QString* units) {
    this->units = units;
    this->m_units_isSet = true;
}

QString*
OAIBTExportModelParams::getUserId() {
    return user_id;
}
void
OAIBTExportModelParams::setUserId(QString* user_id) {
    this->user_id = user_id;
    this->m_user_id_isSet = true;
}

qint32
OAIBTExportModelParams::getValidForDays() {
    return valid_for_days;
}
void
OAIBTExportModelParams::setValidForDays(qint32 valid_for_days) {
    this->valid_for_days = valid_for_days;
    this->m_valid_for_days_isSet = true;
}

QString*
OAIBTExportModelParams::getVersion() {
    return version;
}
void
OAIBTExportModelParams::setVersion(QString* version) {
    this->version = version;
    this->m_version_isSet = true;
}

QString*
OAIBTExportModelParams::getView() {
    return view;
}
void
OAIBTExportModelParams::setView(QString* view) {
    this->view = view;
    this->m_view_isSet = true;
}

QString*
OAIBTExportModelParams::getWorkspaceId() {
    return workspace_id;
}
void
OAIBTExportModelParams::setWorkspaceId(QString* workspace_id) {
    this->workspace_id = workspace_id;
    this->m_workspace_id_isSet = true;
}

bool
OAIBTExportModelParams::isZipSingleFileOutput() {
    return zip_single_file_output;
}
void
OAIBTExportModelParams::setZipSingleFileOutput(bool zip_single_file_output) {
    this->zip_single_file_output = zip_single_file_output;
    this->m_zip_single_file_output_isSet = true;
}


bool
OAIBTExportModelParams::isSet(){
    bool isObjectUpdated = false;
    do{
        if(m_angle_tolerance_isSet){ isObjectUpdated = true; break;}
        if(m_batch_flat_patterns_isSet){ isObjectUpdated = true; break;}
        if(m_chord_tolerance_isSet){ isObjectUpdated = true; break;}
        if(cloud_object_id != nullptr && *cloud_object_id != QString("")){ isObjectUpdated = true; break;}
        if(cloud_storage_account_id != nullptr && *cloud_storage_account_id != QString("")){ isObjectUpdated = true; break;}
        if(configuration != nullptr && *configuration != QString("")){ isObjectUpdated = true; break;}
        if(m_deep_search_for_foreign_data_isSet){ isObjectUpdated = true; break;}
        if(destination_name != nullptr && *destination_name != QString("")){ isObjectUpdated = true; break;}
        if(document_id != nullptr && *document_id != QString("")){ isObjectUpdated = true; break;}
        if(document_version_id != nullptr && *document_version_id != QString("")){ isObjectUpdated = true; break;}
        if(element_id != nullptr && *element_id != QString("")){ isObjectUpdated = true; break;}
        if(element_ids != nullptr && *element_ids != QString("")){ isObjectUpdated = true; break;}
        if(m_email_link_isSet){ isObjectUpdated = true; break;}
        if(email_message != nullptr && *email_message != QString("")){ isObjectUpdated = true; break;}
        if(email_subject != nullptr && *email_subject != QString("")){ isObjectUpdated = true; break;}
        if(email_to != nullptr && *email_to != QString("")){ isObjectUpdated = true; break;}
        if(m_extract_to_s3_isSet){ isObjectUpdated = true; break;}
        if(feature_ids != nullptr && *feature_ids != QString("")){ isObjectUpdated = true; break;}
        if(m_flatten_isSet){ isObjectUpdated = true; break;}
        if(format != nullptr && *format != QString("")){ isObjectUpdated = true; break;}
        if(from_user_id != nullptr && *from_user_id != QString("")){ isObjectUpdated = true; break;}
        if(grouping != nullptr && *grouping != QString("")){ isObjectUpdated = true; break;}
        if(m_include_bend_centerlines_isSet){ isObjectUpdated = true; break;}
        if(m_include_bend_lines_isSet){ isObjectUpdated = true; break;}
        if(m_include_custom_properties_isSet){ isObjectUpdated = true; break;}
        if(m_include_custom_properties_data_isSet){ isObjectUpdated = true; break;}
        if(m_include_export_ids_isSet){ isObjectUpdated = true; break;}
        if(m_include_foreign_data_isSet){ isObjectUpdated = true; break;}
        if(m_include_items_data_isSet){ isObjectUpdated = true; break;}
        if(m_include_linked_documents_isSet){ isObjectUpdated = true; break;}
        if(m_include_release_management_data_isSet){ isObjectUpdated = true; break;}
        if(m_include_sketches_isSet){ isObjectUpdated = true; break;}
        if(m_include_std_isSet){ isObjectUpdated = true; break;}
        if(m_is_parting_out_isSet){ isObjectUpdated = true; break;}
        if(link_document_id != nullptr && *link_document_id != QString("")){ isObjectUpdated = true; break;}
        if(link_document_workspace_id != nullptr && *link_document_workspace_id != QString("")){ isObjectUpdated = true; break;}
        if(m_max_facet_width_isSet){ isObjectUpdated = true; break;}
        if(microversion != nullptr && *microversion != QString("")){ isObjectUpdated = true; break;}
        if(m_min_facet_width_isSet){ isObjectUpdated = true; break;}
        if(mode != nullptr && *mode != QString("")){ isObjectUpdated = true; break;}
        if(part_ids != nullptr && *part_ids != QString("")){ isObjectUpdated = true; break;}
        if(part_query != nullptr && *part_query != QString("")){ isObjectUpdated = true; break;}
        if(password != nullptr && *password != QString("")){ isObjectUpdated = true; break;}
        if(m_password_required_isSet){ isObjectUpdated = true; break;}
        if(resolution != nullptr && *resolution != QString("")){ isObjectUpdated = true; break;}
        if(m_scale_isSet){ isObjectUpdated = true; break;}
        if(m_send_copy_to_me_isSet){ isObjectUpdated = true; break;}
        if(m_sheet_metal_flat_isSet){ isObjectUpdated = true; break;}
        if(m_splines_as_polylines_isSet){ isObjectUpdated = true; break;}
        if(m_store_in_document_isSet){ isObjectUpdated = true; break;}
        if(m_trigger_auto_download_isSet){ isObjectUpdated = true; break;}
        if(units != nullptr && *units != QString("")){ isObjectUpdated = true; break;}
        if(user_id != nullptr && *user_id != QString("")){ isObjectUpdated = true; break;}
        if(m_valid_for_days_isSet){ isObjectUpdated = true; break;}
        if(version != nullptr && *version != QString("")){ isObjectUpdated = true; break;}
        if(view != nullptr && *view != QString("")){ isObjectUpdated = true; break;}
        if(workspace_id != nullptr && *workspace_id != QString("")){ isObjectUpdated = true; break;}
        if(m_zip_single_file_output_isSet){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

