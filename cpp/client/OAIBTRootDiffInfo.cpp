/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * OpenAPI spec version: 1.111
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIBTRootDiffInfo.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIBTRootDiffInfo::OAIBTRootDiffInfo(QString json) {
    init();
    this->fromJson(json);
}

OAIBTRootDiffInfo::OAIBTRootDiffInfo() {
    init();
}

OAIBTRootDiffInfo::~OAIBTRootDiffInfo() {
    this->cleanup();
}

void
OAIBTRootDiffInfo::init() {
    changes = new QMap<QString, OAIBTDiffInfo*>();
    m_changes_isSet = false;
    collection_changes = new QMap<QString, QList<OAIBTDiffInfo*>*>();
    m_collection_changes_isSet = false;
    entity_type = new QString("");
    m_entity_type_isSet = false;
    geometry_change_messages = new QList<QString*>();
    m_geometry_change_messages_isSet = false;
    source_configuration = new QString("");
    m_source_configuration_isSet = false;
    source_id = new QString("");
    m_source_id_isSet = false;
    source_microversion_id = new QString("");
    m_source_microversion_id_isSet = false;
    source_value = new QString("");
    m_source_value_isSet = false;
    source_version_id = new QString("");
    m_source_version_id_isSet = false;
    source_workspace_id = new QString("");
    m_source_workspace_id_isSet = false;
    target_configuration = new QString("");
    m_target_configuration_isSet = false;
    target_id = new QString("");
    m_target_id_isSet = false;
    target_microversion_id = new QString("");
    m_target_microversion_id_isSet = false;
    target_value = new QString("");
    m_target_value_isSet = false;
    target_version_id = new QString("");
    m_target_version_id_isSet = false;
    target_workspace_id = new QString("");
    m_target_workspace_id_isSet = false;
    type = new QString("");
    m_type_isSet = false;
}

void
OAIBTRootDiffInfo::cleanup() {
    if(changes != nullptr) { 
        auto arr = changes;
        for(auto o: *arr) { 
            delete o;
        }
        delete changes;
    }
    if(collection_changes != nullptr) { 
        auto arr = collection_changes;
        for(auto o: *arr) { 
            for(auto o1: *o) {
                delete o1;
            }
            delete o;
        }
        delete collection_changes;
    }
    if(entity_type != nullptr) { 
        delete entity_type;
    }
    if(geometry_change_messages != nullptr) { 
        auto arr = geometry_change_messages;
        for(auto o: *arr) { 
            delete o;
        }
        delete geometry_change_messages;
    }
    if(source_configuration != nullptr) { 
        delete source_configuration;
    }
    if(source_id != nullptr) { 
        delete source_id;
    }
    if(source_microversion_id != nullptr) { 
        delete source_microversion_id;
    }
    if(source_value != nullptr) { 
        delete source_value;
    }
    if(source_version_id != nullptr) { 
        delete source_version_id;
    }
    if(source_workspace_id != nullptr) { 
        delete source_workspace_id;
    }
    if(target_configuration != nullptr) { 
        delete target_configuration;
    }
    if(target_id != nullptr) { 
        delete target_id;
    }
    if(target_microversion_id != nullptr) { 
        delete target_microversion_id;
    }
    if(target_value != nullptr) { 
        delete target_value;
    }
    if(target_version_id != nullptr) { 
        delete target_version_id;
    }
    if(target_workspace_id != nullptr) { 
        delete target_workspace_id;
    }
    if(type != nullptr) { 
        delete type;
    }
}

OAIBTRootDiffInfo*
OAIBTRootDiffInfo::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIBTRootDiffInfo::fromJsonObject(QJsonObject pJson) {
    
    ::OpenAPI::setValue(&changes, pJson["changes"], "QMap", "OAIBTDiffInfo");
    
    
    if(pJson["collectionChanges"].isObject()){
        auto varmap = pJson["collectionChanges"].toObject().toVariantMap();
        if(varmap.count() > 0){
            for(auto val : varmap.keys()){
                auto collection_changes_item = new QList<OAIBTDiffInfo*>();
                
    		    auto jsonval = QJsonValue::fromVariant(varmap.value(val));
    		    ::OpenAPI::setValue((QMap<QString, void *>*)&collection_changes_item, jsonval, "QList", "OAIBTDiffInfo");

                collection_changes->insert(collection_changes->end(), val, collection_changes_item);
            }
        }
    }
    ::OpenAPI::setValue(&entity_type, pJson["entityType"], "QString", "QString");
    
    
    ::OpenAPI::setValue(&geometry_change_messages, pJson["geometryChangeMessages"], "QList", "QString");
    ::OpenAPI::setValue(&source_configuration, pJson["sourceConfiguration"], "QString", "QString");
    
    ::OpenAPI::setValue(&source_id, pJson["sourceId"], "QString", "QString");
    
    ::OpenAPI::setValue(&source_microversion_id, pJson["sourceMicroversionId"], "QString", "QString");
    
    ::OpenAPI::setValue(&source_value, pJson["sourceValue"], "QString", "QString");
    
    ::OpenAPI::setValue(&source_version_id, pJson["sourceVersionId"], "QString", "QString");
    
    ::OpenAPI::setValue(&source_workspace_id, pJson["sourceWorkspaceId"], "QString", "QString");
    
    ::OpenAPI::setValue(&target_configuration, pJson["targetConfiguration"], "QString", "QString");
    
    ::OpenAPI::setValue(&target_id, pJson["targetId"], "QString", "QString");
    
    ::OpenAPI::setValue(&target_microversion_id, pJson["targetMicroversionId"], "QString", "QString");
    
    ::OpenAPI::setValue(&target_value, pJson["targetValue"], "QString", "QString");
    
    ::OpenAPI::setValue(&target_version_id, pJson["targetVersionId"], "QString", "QString");
    
    ::OpenAPI::setValue(&target_workspace_id, pJson["targetWorkspaceId"], "QString", "QString");
    
    ::OpenAPI::setValue(&type, pJson["type"], "QString", "QString");
    
}

QString
OAIBTRootDiffInfo::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIBTRootDiffInfo::asJsonObject() {
    QJsonObject obj;
    if(changes->size() > 0){
        toJsonMap((QMap<QString, void*>*) changes, obj, "changes", "OAIBTDiffInfo");
    }
    if(collection_changes->size() > 0){
        
        QJsonObject mapobj;
        for(auto itemkey : collection_changes->keys()){
            QJsonObject jobj;
            toJsonArray((QList<void*>*)collection_changes->value(itemkey), jobj, itemkey, "OAIBTDiffInfo");
            mapobj.insert(itemkey, jobj);
        }
        obj.insert("collectionChanges", mapobj);
    }
    if(entity_type != nullptr && *entity_type != QString("")){
        toJsonValue(QString("entityType"), entity_type, obj, QString("QString"));
    }
    if(geometry_change_messages->size() > 0){
        toJsonArray((QList<void*>*)geometry_change_messages, obj, "geometryChangeMessages", "QString");
    }
    if(source_configuration != nullptr && *source_configuration != QString("")){
        toJsonValue(QString("sourceConfiguration"), source_configuration, obj, QString("QString"));
    }
    if(source_id != nullptr && *source_id != QString("")){
        toJsonValue(QString("sourceId"), source_id, obj, QString("QString"));
    }
    if(source_microversion_id != nullptr && *source_microversion_id != QString("")){
        toJsonValue(QString("sourceMicroversionId"), source_microversion_id, obj, QString("QString"));
    }
    if(source_value != nullptr && *source_value != QString("")){
        toJsonValue(QString("sourceValue"), source_value, obj, QString("QString"));
    }
    if(source_version_id != nullptr && *source_version_id != QString("")){
        toJsonValue(QString("sourceVersionId"), source_version_id, obj, QString("QString"));
    }
    if(source_workspace_id != nullptr && *source_workspace_id != QString("")){
        toJsonValue(QString("sourceWorkspaceId"), source_workspace_id, obj, QString("QString"));
    }
    if(target_configuration != nullptr && *target_configuration != QString("")){
        toJsonValue(QString("targetConfiguration"), target_configuration, obj, QString("QString"));
    }
    if(target_id != nullptr && *target_id != QString("")){
        toJsonValue(QString("targetId"), target_id, obj, QString("QString"));
    }
    if(target_microversion_id != nullptr && *target_microversion_id != QString("")){
        toJsonValue(QString("targetMicroversionId"), target_microversion_id, obj, QString("QString"));
    }
    if(target_value != nullptr && *target_value != QString("")){
        toJsonValue(QString("targetValue"), target_value, obj, QString("QString"));
    }
    if(target_version_id != nullptr && *target_version_id != QString("")){
        toJsonValue(QString("targetVersionId"), target_version_id, obj, QString("QString"));
    }
    if(target_workspace_id != nullptr && *target_workspace_id != QString("")){
        toJsonValue(QString("targetWorkspaceId"), target_workspace_id, obj, QString("QString"));
    }
    if(type != nullptr && *type != QString("")){
        toJsonValue(QString("type"), type, obj, QString("QString"));
    }

    return obj;
}

QMap<QString, OAIBTDiffInfo*>*
OAIBTRootDiffInfo::getChanges() {
    return changes;
}
void
OAIBTRootDiffInfo::setChanges(QMap<QString, OAIBTDiffInfo*>* changes) {
    this->changes = changes;
    this->m_changes_isSet = true;
}

QMap<QString, QList<OAIBTDiffInfo*>*>*
OAIBTRootDiffInfo::getCollectionChanges() {
    return collection_changes;
}
void
OAIBTRootDiffInfo::setCollectionChanges(QMap<QString, QList<OAIBTDiffInfo*>*>* collection_changes) {
    this->collection_changes = collection_changes;
    this->m_collection_changes_isSet = true;
}

QString*
OAIBTRootDiffInfo::getEntityType() {
    return entity_type;
}
void
OAIBTRootDiffInfo::setEntityType(QString* entity_type) {
    this->entity_type = entity_type;
    this->m_entity_type_isSet = true;
}

QList<QString*>*
OAIBTRootDiffInfo::getGeometryChangeMessages() {
    return geometry_change_messages;
}
void
OAIBTRootDiffInfo::setGeometryChangeMessages(QList<QString*>* geometry_change_messages) {
    this->geometry_change_messages = geometry_change_messages;
    this->m_geometry_change_messages_isSet = true;
}

QString*
OAIBTRootDiffInfo::getSourceConfiguration() {
    return source_configuration;
}
void
OAIBTRootDiffInfo::setSourceConfiguration(QString* source_configuration) {
    this->source_configuration = source_configuration;
    this->m_source_configuration_isSet = true;
}

QString*
OAIBTRootDiffInfo::getSourceId() {
    return source_id;
}
void
OAIBTRootDiffInfo::setSourceId(QString* source_id) {
    this->source_id = source_id;
    this->m_source_id_isSet = true;
}

QString*
OAIBTRootDiffInfo::getSourceMicroversionId() {
    return source_microversion_id;
}
void
OAIBTRootDiffInfo::setSourceMicroversionId(QString* source_microversion_id) {
    this->source_microversion_id = source_microversion_id;
    this->m_source_microversion_id_isSet = true;
}

QString*
OAIBTRootDiffInfo::getSourceValue() {
    return source_value;
}
void
OAIBTRootDiffInfo::setSourceValue(QString* source_value) {
    this->source_value = source_value;
    this->m_source_value_isSet = true;
}

QString*
OAIBTRootDiffInfo::getSourceVersionId() {
    return source_version_id;
}
void
OAIBTRootDiffInfo::setSourceVersionId(QString* source_version_id) {
    this->source_version_id = source_version_id;
    this->m_source_version_id_isSet = true;
}

QString*
OAIBTRootDiffInfo::getSourceWorkspaceId() {
    return source_workspace_id;
}
void
OAIBTRootDiffInfo::setSourceWorkspaceId(QString* source_workspace_id) {
    this->source_workspace_id = source_workspace_id;
    this->m_source_workspace_id_isSet = true;
}

QString*
OAIBTRootDiffInfo::getTargetConfiguration() {
    return target_configuration;
}
void
OAIBTRootDiffInfo::setTargetConfiguration(QString* target_configuration) {
    this->target_configuration = target_configuration;
    this->m_target_configuration_isSet = true;
}

QString*
OAIBTRootDiffInfo::getTargetId() {
    return target_id;
}
void
OAIBTRootDiffInfo::setTargetId(QString* target_id) {
    this->target_id = target_id;
    this->m_target_id_isSet = true;
}

QString*
OAIBTRootDiffInfo::getTargetMicroversionId() {
    return target_microversion_id;
}
void
OAIBTRootDiffInfo::setTargetMicroversionId(QString* target_microversion_id) {
    this->target_microversion_id = target_microversion_id;
    this->m_target_microversion_id_isSet = true;
}

QString*
OAIBTRootDiffInfo::getTargetValue() {
    return target_value;
}
void
OAIBTRootDiffInfo::setTargetValue(QString* target_value) {
    this->target_value = target_value;
    this->m_target_value_isSet = true;
}

QString*
OAIBTRootDiffInfo::getTargetVersionId() {
    return target_version_id;
}
void
OAIBTRootDiffInfo::setTargetVersionId(QString* target_version_id) {
    this->target_version_id = target_version_id;
    this->m_target_version_id_isSet = true;
}

QString*
OAIBTRootDiffInfo::getTargetWorkspaceId() {
    return target_workspace_id;
}
void
OAIBTRootDiffInfo::setTargetWorkspaceId(QString* target_workspace_id) {
    this->target_workspace_id = target_workspace_id;
    this->m_target_workspace_id_isSet = true;
}

QString*
OAIBTRootDiffInfo::getType() {
    return type;
}
void
OAIBTRootDiffInfo::setType(QString* type) {
    this->type = type;
    this->m_type_isSet = true;
}


bool
OAIBTRootDiffInfo::isSet(){
    bool isObjectUpdated = false;
    do{
        if(changes->size() > 0){ isObjectUpdated = true; break;}
        if(collection_changes->size() > 0){ isObjectUpdated = true; break;}
        if(entity_type != nullptr && *entity_type != QString("")){ isObjectUpdated = true; break;}
        if(geometry_change_messages->size() > 0){ isObjectUpdated = true; break;}
        if(source_configuration != nullptr && *source_configuration != QString("")){ isObjectUpdated = true; break;}
        if(source_id != nullptr && *source_id != QString("")){ isObjectUpdated = true; break;}
        if(source_microversion_id != nullptr && *source_microversion_id != QString("")){ isObjectUpdated = true; break;}
        if(source_value != nullptr && *source_value != QString("")){ isObjectUpdated = true; break;}
        if(source_version_id != nullptr && *source_version_id != QString("")){ isObjectUpdated = true; break;}
        if(source_workspace_id != nullptr && *source_workspace_id != QString("")){ isObjectUpdated = true; break;}
        if(target_configuration != nullptr && *target_configuration != QString("")){ isObjectUpdated = true; break;}
        if(target_id != nullptr && *target_id != QString("")){ isObjectUpdated = true; break;}
        if(target_microversion_id != nullptr && *target_microversion_id != QString("")){ isObjectUpdated = true; break;}
        if(target_value != nullptr && *target_value != QString("")){ isObjectUpdated = true; break;}
        if(target_version_id != nullptr && *target_version_id != QString("")){ isObjectUpdated = true; break;}
        if(target_workspace_id != nullptr && *target_workspace_id != QString("")){ isObjectUpdated = true; break;}
        if(type != nullptr && *type != QString("")){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

