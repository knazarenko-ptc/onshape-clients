/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * OpenAPI spec version: 1.111
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIBTAppElementContentInfo.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIBTAppElementContentInfo::OAIBTAppElementContentInfo(QString json) {
    init();
    this->fromJson(json);
}

OAIBTAppElementContentInfo::OAIBTAppElementContentInfo() {
    init();
}

OAIBTAppElementContentInfo::~OAIBTAppElementContentInfo() {
    this->cleanup();
}

void
OAIBTAppElementContentInfo::init() {
    change_id = new QString("");
    m_change_id_isSet = false;
    data = new QList<OAIBTAppElementContentEntryInfo*>();
    m_data_isSet = false;
    error_code = 0;
    m_error_code_isSet = false;
    error_description = new QString("");
    m_error_description_isSet = false;
    error_value = new QString("");
    m_error_value_isSet = false;
}

void
OAIBTAppElementContentInfo::cleanup() {
    if(change_id != nullptr) { 
        delete change_id;
    }
    if(data != nullptr) { 
        auto arr = data;
        for(auto o: *arr) { 
            delete o;
        }
        delete data;
    }

    if(error_description != nullptr) { 
        delete error_description;
    }
    if(error_value != nullptr) { 
        delete error_value;
    }
}

OAIBTAppElementContentInfo*
OAIBTAppElementContentInfo::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIBTAppElementContentInfo::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&change_id, pJson["changeId"], "QString", "QString");
    
    
    ::OpenAPI::setValue(&data, pJson["data"], "QList", "OAIBTAppElementContentEntryInfo");
    ::OpenAPI::setValue(&error_code, pJson["errorCode"], "qint32", "");
    
    ::OpenAPI::setValue(&error_description, pJson["errorDescription"], "QString", "QString");
    
    ::OpenAPI::setValue(&error_value, pJson["errorValue"], "QString", "QString");
    
}

QString
OAIBTAppElementContentInfo::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIBTAppElementContentInfo::asJsonObject() {
    QJsonObject obj;
    if(change_id != nullptr && *change_id != QString("")){
        toJsonValue(QString("changeId"), change_id, obj, QString("QString"));
    }
    if(data->size() > 0){
        toJsonArray((QList<void*>*)data, obj, "data", "OAIBTAppElementContentEntryInfo");
    }
    if(m_error_code_isSet){
        obj.insert("errorCode", QJsonValue(error_code));
    }
    if(error_description != nullptr && *error_description != QString("")){
        toJsonValue(QString("errorDescription"), error_description, obj, QString("QString"));
    }
    if(error_value != nullptr && *error_value != QString("")){
        toJsonValue(QString("errorValue"), error_value, obj, QString("QString"));
    }

    return obj;
}

QString*
OAIBTAppElementContentInfo::getChangeId() {
    return change_id;
}
void
OAIBTAppElementContentInfo::setChangeId(QString* change_id) {
    this->change_id = change_id;
    this->m_change_id_isSet = true;
}

QList<OAIBTAppElementContentEntryInfo*>*
OAIBTAppElementContentInfo::getData() {
    return data;
}
void
OAIBTAppElementContentInfo::setData(QList<OAIBTAppElementContentEntryInfo*>* data) {
    this->data = data;
    this->m_data_isSet = true;
}

qint32
OAIBTAppElementContentInfo::getErrorCode() {
    return error_code;
}
void
OAIBTAppElementContentInfo::setErrorCode(qint32 error_code) {
    this->error_code = error_code;
    this->m_error_code_isSet = true;
}

QString*
OAIBTAppElementContentInfo::getErrorDescription() {
    return error_description;
}
void
OAIBTAppElementContentInfo::setErrorDescription(QString* error_description) {
    this->error_description = error_description;
    this->m_error_description_isSet = true;
}

QString*
OAIBTAppElementContentInfo::getErrorValue() {
    return error_value;
}
void
OAIBTAppElementContentInfo::setErrorValue(QString* error_value) {
    this->error_value = error_value;
    this->m_error_value_isSet = true;
}


bool
OAIBTAppElementContentInfo::isSet(){
    bool isObjectUpdated = false;
    do{
        if(change_id != nullptr && *change_id != QString("")){ isObjectUpdated = true; break;}
        if(data->size() > 0){ isObjectUpdated = true; break;}
        if(m_error_code_isSet){ isObjectUpdated = true; break;}
        if(error_description != nullptr && *error_description != QString("")){ isObjectUpdated = true; break;}
        if(error_value != nullptr && *error_value != QString("")){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

