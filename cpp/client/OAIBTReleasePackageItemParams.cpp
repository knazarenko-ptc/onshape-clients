/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * OpenAPI spec version: 1.111
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIBTReleasePackageItemParams.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIBTReleasePackageItemParams::OAIBTReleasePackageItemParams(QString json) {
    init();
    this->fromJson(json);
}

OAIBTReleasePackageItemParams::OAIBTReleasePackageItemParams() {
    init();
}

OAIBTReleasePackageItemParams::~OAIBTReleasePackageItemParams() {
    this->cleanup();
}

void
OAIBTReleasePackageItemParams::init() {
    configuration = new QString("");
    m_configuration_isSet = false;
    document_id = new QString("");
    m_document_id_isSet = false;
    element_id = new QString("");
    m_element_id_isSet = false;
    href = new QString("");
    m_href_isSet = false;
    id = new QString("");
    m_id_isSet = false;
    is_included = false;
    m_is_included_isSet = false;
    not_editable_in_version_properties = new OAIBTReleasePackageItemParams_notEditableInVersionProperties();
    m_not_editable_in_version_properties_isSet = false;
    part_id = new QString("");
    m_part_id_isSet = false;
    part_number = new QString("");
    m_part_number_isSet = false;
    properties = new QList<OAIBTPropertyValueParam*>();
    m_properties_isSet = false;
    version_id = new QString("");
    m_version_id_isSet = false;
    workspace_id = new QString("");
    m_workspace_id_isSet = false;
}

void
OAIBTReleasePackageItemParams::cleanup() {
    if(configuration != nullptr) { 
        delete configuration;
    }
    if(document_id != nullptr) { 
        delete document_id;
    }
    if(element_id != nullptr) { 
        delete element_id;
    }
    if(href != nullptr) { 
        delete href;
    }
    if(id != nullptr) { 
        delete id;
    }

    if(not_editable_in_version_properties != nullptr) { 
        delete not_editable_in_version_properties;
    }
    if(part_id != nullptr) { 
        delete part_id;
    }
    if(part_number != nullptr) { 
        delete part_number;
    }
    if(properties != nullptr) { 
        auto arr = properties;
        for(auto o: *arr) { 
            delete o;
        }
        delete properties;
    }
    if(version_id != nullptr) { 
        delete version_id;
    }
    if(workspace_id != nullptr) { 
        delete workspace_id;
    }
}

OAIBTReleasePackageItemParams*
OAIBTReleasePackageItemParams::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIBTReleasePackageItemParams::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&configuration, pJson["configuration"], "QString", "QString");
    
    ::OpenAPI::setValue(&document_id, pJson["documentId"], "QString", "QString");
    
    ::OpenAPI::setValue(&element_id, pJson["elementId"], "QString", "QString");
    
    ::OpenAPI::setValue(&href, pJson["href"], "QString", "QString");
    
    ::OpenAPI::setValue(&id, pJson["id"], "QString", "QString");
    
    ::OpenAPI::setValue(&is_included, pJson["isIncluded"], "bool", "");
    
    ::OpenAPI::setValue(&not_editable_in_version_properties, pJson["notEditableInVersionProperties"], "OAIBTReleasePackageItemParams_notEditableInVersionProperties", "OAIBTReleasePackageItemParams_notEditableInVersionProperties");
    
    ::OpenAPI::setValue(&part_id, pJson["partId"], "QString", "QString");
    
    ::OpenAPI::setValue(&part_number, pJson["partNumber"], "QString", "QString");
    
    
    ::OpenAPI::setValue(&properties, pJson["properties"], "QList", "OAIBTPropertyValueParam");
    ::OpenAPI::setValue(&version_id, pJson["versionId"], "QString", "QString");
    
    ::OpenAPI::setValue(&workspace_id, pJson["workspaceId"], "QString", "QString");
    
}

QString
OAIBTReleasePackageItemParams::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIBTReleasePackageItemParams::asJsonObject() {
    QJsonObject obj;
    if(configuration != nullptr && *configuration != QString("")){
        toJsonValue(QString("configuration"), configuration, obj, QString("QString"));
    }
    if(document_id != nullptr && *document_id != QString("")){
        toJsonValue(QString("documentId"), document_id, obj, QString("QString"));
    }
    if(element_id != nullptr && *element_id != QString("")){
        toJsonValue(QString("elementId"), element_id, obj, QString("QString"));
    }
    if(href != nullptr && *href != QString("")){
        toJsonValue(QString("href"), href, obj, QString("QString"));
    }
    if(id != nullptr && *id != QString("")){
        toJsonValue(QString("id"), id, obj, QString("QString"));
    }
    if(m_is_included_isSet){
        obj.insert("isIncluded", QJsonValue(is_included));
    }
    if((not_editable_in_version_properties != nullptr) && (not_editable_in_version_properties->isSet())){
        toJsonValue(QString("notEditableInVersionProperties"), not_editable_in_version_properties, obj, QString("OAIBTReleasePackageItemParams_notEditableInVersionProperties"));
    }
    if(part_id != nullptr && *part_id != QString("")){
        toJsonValue(QString("partId"), part_id, obj, QString("QString"));
    }
    if(part_number != nullptr && *part_number != QString("")){
        toJsonValue(QString("partNumber"), part_number, obj, QString("QString"));
    }
    if(properties->size() > 0){
        toJsonArray((QList<void*>*)properties, obj, "properties", "OAIBTPropertyValueParam");
    }
    if(version_id != nullptr && *version_id != QString("")){
        toJsonValue(QString("versionId"), version_id, obj, QString("QString"));
    }
    if(workspace_id != nullptr && *workspace_id != QString("")){
        toJsonValue(QString("workspaceId"), workspace_id, obj, QString("QString"));
    }

    return obj;
}

QString*
OAIBTReleasePackageItemParams::getConfiguration() {
    return configuration;
}
void
OAIBTReleasePackageItemParams::setConfiguration(QString* configuration) {
    this->configuration = configuration;
    this->m_configuration_isSet = true;
}

QString*
OAIBTReleasePackageItemParams::getDocumentId() {
    return document_id;
}
void
OAIBTReleasePackageItemParams::setDocumentId(QString* document_id) {
    this->document_id = document_id;
    this->m_document_id_isSet = true;
}

QString*
OAIBTReleasePackageItemParams::getElementId() {
    return element_id;
}
void
OAIBTReleasePackageItemParams::setElementId(QString* element_id) {
    this->element_id = element_id;
    this->m_element_id_isSet = true;
}

QString*
OAIBTReleasePackageItemParams::getHref() {
    return href;
}
void
OAIBTReleasePackageItemParams::setHref(QString* href) {
    this->href = href;
    this->m_href_isSet = true;
}

QString*
OAIBTReleasePackageItemParams::getId() {
    return id;
}
void
OAIBTReleasePackageItemParams::setId(QString* id) {
    this->id = id;
    this->m_id_isSet = true;
}

bool
OAIBTReleasePackageItemParams::isIsIncluded() {
    return is_included;
}
void
OAIBTReleasePackageItemParams::setIsIncluded(bool is_included) {
    this->is_included = is_included;
    this->m_is_included_isSet = true;
}

OAIBTReleasePackageItemParams_notEditableInVersionProperties*
OAIBTReleasePackageItemParams::getNotEditableInVersionProperties() {
    return not_editable_in_version_properties;
}
void
OAIBTReleasePackageItemParams::setNotEditableInVersionProperties(OAIBTReleasePackageItemParams_notEditableInVersionProperties* not_editable_in_version_properties) {
    this->not_editable_in_version_properties = not_editable_in_version_properties;
    this->m_not_editable_in_version_properties_isSet = true;
}

QString*
OAIBTReleasePackageItemParams::getPartId() {
    return part_id;
}
void
OAIBTReleasePackageItemParams::setPartId(QString* part_id) {
    this->part_id = part_id;
    this->m_part_id_isSet = true;
}

QString*
OAIBTReleasePackageItemParams::getPartNumber() {
    return part_number;
}
void
OAIBTReleasePackageItemParams::setPartNumber(QString* part_number) {
    this->part_number = part_number;
    this->m_part_number_isSet = true;
}

QList<OAIBTPropertyValueParam*>*
OAIBTReleasePackageItemParams::getProperties() {
    return properties;
}
void
OAIBTReleasePackageItemParams::setProperties(QList<OAIBTPropertyValueParam*>* properties) {
    this->properties = properties;
    this->m_properties_isSet = true;
}

QString*
OAIBTReleasePackageItemParams::getVersionId() {
    return version_id;
}
void
OAIBTReleasePackageItemParams::setVersionId(QString* version_id) {
    this->version_id = version_id;
    this->m_version_id_isSet = true;
}

QString*
OAIBTReleasePackageItemParams::getWorkspaceId() {
    return workspace_id;
}
void
OAIBTReleasePackageItemParams::setWorkspaceId(QString* workspace_id) {
    this->workspace_id = workspace_id;
    this->m_workspace_id_isSet = true;
}


bool
OAIBTReleasePackageItemParams::isSet(){
    bool isObjectUpdated = false;
    do{
        if(configuration != nullptr && *configuration != QString("")){ isObjectUpdated = true; break;}
        if(document_id != nullptr && *document_id != QString("")){ isObjectUpdated = true; break;}
        if(element_id != nullptr && *element_id != QString("")){ isObjectUpdated = true; break;}
        if(href != nullptr && *href != QString("")){ isObjectUpdated = true; break;}
        if(id != nullptr && *id != QString("")){ isObjectUpdated = true; break;}
        if(m_is_included_isSet){ isObjectUpdated = true; break;}
        if(not_editable_in_version_properties != nullptr && not_editable_in_version_properties->isSet()){ isObjectUpdated = true; break;}
        if(part_id != nullptr && *part_id != QString("")){ isObjectUpdated = true; break;}
        if(part_number != nullptr && *part_number != QString("")){ isObjectUpdated = true; break;}
        if(properties->size() > 0){ isObjectUpdated = true; break;}
        if(version_id != nullptr && *version_id != QString("")){ isObjectUpdated = true; break;}
        if(workspace_id != nullptr && *workspace_id != QString("")){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

