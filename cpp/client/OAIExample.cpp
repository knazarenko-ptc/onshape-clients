/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * OpenAPI spec version: 1.111
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIExample.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIExample::OAIExample(QString json) {
    init();
    this->fromJson(json);
}

OAIExample::OAIExample() {
    init();
}

OAIExample::~OAIExample() {
    this->cleanup();
}

void
OAIExample::init() {
    description = new QString("");
    m_description_isSet = false;
    extensions = new QMap<QString, OAIObject*>();
    m_extensions_isSet = false;
    external_value = new QString("");
    m_external_value_isSet = false;
    getref = new QString("");
    m_getref_isSet = false;
    summary = new QString("");
    m_summary_isSet = false;
    value = NULL;
    m_value_isSet = false;
}

void
OAIExample::cleanup() {
    if(description != nullptr) { 
        delete description;
    }
    if(extensions != nullptr) { 
        auto arr = extensions;
        for(auto o: *arr) { 
            delete o;
        }
        delete extensions;
    }
    if(external_value != nullptr) { 
        delete external_value;
    }
    if(getref != nullptr) { 
        delete getref;
    }
    if(summary != nullptr) { 
        delete summary;
    }
    if(value != nullptr) { 
        delete value;
    }
}

OAIExample*
OAIExample::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIExample::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&description, pJson["description"], "QString", "QString");
    
    
    ::OpenAPI::setValue(&extensions, pJson["extensions"], "QMap", "OAIObject");
    ::OpenAPI::setValue(&external_value, pJson["externalValue"], "QString", "QString");
    
    ::OpenAPI::setValue(&getref, pJson["get$ref"], "QString", "QString");
    
    ::OpenAPI::setValue(&summary, pJson["summary"], "QString", "QString");
    
    ::OpenAPI::setValue(&value, pJson["value"], "OAIObject", "OAIObject");
    
}

QString
OAIExample::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIExample::asJsonObject() {
    QJsonObject obj;
    if(description != nullptr && *description != QString("")){
        toJsonValue(QString("description"), description, obj, QString("QString"));
    }
    if(extensions->size() > 0){
        toJsonMap((QMap<QString, void*>*) extensions, obj, "extensions", "OAIObject");
    }
    if(external_value != nullptr && *external_value != QString("")){
        toJsonValue(QString("externalValue"), external_value, obj, QString("QString"));
    }
    if(getref != nullptr && *getref != QString("")){
        toJsonValue(QString("get$ref"), getref, obj, QString("QString"));
    }
    if(summary != nullptr && *summary != QString("")){
        toJsonValue(QString("summary"), summary, obj, QString("QString"));
    }
    if((value != nullptr) && (value->isSet())){
        toJsonValue(QString("value"), value, obj, QString("OAIObject"));
    }

    return obj;
}

QString*
OAIExample::getDescription() {
    return description;
}
void
OAIExample::setDescription(QString* description) {
    this->description = description;
    this->m_description_isSet = true;
}

QMap<QString, OAIObject*>*
OAIExample::getExtensions() {
    return extensions;
}
void
OAIExample::setExtensions(QMap<QString, OAIObject*>* extensions) {
    this->extensions = extensions;
    this->m_extensions_isSet = true;
}

QString*
OAIExample::getExternalValue() {
    return external_value;
}
void
OAIExample::setExternalValue(QString* external_value) {
    this->external_value = external_value;
    this->m_external_value_isSet = true;
}

QString*
OAIExample::getGetref() {
    return getref;
}
void
OAIExample::setGetref(QString* getref) {
    this->getref = getref;
    this->m_getref_isSet = true;
}

QString*
OAIExample::getSummary() {
    return summary;
}
void
OAIExample::setSummary(QString* summary) {
    this->summary = summary;
    this->m_summary_isSet = true;
}

OAIObject*
OAIExample::getValue() {
    return value;
}
void
OAIExample::setValue(OAIObject* value) {
    this->value = value;
    this->m_value_isSet = true;
}


bool
OAIExample::isSet(){
    bool isObjectUpdated = false;
    do{
        if(description != nullptr && *description != QString("")){ isObjectUpdated = true; break;}
        if(extensions->size() > 0){ isObjectUpdated = true; break;}
        if(external_value != nullptr && *external_value != QString("")){ isObjectUpdated = true; break;}
        if(getref != nullptr && *getref != QString("")){ isObjectUpdated = true; break;}
        if(summary != nullptr && *summary != QString("")){ isObjectUpdated = true; break;}
        if(value != nullptr && value->isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

