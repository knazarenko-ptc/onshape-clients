/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * OpenAPI spec version: 1.111
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIEncoding.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIEncoding::OAIEncoding(QString json) {
    init();
    this->fromJson(json);
}

OAIEncoding::OAIEncoding() {
    init();
}

OAIEncoding::~OAIEncoding() {
    this->cleanup();
}

void
OAIEncoding::init() {
    allow_reserved = false;
    m_allow_reserved_isSet = false;
    content_type = new QString("");
    m_content_type_isSet = false;
    explode = false;
    m_explode_isSet = false;
    extensions = new QMap<QString, OAIObject*>();
    m_extensions_isSet = false;
    headers = new QMap<QString, OAIHeader*>();
    m_headers_isSet = false;
    style = new QString("");
    m_style_isSet = false;
}

void
OAIEncoding::cleanup() {

    if(content_type != nullptr) { 
        delete content_type;
    }

    if(extensions != nullptr) { 
        auto arr = extensions;
        for(auto o: *arr) { 
            delete o;
        }
        delete extensions;
    }
    if(headers != nullptr) { 
        auto arr = headers;
        for(auto o: *arr) { 
            delete o;
        }
        delete headers;
    }
    if(style != nullptr) { 
        delete style;
    }
}

OAIEncoding*
OAIEncoding::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIEncoding::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&allow_reserved, pJson["allowReserved"], "bool", "");
    
    ::OpenAPI::setValue(&content_type, pJson["contentType"], "QString", "QString");
    
    ::OpenAPI::setValue(&explode, pJson["explode"], "bool", "");
    
    
    ::OpenAPI::setValue(&extensions, pJson["extensions"], "QMap", "OAIObject");
    
    ::OpenAPI::setValue(&headers, pJson["headers"], "QMap", "OAIHeader");
    ::OpenAPI::setValue(&style, pJson["style"], "QString", "QString");
    
}

QString
OAIEncoding::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIEncoding::asJsonObject() {
    QJsonObject obj;
    if(m_allow_reserved_isSet){
        obj.insert("allowReserved", QJsonValue(allow_reserved));
    }
    if(content_type != nullptr && *content_type != QString("")){
        toJsonValue(QString("contentType"), content_type, obj, QString("QString"));
    }
    if(m_explode_isSet){
        obj.insert("explode", QJsonValue(explode));
    }
    if(extensions->size() > 0){
        toJsonMap((QMap<QString, void*>*) extensions, obj, "extensions", "OAIObject");
    }
    if(headers->size() > 0){
        toJsonMap((QMap<QString, void*>*) headers, obj, "headers", "OAIHeader");
    }
    if(style != nullptr && *style != QString("")){
        toJsonValue(QString("style"), style, obj, QString("QString"));
    }

    return obj;
}

bool
OAIEncoding::isAllowReserved() {
    return allow_reserved;
}
void
OAIEncoding::setAllowReserved(bool allow_reserved) {
    this->allow_reserved = allow_reserved;
    this->m_allow_reserved_isSet = true;
}

QString*
OAIEncoding::getContentType() {
    return content_type;
}
void
OAIEncoding::setContentType(QString* content_type) {
    this->content_type = content_type;
    this->m_content_type_isSet = true;
}

bool
OAIEncoding::isExplode() {
    return explode;
}
void
OAIEncoding::setExplode(bool explode) {
    this->explode = explode;
    this->m_explode_isSet = true;
}

QMap<QString, OAIObject*>*
OAIEncoding::getExtensions() {
    return extensions;
}
void
OAIEncoding::setExtensions(QMap<QString, OAIObject*>* extensions) {
    this->extensions = extensions;
    this->m_extensions_isSet = true;
}

QMap<QString, OAIHeader*>*
OAIEncoding::getHeaders() {
    return headers;
}
void
OAIEncoding::setHeaders(QMap<QString, OAIHeader*>* headers) {
    this->headers = headers;
    this->m_headers_isSet = true;
}

QString*
OAIEncoding::getStyle() {
    return style;
}
void
OAIEncoding::setStyle(QString* style) {
    this->style = style;
    this->m_style_isSet = true;
}


bool
OAIEncoding::isSet(){
    bool isObjectUpdated = false;
    do{
        if(m_allow_reserved_isSet){ isObjectUpdated = true; break;}
        if(content_type != nullptr && *content_type != QString("")){ isObjectUpdated = true; break;}
        if(m_explode_isSet){ isObjectUpdated = true; break;}
        if(extensions->size() > 0){ isObjectUpdated = true; break;}
        if(headers->size() > 0){ isObjectUpdated = true; break;}
        if(style != nullptr && *style != QString("")){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

