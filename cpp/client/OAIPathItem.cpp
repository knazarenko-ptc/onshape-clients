/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * OpenAPI spec version: 1.111
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIPathItem.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIPathItem::OAIPathItem(QString json) {
    init();
    this->fromJson(json);
}

OAIPathItem::OAIPathItem() {
    init();
}

OAIPathItem::~OAIPathItem() {
    this->cleanup();
}

void
OAIPathItem::init() {
    _delete = new OAIOperation();
    m__delete_isSet = false;
    description = new QString("");
    m_description_isSet = false;
    extensions = new QMap<QString, OAIObject*>();
    m_extensions_isSet = false;
    get = new OAIOperation();
    m_get_isSet = false;
    getref = new QString("");
    m_getref_isSet = false;
    head = new OAIOperation();
    m_head_isSet = false;
    options = new OAIOperation();
    m_options_isSet = false;
    parameters = new QList<OAIParameter*>();
    m_parameters_isSet = false;
    patch = new OAIOperation();
    m_patch_isSet = false;
    post = new OAIOperation();
    m_post_isSet = false;
    put = new OAIOperation();
    m_put_isSet = false;
    servers = new QList<OAIServer*>();
    m_servers_isSet = false;
    summary = new QString("");
    m_summary_isSet = false;
    trace = new OAIOperation();
    m_trace_isSet = false;
}

void
OAIPathItem::cleanup() {
    if(_delete != nullptr) { 
        delete _delete;
    }
    if(description != nullptr) { 
        delete description;
    }
    if(extensions != nullptr) { 
        auto arr = extensions;
        for(auto o: *arr) { 
            delete o;
        }
        delete extensions;
    }
    if(get != nullptr) { 
        delete get;
    }
    if(getref != nullptr) { 
        delete getref;
    }
    if(head != nullptr) { 
        delete head;
    }
    if(options != nullptr) { 
        delete options;
    }
    if(parameters != nullptr) { 
        auto arr = parameters;
        for(auto o: *arr) { 
            delete o;
        }
        delete parameters;
    }
    if(patch != nullptr) { 
        delete patch;
    }
    if(post != nullptr) { 
        delete post;
    }
    if(put != nullptr) { 
        delete put;
    }
    if(servers != nullptr) { 
        auto arr = servers;
        for(auto o: *arr) { 
            delete o;
        }
        delete servers;
    }
    if(summary != nullptr) { 
        delete summary;
    }
    if(trace != nullptr) { 
        delete trace;
    }
}

OAIPathItem*
OAIPathItem::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIPathItem::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&_delete, pJson["delete"], "OAIOperation", "OAIOperation");
    
    ::OpenAPI::setValue(&description, pJson["description"], "QString", "QString");
    
    
    ::OpenAPI::setValue(&extensions, pJson["extensions"], "QMap", "OAIObject");
    ::OpenAPI::setValue(&get, pJson["get"], "OAIOperation", "OAIOperation");
    
    ::OpenAPI::setValue(&getref, pJson["get$ref"], "QString", "QString");
    
    ::OpenAPI::setValue(&head, pJson["head"], "OAIOperation", "OAIOperation");
    
    ::OpenAPI::setValue(&options, pJson["options"], "OAIOperation", "OAIOperation");
    
    
    ::OpenAPI::setValue(&parameters, pJson["parameters"], "QList", "OAIParameter");
    ::OpenAPI::setValue(&patch, pJson["patch"], "OAIOperation", "OAIOperation");
    
    ::OpenAPI::setValue(&post, pJson["post"], "OAIOperation", "OAIOperation");
    
    ::OpenAPI::setValue(&put, pJson["put"], "OAIOperation", "OAIOperation");
    
    
    ::OpenAPI::setValue(&servers, pJson["servers"], "QList", "OAIServer");
    ::OpenAPI::setValue(&summary, pJson["summary"], "QString", "QString");
    
    ::OpenAPI::setValue(&trace, pJson["trace"], "OAIOperation", "OAIOperation");
    
}

QString
OAIPathItem::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIPathItem::asJsonObject() {
    QJsonObject obj;
    if((_delete != nullptr) && (_delete->isSet())){
        toJsonValue(QString("delete"), _delete, obj, QString("OAIOperation"));
    }
    if(description != nullptr && *description != QString("")){
        toJsonValue(QString("description"), description, obj, QString("QString"));
    }
    if(extensions->size() > 0){
        toJsonMap((QMap<QString, void*>*) extensions, obj, "extensions", "OAIObject");
    }
    if((get != nullptr) && (get->isSet())){
        toJsonValue(QString("get"), get, obj, QString("OAIOperation"));
    }
    if(getref != nullptr && *getref != QString("")){
        toJsonValue(QString("get$ref"), getref, obj, QString("QString"));
    }
    if((head != nullptr) && (head->isSet())){
        toJsonValue(QString("head"), head, obj, QString("OAIOperation"));
    }
    if((options != nullptr) && (options->isSet())){
        toJsonValue(QString("options"), options, obj, QString("OAIOperation"));
    }
    if(parameters->size() > 0){
        toJsonArray((QList<void*>*)parameters, obj, "parameters", "OAIParameter");
    }
    if((patch != nullptr) && (patch->isSet())){
        toJsonValue(QString("patch"), patch, obj, QString("OAIOperation"));
    }
    if((post != nullptr) && (post->isSet())){
        toJsonValue(QString("post"), post, obj, QString("OAIOperation"));
    }
    if((put != nullptr) && (put->isSet())){
        toJsonValue(QString("put"), put, obj, QString("OAIOperation"));
    }
    if(servers->size() > 0){
        toJsonArray((QList<void*>*)servers, obj, "servers", "OAIServer");
    }
    if(summary != nullptr && *summary != QString("")){
        toJsonValue(QString("summary"), summary, obj, QString("QString"));
    }
    if((trace != nullptr) && (trace->isSet())){
        toJsonValue(QString("trace"), trace, obj, QString("OAIOperation"));
    }

    return obj;
}

OAIOperation*
OAIPathItem::getDelete() {
    return _delete;
}
void
OAIPathItem::setDelete(OAIOperation* _delete) {
    this->_delete = _delete;
    this->m__delete_isSet = true;
}

QString*
OAIPathItem::getDescription() {
    return description;
}
void
OAIPathItem::setDescription(QString* description) {
    this->description = description;
    this->m_description_isSet = true;
}

QMap<QString, OAIObject*>*
OAIPathItem::getExtensions() {
    return extensions;
}
void
OAIPathItem::setExtensions(QMap<QString, OAIObject*>* extensions) {
    this->extensions = extensions;
    this->m_extensions_isSet = true;
}

OAIOperation*
OAIPathItem::getGet() {
    return get;
}
void
OAIPathItem::setGet(OAIOperation* get) {
    this->get = get;
    this->m_get_isSet = true;
}

QString*
OAIPathItem::getGetref() {
    return getref;
}
void
OAIPathItem::setGetref(QString* getref) {
    this->getref = getref;
    this->m_getref_isSet = true;
}

OAIOperation*
OAIPathItem::getHead() {
    return head;
}
void
OAIPathItem::setHead(OAIOperation* head) {
    this->head = head;
    this->m_head_isSet = true;
}

OAIOperation*
OAIPathItem::getOptions() {
    return options;
}
void
OAIPathItem::setOptions(OAIOperation* options) {
    this->options = options;
    this->m_options_isSet = true;
}

QList<OAIParameter*>*
OAIPathItem::getParameters() {
    return parameters;
}
void
OAIPathItem::setParameters(QList<OAIParameter*>* parameters) {
    this->parameters = parameters;
    this->m_parameters_isSet = true;
}

OAIOperation*
OAIPathItem::getPatch() {
    return patch;
}
void
OAIPathItem::setPatch(OAIOperation* patch) {
    this->patch = patch;
    this->m_patch_isSet = true;
}

OAIOperation*
OAIPathItem::getPost() {
    return post;
}
void
OAIPathItem::setPost(OAIOperation* post) {
    this->post = post;
    this->m_post_isSet = true;
}

OAIOperation*
OAIPathItem::getPut() {
    return put;
}
void
OAIPathItem::setPut(OAIOperation* put) {
    this->put = put;
    this->m_put_isSet = true;
}

QList<OAIServer*>*
OAIPathItem::getServers() {
    return servers;
}
void
OAIPathItem::setServers(QList<OAIServer*>* servers) {
    this->servers = servers;
    this->m_servers_isSet = true;
}

QString*
OAIPathItem::getSummary() {
    return summary;
}
void
OAIPathItem::setSummary(QString* summary) {
    this->summary = summary;
    this->m_summary_isSet = true;
}

OAIOperation*
OAIPathItem::getTrace() {
    return trace;
}
void
OAIPathItem::setTrace(OAIOperation* trace) {
    this->trace = trace;
    this->m_trace_isSet = true;
}


bool
OAIPathItem::isSet(){
    bool isObjectUpdated = false;
    do{
        if(_delete != nullptr && _delete->isSet()){ isObjectUpdated = true; break;}
        if(description != nullptr && *description != QString("")){ isObjectUpdated = true; break;}
        if(extensions->size() > 0){ isObjectUpdated = true; break;}
        if(get != nullptr && get->isSet()){ isObjectUpdated = true; break;}
        if(getref != nullptr && *getref != QString("")){ isObjectUpdated = true; break;}
        if(head != nullptr && head->isSet()){ isObjectUpdated = true; break;}
        if(options != nullptr && options->isSet()){ isObjectUpdated = true; break;}
        if(parameters->size() > 0){ isObjectUpdated = true; break;}
        if(patch != nullptr && patch->isSet()){ isObjectUpdated = true; break;}
        if(post != nullptr && post->isSet()){ isObjectUpdated = true; break;}
        if(put != nullptr && put->isSet()){ isObjectUpdated = true; break;}
        if(servers->size() > 0){ isObjectUpdated = true; break;}
        if(summary != nullptr && *summary != QString("")){ isObjectUpdated = true; break;}
        if(trace != nullptr && trace->isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

