/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * OpenAPI spec version: 1.111
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIBTWorkflowPropertyInfo.h
 *
 * 
 */

#ifndef OAIBTWorkflowPropertyInfo_H_
#define OAIBTWorkflowPropertyInfo_H_

#include <QJsonObject>


#include "OAIBTMetadataEnumValueInfo.h"
#include "OAIBTMetadataPropertyUiHintsInfo.h"
#include "OAIBTMetadataPropertyValidatorInfo.h"
#include "OAIObject.h"
#include <QList>
#include <QString>

#include "OAIObject.h"

namespace OpenAPI {

class OAIBTWorkflowPropertyInfo: public OAIObject {
public:
    OAIBTWorkflowPropertyInfo();
    OAIBTWorkflowPropertyInfo(QString json);
    ~OAIBTWorkflowPropertyInfo();
    void init();
    void cleanup();

    QString asJson () override;
    QJsonObject asJsonObject() override;
    void fromJsonObject(QJsonObject json) override;
    OAIBTWorkflowPropertyInfo* fromJson(QString jsonString) override;

    OAIObject* getDefaultValue();
    void setDefaultValue(OAIObject* default_value);

    bool isDirty();
    void setDirty(bool dirty);

    bool isEditable();
    void setEditable(bool editable);

    bool isEditableInUi();
    void setEditableInUi(bool editable_in_ui);

    QList<OAIBTMetadataEnumValueInfo*>* getEnumValues();
    void setEnumValues(QList<OAIBTMetadataEnumValueInfo*>* enum_values);

    OAIObject* getInitialValue();
    void setInitialValue(OAIObject* initial_value);

    bool isIsApproverProperty();
    void setIsApproverProperty(bool is_approver_property);

    bool isIsNotifierProperty();
    void setIsNotifierProperty(bool is_notifier_property);

    QString* getName();
    void setName(QString* name);

    QString* getPropertyId();
    void setPropertyId(QString* property_id);

    qint32 getPropertySource();
    void setPropertySource(qint32 property_source);

    bool isRequired();
    void setRequired(bool required);

    QString* getSchemaId();
    void setSchemaId(QString* schema_id);

    OAIBTMetadataPropertyUiHintsInfo* getUiHints();
    void setUiHints(OAIBTMetadataPropertyUiHintsInfo* ui_hints);

    OAIBTMetadataPropertyValidatorInfo* getValidator();
    void setValidator(OAIBTMetadataPropertyValidatorInfo* validator);

    OAIObject* getValue();
    void setValue(OAIObject* value);

    QString* getValueType();
    void setValueType(QString* value_type);


    virtual bool isSet() override;

private:
    OAIObject* default_value;
    bool m_default_value_isSet;

    bool dirty;
    bool m_dirty_isSet;

    bool editable;
    bool m_editable_isSet;

    bool editable_in_ui;
    bool m_editable_in_ui_isSet;

    QList<OAIBTMetadataEnumValueInfo*>* enum_values;
    bool m_enum_values_isSet;

    OAIObject* initial_value;
    bool m_initial_value_isSet;

    bool is_approver_property;
    bool m_is_approver_property_isSet;

    bool is_notifier_property;
    bool m_is_notifier_property_isSet;

    QString* name;
    bool m_name_isSet;

    QString* property_id;
    bool m_property_id_isSet;

    qint32 property_source;
    bool m_property_source_isSet;

    bool required;
    bool m_required_isSet;

    QString* schema_id;
    bool m_schema_id_isSet;

    OAIBTMetadataPropertyUiHintsInfo* ui_hints;
    bool m_ui_hints_isSet;

    OAIBTMetadataPropertyValidatorInfo* validator;
    bool m_validator_isSet;

    OAIObject* value;
    bool m_value_isSet;

    QString* value_type;
    bool m_value_type_isSet;

};

}

#endif /* OAIBTWorkflowPropertyInfo_H_ */
