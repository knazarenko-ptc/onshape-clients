/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * OpenAPI spec version: 1.111
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIGlobalPermissionInfo.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIGlobalPermissionInfo::OAIGlobalPermissionInfo(QString json) {
    init();
    this->fromJson(json);
}

OAIGlobalPermissionInfo::OAIGlobalPermissionInfo() {
    init();
}

OAIGlobalPermissionInfo::~OAIGlobalPermissionInfo() {
    this->cleanup();
}

void
OAIGlobalPermissionInfo::init() {
    access_reports = false;
    m_access_reports_isSet = false;
    admin_enterprise = false;
    m_admin_enterprise_isSet = false;
    allow_app_store_access = false;
    m_allow_app_store_access_isSet = false;
    approve_releases = false;
    m_approve_releases_isSet = false;
    create_project = false;
    m_create_project_isSet = false;
    create_releases = false;
    m_create_releases_isSet = false;
    delete_permanently = false;
    m_delete_permanently_isSet = false;
    manage_guest_users = false;
    m_manage_guest_users_isSet = false;
    manage_rbac = false;
    m_manage_rbac_isSet = false;
    manage_users = false;
    m_manage_users_isSet = false;
    share_for_anonymous_access = false;
    m_share_for_anonymous_access_isSet = false;
}

void
OAIGlobalPermissionInfo::cleanup() {











}

OAIGlobalPermissionInfo*
OAIGlobalPermissionInfo::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIGlobalPermissionInfo::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&access_reports, pJson["accessReports"], "bool", "");
    
    ::OpenAPI::setValue(&admin_enterprise, pJson["adminEnterprise"], "bool", "");
    
    ::OpenAPI::setValue(&allow_app_store_access, pJson["allowAppStoreAccess"], "bool", "");
    
    ::OpenAPI::setValue(&approve_releases, pJson["approveReleases"], "bool", "");
    
    ::OpenAPI::setValue(&create_project, pJson["createProject"], "bool", "");
    
    ::OpenAPI::setValue(&create_releases, pJson["createReleases"], "bool", "");
    
    ::OpenAPI::setValue(&delete_permanently, pJson["deletePermanently"], "bool", "");
    
    ::OpenAPI::setValue(&manage_guest_users, pJson["manageGuestUsers"], "bool", "");
    
    ::OpenAPI::setValue(&manage_rbac, pJson["manageRbac"], "bool", "");
    
    ::OpenAPI::setValue(&manage_users, pJson["manageUsers"], "bool", "");
    
    ::OpenAPI::setValue(&share_for_anonymous_access, pJson["shareForAnonymousAccess"], "bool", "");
    
}

QString
OAIGlobalPermissionInfo::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIGlobalPermissionInfo::asJsonObject() {
    QJsonObject obj;
    if(m_access_reports_isSet){
        obj.insert("accessReports", QJsonValue(access_reports));
    }
    if(m_admin_enterprise_isSet){
        obj.insert("adminEnterprise", QJsonValue(admin_enterprise));
    }
    if(m_allow_app_store_access_isSet){
        obj.insert("allowAppStoreAccess", QJsonValue(allow_app_store_access));
    }
    if(m_approve_releases_isSet){
        obj.insert("approveReleases", QJsonValue(approve_releases));
    }
    if(m_create_project_isSet){
        obj.insert("createProject", QJsonValue(create_project));
    }
    if(m_create_releases_isSet){
        obj.insert("createReleases", QJsonValue(create_releases));
    }
    if(m_delete_permanently_isSet){
        obj.insert("deletePermanently", QJsonValue(delete_permanently));
    }
    if(m_manage_guest_users_isSet){
        obj.insert("manageGuestUsers", QJsonValue(manage_guest_users));
    }
    if(m_manage_rbac_isSet){
        obj.insert("manageRbac", QJsonValue(manage_rbac));
    }
    if(m_manage_users_isSet){
        obj.insert("manageUsers", QJsonValue(manage_users));
    }
    if(m_share_for_anonymous_access_isSet){
        obj.insert("shareForAnonymousAccess", QJsonValue(share_for_anonymous_access));
    }

    return obj;
}

bool
OAIGlobalPermissionInfo::isAccessReports() {
    return access_reports;
}
void
OAIGlobalPermissionInfo::setAccessReports(bool access_reports) {
    this->access_reports = access_reports;
    this->m_access_reports_isSet = true;
}

bool
OAIGlobalPermissionInfo::isAdminEnterprise() {
    return admin_enterprise;
}
void
OAIGlobalPermissionInfo::setAdminEnterprise(bool admin_enterprise) {
    this->admin_enterprise = admin_enterprise;
    this->m_admin_enterprise_isSet = true;
}

bool
OAIGlobalPermissionInfo::isAllowAppStoreAccess() {
    return allow_app_store_access;
}
void
OAIGlobalPermissionInfo::setAllowAppStoreAccess(bool allow_app_store_access) {
    this->allow_app_store_access = allow_app_store_access;
    this->m_allow_app_store_access_isSet = true;
}

bool
OAIGlobalPermissionInfo::isApproveReleases() {
    return approve_releases;
}
void
OAIGlobalPermissionInfo::setApproveReleases(bool approve_releases) {
    this->approve_releases = approve_releases;
    this->m_approve_releases_isSet = true;
}

bool
OAIGlobalPermissionInfo::isCreateProject() {
    return create_project;
}
void
OAIGlobalPermissionInfo::setCreateProject(bool create_project) {
    this->create_project = create_project;
    this->m_create_project_isSet = true;
}

bool
OAIGlobalPermissionInfo::isCreateReleases() {
    return create_releases;
}
void
OAIGlobalPermissionInfo::setCreateReleases(bool create_releases) {
    this->create_releases = create_releases;
    this->m_create_releases_isSet = true;
}

bool
OAIGlobalPermissionInfo::isDeletePermanently() {
    return delete_permanently;
}
void
OAIGlobalPermissionInfo::setDeletePermanently(bool delete_permanently) {
    this->delete_permanently = delete_permanently;
    this->m_delete_permanently_isSet = true;
}

bool
OAIGlobalPermissionInfo::isManageGuestUsers() {
    return manage_guest_users;
}
void
OAIGlobalPermissionInfo::setManageGuestUsers(bool manage_guest_users) {
    this->manage_guest_users = manage_guest_users;
    this->m_manage_guest_users_isSet = true;
}

bool
OAIGlobalPermissionInfo::isManageRbac() {
    return manage_rbac;
}
void
OAIGlobalPermissionInfo::setManageRbac(bool manage_rbac) {
    this->manage_rbac = manage_rbac;
    this->m_manage_rbac_isSet = true;
}

bool
OAIGlobalPermissionInfo::isManageUsers() {
    return manage_users;
}
void
OAIGlobalPermissionInfo::setManageUsers(bool manage_users) {
    this->manage_users = manage_users;
    this->m_manage_users_isSet = true;
}

bool
OAIGlobalPermissionInfo::isShareForAnonymousAccess() {
    return share_for_anonymous_access;
}
void
OAIGlobalPermissionInfo::setShareForAnonymousAccess(bool share_for_anonymous_access) {
    this->share_for_anonymous_access = share_for_anonymous_access;
    this->m_share_for_anonymous_access_isSet = true;
}


bool
OAIGlobalPermissionInfo::isSet(){
    bool isObjectUpdated = false;
    do{
        if(m_access_reports_isSet){ isObjectUpdated = true; break;}
        if(m_admin_enterprise_isSet){ isObjectUpdated = true; break;}
        if(m_allow_app_store_access_isSet){ isObjectUpdated = true; break;}
        if(m_approve_releases_isSet){ isObjectUpdated = true; break;}
        if(m_create_project_isSet){ isObjectUpdated = true; break;}
        if(m_create_releases_isSet){ isObjectUpdated = true; break;}
        if(m_delete_permanently_isSet){ isObjectUpdated = true; break;}
        if(m_manage_guest_users_isSet){ isObjectUpdated = true; break;}
        if(m_manage_rbac_isSet){ isObjectUpdated = true; break;}
        if(m_manage_users_isSet){ isObjectUpdated = true; break;}
        if(m_share_for_anonymous_access_isSet){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

