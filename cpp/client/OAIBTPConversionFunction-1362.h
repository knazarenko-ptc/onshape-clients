/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * OpenAPI spec version: 1.111
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIBTPConversionFunction-1362.h
 *
 * 
 */

#ifndef OAIBTPConversionFunction-1362_H_
#define OAIBTPConversionFunction-1362_H_

#include <QJsonObject>


#include "OAIBTPAnnotation-231.h"
#include "OAIBTPArgumentDeclaration-232.h"
#include "OAIBTPIdentifier-8.h"
#include "OAIBTPLiteralNumber-258.h"
#include "OAIBTPProcedureDeclarationBase-266.h"
#include "OAIBTPSpace-10.h"
#include "OAIBTPStatement-269.h"
#include "OAIBTPStatementBlock-271.h"
#include "OAIBTPTypeName-290.h"
#include <QList>
#include <QString>

#include "OAIObject.h"

namespace OpenAPI {

class OAIBTPConversionFunction-1362: public OAIObject {
public:
    OAIBTPConversionFunction-1362();
    OAIBTPConversionFunction-1362(QString json);
    ~OAIBTPConversionFunction-1362();
    void init();
    void cleanup();

    QString asJson () override;
    QJsonObject asJsonObject() override;
    void fromJsonObject(QJsonObject json) override;
    OAIBTPConversionFunction-1362* fromJson(QString jsonString) override;

    bool isAtomic();
    void setAtomic(bool atomic);

    QString* getBtType();
    void setBtType(QString* bt_type);

    QString* getDocumentationType();
    void setDocumentationType(QString* documentation_type);

    qint32 getEndSourceLocation();
    void setEndSourceLocation(qint32 end_source_location);

    QString* getNodeId();
    void setNodeId(QString* node_id);

    QString* getShortDescriptor();
    void setShortDescriptor(QString* short_descriptor);

    OAIBTPSpace-10* getSpaceAfter();
    void setSpaceAfter(OAIBTPSpace-10* space_after);

    OAIBTPSpace-10* getSpaceBefore();
    void setSpaceBefore(OAIBTPSpace-10* space_before);

    bool isSpaceDefault();
    void setSpaceDefault(bool space_default);

    qint32 getStartSourceLocation();
    void setStartSourceLocation(qint32 start_source_location);

    bool isDeprecated();
    void setDeprecated(bool deprecated);

    OAIBTPIdentifier-8* getSymbolName();
    void setSymbolName(OAIBTPIdentifier-8* symbol_name);

    QList<OAIBTPArgumentDeclaration-232*>* getArgumentsToDocument();
    void setArgumentsToDocument(QList<OAIBTPArgumentDeclaration-232*>* arguments_to_document);

    QString* getDeprecatedExplanation();
    void setDeprecatedExplanation(QString* deprecated_explanation);

    bool isForExport();
    void setForExport(bool for_export);

    OAIBTPSpace-10* getSpaceAfterExport();
    void setSpaceAfterExport(OAIBTPSpace-10* space_after_export);

    OAIBTPAnnotation-231* getAnnotation();
    void setAnnotation(OAIBTPAnnotation-231* annotation);

    OAIBTPStatementBlock-271* getBody();
    void setBody(OAIBTPStatementBlock-271* body);

    QList<OAIBTPArgumentDeclaration-232*>* getArguments();
    void setArguments(QList<OAIBTPArgumentDeclaration-232*>* arguments);

    OAIBTPStatement-269* getPrecondition();
    void setPrecondition(OAIBTPStatement-269* precondition);

    OAIBTPSpace-10* getSpaceAfterArglist();
    void setSpaceAfterArglist(OAIBTPSpace-10* space_after_arglist);

    OAIBTPSpace-10* getSpaceInEmptyList();
    void setSpaceInEmptyList(OAIBTPSpace-10* space_in_empty_list);

    OAIBTPTypeName-290* getReturnType();
    void setReturnType(OAIBTPTypeName-290* return_type);

    OAIBTPLiteralNumber-258* getTo();
    void setTo(OAIBTPLiteralNumber-258* to);

    OAIBTPIdentifier-8* getTypeName();
    void setTypeName(OAIBTPIdentifier-8* type_name);

    OAIBTPSpace-10* getSpaceAfterType();
    void setSpaceAfterType(OAIBTPSpace-10* space_after_type);

    OAIBTPLiteralNumber-258* getFrom();
    void setFrom(OAIBTPLiteralNumber-258* from);


    virtual bool isSet() override;

private:
    bool atomic;
    bool m_atomic_isSet;

    QString* bt_type;
    bool m_bt_type_isSet;

    QString* documentation_type;
    bool m_documentation_type_isSet;

    qint32 end_source_location;
    bool m_end_source_location_isSet;

    QString* node_id;
    bool m_node_id_isSet;

    QString* short_descriptor;
    bool m_short_descriptor_isSet;

    OAIBTPSpace-10* space_after;
    bool m_space_after_isSet;

    OAIBTPSpace-10* space_before;
    bool m_space_before_isSet;

    bool space_default;
    bool m_space_default_isSet;

    qint32 start_source_location;
    bool m_start_source_location_isSet;

    bool deprecated;
    bool m_deprecated_isSet;

    OAIBTPIdentifier-8* symbol_name;
    bool m_symbol_name_isSet;

    QList<OAIBTPArgumentDeclaration-232*>* arguments_to_document;
    bool m_arguments_to_document_isSet;

    QString* deprecated_explanation;
    bool m_deprecated_explanation_isSet;

    bool for_export;
    bool m_for_export_isSet;

    OAIBTPSpace-10* space_after_export;
    bool m_space_after_export_isSet;

    OAIBTPAnnotation-231* annotation;
    bool m_annotation_isSet;

    OAIBTPStatementBlock-271* body;
    bool m_body_isSet;

    QList<OAIBTPArgumentDeclaration-232*>* arguments;
    bool m_arguments_isSet;

    OAIBTPStatement-269* precondition;
    bool m_precondition_isSet;

    OAIBTPSpace-10* space_after_arglist;
    bool m_space_after_arglist_isSet;

    OAIBTPSpace-10* space_in_empty_list;
    bool m_space_in_empty_list_isSet;

    OAIBTPTypeName-290* return_type;
    bool m_return_type_isSet;

    OAIBTPLiteralNumber-258* to;
    bool m_to_isSet;

    OAIBTPIdentifier-8* type_name;
    bool m_type_name_isSet;

    OAIBTPSpace-10* space_after_type;
    bool m_space_after_type_isSet;

    OAIBTPLiteralNumber-258* from;
    bool m_from_isSet;

};

}

#endif /* OAIBTPConversionFunction-1362_H_ */
