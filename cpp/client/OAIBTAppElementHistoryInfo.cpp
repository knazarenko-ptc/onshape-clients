/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * OpenAPI spec version: 1.111
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIBTAppElementHistoryInfo.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIBTAppElementHistoryInfo::OAIBTAppElementHistoryInfo(QString json) {
    init();
    this->fromJson(json);
}

OAIBTAppElementHistoryInfo::OAIBTAppElementHistoryInfo() {
    init();
}

OAIBTAppElementHistoryInfo::~OAIBTAppElementHistoryInfo() {
    this->cleanup();
}

void
OAIBTAppElementHistoryInfo::init() {
    changes = new QList<OAIBTAppElementHistoryEntryInfo*>();
    m_changes_isSet = false;
    error_code = 0;
    m_error_code_isSet = false;
    error_description = new QString("");
    m_error_description_isSet = false;
    error_value = new QString("");
    m_error_value_isSet = false;
}

void
OAIBTAppElementHistoryInfo::cleanup() {
    if(changes != nullptr) { 
        auto arr = changes;
        for(auto o: *arr) { 
            delete o;
        }
        delete changes;
    }

    if(error_description != nullptr) { 
        delete error_description;
    }
    if(error_value != nullptr) { 
        delete error_value;
    }
}

OAIBTAppElementHistoryInfo*
OAIBTAppElementHistoryInfo::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIBTAppElementHistoryInfo::fromJsonObject(QJsonObject pJson) {
    
    ::OpenAPI::setValue(&changes, pJson["changes"], "QList", "OAIBTAppElementHistoryEntryInfo");
    ::OpenAPI::setValue(&error_code, pJson["errorCode"], "qint32", "");
    
    ::OpenAPI::setValue(&error_description, pJson["errorDescription"], "QString", "QString");
    
    ::OpenAPI::setValue(&error_value, pJson["errorValue"], "QString", "QString");
    
}

QString
OAIBTAppElementHistoryInfo::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIBTAppElementHistoryInfo::asJsonObject() {
    QJsonObject obj;
    if(changes->size() > 0){
        toJsonArray((QList<void*>*)changes, obj, "changes", "OAIBTAppElementHistoryEntryInfo");
    }
    if(m_error_code_isSet){
        obj.insert("errorCode", QJsonValue(error_code));
    }
    if(error_description != nullptr && *error_description != QString("")){
        toJsonValue(QString("errorDescription"), error_description, obj, QString("QString"));
    }
    if(error_value != nullptr && *error_value != QString("")){
        toJsonValue(QString("errorValue"), error_value, obj, QString("QString"));
    }

    return obj;
}

QList<OAIBTAppElementHistoryEntryInfo*>*
OAIBTAppElementHistoryInfo::getChanges() {
    return changes;
}
void
OAIBTAppElementHistoryInfo::setChanges(QList<OAIBTAppElementHistoryEntryInfo*>* changes) {
    this->changes = changes;
    this->m_changes_isSet = true;
}

qint32
OAIBTAppElementHistoryInfo::getErrorCode() {
    return error_code;
}
void
OAIBTAppElementHistoryInfo::setErrorCode(qint32 error_code) {
    this->error_code = error_code;
    this->m_error_code_isSet = true;
}

QString*
OAIBTAppElementHistoryInfo::getErrorDescription() {
    return error_description;
}
void
OAIBTAppElementHistoryInfo::setErrorDescription(QString* error_description) {
    this->error_description = error_description;
    this->m_error_description_isSet = true;
}

QString*
OAIBTAppElementHistoryInfo::getErrorValue() {
    return error_value;
}
void
OAIBTAppElementHistoryInfo::setErrorValue(QString* error_value) {
    this->error_value = error_value;
    this->m_error_value_isSet = true;
}


bool
OAIBTAppElementHistoryInfo::isSet(){
    bool isObjectUpdated = false;
    do{
        if(changes->size() > 0){ isObjectUpdated = true; break;}
        if(m_error_code_isSet){ isObjectUpdated = true; break;}
        if(error_description != nullptr && *error_description != QString("")){ isObjectUpdated = true; break;}
        if(error_value != nullptr && *error_value != QString("")){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

