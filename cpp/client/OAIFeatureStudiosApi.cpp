/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * OpenAPI spec version: 1.111
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFeatureStudiosApi.h"
#include "OAIHelpers.h"
#include "OAIModelFactory.h"
#include "OAIQObjectWrapper.h"

#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAIFeatureStudiosApi::OAIFeatureStudiosApi() {}

OAIFeatureStudiosApi::~OAIFeatureStudiosApi() {}

OAIFeatureStudiosApi::OAIFeatureStudiosApi(QString host, QString basePath) {
    this->host = host;
    this->basePath = basePath;
}

void
OAIFeatureStudiosApi::createFeatureStudio(QString* did, QString* wid, OAIBTModelElementParams& oaibt_model_element_params) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/api/featurestudios/d/{did}/w/{wid}");

    QString didPathParam("{"); didPathParam.append("did").append("}");
    fullPath.replace(didPathParam, stringValue(did));
    QString widPathParam("{"); widPathParam.append("wid").append("}");
    fullPath.replace(widPathParam, stringValue(wid));


    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "POST");


    
    QString output = oaibt_model_element_params.asJson();
    input.request_body.append(output);
    


    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIFeatureStudiosApi::createFeatureStudioCallback);

    worker->execute(&input);
}

void
OAIFeatureStudiosApi::createFeatureStudioCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QString json(worker->response);
    OAIBTDocumentElementInfo* output = static_cast<OAIBTDocumentElementInfo*>(create(json, QString("OAIBTDocumentElementInfo")));
    auto wrapper = new OAIQObjectWrapper<OAIBTDocumentElementInfo*> (output);
    wrapper->deleteLater();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit createFeatureStudioSignal(output);
    } else {
        emit createFeatureStudioSignalE(output, error_type, error_str);
        emit createFeatureStudioSignalEFull(worker, error_type, error_str);
    }
}

void
OAIFeatureStudiosApi::getFeatureStudioContents(QString* did, QString* wvm, QString* wvmid, QString* eid) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/api/featurestudios/d/{did}/{wvm}/{wvmid}/e/{eid}");

    QString didPathParam("{"); didPathParam.append("did").append("}");
    fullPath.replace(didPathParam, stringValue(did));
    QString wvmPathParam("{"); wvmPathParam.append("wvm").append("}");
    fullPath.replace(wvmPathParam, stringValue(wvm));
    QString wvmidPathParam("{"); wvmidPathParam.append("wvmid").append("}");
    fullPath.replace(wvmidPathParam, stringValue(wvmid));
    QString eidPathParam("{"); eidPathParam.append("eid").append("}");
    fullPath.replace(eidPathParam, stringValue(eid));


    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIFeatureStudiosApi::getFeatureStudioContentsCallback);

    worker->execute(&input);
}

void
OAIFeatureStudiosApi::getFeatureStudioContentsCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QString json(worker->response);
    OAIBTFeatureStudioContents-2239* output = static_cast<OAIBTFeatureStudioContents-2239*>(create(json, QString("OAIBTFeatureStudioContents-2239")));
    auto wrapper = new OAIQObjectWrapper<OAIBTFeatureStudioContents-2239*> (output);
    wrapper->deleteLater();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit getFeatureStudioContentsSignal(output);
    } else {
        emit getFeatureStudioContentsSignalE(output, error_type, error_str);
        emit getFeatureStudioContentsSignalEFull(worker, error_type, error_str);
    }
}

void
OAIFeatureStudiosApi::getFeatureStudioSpecs(QString* did, QString* wvm, QString* wvmid, QString* eid) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/api/featurestudios/d/{did}/{wvm}/{wvmid}/e/{eid}/featurespecs");

    QString didPathParam("{"); didPathParam.append("did").append("}");
    fullPath.replace(didPathParam, stringValue(did));
    QString wvmPathParam("{"); wvmPathParam.append("wvm").append("}");
    fullPath.replace(wvmPathParam, stringValue(wvm));
    QString wvmidPathParam("{"); wvmidPathParam.append("wvmid").append("}");
    fullPath.replace(wvmidPathParam, stringValue(wvmid));
    QString eidPathParam("{"); eidPathParam.append("eid").append("}");
    fullPath.replace(eidPathParam, stringValue(eid));


    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIFeatureStudiosApi::getFeatureStudioSpecsCallback);

    worker->execute(&input);
}

void
OAIFeatureStudiosApi::getFeatureStudioSpecsCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QString json(worker->response);
    OAIBTFeatureSpecsResponse-664* output = static_cast<OAIBTFeatureSpecsResponse-664*>(create(json, QString("OAIBTFeatureSpecsResponse-664")));
    auto wrapper = new OAIQObjectWrapper<OAIBTFeatureSpecsResponse-664*> (output);
    wrapper->deleteLater();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit getFeatureStudioSpecsSignal(output);
    } else {
        emit getFeatureStudioSpecsSignalE(output, error_type, error_str);
        emit getFeatureStudioSpecsSignalEFull(worker, error_type, error_str);
    }
}

void
OAIFeatureStudiosApi::updateFeatureStudioContents(QString* did, QString* wvm, QString* wvmid, QString* eid, QString*& body) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/api/featurestudios/d/{did}/{wvm}/{wvmid}/e/{eid}");

    QString didPathParam("{"); didPathParam.append("did").append("}");
    fullPath.replace(didPathParam, stringValue(did));
    QString wvmPathParam("{"); wvmPathParam.append("wvm").append("}");
    fullPath.replace(wvmPathParam, stringValue(wvm));
    QString wvmidPathParam("{"); wvmidPathParam.append("wvmid").append("}");
    fullPath.replace(wvmidPathParam, stringValue(wvmid));
    QString eidPathParam("{"); eidPathParam.append("eid").append("}");
    fullPath.replace(eidPathParam, stringValue(eid));


    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "POST");


    
    QString output(*body);
    input.request_body.append(output);
    


    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIFeatureStudiosApi::updateFeatureStudioContentsCallback);

    worker->execute(&input);
}

void
OAIFeatureStudiosApi::updateFeatureStudioContentsCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QString json(worker->response);
    OAIBTFeatureStudioContents-2239* output = static_cast<OAIBTFeatureStudioContents-2239*>(create(json, QString("OAIBTFeatureStudioContents-2239")));
    auto wrapper = new OAIQObjectWrapper<OAIBTFeatureStudioContents-2239*> (output);
    wrapper->deleteLater();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit updateFeatureStudioContentsSignal(output);
    } else {
        emit updateFeatureStudioContentsSignalE(output, error_type, error_str);
        emit updateFeatureStudioContentsSignalEFull(worker, error_type, error_str);
    }
}


}
