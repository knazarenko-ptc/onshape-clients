/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * OpenAPI spec version: 1.111
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef _OAI_OAIDefaultApi_H_
#define _OAI_OAIDefaultApi_H_

#include "OAIHttpRequest.h"

#include "OAIBTAppAssociativeDataInfoArray.h"
#include "OAIBTAppElementBasicInfo.h"
#include "OAIBTApplicationElementThumbnailParamsArray.h"
#include "OAIBTBoundingBoxInfo.h"
#include "OAIBTListResponseBTInsertableInfo.h"
#include "OAIBTListResponseBTMetadataPropertySummaryInfo.h"
#include "OAIBTMetadataPropertyInfo.h"
#include "OAIBTMetadataSchemaInfo.h"
#include "OAIBTThumbnailInfo.h"
#include "OAIBTUpdateWorkflowableTestObjectParams.h"
#include "OAIBTWorkflowableTestObjectInfo.h"
#include <QString>

#include <QObject>

namespace OpenAPI {

class OAIDefaultApi: public QObject {
    Q_OBJECT

public:
    OAIDefaultApi();
    OAIDefaultApi(QString host, QString basePath);
    ~OAIDefaultApi();

    QString host;
    QString basePath;
    QMap<QString, QString> defaultHeaders;

    void createWorkflowableTestObject(QString* wfid);
    void deleteApplicationThumbnails(QString* did, QString* wv, QString* wvid, QString* eid);
    void deleteAssociativeData(QString* did, QString* eid, QString* wvm, QString* wvmid, QString* transaction_id, QString* parent_change_id, QList<QString*>* associative_data_id, QString* element_id, QString* view_id, QString* microversion_id, QString* document_microversion, QString* deterministic_id, QString* feature_id, QString* entity_id, QString* occurrence_id);
    void getAssociativeData(QString* did, QString* wvm, QString* wvmid, QString* eid, QString* transaction_id, QString* change_id, QList<QString*>* associative_data_id, QString* element_id, QString* view_id, QString* microversion_id, QString* document_microversion, QString* deterministic_id, QString* feature_id, QString* entity_id, QString* occurrence_id, bool return_id_tags);
    void getConfiguredElementThumbnailWithSize(QString* did, QString* wid, QString* eid, QString* cid, QString* sz, QString* t, bool reject_empty);
    void getDocumentThumbnail(QString* did, QString* wid);
    void getDocumentThumbnailWithSize(QString* did, QString* wid, QString* sz, QString* t);
    void getElementThumbnail(QString* did, QString* wv, QString* wvid, QString* eid, QString* link_document_id);
    void getElementThumbnailWithApiConfiguration(QString* did, QString* wid, QString* eid, QString* cid, QString* sz, QString* t, bool reject_empty);
    void getElementThumbnailWithSize(QString* did, QString* wid, QString* eid, QString* sz, QString* t, bool reject_empty);
    void getLatestInDocument(QString* did, QList<QString*>* beta_capability_ids, bool include_parts, bool include_surfaces, bool include_wires, bool include_sketches, bool include_reference_features, bool include_assemblies, bool include_features, bool include_feature_studios, bool include_part_studios, bool include_blobs, bool include_meshes, bool include_flattened_bodies, QString* allowed_blob_mime_types, qint32 max_feature_script_version, bool include_applications, QString* allowed_application_mime_types, bool include_composite_parts, bool include_fs_tables);
    void getMetadataSchema(qint32 object_type, QString* owner_id, QString* document_id, qint32 owner_type);
    void getProperties(QString* schema_id, QString* owner_id, QString* document_id, qint32 owner_type, qint32 object_type, bool strict, bool active_only, qint32 offset, qint32 limit);
    void getPropertyInfo(QString* pid, QString* document_id, QString* schema_id, QString* owner_id, qint32 owner_type, qint32 object_type);
    void getSchema(QString* sid, QString* document_id);
    void getSketchBoundingBoxes(QString* did, QString* wvm, QString* wvmid, QString* eid, QString* sid, QString* configuration, QString* link_document_id);
    void getSketchInfo(QString* did, QString* wvm, QString* wvmid, QString* eid, QString* configuration, QList<QString*>* sketch_id, bool output3_d, bool curve_points, bool include_geometry, QString* link_document_id);
    void getTessellatedEntities(QString* did, QString* wvm, QString* wvmid, QString* eid, QString* sid, QString* configuration, QList<QString*>* entity_id, double angle_tolerance, double chord_tolerance, QString* link_document_id);
    void getThumbnailForDocument(QString* did);
    void getThumbnailForDocumentAndVersion(QString* did, QString* vid, QString* link_document_id);
    void getThumbnailForDocumentAndVersionOld(QString* did, QString* vid);
    void getThumbnailForDocumentOld(QString* did);
    void getWorkflowableTestObject(QString* oid);
    void postAssociativeData(QString* did, QString* eid, QString* wvm, QString* wvmid, QString*& body);
    void setApplicationElementThumbnail(QString* did, QString* wv, QString* wvid, QString* eid, OAIBTApplicationElementThumbnailParamsArray& oaibt_application_element_thumbnail_params_array, bool overwrite);
    void transitionWorkflowableTestObject(QString* oid, QString* transition);
    void updateWorkflowableTestObject(QString* oid, OAIBTUpdateWorkflowableTestObjectParams& oaibt_update_workflowable_test_object_params);
    
private:
    void createWorkflowableTestObjectCallback (OAIHttpRequestWorker * worker);
    void deleteApplicationThumbnailsCallback (OAIHttpRequestWorker * worker);
    void deleteAssociativeDataCallback (OAIHttpRequestWorker * worker);
    void getAssociativeDataCallback (OAIHttpRequestWorker * worker);
    void getConfiguredElementThumbnailWithSizeCallback (OAIHttpRequestWorker * worker);
    void getDocumentThumbnailCallback (OAIHttpRequestWorker * worker);
    void getDocumentThumbnailWithSizeCallback (OAIHttpRequestWorker * worker);
    void getElementThumbnailCallback (OAIHttpRequestWorker * worker);
    void getElementThumbnailWithApiConfigurationCallback (OAIHttpRequestWorker * worker);
    void getElementThumbnailWithSizeCallback (OAIHttpRequestWorker * worker);
    void getLatestInDocumentCallback (OAIHttpRequestWorker * worker);
    void getMetadataSchemaCallback (OAIHttpRequestWorker * worker);
    void getPropertiesCallback (OAIHttpRequestWorker * worker);
    void getPropertyInfoCallback (OAIHttpRequestWorker * worker);
    void getSchemaCallback (OAIHttpRequestWorker * worker);
    void getSketchBoundingBoxesCallback (OAIHttpRequestWorker * worker);
    void getSketchInfoCallback (OAIHttpRequestWorker * worker);
    void getTessellatedEntitiesCallback (OAIHttpRequestWorker * worker);
    void getThumbnailForDocumentCallback (OAIHttpRequestWorker * worker);
    void getThumbnailForDocumentAndVersionCallback (OAIHttpRequestWorker * worker);
    void getThumbnailForDocumentAndVersionOldCallback (OAIHttpRequestWorker * worker);
    void getThumbnailForDocumentOldCallback (OAIHttpRequestWorker * worker);
    void getWorkflowableTestObjectCallback (OAIHttpRequestWorker * worker);
    void postAssociativeDataCallback (OAIHttpRequestWorker * worker);
    void setApplicationElementThumbnailCallback (OAIHttpRequestWorker * worker);
    void transitionWorkflowableTestObjectCallback (OAIHttpRequestWorker * worker);
    void updateWorkflowableTestObjectCallback (OAIHttpRequestWorker * worker);
    
signals:
    void createWorkflowableTestObjectSignal(OAIBTWorkflowableTestObjectInfo* summary);
    void deleteApplicationThumbnailsSignal();
    void deleteAssociativeDataSignal(OAIBTAppElementBasicInfo* summary);
    void getAssociativeDataSignal(OAIBTAppAssociativeDataInfoArray* summary);
    void getConfiguredElementThumbnailWithSizeSignal();
    void getDocumentThumbnailSignal(OAIBTThumbnailInfo* summary);
    void getDocumentThumbnailWithSizeSignal();
    void getElementThumbnailSignal(OAIBTThumbnailInfo* summary);
    void getElementThumbnailWithApiConfigurationSignal();
    void getElementThumbnailWithSizeSignal();
    void getLatestInDocumentSignal(OAIBTListResponseBTInsertableInfo* summary);
    void getMetadataSchemaSignal(OAIBTMetadataSchemaInfo* summary);
    void getPropertiesSignal(OAIBTListResponseBTMetadataPropertySummaryInfo* summary);
    void getPropertyInfoSignal(OAIBTMetadataPropertyInfo* summary);
    void getSchemaSignal(OAIBTMetadataSchemaInfo* summary);
    void getSketchBoundingBoxesSignal(OAIBTBoundingBoxInfo* summary);
    void getSketchInfoSignal();
    void getTessellatedEntitiesSignal();
    void getThumbnailForDocumentSignal(OAIBTThumbnailInfo* summary);
    void getThumbnailForDocumentAndVersionSignal();
    void getThumbnailForDocumentAndVersionOldSignal();
    void getThumbnailForDocumentOldSignal(OAIBTThumbnailInfo* summary);
    void getWorkflowableTestObjectSignal(OAIBTWorkflowableTestObjectInfo* summary);
    void postAssociativeDataSignal(OAIBTAppAssociativeDataInfoArray* summary);
    void setApplicationElementThumbnailSignal();
    void transitionWorkflowableTestObjectSignal(OAIBTWorkflowableTestObjectInfo* summary);
    void updateWorkflowableTestObjectSignal(OAIBTWorkflowableTestObjectInfo* summary);
    
    void createWorkflowableTestObjectSignalE(OAIBTWorkflowableTestObjectInfo* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void deleteApplicationThumbnailsSignalE(QNetworkReply::NetworkError error_type, QString& error_str);
    void deleteAssociativeDataSignalE(OAIBTAppElementBasicInfo* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void getAssociativeDataSignalE(OAIBTAppAssociativeDataInfoArray* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void getConfiguredElementThumbnailWithSizeSignalE(QNetworkReply::NetworkError error_type, QString& error_str);
    void getDocumentThumbnailSignalE(OAIBTThumbnailInfo* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void getDocumentThumbnailWithSizeSignalE(QNetworkReply::NetworkError error_type, QString& error_str);
    void getElementThumbnailSignalE(OAIBTThumbnailInfo* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void getElementThumbnailWithApiConfigurationSignalE(QNetworkReply::NetworkError error_type, QString& error_str);
    void getElementThumbnailWithSizeSignalE(QNetworkReply::NetworkError error_type, QString& error_str);
    void getLatestInDocumentSignalE(OAIBTListResponseBTInsertableInfo* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void getMetadataSchemaSignalE(OAIBTMetadataSchemaInfo* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void getPropertiesSignalE(OAIBTListResponseBTMetadataPropertySummaryInfo* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void getPropertyInfoSignalE(OAIBTMetadataPropertyInfo* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void getSchemaSignalE(OAIBTMetadataSchemaInfo* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void getSketchBoundingBoxesSignalE(OAIBTBoundingBoxInfo* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void getSketchInfoSignalE(QNetworkReply::NetworkError error_type, QString& error_str);
    void getTessellatedEntitiesSignalE(QNetworkReply::NetworkError error_type, QString& error_str);
    void getThumbnailForDocumentSignalE(OAIBTThumbnailInfo* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void getThumbnailForDocumentAndVersionSignalE(QNetworkReply::NetworkError error_type, QString& error_str);
    void getThumbnailForDocumentAndVersionOldSignalE(QNetworkReply::NetworkError error_type, QString& error_str);
    void getThumbnailForDocumentOldSignalE(OAIBTThumbnailInfo* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void getWorkflowableTestObjectSignalE(OAIBTWorkflowableTestObjectInfo* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void postAssociativeDataSignalE(OAIBTAppAssociativeDataInfoArray* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void setApplicationElementThumbnailSignalE(QNetworkReply::NetworkError error_type, QString& error_str);
    void transitionWorkflowableTestObjectSignalE(OAIBTWorkflowableTestObjectInfo* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void updateWorkflowableTestObjectSignalE(OAIBTWorkflowableTestObjectInfo* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    
    void createWorkflowableTestObjectSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void deleteApplicationThumbnailsSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void deleteAssociativeDataSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void getAssociativeDataSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void getConfiguredElementThumbnailWithSizeSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void getDocumentThumbnailSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void getDocumentThumbnailWithSizeSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void getElementThumbnailSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void getElementThumbnailWithApiConfigurationSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void getElementThumbnailWithSizeSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void getLatestInDocumentSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void getMetadataSchemaSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void getPropertiesSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void getPropertyInfoSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void getSchemaSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void getSketchBoundingBoxesSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void getSketchInfoSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void getTessellatedEntitiesSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void getThumbnailForDocumentSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void getThumbnailForDocumentAndVersionSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void getThumbnailForDocumentAndVersionOldSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void getThumbnailForDocumentOldSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void getWorkflowableTestObjectSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void postAssociativeDataSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void setApplicationElementThumbnailSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void transitionWorkflowableTestObjectSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void updateWorkflowableTestObjectSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    
};

}
#endif
