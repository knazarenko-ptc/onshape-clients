/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * OpenAPI spec version: 1.111
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIBTIdTranslationInfo.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIBTIdTranslationInfo::OAIBTIdTranslationInfo(QString json) {
    init();
    this->fromJson(json);
}

OAIBTIdTranslationInfo::OAIBTIdTranslationInfo() {
    init();
}

OAIBTIdTranslationInfo::~OAIBTIdTranslationInfo() {
    this->cleanup();
}

void
OAIBTIdTranslationInfo::init() {
    document_id = new QString("");
    m_document_id_isSet = false;
    element_id = new QString("");
    m_element_id_isSet = false;
    ids = new QList<OAIBTIdTranslationResultInfo*>();
    m_ids_isSet = false;
    source_document_microversion = new QString("");
    m_source_document_microversion_isSet = false;
    target_document_microversion = new QString("");
    m_target_document_microversion_isSet = false;
}

void
OAIBTIdTranslationInfo::cleanup() {
    if(document_id != nullptr) { 
        delete document_id;
    }
    if(element_id != nullptr) { 
        delete element_id;
    }
    if(ids != nullptr) { 
        auto arr = ids;
        for(auto o: *arr) { 
            delete o;
        }
        delete ids;
    }
    if(source_document_microversion != nullptr) { 
        delete source_document_microversion;
    }
    if(target_document_microversion != nullptr) { 
        delete target_document_microversion;
    }
}

OAIBTIdTranslationInfo*
OAIBTIdTranslationInfo::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIBTIdTranslationInfo::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&document_id, pJson["documentId"], "QString", "QString");
    
    ::OpenAPI::setValue(&element_id, pJson["elementId"], "QString", "QString");
    
    
    ::OpenAPI::setValue(&ids, pJson["ids"], "QList", "OAIBTIdTranslationResultInfo");
    ::OpenAPI::setValue(&source_document_microversion, pJson["sourceDocumentMicroversion"], "QString", "QString");
    
    ::OpenAPI::setValue(&target_document_microversion, pJson["targetDocumentMicroversion"], "QString", "QString");
    
}

QString
OAIBTIdTranslationInfo::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIBTIdTranslationInfo::asJsonObject() {
    QJsonObject obj;
    if(document_id != nullptr && *document_id != QString("")){
        toJsonValue(QString("documentId"), document_id, obj, QString("QString"));
    }
    if(element_id != nullptr && *element_id != QString("")){
        toJsonValue(QString("elementId"), element_id, obj, QString("QString"));
    }
    if(ids->size() > 0){
        toJsonArray((QList<void*>*)ids, obj, "ids", "OAIBTIdTranslationResultInfo");
    }
    if(source_document_microversion != nullptr && *source_document_microversion != QString("")){
        toJsonValue(QString("sourceDocumentMicroversion"), source_document_microversion, obj, QString("QString"));
    }
    if(target_document_microversion != nullptr && *target_document_microversion != QString("")){
        toJsonValue(QString("targetDocumentMicroversion"), target_document_microversion, obj, QString("QString"));
    }

    return obj;
}

QString*
OAIBTIdTranslationInfo::getDocumentId() {
    return document_id;
}
void
OAIBTIdTranslationInfo::setDocumentId(QString* document_id) {
    this->document_id = document_id;
    this->m_document_id_isSet = true;
}

QString*
OAIBTIdTranslationInfo::getElementId() {
    return element_id;
}
void
OAIBTIdTranslationInfo::setElementId(QString* element_id) {
    this->element_id = element_id;
    this->m_element_id_isSet = true;
}

QList<OAIBTIdTranslationResultInfo*>*
OAIBTIdTranslationInfo::getIds() {
    return ids;
}
void
OAIBTIdTranslationInfo::setIds(QList<OAIBTIdTranslationResultInfo*>* ids) {
    this->ids = ids;
    this->m_ids_isSet = true;
}

QString*
OAIBTIdTranslationInfo::getSourceDocumentMicroversion() {
    return source_document_microversion;
}
void
OAIBTIdTranslationInfo::setSourceDocumentMicroversion(QString* source_document_microversion) {
    this->source_document_microversion = source_document_microversion;
    this->m_source_document_microversion_isSet = true;
}

QString*
OAIBTIdTranslationInfo::getTargetDocumentMicroversion() {
    return target_document_microversion;
}
void
OAIBTIdTranslationInfo::setTargetDocumentMicroversion(QString* target_document_microversion) {
    this->target_document_microversion = target_document_microversion;
    this->m_target_document_microversion_isSet = true;
}


bool
OAIBTIdTranslationInfo::isSet(){
    bool isObjectUpdated = false;
    do{
        if(document_id != nullptr && *document_id != QString("")){ isObjectUpdated = true; break;}
        if(element_id != nullptr && *element_id != QString("")){ isObjectUpdated = true; break;}
        if(ids->size() > 0){ isObjectUpdated = true; break;}
        if(source_document_microversion != nullptr && *source_document_microversion != QString("")){ isObjectUpdated = true; break;}
        if(target_document_microversion != nullptr && *target_document_microversion != QString("")){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

