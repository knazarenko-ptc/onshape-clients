/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * OpenAPI spec version: 1.111
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIExternalAccount.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIExternalAccount::OAIExternalAccount(QString json) {
    init();
    this->fromJson(json);
}

OAIExternalAccount::OAIExternalAccount() {
    init();
}

OAIExternalAccount::~OAIExternalAccount() {
    this->cleanup();
}

void
OAIExternalAccount::init() {
    account = new QString("");
    m_account_isSet = false;
    customer = new QString("");
    m_customer_isSet = false;
    id = new QString("");
    m_id_isSet = false;
    instance_url = new QString("");
    m_instance_url_isSet = false;
    metadata = new QMap<QString, QString*>();
    m_metadata_isSet = false;
    object = new QString("");
    m_object_isSet = false;
}

void
OAIExternalAccount::cleanup() {
    if(account != nullptr) { 
        delete account;
    }
    if(customer != nullptr) { 
        delete customer;
    }
    if(id != nullptr) { 
        delete id;
    }
    if(instance_url != nullptr) { 
        delete instance_url;
    }
    if(metadata != nullptr) { 
        auto arr = metadata;
        for(auto o: *arr) { 
            delete o;
        }
        delete metadata;
    }
    if(object != nullptr) { 
        delete object;
    }
}

OAIExternalAccount*
OAIExternalAccount::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIExternalAccount::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&account, pJson["account"], "QString", "QString");
    
    ::OpenAPI::setValue(&customer, pJson["customer"], "QString", "QString");
    
    ::OpenAPI::setValue(&id, pJson["id"], "QString", "QString");
    
    ::OpenAPI::setValue(&instance_url, pJson["instanceURL"], "QString", "QString");
    
    
    ::OpenAPI::setValue(&metadata, pJson["metadata"], "QMap", "QString");
    ::OpenAPI::setValue(&object, pJson["object"], "QString", "QString");
    
}

QString
OAIExternalAccount::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIExternalAccount::asJsonObject() {
    QJsonObject obj;
    if(account != nullptr && *account != QString("")){
        toJsonValue(QString("account"), account, obj, QString("QString"));
    }
    if(customer != nullptr && *customer != QString("")){
        toJsonValue(QString("customer"), customer, obj, QString("QString"));
    }
    if(id != nullptr && *id != QString("")){
        toJsonValue(QString("id"), id, obj, QString("QString"));
    }
    if(instance_url != nullptr && *instance_url != QString("")){
        toJsonValue(QString("instanceURL"), instance_url, obj, QString("QString"));
    }
    if(metadata->size() > 0){
        toJsonMap((QMap<QString, void*>*) metadata, obj, "metadata", "QString");
    }
    if(object != nullptr && *object != QString("")){
        toJsonValue(QString("object"), object, obj, QString("QString"));
    }

    return obj;
}

QString*
OAIExternalAccount::getAccount() {
    return account;
}
void
OAIExternalAccount::setAccount(QString* account) {
    this->account = account;
    this->m_account_isSet = true;
}

QString*
OAIExternalAccount::getCustomer() {
    return customer;
}
void
OAIExternalAccount::setCustomer(QString* customer) {
    this->customer = customer;
    this->m_customer_isSet = true;
}

QString*
OAIExternalAccount::getId() {
    return id;
}
void
OAIExternalAccount::setId(QString* id) {
    this->id = id;
    this->m_id_isSet = true;
}

QString*
OAIExternalAccount::getInstanceUrl() {
    return instance_url;
}
void
OAIExternalAccount::setInstanceUrl(QString* instance_url) {
    this->instance_url = instance_url;
    this->m_instance_url_isSet = true;
}

QMap<QString, QString*>*
OAIExternalAccount::getMetadata() {
    return metadata;
}
void
OAIExternalAccount::setMetadata(QMap<QString, QString*>* metadata) {
    this->metadata = metadata;
    this->m_metadata_isSet = true;
}

QString*
OAIExternalAccount::getObject() {
    return object;
}
void
OAIExternalAccount::setObject(QString* object) {
    this->object = object;
    this->m_object_isSet = true;
}


bool
OAIExternalAccount::isSet(){
    bool isObjectUpdated = false;
    do{
        if(account != nullptr && *account != QString("")){ isObjectUpdated = true; break;}
        if(customer != nullptr && *customer != QString("")){ isObjectUpdated = true; break;}
        if(id != nullptr && *id != QString("")){ isObjectUpdated = true; break;}
        if(instance_url != nullptr && *instance_url != QString("")){ isObjectUpdated = true; break;}
        if(metadata->size() > 0){ isObjectUpdated = true; break;}
        if(object != nullptr && *object != QString("")){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

