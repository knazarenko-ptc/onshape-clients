/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * OpenAPI spec version: 1.111
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAISecurityScheme.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAISecurityScheme::OAISecurityScheme(QString json) {
    init();
    this->fromJson(json);
}

OAISecurityScheme::OAISecurityScheme() {
    init();
}

OAISecurityScheme::~OAISecurityScheme() {
    this->cleanup();
}

void
OAISecurityScheme::init() {
    bearer_format = new QString("");
    m_bearer_format_isSet = false;
    description = new QString("");
    m_description_isSet = false;
    extensions = new QMap<QString, OAIObject*>();
    m_extensions_isSet = false;
    flows = new OAIOAuthFlows();
    m_flows_isSet = false;
    getref = new QString("");
    m_getref_isSet = false;
    in = new QString("");
    m_in_isSet = false;
    name = new QString("");
    m_name_isSet = false;
    open_id_connect_url = new QString("");
    m_open_id_connect_url_isSet = false;
    scheme = new QString("");
    m_scheme_isSet = false;
    type = new QString("");
    m_type_isSet = false;
}

void
OAISecurityScheme::cleanup() {
    if(bearer_format != nullptr) { 
        delete bearer_format;
    }
    if(description != nullptr) { 
        delete description;
    }
    if(extensions != nullptr) { 
        auto arr = extensions;
        for(auto o: *arr) { 
            delete o;
        }
        delete extensions;
    }
    if(flows != nullptr) { 
        delete flows;
    }
    if(getref != nullptr) { 
        delete getref;
    }
    if(in != nullptr) { 
        delete in;
    }
    if(name != nullptr) { 
        delete name;
    }
    if(open_id_connect_url != nullptr) { 
        delete open_id_connect_url;
    }
    if(scheme != nullptr) { 
        delete scheme;
    }
    if(type != nullptr) { 
        delete type;
    }
}

OAISecurityScheme*
OAISecurityScheme::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAISecurityScheme::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&bearer_format, pJson["bearerFormat"], "QString", "QString");
    
    ::OpenAPI::setValue(&description, pJson["description"], "QString", "QString");
    
    
    ::OpenAPI::setValue(&extensions, pJson["extensions"], "QMap", "OAIObject");
    ::OpenAPI::setValue(&flows, pJson["flows"], "OAIOAuthFlows", "OAIOAuthFlows");
    
    ::OpenAPI::setValue(&getref, pJson["get$ref"], "QString", "QString");
    
    ::OpenAPI::setValue(&in, pJson["in"], "QString", "QString");
    
    ::OpenAPI::setValue(&name, pJson["name"], "QString", "QString");
    
    ::OpenAPI::setValue(&open_id_connect_url, pJson["openIdConnectUrl"], "QString", "QString");
    
    ::OpenAPI::setValue(&scheme, pJson["scheme"], "QString", "QString");
    
    ::OpenAPI::setValue(&type, pJson["type"], "QString", "QString");
    
}

QString
OAISecurityScheme::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAISecurityScheme::asJsonObject() {
    QJsonObject obj;
    if(bearer_format != nullptr && *bearer_format != QString("")){
        toJsonValue(QString("bearerFormat"), bearer_format, obj, QString("QString"));
    }
    if(description != nullptr && *description != QString("")){
        toJsonValue(QString("description"), description, obj, QString("QString"));
    }
    if(extensions->size() > 0){
        toJsonMap((QMap<QString, void*>*) extensions, obj, "extensions", "OAIObject");
    }
    if((flows != nullptr) && (flows->isSet())){
        toJsonValue(QString("flows"), flows, obj, QString("OAIOAuthFlows"));
    }
    if(getref != nullptr && *getref != QString("")){
        toJsonValue(QString("get$ref"), getref, obj, QString("QString"));
    }
    if(in != nullptr && *in != QString("")){
        toJsonValue(QString("in"), in, obj, QString("QString"));
    }
    if(name != nullptr && *name != QString("")){
        toJsonValue(QString("name"), name, obj, QString("QString"));
    }
    if(open_id_connect_url != nullptr && *open_id_connect_url != QString("")){
        toJsonValue(QString("openIdConnectUrl"), open_id_connect_url, obj, QString("QString"));
    }
    if(scheme != nullptr && *scheme != QString("")){
        toJsonValue(QString("scheme"), scheme, obj, QString("QString"));
    }
    if(type != nullptr && *type != QString("")){
        toJsonValue(QString("type"), type, obj, QString("QString"));
    }

    return obj;
}

QString*
OAISecurityScheme::getBearerFormat() {
    return bearer_format;
}
void
OAISecurityScheme::setBearerFormat(QString* bearer_format) {
    this->bearer_format = bearer_format;
    this->m_bearer_format_isSet = true;
}

QString*
OAISecurityScheme::getDescription() {
    return description;
}
void
OAISecurityScheme::setDescription(QString* description) {
    this->description = description;
    this->m_description_isSet = true;
}

QMap<QString, OAIObject*>*
OAISecurityScheme::getExtensions() {
    return extensions;
}
void
OAISecurityScheme::setExtensions(QMap<QString, OAIObject*>* extensions) {
    this->extensions = extensions;
    this->m_extensions_isSet = true;
}

OAIOAuthFlows*
OAISecurityScheme::getFlows() {
    return flows;
}
void
OAISecurityScheme::setFlows(OAIOAuthFlows* flows) {
    this->flows = flows;
    this->m_flows_isSet = true;
}

QString*
OAISecurityScheme::getGetref() {
    return getref;
}
void
OAISecurityScheme::setGetref(QString* getref) {
    this->getref = getref;
    this->m_getref_isSet = true;
}

QString*
OAISecurityScheme::getIn() {
    return in;
}
void
OAISecurityScheme::setIn(QString* in) {
    this->in = in;
    this->m_in_isSet = true;
}

QString*
OAISecurityScheme::getName() {
    return name;
}
void
OAISecurityScheme::setName(QString* name) {
    this->name = name;
    this->m_name_isSet = true;
}

QString*
OAISecurityScheme::getOpenIdConnectUrl() {
    return open_id_connect_url;
}
void
OAISecurityScheme::setOpenIdConnectUrl(QString* open_id_connect_url) {
    this->open_id_connect_url = open_id_connect_url;
    this->m_open_id_connect_url_isSet = true;
}

QString*
OAISecurityScheme::getScheme() {
    return scheme;
}
void
OAISecurityScheme::setScheme(QString* scheme) {
    this->scheme = scheme;
    this->m_scheme_isSet = true;
}

QString*
OAISecurityScheme::getType() {
    return type;
}
void
OAISecurityScheme::setType(QString* type) {
    this->type = type;
    this->m_type_isSet = true;
}


bool
OAISecurityScheme::isSet(){
    bool isObjectUpdated = false;
    do{
        if(bearer_format != nullptr && *bearer_format != QString("")){ isObjectUpdated = true; break;}
        if(description != nullptr && *description != QString("")){ isObjectUpdated = true; break;}
        if(extensions->size() > 0){ isObjectUpdated = true; break;}
        if(flows != nullptr && flows->isSet()){ isObjectUpdated = true; break;}
        if(getref != nullptr && *getref != QString("")){ isObjectUpdated = true; break;}
        if(in != nullptr && *in != QString("")){ isObjectUpdated = true; break;}
        if(name != nullptr && *name != QString("")){ isObjectUpdated = true; break;}
        if(open_id_connect_url != nullptr && *open_id_connect_url != QString("")){ isObjectUpdated = true; break;}
        if(scheme != nullptr && *scheme != QString("")){ isObjectUpdated = true; break;}
        if(type != nullptr && *type != QString("")){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

