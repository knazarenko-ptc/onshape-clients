/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * OpenAPI spec version: 1.111
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAITag.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAITag::OAITag(QString json) {
    init();
    this->fromJson(json);
}

OAITag::OAITag() {
    init();
}

OAITag::~OAITag() {
    this->cleanup();
}

void
OAITag::init() {
    description = new QString("");
    m_description_isSet = false;
    extensions = new QMap<QString, OAIObject*>();
    m_extensions_isSet = false;
    external_docs = new OAIExternalDocumentation();
    m_external_docs_isSet = false;
    name = new QString("");
    m_name_isSet = false;
}

void
OAITag::cleanup() {
    if(description != nullptr) { 
        delete description;
    }
    if(extensions != nullptr) { 
        auto arr = extensions;
        for(auto o: *arr) { 
            delete o;
        }
        delete extensions;
    }
    if(external_docs != nullptr) { 
        delete external_docs;
    }
    if(name != nullptr) { 
        delete name;
    }
}

OAITag*
OAITag::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAITag::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&description, pJson["description"], "QString", "QString");
    
    
    ::OpenAPI::setValue(&extensions, pJson["extensions"], "QMap", "OAIObject");
    ::OpenAPI::setValue(&external_docs, pJson["externalDocs"], "OAIExternalDocumentation", "OAIExternalDocumentation");
    
    ::OpenAPI::setValue(&name, pJson["name"], "QString", "QString");
    
}

QString
OAITag::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAITag::asJsonObject() {
    QJsonObject obj;
    if(description != nullptr && *description != QString("")){
        toJsonValue(QString("description"), description, obj, QString("QString"));
    }
    if(extensions->size() > 0){
        toJsonMap((QMap<QString, void*>*) extensions, obj, "extensions", "OAIObject");
    }
    if((external_docs != nullptr) && (external_docs->isSet())){
        toJsonValue(QString("externalDocs"), external_docs, obj, QString("OAIExternalDocumentation"));
    }
    if(name != nullptr && *name != QString("")){
        toJsonValue(QString("name"), name, obj, QString("QString"));
    }

    return obj;
}

QString*
OAITag::getDescription() {
    return description;
}
void
OAITag::setDescription(QString* description) {
    this->description = description;
    this->m_description_isSet = true;
}

QMap<QString, OAIObject*>*
OAITag::getExtensions() {
    return extensions;
}
void
OAITag::setExtensions(QMap<QString, OAIObject*>* extensions) {
    this->extensions = extensions;
    this->m_extensions_isSet = true;
}

OAIExternalDocumentation*
OAITag::getExternalDocs() {
    return external_docs;
}
void
OAITag::setExternalDocs(OAIExternalDocumentation* external_docs) {
    this->external_docs = external_docs;
    this->m_external_docs_isSet = true;
}

QString*
OAITag::getName() {
    return name;
}
void
OAITag::setName(QString* name) {
    this->name = name;
    this->m_name_isSet = true;
}


bool
OAITag::isSet(){
    bool isObjectUpdated = false;
    do{
        if(description != nullptr && *description != QString("")){ isObjectUpdated = true; break;}
        if(extensions->size() > 0){ isObjectUpdated = true; break;}
        if(external_docs != nullptr && external_docs->isSet()){ isObjectUpdated = true; break;}
        if(name != nullptr && *name != QString("")){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

