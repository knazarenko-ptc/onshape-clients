/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * OpenAPI spec version: 1.111
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIBTMPartStudioMateConnectorQuery-1324.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIBTMPartStudioMateConnectorQuery-1324::OAIBTMPartStudioMateConnectorQuery-1324(QString json) {
    init();
    this->fromJson(json);
}

OAIBTMPartStudioMateConnectorQuery-1324::OAIBTMPartStudioMateConnectorQuery-1324() {
    init();
}

OAIBTMPartStudioMateConnectorQuery-1324::~OAIBTMPartStudioMateConnectorQuery-1324() {
    this->cleanup();
}

void
OAIBTMPartStudioMateConnectorQuery-1324::init() {
    bt_type = new QString("");
    m_bt_type_isSet = false;
    deterministic_id_list = new OAIBTMIndividualQueryBase-139();
    m_deterministic_id_list_isSet = false;
    deterministic_ids = new QList<QString*>();
    m_deterministic_ids_isSet = false;
    import_microversion = new QString("");
    m_import_microversion_isSet = false;
    node_id = new QString("");
    m_node_id_isSet = false;
    path = new QList<QString*>();
    m_path_isSet = false;
    query = new OAIBTMIndividualQueryBase-139();
    m_query_isSet = false;
    query_string = new QString("");
    m_query_string_isSet = false;
    feature_id_with_occurrence = new QString("");
    m_feature_id_with_occurrence_isSet = false;
    part_studio_mate_connector_query = false;
    m_part_studio_mate_connector_query_isSet = false;
    feature_id = new QString("");
    m_feature_id_isSet = false;
    query_data = new QString("");
    m_query_data_isSet = false;
}

void
OAIBTMPartStudioMateConnectorQuery-1324::cleanup() {
    if(bt_type != nullptr) { 
        delete bt_type;
    }
    if(deterministic_id_list != nullptr) { 
        delete deterministic_id_list;
    }
    if(deterministic_ids != nullptr) { 
        auto arr = deterministic_ids;
        for(auto o: *arr) { 
            delete o;
        }
        delete deterministic_ids;
    }
    if(import_microversion != nullptr) { 
        delete import_microversion;
    }
    if(node_id != nullptr) { 
        delete node_id;
    }
    if(path != nullptr) { 
        auto arr = path;
        for(auto o: *arr) { 
            delete o;
        }
        delete path;
    }
    if(query != nullptr) { 
        delete query;
    }
    if(query_string != nullptr) { 
        delete query_string;
    }
    if(feature_id_with_occurrence != nullptr) { 
        delete feature_id_with_occurrence;
    }

    if(feature_id != nullptr) { 
        delete feature_id;
    }
    if(query_data != nullptr) { 
        delete query_data;
    }
}

OAIBTMPartStudioMateConnectorQuery-1324*
OAIBTMPartStudioMateConnectorQuery-1324::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIBTMPartStudioMateConnectorQuery-1324::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&bt_type, pJson["btType"], "QString", "QString");
    
    ::OpenAPI::setValue(&deterministic_id_list, pJson["deterministicIdList"], "OAIBTMIndividualQueryBase-139", "OAIBTMIndividualQueryBase-139");
    
    
    ::OpenAPI::setValue(&deterministic_ids, pJson["deterministicIds"], "QList", "QString");
    ::OpenAPI::setValue(&import_microversion, pJson["importMicroversion"], "QString", "QString");
    
    ::OpenAPI::setValue(&node_id, pJson["nodeId"], "QString", "QString");
    
    
    ::OpenAPI::setValue(&path, pJson["path"], "QList", "QString");
    ::OpenAPI::setValue(&query, pJson["query"], "OAIBTMIndividualQueryBase-139", "OAIBTMIndividualQueryBase-139");
    
    ::OpenAPI::setValue(&query_string, pJson["queryString"], "QString", "QString");
    
    ::OpenAPI::setValue(&feature_id_with_occurrence, pJson["featureIdWithOccurrence"], "QString", "QString");
    
    ::OpenAPI::setValue(&part_studio_mate_connector_query, pJson["partStudioMateConnectorQuery"], "bool", "");
    
    ::OpenAPI::setValue(&feature_id, pJson["featureId"], "QString", "QString");
    
    ::OpenAPI::setValue(&query_data, pJson["queryData"], "QString", "QString");
    
}

QString
OAIBTMPartStudioMateConnectorQuery-1324::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIBTMPartStudioMateConnectorQuery-1324::asJsonObject() {
    QJsonObject obj;
    if(bt_type != nullptr && *bt_type != QString("")){
        toJsonValue(QString("btType"), bt_type, obj, QString("QString"));
    }
    if((deterministic_id_list != nullptr) && (deterministic_id_list->isSet())){
        toJsonValue(QString("deterministicIdList"), deterministic_id_list, obj, QString("OAIBTMIndividualQueryBase-139"));
    }
    if(deterministic_ids->size() > 0){
        toJsonArray((QList<void*>*)deterministic_ids, obj, "deterministicIds", "QString");
    }
    if(import_microversion != nullptr && *import_microversion != QString("")){
        toJsonValue(QString("importMicroversion"), import_microversion, obj, QString("QString"));
    }
    if(node_id != nullptr && *node_id != QString("")){
        toJsonValue(QString("nodeId"), node_id, obj, QString("QString"));
    }
    if(path->size() > 0){
        toJsonArray((QList<void*>*)path, obj, "path", "QString");
    }
    if((query != nullptr) && (query->isSet())){
        toJsonValue(QString("query"), query, obj, QString("OAIBTMIndividualQueryBase-139"));
    }
    if(query_string != nullptr && *query_string != QString("")){
        toJsonValue(QString("queryString"), query_string, obj, QString("QString"));
    }
    if(feature_id_with_occurrence != nullptr && *feature_id_with_occurrence != QString("")){
        toJsonValue(QString("featureIdWithOccurrence"), feature_id_with_occurrence, obj, QString("QString"));
    }
    if(m_part_studio_mate_connector_query_isSet){
        obj.insert("partStudioMateConnectorQuery", QJsonValue(part_studio_mate_connector_query));
    }
    if(feature_id != nullptr && *feature_id != QString("")){
        toJsonValue(QString("featureId"), feature_id, obj, QString("QString"));
    }
    if(query_data != nullptr && *query_data != QString("")){
        toJsonValue(QString("queryData"), query_data, obj, QString("QString"));
    }

    return obj;
}

QString*
OAIBTMPartStudioMateConnectorQuery-1324::getBtType() {
    return bt_type;
}
void
OAIBTMPartStudioMateConnectorQuery-1324::setBtType(QString* bt_type) {
    this->bt_type = bt_type;
    this->m_bt_type_isSet = true;
}

OAIBTMIndividualQueryBase-139*
OAIBTMPartStudioMateConnectorQuery-1324::getDeterministicIdList() {
    return deterministic_id_list;
}
void
OAIBTMPartStudioMateConnectorQuery-1324::setDeterministicIdList(OAIBTMIndividualQueryBase-139* deterministic_id_list) {
    this->deterministic_id_list = deterministic_id_list;
    this->m_deterministic_id_list_isSet = true;
}

QList<QString*>*
OAIBTMPartStudioMateConnectorQuery-1324::getDeterministicIds() {
    return deterministic_ids;
}
void
OAIBTMPartStudioMateConnectorQuery-1324::setDeterministicIds(QList<QString*>* deterministic_ids) {
    this->deterministic_ids = deterministic_ids;
    this->m_deterministic_ids_isSet = true;
}

QString*
OAIBTMPartStudioMateConnectorQuery-1324::getImportMicroversion() {
    return import_microversion;
}
void
OAIBTMPartStudioMateConnectorQuery-1324::setImportMicroversion(QString* import_microversion) {
    this->import_microversion = import_microversion;
    this->m_import_microversion_isSet = true;
}

QString*
OAIBTMPartStudioMateConnectorQuery-1324::getNodeId() {
    return node_id;
}
void
OAIBTMPartStudioMateConnectorQuery-1324::setNodeId(QString* node_id) {
    this->node_id = node_id;
    this->m_node_id_isSet = true;
}

QList<QString*>*
OAIBTMPartStudioMateConnectorQuery-1324::getPath() {
    return path;
}
void
OAIBTMPartStudioMateConnectorQuery-1324::setPath(QList<QString*>* path) {
    this->path = path;
    this->m_path_isSet = true;
}

OAIBTMIndividualQueryBase-139*
OAIBTMPartStudioMateConnectorQuery-1324::getQuery() {
    return query;
}
void
OAIBTMPartStudioMateConnectorQuery-1324::setQuery(OAIBTMIndividualQueryBase-139* query) {
    this->query = query;
    this->m_query_isSet = true;
}

QString*
OAIBTMPartStudioMateConnectorQuery-1324::getQueryString() {
    return query_string;
}
void
OAIBTMPartStudioMateConnectorQuery-1324::setQueryString(QString* query_string) {
    this->query_string = query_string;
    this->m_query_string_isSet = true;
}

QString*
OAIBTMPartStudioMateConnectorQuery-1324::getFeatureIdWithOccurrence() {
    return feature_id_with_occurrence;
}
void
OAIBTMPartStudioMateConnectorQuery-1324::setFeatureIdWithOccurrence(QString* feature_id_with_occurrence) {
    this->feature_id_with_occurrence = feature_id_with_occurrence;
    this->m_feature_id_with_occurrence_isSet = true;
}

bool
OAIBTMPartStudioMateConnectorQuery-1324::isPartStudioMateConnectorQuery() {
    return part_studio_mate_connector_query;
}
void
OAIBTMPartStudioMateConnectorQuery-1324::setPartStudioMateConnectorQuery(bool part_studio_mate_connector_query) {
    this->part_studio_mate_connector_query = part_studio_mate_connector_query;
    this->m_part_studio_mate_connector_query_isSet = true;
}

QString*
OAIBTMPartStudioMateConnectorQuery-1324::getFeatureId() {
    return feature_id;
}
void
OAIBTMPartStudioMateConnectorQuery-1324::setFeatureId(QString* feature_id) {
    this->feature_id = feature_id;
    this->m_feature_id_isSet = true;
}

QString*
OAIBTMPartStudioMateConnectorQuery-1324::getQueryData() {
    return query_data;
}
void
OAIBTMPartStudioMateConnectorQuery-1324::setQueryData(QString* query_data) {
    this->query_data = query_data;
    this->m_query_data_isSet = true;
}


bool
OAIBTMPartStudioMateConnectorQuery-1324::isSet(){
    bool isObjectUpdated = false;
    do{
        if(bt_type != nullptr && *bt_type != QString("")){ isObjectUpdated = true; break;}
        if(deterministic_id_list != nullptr && deterministic_id_list->isSet()){ isObjectUpdated = true; break;}
        if(deterministic_ids->size() > 0){ isObjectUpdated = true; break;}
        if(import_microversion != nullptr && *import_microversion != QString("")){ isObjectUpdated = true; break;}
        if(node_id != nullptr && *node_id != QString("")){ isObjectUpdated = true; break;}
        if(path->size() > 0){ isObjectUpdated = true; break;}
        if(query != nullptr && query->isSet()){ isObjectUpdated = true; break;}
        if(query_string != nullptr && *query_string != QString("")){ isObjectUpdated = true; break;}
        if(feature_id_with_occurrence != nullptr && *feature_id_with_occurrence != QString("")){ isObjectUpdated = true; break;}
        if(m_part_studio_mate_connector_query_isSet){ isObjectUpdated = true; break;}
        if(feature_id != nullptr && *feature_id != QString("")){ isObjectUpdated = true; break;}
        if(query_data != nullptr && *query_data != QString("")){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

