/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * OpenAPI spec version: 1.111
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIBTElementReference-725.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIBTElementReference-725::OAIBTElementReference-725(QString json) {
    init();
    this->fromJson(json);
}

OAIBTElementReference-725::OAIBTElementReference-725() {
    init();
}

OAIBTElementReference-725::~OAIBTElementReference-725() {
    this->cleanup();
}

void
OAIBTElementReference-725::init() {
    bt_type = new QString("");
    m_bt_type_isSet = false;
    configured = false;
    m_configured_isSet = false;
    element_id = new QString("");
    m_element_id_isSet = false;
    external_document_with_version = new OAIBTDocumentWithVersionId();
    m_external_document_with_version_isSet = false;
    external_document_with_version_and_element_id = new OAIBTDocumentWithVersionAndElementId();
    m_external_document_with_version_and_element_id_isSet = false;
    external_reference = false;
    m_external_reference_isSet = false;
    full_element_id = new OAIBTFullElementId-756();
    m_full_element_id_isSet = false;
    microversion_id_and_configuration = new OAIBTMicroversionIdAndConfiguration-2338();
    m_microversion_id_and_configuration_isSet = false;
    node_id = new QString("");
    m_node_id_isSet = false;
}

void
OAIBTElementReference-725::cleanup() {
    if(bt_type != nullptr) { 
        delete bt_type;
    }

    if(element_id != nullptr) { 
        delete element_id;
    }
    if(external_document_with_version != nullptr) { 
        delete external_document_with_version;
    }
    if(external_document_with_version_and_element_id != nullptr) { 
        delete external_document_with_version_and_element_id;
    }

    if(full_element_id != nullptr) { 
        delete full_element_id;
    }
    if(microversion_id_and_configuration != nullptr) { 
        delete microversion_id_and_configuration;
    }
    if(node_id != nullptr) { 
        delete node_id;
    }
}

OAIBTElementReference-725*
OAIBTElementReference-725::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIBTElementReference-725::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&bt_type, pJson["btType"], "QString", "QString");
    
    ::OpenAPI::setValue(&configured, pJson["configured"], "bool", "");
    
    ::OpenAPI::setValue(&element_id, pJson["elementId"], "QString", "QString");
    
    ::OpenAPI::setValue(&external_document_with_version, pJson["externalDocumentWithVersion"], "OAIBTDocumentWithVersionId", "OAIBTDocumentWithVersionId");
    
    ::OpenAPI::setValue(&external_document_with_version_and_element_id, pJson["externalDocumentWithVersionAndElementId"], "OAIBTDocumentWithVersionAndElementId", "OAIBTDocumentWithVersionAndElementId");
    
    ::OpenAPI::setValue(&external_reference, pJson["externalReference"], "bool", "");
    
    ::OpenAPI::setValue(&full_element_id, pJson["fullElementId"], "OAIBTFullElementId-756", "OAIBTFullElementId-756");
    
    ::OpenAPI::setValue(&microversion_id_and_configuration, pJson["microversionIdAndConfiguration"], "OAIBTMicroversionIdAndConfiguration-2338", "OAIBTMicroversionIdAndConfiguration-2338");
    
    ::OpenAPI::setValue(&node_id, pJson["nodeId"], "QString", "QString");
    
}

QString
OAIBTElementReference-725::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIBTElementReference-725::asJsonObject() {
    QJsonObject obj;
    if(bt_type != nullptr && *bt_type != QString("")){
        toJsonValue(QString("btType"), bt_type, obj, QString("QString"));
    }
    if(m_configured_isSet){
        obj.insert("configured", QJsonValue(configured));
    }
    if(element_id != nullptr && *element_id != QString("")){
        toJsonValue(QString("elementId"), element_id, obj, QString("QString"));
    }
    if((external_document_with_version != nullptr) && (external_document_with_version->isSet())){
        toJsonValue(QString("externalDocumentWithVersion"), external_document_with_version, obj, QString("OAIBTDocumentWithVersionId"));
    }
    if((external_document_with_version_and_element_id != nullptr) && (external_document_with_version_and_element_id->isSet())){
        toJsonValue(QString("externalDocumentWithVersionAndElementId"), external_document_with_version_and_element_id, obj, QString("OAIBTDocumentWithVersionAndElementId"));
    }
    if(m_external_reference_isSet){
        obj.insert("externalReference", QJsonValue(external_reference));
    }
    if((full_element_id != nullptr) && (full_element_id->isSet())){
        toJsonValue(QString("fullElementId"), full_element_id, obj, QString("OAIBTFullElementId-756"));
    }
    if((microversion_id_and_configuration != nullptr) && (microversion_id_and_configuration->isSet())){
        toJsonValue(QString("microversionIdAndConfiguration"), microversion_id_and_configuration, obj, QString("OAIBTMicroversionIdAndConfiguration-2338"));
    }
    if(node_id != nullptr && *node_id != QString("")){
        toJsonValue(QString("nodeId"), node_id, obj, QString("QString"));
    }

    return obj;
}

QString*
OAIBTElementReference-725::getBtType() {
    return bt_type;
}
void
OAIBTElementReference-725::setBtType(QString* bt_type) {
    this->bt_type = bt_type;
    this->m_bt_type_isSet = true;
}

bool
OAIBTElementReference-725::isConfigured() {
    return configured;
}
void
OAIBTElementReference-725::setConfigured(bool configured) {
    this->configured = configured;
    this->m_configured_isSet = true;
}

QString*
OAIBTElementReference-725::getElementId() {
    return element_id;
}
void
OAIBTElementReference-725::setElementId(QString* element_id) {
    this->element_id = element_id;
    this->m_element_id_isSet = true;
}

OAIBTDocumentWithVersionId*
OAIBTElementReference-725::getExternalDocumentWithVersion() {
    return external_document_with_version;
}
void
OAIBTElementReference-725::setExternalDocumentWithVersion(OAIBTDocumentWithVersionId* external_document_with_version) {
    this->external_document_with_version = external_document_with_version;
    this->m_external_document_with_version_isSet = true;
}

OAIBTDocumentWithVersionAndElementId*
OAIBTElementReference-725::getExternalDocumentWithVersionAndElementId() {
    return external_document_with_version_and_element_id;
}
void
OAIBTElementReference-725::setExternalDocumentWithVersionAndElementId(OAIBTDocumentWithVersionAndElementId* external_document_with_version_and_element_id) {
    this->external_document_with_version_and_element_id = external_document_with_version_and_element_id;
    this->m_external_document_with_version_and_element_id_isSet = true;
}

bool
OAIBTElementReference-725::isExternalReference() {
    return external_reference;
}
void
OAIBTElementReference-725::setExternalReference(bool external_reference) {
    this->external_reference = external_reference;
    this->m_external_reference_isSet = true;
}

OAIBTFullElementId-756*
OAIBTElementReference-725::getFullElementId() {
    return full_element_id;
}
void
OAIBTElementReference-725::setFullElementId(OAIBTFullElementId-756* full_element_id) {
    this->full_element_id = full_element_id;
    this->m_full_element_id_isSet = true;
}

OAIBTMicroversionIdAndConfiguration-2338*
OAIBTElementReference-725::getMicroversionIdAndConfiguration() {
    return microversion_id_and_configuration;
}
void
OAIBTElementReference-725::setMicroversionIdAndConfiguration(OAIBTMicroversionIdAndConfiguration-2338* microversion_id_and_configuration) {
    this->microversion_id_and_configuration = microversion_id_and_configuration;
    this->m_microversion_id_and_configuration_isSet = true;
}

QString*
OAIBTElementReference-725::getNodeId() {
    return node_id;
}
void
OAIBTElementReference-725::setNodeId(QString* node_id) {
    this->node_id = node_id;
    this->m_node_id_isSet = true;
}


bool
OAIBTElementReference-725::isSet(){
    bool isObjectUpdated = false;
    do{
        if(bt_type != nullptr && *bt_type != QString("")){ isObjectUpdated = true; break;}
        if(m_configured_isSet){ isObjectUpdated = true; break;}
        if(element_id != nullptr && *element_id != QString("")){ isObjectUpdated = true; break;}
        if(external_document_with_version != nullptr && external_document_with_version->isSet()){ isObjectUpdated = true; break;}
        if(external_document_with_version_and_element_id != nullptr && external_document_with_version_and_element_id->isSet()){ isObjectUpdated = true; break;}
        if(m_external_reference_isSet){ isObjectUpdated = true; break;}
        if(full_element_id != nullptr && full_element_id->isSet()){ isObjectUpdated = true; break;}
        if(microversion_id_and_configuration != nullptr && microversion_id_and_configuration->isSet()){ isObjectUpdated = true; break;}
        if(node_id != nullptr && *node_id != QString("")){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

