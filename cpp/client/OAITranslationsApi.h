/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * OpenAPI spec version: 1.111
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef _OAI_OAITranslationsApi_H_
#define _OAI_OAITranslationsApi_H_

#include "OAIHttpRequest.h"

#include "OAIBTListResponseBTTranslationRequestInfo.h"
#include "OAIBTModelFormatFullInfo.h"
#include "OAIBTTranslationRequestInfo.h"
#include <QString>

#include <QObject>

namespace OpenAPI {

class OAITranslationsApi: public QObject {
    Q_OBJECT

public:
    OAITranslationsApi();
    OAITranslationsApi(QString host, QString basePath);
    ~OAITranslationsApi();

    QString host;
    QString basePath;
    QMap<QString, QString> defaultHeaders;

    void createTranslation(QString* did, QString* wid);
    void deleteTranslation(QString* tid);
    void getAllTranslatorFormats();
    void getDocumentTranslations(QString* did, qint32 offset, qint32 limit);
    void getTranslation(QString* tid);
    
private:
    void createTranslationCallback (OAIHttpRequestWorker * worker);
    void deleteTranslationCallback (OAIHttpRequestWorker * worker);
    void getAllTranslatorFormatsCallback (OAIHttpRequestWorker * worker);
    void getDocumentTranslationsCallback (OAIHttpRequestWorker * worker);
    void getTranslationCallback (OAIHttpRequestWorker * worker);
    
signals:
    void createTranslationSignal(OAIBTTranslationRequestInfo* summary);
    void deleteTranslationSignal();
    void getAllTranslatorFormatsSignal(QList<OAIBTModelFormatFullInfo*>* summary);
    void getDocumentTranslationsSignal(OAIBTListResponseBTTranslationRequestInfo* summary);
    void getTranslationSignal(OAIBTTranslationRequestInfo* summary);
    
    void createTranslationSignalE(OAIBTTranslationRequestInfo* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void deleteTranslationSignalE(QNetworkReply::NetworkError error_type, QString& error_str);
    void getAllTranslatorFormatsSignalE(QList<OAIBTModelFormatFullInfo*>* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void getDocumentTranslationsSignalE(OAIBTListResponseBTTranslationRequestInfo* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void getTranslationSignalE(OAIBTTranslationRequestInfo* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    
    void createTranslationSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void deleteTranslationSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void getAllTranslatorFormatsSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void getDocumentTranslationsSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void getTranslationSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    
};

}
#endif
