/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * OpenAPI spec version: 1.111
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAssembliesApi.h"
#include "OAIHelpers.h"
#include "OAIModelFactory.h"
#include "OAIQObjectWrapper.h"

#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAIAssembliesApi::OAIAssembliesApi() {}

OAIAssembliesApi::~OAIAssembliesApi() {}

OAIAssembliesApi::OAIAssembliesApi(QString host, QString basePath) {
    this->host = host;
    this->basePath = basePath;
}

void
OAIAssembliesApi::addFeature(QString* did, QString* wvm, QString* wvmid, QString* eid, QString*& body) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/api/assemblies/d/{did}/{wvm}/{wvmid}/e/{eid}/features");

    QString didPathParam("{"); didPathParam.append("did").append("}");
    fullPath.replace(didPathParam, stringValue(did));
    QString wvmPathParam("{"); wvmPathParam.append("wvm").append("}");
    fullPath.replace(wvmPathParam, stringValue(wvm));
    QString wvmidPathParam("{"); wvmidPathParam.append("wvmid").append("}");
    fullPath.replace(wvmidPathParam, stringValue(wvmid));
    QString eidPathParam("{"); eidPathParam.append("eid").append("}");
    fullPath.replace(eidPathParam, stringValue(eid));


    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "POST");


    
    QString output(*body);
    input.request_body.append(output);
    


    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIAssembliesApi::addFeatureCallback);

    worker->execute(&input);
}

void
OAIAssembliesApi::addFeatureCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QString json(worker->response);
    OAIBTFeatureDefinitionResponse-1617* output = static_cast<OAIBTFeatureDefinitionResponse-1617*>(create(json, QString("OAIBTFeatureDefinitionResponse-1617")));
    auto wrapper = new OAIQObjectWrapper<OAIBTFeatureDefinitionResponse-1617*> (output);
    wrapper->deleteLater();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit addFeatureSignal(output);
    } else {
        emit addFeatureSignalE(output, error_type, error_str);
        emit addFeatureSignalEFull(worker, error_type, error_str);
    }
}

void
OAIAssembliesApi::createAssembly(QString* did, QString* wid, OAIBTModelElementParams& oaibt_model_element_params) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/api/assemblies/d/{did}/w/{wid}");

    QString didPathParam("{"); didPathParam.append("did").append("}");
    fullPath.replace(didPathParam, stringValue(did));
    QString widPathParam("{"); widPathParam.append("wid").append("}");
    fullPath.replace(widPathParam, stringValue(wid));


    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "POST");


    
    QString output = oaibt_model_element_params.asJson();
    input.request_body.append(output);
    


    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIAssembliesApi::createAssemblyCallback);

    worker->execute(&input);
}

void
OAIAssembliesApi::createAssemblyCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QString json(worker->response);
    OAIBTDocumentElementInfo* output = static_cast<OAIBTDocumentElementInfo*>(create(json, QString("OAIBTDocumentElementInfo")));
    auto wrapper = new OAIQObjectWrapper<OAIBTDocumentElementInfo*> (output);
    wrapper->deleteLater();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit createAssemblySignal(output);
    } else {
        emit createAssemblySignalE(output, error_type, error_str);
        emit createAssemblySignalEFull(worker, error_type, error_str);
    }
}

void
OAIAssembliesApi::createInstance(QString* did, QString* wid, QString* eid, OAIBTAssemblyInstanceDefinitionParams& oaibt_assembly_instance_definition_params) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/api/assemblies/d/{did}/w/{wid}/e/{eid}/instances");

    QString didPathParam("{"); didPathParam.append("did").append("}");
    fullPath.replace(didPathParam, stringValue(did));
    QString widPathParam("{"); widPathParam.append("wid").append("}");
    fullPath.replace(widPathParam, stringValue(wid));
    QString eidPathParam("{"); eidPathParam.append("eid").append("}");
    fullPath.replace(eidPathParam, stringValue(eid));


    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "POST");


    
    QString output = oaibt_assembly_instance_definition_params.asJson();
    input.request_body.append(output);
    


    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIAssembliesApi::createInstanceCallback);

    worker->execute(&input);
}

void
OAIAssembliesApi::createInstanceCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QList<OAIBTOccurrence-74*>* output = new QList<OAIBTOccurrence-74*>();
    QString json(worker->response);
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    auto wrapper = new OAIQObjectWrapper<QList<OAIBTOccurrence-74*>*> (output);
    wrapper->deleteLater();
    foreach(QJsonValue obj, jsonArray) {
        OAIBTOccurrence-74* o = new OAIBTOccurrence-74();
        QJsonObject jv = obj.toObject();
        QJsonObject * ptr = (QJsonObject*)&jv;
        o->fromJsonObject(*ptr);
        auto objwrapper = new OAIQObjectWrapper<OAIBTOccurrence-74*> (o);
        objwrapper->deleteLater();
        output->append(o);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit createInstanceSignal(output);
    } else {
        emit createInstanceSignalE(output, error_type, error_str);
        emit createInstanceSignalEFull(worker, error_type, error_str);
    }
}

void
OAIAssembliesApi::deleteFeature(QString* did, QString* wid, QString* eid, QString* fid) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/api/assemblies/d/{did}/w/{wid}/e/{eid}/features/featureid/{fid}");

    QString didPathParam("{"); didPathParam.append("did").append("}");
    fullPath.replace(didPathParam, stringValue(did));
    QString widPathParam("{"); widPathParam.append("wid").append("}");
    fullPath.replace(widPathParam, stringValue(wid));
    QString eidPathParam("{"); eidPathParam.append("eid").append("}");
    fullPath.replace(eidPathParam, stringValue(eid));
    QString fidPathParam("{"); fidPathParam.append("fid").append("}");
    fullPath.replace(fidPathParam, stringValue(fid));


    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "DELETE");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIAssembliesApi::deleteFeatureCallback);

    worker->execute(&input);
}

void
OAIAssembliesApi::deleteFeatureCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QString json(worker->response);
    OAIBTFeatureApiBase-1430* output = static_cast<OAIBTFeatureApiBase-1430*>(create(json, QString("OAIBTFeatureApiBase-1430")));
    auto wrapper = new OAIQObjectWrapper<OAIBTFeatureApiBase-1430*> (output);
    wrapper->deleteLater();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit deleteFeatureSignal(output);
    } else {
        emit deleteFeatureSignalE(output, error_type, error_str);
        emit deleteFeatureSignalEFull(worker, error_type, error_str);
    }
}

void
OAIAssembliesApi::deleteInstance(QString* did, QString* eid, QString* wid, QString* nid) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/api/assemblies/d/{did}/w/{wid}/e/{eid}/instance/nodeid/{nid}");

    QString didPathParam("{"); didPathParam.append("did").append("}");
    fullPath.replace(didPathParam, stringValue(did));
    QString eidPathParam("{"); eidPathParam.append("eid").append("}");
    fullPath.replace(eidPathParam, stringValue(eid));
    QString widPathParam("{"); widPathParam.append("wid").append("}");
    fullPath.replace(widPathParam, stringValue(wid));
    QString nidPathParam("{"); nidPathParam.append("nid").append("}");
    fullPath.replace(nidPathParam, stringValue(nid));


    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "DELETE");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIAssembliesApi::deleteInstanceCallback);

    worker->execute(&input);
}

void
OAIAssembliesApi::deleteInstanceCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit deleteInstanceSignal();
    } else {
        emit deleteInstanceSignalE(error_type, error_str);
        emit deleteInstanceSignalEFull(worker, error_type, error_str);
    }
}

void
OAIAssembliesApi::getAssemblyBoundingBoxes(QString* did, QString* wvm, QString* wvmid, QString* eid, QString* link_document_id, bool include_hidden, QString* display_state_id, QString* configuration, QString* exploded_view_id) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/api/assemblies/d/{did}/{wvm}/{wvmid}/e/{eid}/boundingboxes");

    QString didPathParam("{"); didPathParam.append("did").append("}");
    fullPath.replace(didPathParam, stringValue(did));
    QString wvmPathParam("{"); wvmPathParam.append("wvm").append("}");
    fullPath.replace(wvmPathParam, stringValue(wvm));
    QString wvmidPathParam("{"); wvmidPathParam.append("wvmid").append("}");
    fullPath.replace(wvmidPathParam, stringValue(wvmid));
    QString eidPathParam("{"); eidPathParam.append("eid").append("}");
    fullPath.replace(eidPathParam, stringValue(eid));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("linkDocumentId"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(link_document_id)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("includeHidden"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(include_hidden)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("displayStateId"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(display_state_id)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("configuration"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(configuration)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("explodedViewId"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(exploded_view_id)));


    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIAssembliesApi::getAssemblyBoundingBoxesCallback);

    worker->execute(&input);
}

void
OAIAssembliesApi::getAssemblyBoundingBoxesCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QString json(worker->response);
    OAIBTBoundingBoxInfo* output = static_cast<OAIBTBoundingBoxInfo*>(create(json, QString("OAIBTBoundingBoxInfo")));
    auto wrapper = new OAIQObjectWrapper<OAIBTBoundingBoxInfo*> (output);
    wrapper->deleteLater();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit getAssemblyBoundingBoxesSignal(output);
    } else {
        emit getAssemblyBoundingBoxesSignalE(output, error_type, error_str);
        emit getAssemblyBoundingBoxesSignalEFull(worker, error_type, error_str);
    }
}

void
OAIAssembliesApi::getAssemblyDefinition(QString* did, QString* wvm, QString* wvmid, QString* eid, QString* link_document_id, bool include_mate_features, bool include_non_solids, bool include_mate_connectors, QString* configuration, QString* exploded_view_id) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/api/assemblies/d/{did}/{wvm}/{wvmid}/e/{eid}");

    QString didPathParam("{"); didPathParam.append("did").append("}");
    fullPath.replace(didPathParam, stringValue(did));
    QString wvmPathParam("{"); wvmPathParam.append("wvm").append("}");
    fullPath.replace(wvmPathParam, stringValue(wvm));
    QString wvmidPathParam("{"); wvmidPathParam.append("wvmid").append("}");
    fullPath.replace(wvmidPathParam, stringValue(wvmid));
    QString eidPathParam("{"); eidPathParam.append("eid").append("}");
    fullPath.replace(eidPathParam, stringValue(eid));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("linkDocumentId"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(link_document_id)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("includeMateFeatures"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(include_mate_features)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("includeNonSolids"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(include_non_solids)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("includeMateConnectors"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(include_mate_connectors)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("configuration"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(configuration)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("explodedViewId"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(exploded_view_id)));


    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIAssembliesApi::getAssemblyDefinitionCallback);

    worker->execute(&input);
}

void
OAIAssembliesApi::getAssemblyDefinitionCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QString json(worker->response);
    OAIBTAssemblyDefinitionInfo* output = static_cast<OAIBTAssemblyDefinitionInfo*>(create(json, QString("OAIBTAssemblyDefinitionInfo")));
    auto wrapper = new OAIQObjectWrapper<OAIBTAssemblyDefinitionInfo*> (output);
    wrapper->deleteLater();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit getAssemblyDefinitionSignal(output);
    } else {
        emit getAssemblyDefinitionSignalE(output, error_type, error_str);
        emit getAssemblyDefinitionSignalEFull(worker, error_type, error_str);
    }
}

void
OAIAssembliesApi::getAssemblyShadedViews(QString* did, QString* wvm, QString* wvmid, QString* eid, QString* link_document_id, QString* view_matrix, qint32 output_height, qint32 output_width, double pixel_size, QString* edges, bool show_all_parts, bool include_surfaces, bool use_anti_aliasing, QString* display_state_id, QString* configuration, QString* exploded_view_id) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/api/assemblies/d/{did}/{wvm}/{wvmid}/e/{eid}/shadedviews");

    QString didPathParam("{"); didPathParam.append("did").append("}");
    fullPath.replace(didPathParam, stringValue(did));
    QString wvmPathParam("{"); wvmPathParam.append("wvm").append("}");
    fullPath.replace(wvmPathParam, stringValue(wvm));
    QString wvmidPathParam("{"); wvmidPathParam.append("wvmid").append("}");
    fullPath.replace(wvmidPathParam, stringValue(wvmid));
    QString eidPathParam("{"); eidPathParam.append("eid").append("}");
    fullPath.replace(eidPathParam, stringValue(eid));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("linkDocumentId"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(link_document_id)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("viewMatrix"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(view_matrix)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("outputHeight"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(output_height)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("outputWidth"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(output_width)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("pixelSize"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(pixel_size)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("edges"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(edges)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("showAllParts"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(show_all_parts)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("includeSurfaces"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(include_surfaces)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("useAntiAliasing"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(use_anti_aliasing)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("displayStateId"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(display_state_id)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("configuration"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(configuration)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("explodedViewId"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(exploded_view_id)));


    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIAssembliesApi::getAssemblyShadedViewsCallback);

    worker->execute(&input);
}

void
OAIAssembliesApi::getAssemblyShadedViewsCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QString json(worker->response);
    OAIBTShadedViewsInfo* output = static_cast<OAIBTShadedViewsInfo*>(create(json, QString("OAIBTShadedViewsInfo")));
    auto wrapper = new OAIQObjectWrapper<OAIBTShadedViewsInfo*> (output);
    wrapper->deleteLater();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit getAssemblyShadedViewsSignal(output);
    } else {
        emit getAssemblyShadedViewsSignalE(output, error_type, error_str);
        emit getAssemblyShadedViewsSignalEFull(worker, error_type, error_str);
    }
}

void
OAIAssembliesApi::getBillOfMaterials(QString* did, QString* wvm, QString* wvmid, QString* eid, QString* metadata_workspace_id, QList<QString*>* bom_column_ids, bool indented, bool multi_level, bool generate_if_absent, QString* link_document_id, QString* configuration) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/api/assemblies/d/{did}/{wvm}/{wvmid}/e/{eid}/bom");

    QString didPathParam("{"); didPathParam.append("did").append("}");
    fullPath.replace(didPathParam, stringValue(did));
    QString wvmPathParam("{"); wvmPathParam.append("wvm").append("}");
    fullPath.replace(wvmPathParam, stringValue(wvm));
    QString wvmidPathParam("{"); wvmidPathParam.append("wvmid").append("}");
    fullPath.replace(wvmidPathParam, stringValue(wvmid));
    QString eidPathParam("{"); eidPathParam.append("eid").append("}");
    fullPath.replace(eidPathParam, stringValue(eid));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("metadataWorkspaceId"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(metadata_workspace_id)));



    if (bom_column_ids->size() > 0) {
      if (QString("multi").indexOf("multi") == 0) {
        foreach(QString* t, *bom_column_ids) {
          if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
          else
            fullPath.append("?");
          fullPath.append("bomColumnIds=").append(stringValue(t));
        }
      }
      else if (QString("multi").indexOf("ssv") == 0) {
        if (fullPath.indexOf("?") > 0)
          fullPath.append("&");
        else
          fullPath.append("?");
        fullPath.append("bomColumnIds=");
        qint32 count = 0;
        foreach(QString* t, *bom_column_ids) {
          if (count > 0) {
            fullPath.append(" ");
          }
          fullPath.append(stringValue(t));
        }
      }
      else if (QString("multi").indexOf("tsv") == 0) {
        if (fullPath.indexOf("?") > 0)
          fullPath.append("&");
        else
          fullPath.append("?");
        fullPath.append("bomColumnIds=");
        qint32 count = 0;
        foreach(QString* t, *bom_column_ids) {
          if (count > 0) {
            fullPath.append("\t");
          }
          fullPath.append(stringValue(t));
        }
      }
    }

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("indented"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(indented)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("multiLevel"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(multi_level)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("generateIfAbsent"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(generate_if_absent)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("linkDocumentId"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(link_document_id)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("configuration"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(configuration)));


    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIAssembliesApi::getBillOfMaterialsCallback);

    worker->execute(&input);
}

void
OAIAssembliesApi::getBillOfMaterialsCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QString json(worker->response);
    OAIJsonNode* output = static_cast<OAIJsonNode*>(create(json, QString("OAIJsonNode")));
    auto wrapper = new OAIQObjectWrapper<OAIJsonNode*> (output);
    wrapper->deleteLater();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit getBillOfMaterialsSignal(output);
    } else {
        emit getBillOfMaterialsSignalE(output, error_type, error_str);
        emit getBillOfMaterialsSignalEFull(worker, error_type, error_str);
    }
}

void
OAIAssembliesApi::getFeatureSpecs(QString* did, QString* wvm, QString* wvmid, QString* eid) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/api/assemblies/d/{did}/{wvm}/{wvmid}/e/{eid}/featurespecs");

    QString didPathParam("{"); didPathParam.append("did").append("}");
    fullPath.replace(didPathParam, stringValue(did));
    QString wvmPathParam("{"); wvmPathParam.append("wvm").append("}");
    fullPath.replace(wvmPathParam, stringValue(wvm));
    QString wvmidPathParam("{"); wvmidPathParam.append("wvmid").append("}");
    fullPath.replace(wvmidPathParam, stringValue(wvmid));
    QString eidPathParam("{"); eidPathParam.append("eid").append("}");
    fullPath.replace(eidPathParam, stringValue(eid));


    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIAssembliesApi::getFeatureSpecsCallback);

    worker->execute(&input);
}

void
OAIAssembliesApi::getFeatureSpecsCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QString json(worker->response);
    OAIBTFeatureSpecsResponse-664* output = static_cast<OAIBTFeatureSpecsResponse-664*>(create(json, QString("OAIBTFeatureSpecsResponse-664")));
    auto wrapper = new OAIQObjectWrapper<OAIBTFeatureSpecsResponse-664*> (output);
    wrapper->deleteLater();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit getFeatureSpecsSignal(output);
    } else {
        emit getFeatureSpecsSignalE(output, error_type, error_str);
        emit getFeatureSpecsSignalEFull(worker, error_type, error_str);
    }
}

void
OAIAssembliesApi::getFeatures(QString* did, QString* wvm, QString* wvmid, QString* eid, QList<QString*>* feature_id, QString* link_document_id) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/api/assemblies/d/{did}/{wvm}/{wvmid}/e/{eid}/features");

    QString didPathParam("{"); didPathParam.append("did").append("}");
    fullPath.replace(didPathParam, stringValue(did));
    QString wvmPathParam("{"); wvmPathParam.append("wvm").append("}");
    fullPath.replace(wvmPathParam, stringValue(wvm));
    QString wvmidPathParam("{"); wvmidPathParam.append("wvmid").append("}");
    fullPath.replace(wvmidPathParam, stringValue(wvmid));
    QString eidPathParam("{"); eidPathParam.append("eid").append("}");
    fullPath.replace(eidPathParam, stringValue(eid));



    if (feature_id->size() > 0) {
      if (QString("multi").indexOf("multi") == 0) {
        foreach(QString* t, *feature_id) {
          if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
          else
            fullPath.append("?");
          fullPath.append("featureId=").append(stringValue(t));
        }
      }
      else if (QString("multi").indexOf("ssv") == 0) {
        if (fullPath.indexOf("?") > 0)
          fullPath.append("&");
        else
          fullPath.append("?");
        fullPath.append("featureId=");
        qint32 count = 0;
        foreach(QString* t, *feature_id) {
          if (count > 0) {
            fullPath.append(" ");
          }
          fullPath.append(stringValue(t));
        }
      }
      else if (QString("multi").indexOf("tsv") == 0) {
        if (fullPath.indexOf("?") > 0)
          fullPath.append("&");
        else
          fullPath.append("?");
        fullPath.append("featureId=");
        qint32 count = 0;
        foreach(QString* t, *feature_id) {
          if (count > 0) {
            fullPath.append("\t");
          }
          fullPath.append(stringValue(t));
        }
      }
    }

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("linkDocumentId"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(link_document_id)));


    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIAssembliesApi::getFeaturesCallback);

    worker->execute(&input);
}

void
OAIAssembliesApi::getFeaturesCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QString json(worker->response);
    OAIBTAssemblyFeatureListResponse-1174* output = static_cast<OAIBTAssemblyFeatureListResponse-1174*>(create(json, QString("OAIBTAssemblyFeatureListResponse-1174")));
    auto wrapper = new OAIQObjectWrapper<OAIBTAssemblyFeatureListResponse-1174*> (output);
    wrapper->deleteLater();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit getFeaturesSignal(output);
    } else {
        emit getFeaturesSignalE(output, error_type, error_str);
        emit getFeaturesSignalEFull(worker, error_type, error_str);
    }
}

void
OAIAssembliesApi::getNamedViews(QString* did, QString* eid, bool skip_perspective, QString* link_document_id) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/api/assemblies/d/{did}/e/{eid}/namedViews");

    QString didPathParam("{"); didPathParam.append("did").append("}");
    fullPath.replace(didPathParam, stringValue(did));
    QString eidPathParam("{"); eidPathParam.append("eid").append("}");
    fullPath.replace(eidPathParam, stringValue(eid));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("skipPerspective"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(skip_perspective)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("linkDocumentId"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(link_document_id)));


    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIAssembliesApi::getNamedViewsCallback);

    worker->execute(&input);
}

void
OAIAssembliesApi::getNamedViewsCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QString json(worker->response);
    OAIBTNamedViewsInfo* output = static_cast<OAIBTNamedViewsInfo*>(create(json, QString("OAIBTNamedViewsInfo")));
    auto wrapper = new OAIQObjectWrapper<OAIBTNamedViewsInfo*> (output);
    wrapper->deleteLater();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit getNamedViewsSignal(output);
    } else {
        emit getNamedViewsSignalE(output, error_type, error_str);
        emit getNamedViewsSignalEFull(worker, error_type, error_str);
    }
}

void
OAIAssembliesApi::getOrCreateBillOfMaterialsElement(QString* did, QString* wid, QString* eid) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/api/assemblies/d/{did}/w/{wid}/e/{eid}/bomelement");

    QString didPathParam("{"); didPathParam.append("did").append("}");
    fullPath.replace(didPathParam, stringValue(did));
    QString widPathParam("{"); widPathParam.append("wid").append("}");
    fullPath.replace(widPathParam, stringValue(wid));
    QString eidPathParam("{"); eidPathParam.append("eid").append("}");
    fullPath.replace(eidPathParam, stringValue(eid));


    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "POST");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIAssembliesApi::getOrCreateBillOfMaterialsElementCallback);

    worker->execute(&input);
}

void
OAIAssembliesApi::getOrCreateBillOfMaterialsElementCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QString json(worker->response);
    OAIBTDocumentElementInfo* output = static_cast<OAIBTDocumentElementInfo*>(create(json, QString("OAIBTDocumentElementInfo")));
    auto wrapper = new OAIQObjectWrapper<OAIBTDocumentElementInfo*> (output);
    wrapper->deleteLater();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit getOrCreateBillOfMaterialsElementSignal(output);
    } else {
        emit getOrCreateBillOfMaterialsElementSignalE(output, error_type, error_str);
        emit getOrCreateBillOfMaterialsElementSignalEFull(worker, error_type, error_str);
    }
}

void
OAIAssembliesApi::getTranslatorFormats(QString* did, QString* wid, QString* eid, bool check_content) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/api/assemblies/d/{did}/w/{wid}/e/{eid}/translationformats");

    QString didPathParam("{"); didPathParam.append("did").append("}");
    fullPath.replace(didPathParam, stringValue(did));
    QString widPathParam("{"); widPathParam.append("wid").append("}");
    fullPath.replace(widPathParam, stringValue(wid));
    QString eidPathParam("{"); eidPathParam.append("eid").append("}");
    fullPath.replace(eidPathParam, stringValue(eid));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("checkContent"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(check_content)));


    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIAssembliesApi::getTranslatorFormatsCallback);

    worker->execute(&input);
}

void
OAIAssembliesApi::getTranslatorFormatsCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QList<OAIBTModelFormatInfo*>* output = new QList<OAIBTModelFormatInfo*>();
    QString json(worker->response);
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    auto wrapper = new OAIQObjectWrapper<QList<OAIBTModelFormatInfo*>*> (output);
    wrapper->deleteLater();
    foreach(QJsonValue obj, jsonArray) {
        OAIBTModelFormatInfo* o = new OAIBTModelFormatInfo();
        QJsonObject jv = obj.toObject();
        QJsonObject * ptr = (QJsonObject*)&jv;
        o->fromJsonObject(*ptr);
        auto objwrapper = new OAIQObjectWrapper<OAIBTModelFormatInfo*> (o);
        objwrapper->deleteLater();
        output->append(o);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit getTranslatorFormatsSignal(output);
    } else {
        emit getTranslatorFormatsSignalE(output, error_type, error_str);
        emit getTranslatorFormatsSignalEFull(worker, error_type, error_str);
    }
}

void
OAIAssembliesApi::insertTransformedInstances(QString* did, QString* eid, QString* wid, OAIBTAssemblyTransformedInstancesDefinitionParams& oaibt_assembly_transformed_instances_definition_params) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/api/assemblies/d/{did}/w/{wid}/e/{eid}/transformedinstances");

    QString didPathParam("{"); didPathParam.append("did").append("}");
    fullPath.replace(didPathParam, stringValue(did));
    QString eidPathParam("{"); eidPathParam.append("eid").append("}");
    fullPath.replace(eidPathParam, stringValue(eid));
    QString widPathParam("{"); widPathParam.append("wid").append("}");
    fullPath.replace(widPathParam, stringValue(wid));


    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "POST");


    
    QString output = oaibt_assembly_transformed_instances_definition_params.asJson();
    input.request_body.append(output);
    


    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIAssembliesApi::insertTransformedInstancesCallback);

    worker->execute(&input);
}

void
OAIAssembliesApi::insertTransformedInstancesCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QString json(worker->response);
    OAIBTAssemblyInsertTransformedInstancesResponse* output = static_cast<OAIBTAssemblyInsertTransformedInstancesResponse*>(create(json, QString("OAIBTAssemblyInsertTransformedInstancesResponse")));
    auto wrapper = new OAIQObjectWrapper<OAIBTAssemblyInsertTransformedInstancesResponse*> (output);
    wrapper->deleteLater();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit insertTransformedInstancesSignal(output);
    } else {
        emit insertTransformedInstancesSignalE(output, error_type, error_str);
        emit insertTransformedInstancesSignalEFull(worker, error_type, error_str);
    }
}

void
OAIAssembliesApi::transformOccurrences(QString* did, QString* eid, QString* wid, OAIBTAssemblyTransformDefinitionParams& oaibt_assembly_transform_definition_params) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/api/assemblies/d/{did}/w/{wid}/e/{eid}/occurrencetransforms");

    QString didPathParam("{"); didPathParam.append("did").append("}");
    fullPath.replace(didPathParam, stringValue(did));
    QString eidPathParam("{"); eidPathParam.append("eid").append("}");
    fullPath.replace(eidPathParam, stringValue(eid));
    QString widPathParam("{"); widPathParam.append("wid").append("}");
    fullPath.replace(widPathParam, stringValue(wid));


    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "POST");


    
    QString output = oaibt_assembly_transform_definition_params.asJson();
    input.request_body.append(output);
    


    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIAssembliesApi::transformOccurrencesCallback);

    worker->execute(&input);
}

void
OAIAssembliesApi::transformOccurrencesCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit transformOccurrencesSignal();
    } else {
        emit transformOccurrencesSignalE(error_type, error_str);
        emit transformOccurrencesSignalEFull(worker, error_type, error_str);
    }
}

void
OAIAssembliesApi::translateFormat(QString* did, QString* wv, QString* wvid, QString* eid, OAIBTTranslateFormatParams& oaibt_translate_format_params) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/api/assemblies/d/{did}/{wv}/{wvid}/e/{eid}/translations");

    QString didPathParam("{"); didPathParam.append("did").append("}");
    fullPath.replace(didPathParam, stringValue(did));
    QString wvPathParam("{"); wvPathParam.append("wv").append("}");
    fullPath.replace(wvPathParam, stringValue(wv));
    QString wvidPathParam("{"); wvidPathParam.append("wvid").append("}");
    fullPath.replace(wvidPathParam, stringValue(wvid));
    QString eidPathParam("{"); eidPathParam.append("eid").append("}");
    fullPath.replace(eidPathParam, stringValue(eid));


    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "POST");


    
    QString output = oaibt_translate_format_params.asJson();
    input.request_body.append(output);
    


    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIAssembliesApi::translateFormatCallback);

    worker->execute(&input);
}

void
OAIAssembliesApi::translateFormatCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QString json(worker->response);
    OAIBTTranslationRequestInfo* output = static_cast<OAIBTTranslationRequestInfo*>(create(json, QString("OAIBTTranslationRequestInfo")));
    auto wrapper = new OAIQObjectWrapper<OAIBTTranslationRequestInfo*> (output);
    wrapper->deleteLater();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit translateFormatSignal(output);
    } else {
        emit translateFormatSignalE(output, error_type, error_str);
        emit translateFormatSignalEFull(worker, error_type, error_str);
    }
}

void
OAIAssembliesApi::updateFeature(QString* did, QString* wid, QString* eid, QString* fid, QString*& body) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/api/assemblies/d/{did}/w/{wid}/e/{eid}/features/featureid/{fid}");

    QString didPathParam("{"); didPathParam.append("did").append("}");
    fullPath.replace(didPathParam, stringValue(did));
    QString widPathParam("{"); widPathParam.append("wid").append("}");
    fullPath.replace(widPathParam, stringValue(wid));
    QString eidPathParam("{"); eidPathParam.append("eid").append("}");
    fullPath.replace(eidPathParam, stringValue(eid));
    QString fidPathParam("{"); fidPathParam.append("fid").append("}");
    fullPath.replace(fidPathParam, stringValue(fid));


    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "POST");


    
    QString output(*body);
    input.request_body.append(output);
    


    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIAssembliesApi::updateFeatureCallback);

    worker->execute(&input);
}

void
OAIAssembliesApi::updateFeatureCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QString json(worker->response);
    OAIBTFeatureDefinitionResponse-1617* output = static_cast<OAIBTFeatureDefinitionResponse-1617*>(create(json, QString("OAIBTFeatureDefinitionResponse-1617")));
    auto wrapper = new OAIQObjectWrapper<OAIBTFeatureDefinitionResponse-1617*> (output);
    wrapper->deleteLater();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit updateFeatureSignal(output);
    } else {
        emit updateFeatureSignalE(output, error_type, error_str);
        emit updateFeatureSignalEFull(worker, error_type, error_str);
    }
}


}
