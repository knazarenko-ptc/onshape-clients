/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * OpenAPI spec version: 1.111
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIBTReleasePackageItemInfo.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIBTReleasePackageItemInfo::OAIBTReleasePackageItemInfo(QString json) {
    init();
    this->fromJson(json);
}

OAIBTReleasePackageItemInfo::OAIBTReleasePackageItemInfo() {
    init();
}

OAIBTReleasePackageItemInfo::~OAIBTReleasePackageItemInfo() {
    this->cleanup();
}

void
OAIBTReleasePackageItemInfo::init() {
    can_export = false;
    m_can_export_isSet = false;
    company_id = new QString("");
    m_company_id_isSet = false;
    configuration = new QString("");
    m_configuration_isSet = false;
    configuration_key = new QString("");
    m_configuration_key_isSet = false;
    diff_thumbnail_configuration_key = new QString("");
    m_diff_thumbnail_configuration_key_isSet = false;
    document_id = new QString("");
    m_document_id_isSet = false;
    element_id = new QString("");
    m_element_id_isSet = false;
    element_type = 0;
    m_element_type_isSet = false;
    errors = new QList<OAIBTReleasePackageItemError*>();
    m_errors_isSet = false;
    href = new QString("");
    m_href_isSet = false;
    id = new QString("");
    m_id_isSet = false;
    is_included_editable = false;
    m_is_included_editable_isSet = false;
    is_revision_managed = false;
    m_is_revision_managed_isSet = false;
    is_translatable = false;
    m_is_translatable_isSet = false;
    mime_type = new QString("");
    m_mime_type_isSet = false;
    name = new QString("");
    m_name_isSet = false;
    obsoletion_revision_id = new QString("");
    m_obsoletion_revision_id_isSet = false;
    part_id = new QString("");
    m_part_id_isSet = false;
    part_type = new QString("");
    m_part_type_isSet = false;
    properties = new QList<OAIBTMetadataPropertyInfo*>();
    m_properties_isSet = false;
    rpid = new QString("");
    m_rpid_isSet = false;
    small_thumbnail_href = new QString("");
    m_small_thumbnail_href_isSet = false;
    version_id = new QString("");
    m_version_id_isSet = false;
    view_ref = new QString("");
    m_view_ref_isSet = false;
    workspace_id = new QString("");
    m_workspace_id_isSet = false;
}

void
OAIBTReleasePackageItemInfo::cleanup() {

    if(company_id != nullptr) { 
        delete company_id;
    }
    if(configuration != nullptr) { 
        delete configuration;
    }
    if(configuration_key != nullptr) { 
        delete configuration_key;
    }
    if(diff_thumbnail_configuration_key != nullptr) { 
        delete diff_thumbnail_configuration_key;
    }
    if(document_id != nullptr) { 
        delete document_id;
    }
    if(element_id != nullptr) { 
        delete element_id;
    }

    if(errors != nullptr) { 
        auto arr = errors;
        for(auto o: *arr) { 
            delete o;
        }
        delete errors;
    }
    if(href != nullptr) { 
        delete href;
    }
    if(id != nullptr) { 
        delete id;
    }



    if(mime_type != nullptr) { 
        delete mime_type;
    }
    if(name != nullptr) { 
        delete name;
    }
    if(obsoletion_revision_id != nullptr) { 
        delete obsoletion_revision_id;
    }
    if(part_id != nullptr) { 
        delete part_id;
    }
    if(part_type != nullptr) { 
        delete part_type;
    }
    if(properties != nullptr) { 
        auto arr = properties;
        for(auto o: *arr) { 
            delete o;
        }
        delete properties;
    }
    if(rpid != nullptr) { 
        delete rpid;
    }
    if(small_thumbnail_href != nullptr) { 
        delete small_thumbnail_href;
    }
    if(version_id != nullptr) { 
        delete version_id;
    }
    if(view_ref != nullptr) { 
        delete view_ref;
    }
    if(workspace_id != nullptr) { 
        delete workspace_id;
    }
}

OAIBTReleasePackageItemInfo*
OAIBTReleasePackageItemInfo::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIBTReleasePackageItemInfo::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&can_export, pJson["canExport"], "bool", "");
    
    ::OpenAPI::setValue(&company_id, pJson["companyId"], "QString", "QString");
    
    ::OpenAPI::setValue(&configuration, pJson["configuration"], "QString", "QString");
    
    ::OpenAPI::setValue(&configuration_key, pJson["configurationKey"], "QString", "QString");
    
    ::OpenAPI::setValue(&diff_thumbnail_configuration_key, pJson["diffThumbnailConfigurationKey"], "QString", "QString");
    
    ::OpenAPI::setValue(&document_id, pJson["documentId"], "QString", "QString");
    
    ::OpenAPI::setValue(&element_id, pJson["elementId"], "QString", "QString");
    
    ::OpenAPI::setValue(&element_type, pJson["elementType"], "qint32", "");
    
    
    ::OpenAPI::setValue(&errors, pJson["errors"], "QList", "OAIBTReleasePackageItemError");
    ::OpenAPI::setValue(&href, pJson["href"], "QString", "QString");
    
    ::OpenAPI::setValue(&id, pJson["id"], "QString", "QString");
    
    ::OpenAPI::setValue(&is_included_editable, pJson["isIncludedEditable"], "bool", "");
    
    ::OpenAPI::setValue(&is_revision_managed, pJson["isRevisionManaged"], "bool", "");
    
    ::OpenAPI::setValue(&is_translatable, pJson["isTranslatable"], "bool", "");
    
    ::OpenAPI::setValue(&mime_type, pJson["mimeType"], "QString", "QString");
    
    ::OpenAPI::setValue(&name, pJson["name"], "QString", "QString");
    
    ::OpenAPI::setValue(&obsoletion_revision_id, pJson["obsoletionRevisionId"], "QString", "QString");
    
    ::OpenAPI::setValue(&part_id, pJson["partId"], "QString", "QString");
    
    ::OpenAPI::setValue(&part_type, pJson["partType"], "QString", "QString");
    
    
    ::OpenAPI::setValue(&properties, pJson["properties"], "QList", "OAIBTMetadataPropertyInfo");
    ::OpenAPI::setValue(&rpid, pJson["rpid"], "QString", "QString");
    
    ::OpenAPI::setValue(&small_thumbnail_href, pJson["smallThumbnailHref"], "QString", "QString");
    
    ::OpenAPI::setValue(&version_id, pJson["versionId"], "QString", "QString");
    
    ::OpenAPI::setValue(&view_ref, pJson["viewRef"], "QString", "QString");
    
    ::OpenAPI::setValue(&workspace_id, pJson["workspaceId"], "QString", "QString");
    
}

QString
OAIBTReleasePackageItemInfo::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIBTReleasePackageItemInfo::asJsonObject() {
    QJsonObject obj;
    if(m_can_export_isSet){
        obj.insert("canExport", QJsonValue(can_export));
    }
    if(company_id != nullptr && *company_id != QString("")){
        toJsonValue(QString("companyId"), company_id, obj, QString("QString"));
    }
    if(configuration != nullptr && *configuration != QString("")){
        toJsonValue(QString("configuration"), configuration, obj, QString("QString"));
    }
    if(configuration_key != nullptr && *configuration_key != QString("")){
        toJsonValue(QString("configurationKey"), configuration_key, obj, QString("QString"));
    }
    if(diff_thumbnail_configuration_key != nullptr && *diff_thumbnail_configuration_key != QString("")){
        toJsonValue(QString("diffThumbnailConfigurationKey"), diff_thumbnail_configuration_key, obj, QString("QString"));
    }
    if(document_id != nullptr && *document_id != QString("")){
        toJsonValue(QString("documentId"), document_id, obj, QString("QString"));
    }
    if(element_id != nullptr && *element_id != QString("")){
        toJsonValue(QString("elementId"), element_id, obj, QString("QString"));
    }
    if(m_element_type_isSet){
        obj.insert("elementType", QJsonValue(element_type));
    }
    if(errors->size() > 0){
        toJsonArray((QList<void*>*)errors, obj, "errors", "OAIBTReleasePackageItemError");
    }
    if(href != nullptr && *href != QString("")){
        toJsonValue(QString("href"), href, obj, QString("QString"));
    }
    if(id != nullptr && *id != QString("")){
        toJsonValue(QString("id"), id, obj, QString("QString"));
    }
    if(m_is_included_editable_isSet){
        obj.insert("isIncludedEditable", QJsonValue(is_included_editable));
    }
    if(m_is_revision_managed_isSet){
        obj.insert("isRevisionManaged", QJsonValue(is_revision_managed));
    }
    if(m_is_translatable_isSet){
        obj.insert("isTranslatable", QJsonValue(is_translatable));
    }
    if(mime_type != nullptr && *mime_type != QString("")){
        toJsonValue(QString("mimeType"), mime_type, obj, QString("QString"));
    }
    if(name != nullptr && *name != QString("")){
        toJsonValue(QString("name"), name, obj, QString("QString"));
    }
    if(obsoletion_revision_id != nullptr && *obsoletion_revision_id != QString("")){
        toJsonValue(QString("obsoletionRevisionId"), obsoletion_revision_id, obj, QString("QString"));
    }
    if(part_id != nullptr && *part_id != QString("")){
        toJsonValue(QString("partId"), part_id, obj, QString("QString"));
    }
    if(part_type != nullptr && *part_type != QString("")){
        toJsonValue(QString("partType"), part_type, obj, QString("QString"));
    }
    if(properties->size() > 0){
        toJsonArray((QList<void*>*)properties, obj, "properties", "OAIBTMetadataPropertyInfo");
    }
    if(rpid != nullptr && *rpid != QString("")){
        toJsonValue(QString("rpid"), rpid, obj, QString("QString"));
    }
    if(small_thumbnail_href != nullptr && *small_thumbnail_href != QString("")){
        toJsonValue(QString("smallThumbnailHref"), small_thumbnail_href, obj, QString("QString"));
    }
    if(version_id != nullptr && *version_id != QString("")){
        toJsonValue(QString("versionId"), version_id, obj, QString("QString"));
    }
    if(view_ref != nullptr && *view_ref != QString("")){
        toJsonValue(QString("viewRef"), view_ref, obj, QString("QString"));
    }
    if(workspace_id != nullptr && *workspace_id != QString("")){
        toJsonValue(QString("workspaceId"), workspace_id, obj, QString("QString"));
    }

    return obj;
}

bool
OAIBTReleasePackageItemInfo::isCanExport() {
    return can_export;
}
void
OAIBTReleasePackageItemInfo::setCanExport(bool can_export) {
    this->can_export = can_export;
    this->m_can_export_isSet = true;
}

QString*
OAIBTReleasePackageItemInfo::getCompanyId() {
    return company_id;
}
void
OAIBTReleasePackageItemInfo::setCompanyId(QString* company_id) {
    this->company_id = company_id;
    this->m_company_id_isSet = true;
}

QString*
OAIBTReleasePackageItemInfo::getConfiguration() {
    return configuration;
}
void
OAIBTReleasePackageItemInfo::setConfiguration(QString* configuration) {
    this->configuration = configuration;
    this->m_configuration_isSet = true;
}

QString*
OAIBTReleasePackageItemInfo::getConfigurationKey() {
    return configuration_key;
}
void
OAIBTReleasePackageItemInfo::setConfigurationKey(QString* configuration_key) {
    this->configuration_key = configuration_key;
    this->m_configuration_key_isSet = true;
}

QString*
OAIBTReleasePackageItemInfo::getDiffThumbnailConfigurationKey() {
    return diff_thumbnail_configuration_key;
}
void
OAIBTReleasePackageItemInfo::setDiffThumbnailConfigurationKey(QString* diff_thumbnail_configuration_key) {
    this->diff_thumbnail_configuration_key = diff_thumbnail_configuration_key;
    this->m_diff_thumbnail_configuration_key_isSet = true;
}

QString*
OAIBTReleasePackageItemInfo::getDocumentId() {
    return document_id;
}
void
OAIBTReleasePackageItemInfo::setDocumentId(QString* document_id) {
    this->document_id = document_id;
    this->m_document_id_isSet = true;
}

QString*
OAIBTReleasePackageItemInfo::getElementId() {
    return element_id;
}
void
OAIBTReleasePackageItemInfo::setElementId(QString* element_id) {
    this->element_id = element_id;
    this->m_element_id_isSet = true;
}

qint32
OAIBTReleasePackageItemInfo::getElementType() {
    return element_type;
}
void
OAIBTReleasePackageItemInfo::setElementType(qint32 element_type) {
    this->element_type = element_type;
    this->m_element_type_isSet = true;
}

QList<OAIBTReleasePackageItemError*>*
OAIBTReleasePackageItemInfo::getErrors() {
    return errors;
}
void
OAIBTReleasePackageItemInfo::setErrors(QList<OAIBTReleasePackageItemError*>* errors) {
    this->errors = errors;
    this->m_errors_isSet = true;
}

QString*
OAIBTReleasePackageItemInfo::getHref() {
    return href;
}
void
OAIBTReleasePackageItemInfo::setHref(QString* href) {
    this->href = href;
    this->m_href_isSet = true;
}

QString*
OAIBTReleasePackageItemInfo::getId() {
    return id;
}
void
OAIBTReleasePackageItemInfo::setId(QString* id) {
    this->id = id;
    this->m_id_isSet = true;
}

bool
OAIBTReleasePackageItemInfo::isIsIncludedEditable() {
    return is_included_editable;
}
void
OAIBTReleasePackageItemInfo::setIsIncludedEditable(bool is_included_editable) {
    this->is_included_editable = is_included_editable;
    this->m_is_included_editable_isSet = true;
}

bool
OAIBTReleasePackageItemInfo::isIsRevisionManaged() {
    return is_revision_managed;
}
void
OAIBTReleasePackageItemInfo::setIsRevisionManaged(bool is_revision_managed) {
    this->is_revision_managed = is_revision_managed;
    this->m_is_revision_managed_isSet = true;
}

bool
OAIBTReleasePackageItemInfo::isIsTranslatable() {
    return is_translatable;
}
void
OAIBTReleasePackageItemInfo::setIsTranslatable(bool is_translatable) {
    this->is_translatable = is_translatable;
    this->m_is_translatable_isSet = true;
}

QString*
OAIBTReleasePackageItemInfo::getMimeType() {
    return mime_type;
}
void
OAIBTReleasePackageItemInfo::setMimeType(QString* mime_type) {
    this->mime_type = mime_type;
    this->m_mime_type_isSet = true;
}

QString*
OAIBTReleasePackageItemInfo::getName() {
    return name;
}
void
OAIBTReleasePackageItemInfo::setName(QString* name) {
    this->name = name;
    this->m_name_isSet = true;
}

QString*
OAIBTReleasePackageItemInfo::getObsoletionRevisionId() {
    return obsoletion_revision_id;
}
void
OAIBTReleasePackageItemInfo::setObsoletionRevisionId(QString* obsoletion_revision_id) {
    this->obsoletion_revision_id = obsoletion_revision_id;
    this->m_obsoletion_revision_id_isSet = true;
}

QString*
OAIBTReleasePackageItemInfo::getPartId() {
    return part_id;
}
void
OAIBTReleasePackageItemInfo::setPartId(QString* part_id) {
    this->part_id = part_id;
    this->m_part_id_isSet = true;
}

QString*
OAIBTReleasePackageItemInfo::getPartType() {
    return part_type;
}
void
OAIBTReleasePackageItemInfo::setPartType(QString* part_type) {
    this->part_type = part_type;
    this->m_part_type_isSet = true;
}

QList<OAIBTMetadataPropertyInfo*>*
OAIBTReleasePackageItemInfo::getProperties() {
    return properties;
}
void
OAIBTReleasePackageItemInfo::setProperties(QList<OAIBTMetadataPropertyInfo*>* properties) {
    this->properties = properties;
    this->m_properties_isSet = true;
}

QString*
OAIBTReleasePackageItemInfo::getRpid() {
    return rpid;
}
void
OAIBTReleasePackageItemInfo::setRpid(QString* rpid) {
    this->rpid = rpid;
    this->m_rpid_isSet = true;
}

QString*
OAIBTReleasePackageItemInfo::getSmallThumbnailHref() {
    return small_thumbnail_href;
}
void
OAIBTReleasePackageItemInfo::setSmallThumbnailHref(QString* small_thumbnail_href) {
    this->small_thumbnail_href = small_thumbnail_href;
    this->m_small_thumbnail_href_isSet = true;
}

QString*
OAIBTReleasePackageItemInfo::getVersionId() {
    return version_id;
}
void
OAIBTReleasePackageItemInfo::setVersionId(QString* version_id) {
    this->version_id = version_id;
    this->m_version_id_isSet = true;
}

QString*
OAIBTReleasePackageItemInfo::getViewRef() {
    return view_ref;
}
void
OAIBTReleasePackageItemInfo::setViewRef(QString* view_ref) {
    this->view_ref = view_ref;
    this->m_view_ref_isSet = true;
}

QString*
OAIBTReleasePackageItemInfo::getWorkspaceId() {
    return workspace_id;
}
void
OAIBTReleasePackageItemInfo::setWorkspaceId(QString* workspace_id) {
    this->workspace_id = workspace_id;
    this->m_workspace_id_isSet = true;
}


bool
OAIBTReleasePackageItemInfo::isSet(){
    bool isObjectUpdated = false;
    do{
        if(m_can_export_isSet){ isObjectUpdated = true; break;}
        if(company_id != nullptr && *company_id != QString("")){ isObjectUpdated = true; break;}
        if(configuration != nullptr && *configuration != QString("")){ isObjectUpdated = true; break;}
        if(configuration_key != nullptr && *configuration_key != QString("")){ isObjectUpdated = true; break;}
        if(diff_thumbnail_configuration_key != nullptr && *diff_thumbnail_configuration_key != QString("")){ isObjectUpdated = true; break;}
        if(document_id != nullptr && *document_id != QString("")){ isObjectUpdated = true; break;}
        if(element_id != nullptr && *element_id != QString("")){ isObjectUpdated = true; break;}
        if(m_element_type_isSet){ isObjectUpdated = true; break;}
        if(errors->size() > 0){ isObjectUpdated = true; break;}
        if(href != nullptr && *href != QString("")){ isObjectUpdated = true; break;}
        if(id != nullptr && *id != QString("")){ isObjectUpdated = true; break;}
        if(m_is_included_editable_isSet){ isObjectUpdated = true; break;}
        if(m_is_revision_managed_isSet){ isObjectUpdated = true; break;}
        if(m_is_translatable_isSet){ isObjectUpdated = true; break;}
        if(mime_type != nullptr && *mime_type != QString("")){ isObjectUpdated = true; break;}
        if(name != nullptr && *name != QString("")){ isObjectUpdated = true; break;}
        if(obsoletion_revision_id != nullptr && *obsoletion_revision_id != QString("")){ isObjectUpdated = true; break;}
        if(part_id != nullptr && *part_id != QString("")){ isObjectUpdated = true; break;}
        if(part_type != nullptr && *part_type != QString("")){ isObjectUpdated = true; break;}
        if(properties->size() > 0){ isObjectUpdated = true; break;}
        if(rpid != nullptr && *rpid != QString("")){ isObjectUpdated = true; break;}
        if(small_thumbnail_href != nullptr && *small_thumbnail_href != QString("")){ isObjectUpdated = true; break;}
        if(version_id != nullptr && *version_id != QString("")){ isObjectUpdated = true; break;}
        if(view_ref != nullptr && *view_ref != QString("")){ isObjectUpdated = true; break;}
        if(workspace_id != nullptr && *workspace_id != QString("")){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

