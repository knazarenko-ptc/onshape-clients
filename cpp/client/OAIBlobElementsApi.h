/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * OpenAPI spec version: 1.111
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef _OAI_OAIBlobElementsApi_H_
#define _OAI_OAIBlobElementsApi_H_

#include "OAIHttpRequest.h"

#include "OAIBTDocumentElementProcessingInfo.h"
#include "OAIBTTranslateFormatParams.h"
#include "OAIBTTranslationRequestInfo.h"
#include "OAIBTUpdateMeshUnitsParams.h"
#include "OAIFormDataBodyPart.h"
#include "OAIFormDataContentDisposition.h"
#include "OAIHttpRequest.h"
#include <QString>

#include <QObject>

namespace OpenAPI {

class OAIBlobElementsApi: public QObject {
    Q_OBJECT

public:
    OAIBlobElementsApi();
    OAIBlobElementsApi(QString host, QString basePath);
    ~OAIBlobElementsApi();

    QString host;
    QString basePath;
    QMap<QString, QString> defaultHeaders;

    void createBlobTranslation(QString* did, QString* wv, QString* wvid, QString* eid, OAIBTTranslateFormatParams& oaibt_translate_format_params);
    void downloadFileWorkspace(QString* did, QString* wid, QString* eid, QString* content_disposition, QString* if_none_match, QString* link_document_id);
    void updateUnits(QString* did, QString* eid, QString* wid, OAIBTUpdateMeshUnitsParams& oaibt_update_mesh_units_params);
    void uploadFileCreateElement(QString* did, QString* wid, bool allow_faulty_parts, bool create_composite, bool create_drawing_if_possible, QString* encoded_filename, bool extract_assembly_hierarchy, OAIHttpRequestInputFileElement* file, OAIFormDataBodyPart* file_body_with_details, qint64 file_content_length, OAIFormDataContentDisposition* file_detail, bool flatten_assemblies, QString* format_name, bool isy_axis_is_up, bool join_adjacent_surfaces, QString* location_element_id, QString* location_group_id, qint32 location_position, bool notify_user, QString* owner_id, QString* owner_type, QString* parent_id, QString* project_id, bool _public, bool split_assemblies_into_multiple_documents, bool store_in_document, bool translate, QString* unit, QString* upload_id, QString* version_string);
    void uploadFileUpdateElement(QString* did, QString* eid, QString* wid, QString* parent_change_id);
    
private:
    void createBlobTranslationCallback (OAIHttpRequestWorker * worker);
    void downloadFileWorkspaceCallback (OAIHttpRequestWorker * worker);
    void updateUnitsCallback (OAIHttpRequestWorker * worker);
    void uploadFileCreateElementCallback (OAIHttpRequestWorker * worker);
    void uploadFileUpdateElementCallback (OAIHttpRequestWorker * worker);
    
signals:
    void createBlobTranslationSignal(OAIBTTranslationRequestInfo* summary);
    void downloadFileWorkspaceSignal(OAIHttpRequestInputFileElement* summary);
    void updateUnitsSignal(OAIBTDocumentElementProcessingInfo* summary);
    void uploadFileCreateElementSignal(OAIBTDocumentElementProcessingInfo* summary);
    void uploadFileUpdateElementSignal(OAIBTDocumentElementProcessingInfo* summary);
    
    void createBlobTranslationSignalE(OAIBTTranslationRequestInfo* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void downloadFileWorkspaceSignalE(OAIHttpRequestInputFileElement* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void updateUnitsSignalE(OAIBTDocumentElementProcessingInfo* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void uploadFileCreateElementSignalE(OAIBTDocumentElementProcessingInfo* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void uploadFileUpdateElementSignalE(OAIBTDocumentElementProcessingInfo* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    
    void createBlobTranslationSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void downloadFileWorkspaceSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void updateUnitsSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void uploadFileCreateElementSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void uploadFileUpdateElementSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    
};

}
#endif
