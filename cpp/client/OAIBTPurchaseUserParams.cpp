/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * OpenAPI spec version: 1.111
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIBTPurchaseUserParams.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIBTPurchaseUserParams::OAIBTPurchaseUserParams(QString json) {
    init();
    this->fromJson(json);
}

OAIBTPurchaseUserParams::OAIBTPurchaseUserParams() {
    init();
}

OAIBTPurchaseUserParams::~OAIBTPurchaseUserParams() {
    this->cleanup();
}

void
OAIBTPurchaseUserParams::init() {
    consumed_quantity = 0;
    m_consumed_quantity_isSet = false;
    purchase_id = new QString("");
    m_purchase_id_isSet = false;
    user_id = new QString("");
    m_user_id_isSet = false;
}

void
OAIBTPurchaseUserParams::cleanup() {

    if(purchase_id != nullptr) { 
        delete purchase_id;
    }
    if(user_id != nullptr) { 
        delete user_id;
    }
}

OAIBTPurchaseUserParams*
OAIBTPurchaseUserParams::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIBTPurchaseUserParams::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&consumed_quantity, pJson["consumedQuantity"], "qint32", "");
    
    ::OpenAPI::setValue(&purchase_id, pJson["purchaseId"], "QString", "QString");
    
    ::OpenAPI::setValue(&user_id, pJson["userId"], "QString", "QString");
    
}

QString
OAIBTPurchaseUserParams::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIBTPurchaseUserParams::asJsonObject() {
    QJsonObject obj;
    if(m_consumed_quantity_isSet){
        obj.insert("consumedQuantity", QJsonValue(consumed_quantity));
    }
    if(purchase_id != nullptr && *purchase_id != QString("")){
        toJsonValue(QString("purchaseId"), purchase_id, obj, QString("QString"));
    }
    if(user_id != nullptr && *user_id != QString("")){
        toJsonValue(QString("userId"), user_id, obj, QString("QString"));
    }

    return obj;
}

qint32
OAIBTPurchaseUserParams::getConsumedQuantity() {
    return consumed_quantity;
}
void
OAIBTPurchaseUserParams::setConsumedQuantity(qint32 consumed_quantity) {
    this->consumed_quantity = consumed_quantity;
    this->m_consumed_quantity_isSet = true;
}

QString*
OAIBTPurchaseUserParams::getPurchaseId() {
    return purchase_id;
}
void
OAIBTPurchaseUserParams::setPurchaseId(QString* purchase_id) {
    this->purchase_id = purchase_id;
    this->m_purchase_id_isSet = true;
}

QString*
OAIBTPurchaseUserParams::getUserId() {
    return user_id;
}
void
OAIBTPurchaseUserParams::setUserId(QString* user_id) {
    this->user_id = user_id;
    this->m_user_id_isSet = true;
}


bool
OAIBTPurchaseUserParams::isSet(){
    bool isObjectUpdated = false;
    do{
        if(m_consumed_quantity_isSet){ isObjectUpdated = true; break;}
        if(purchase_id != nullptr && *purchase_id != QString("")){ isObjectUpdated = true; break;}
        if(user_id != nullptr && *user_id != QString("")){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

