/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * OpenAPI spec version: 1.111
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef _OAI_OAIAssembliesApi_H_
#define _OAI_OAIAssembliesApi_H_

#include "OAIHttpRequest.h"

#include "OAIBTAssemblyDefinitionInfo.h"
#include "OAIBTAssemblyFeatureListResponse-1174.h"
#include "OAIBTAssemblyInsertTransformedInstancesResponse.h"
#include "OAIBTAssemblyInstanceDefinitionParams.h"
#include "OAIBTAssemblyTransformDefinitionParams.h"
#include "OAIBTAssemblyTransformedInstancesDefinitionParams.h"
#include "OAIBTBoundingBoxInfo.h"
#include "OAIBTDocumentElementInfo.h"
#include "OAIBTFeatureApiBase-1430.h"
#include "OAIBTFeatureDefinitionResponse-1617.h"
#include "OAIBTFeatureSpecsResponse-664.h"
#include "OAIBTModelElementParams.h"
#include "OAIBTModelFormatInfo.h"
#include "OAIBTNamedViewsInfo.h"
#include "OAIBTOccurrence-74.h"
#include "OAIBTShadedViewsInfo.h"
#include "OAIBTTranslateFormatParams.h"
#include "OAIBTTranslationRequestInfo.h"
#include "OAIJsonNode.h"
#include <QString>

#include <QObject>

namespace OpenAPI {

class OAIAssembliesApi: public QObject {
    Q_OBJECT

public:
    OAIAssembliesApi();
    OAIAssembliesApi(QString host, QString basePath);
    ~OAIAssembliesApi();

    QString host;
    QString basePath;
    QMap<QString, QString> defaultHeaders;

    void addFeature(QString* did, QString* wvm, QString* wvmid, QString* eid, QString*& body);
    void createAssembly(QString* did, QString* wid, OAIBTModelElementParams& oaibt_model_element_params);
    void createInstance(QString* did, QString* wid, QString* eid, OAIBTAssemblyInstanceDefinitionParams& oaibt_assembly_instance_definition_params);
    void deleteFeature(QString* did, QString* wid, QString* eid, QString* fid);
    void deleteInstance(QString* did, QString* eid, QString* wid, QString* nid);
    void getAssemblyBoundingBoxes(QString* did, QString* wvm, QString* wvmid, QString* eid, QString* link_document_id, bool include_hidden, QString* display_state_id, QString* configuration, QString* exploded_view_id);
    void getAssemblyDefinition(QString* did, QString* wvm, QString* wvmid, QString* eid, QString* link_document_id, bool include_mate_features, bool include_non_solids, bool include_mate_connectors, QString* configuration, QString* exploded_view_id);
    void getAssemblyShadedViews(QString* did, QString* wvm, QString* wvmid, QString* eid, QString* link_document_id, QString* view_matrix, qint32 output_height, qint32 output_width, double pixel_size, QString* edges, bool show_all_parts, bool include_surfaces, bool use_anti_aliasing, QString* display_state_id, QString* configuration, QString* exploded_view_id);
    void getBillOfMaterials(QString* did, QString* wvm, QString* wvmid, QString* eid, QString* metadata_workspace_id, QList<QString*>* bom_column_ids, bool indented, bool multi_level, bool generate_if_absent, QString* link_document_id, QString* configuration);
    void getFeatureSpecs(QString* did, QString* wvm, QString* wvmid, QString* eid);
    void getFeatures(QString* did, QString* wvm, QString* wvmid, QString* eid, QList<QString*>* feature_id, QString* link_document_id);
    void getNamedViews(QString* did, QString* eid, bool skip_perspective, QString* link_document_id);
    void getOrCreateBillOfMaterialsElement(QString* did, QString* wid, QString* eid);
    void getTranslatorFormats(QString* did, QString* wid, QString* eid, bool check_content);
    void insertTransformedInstances(QString* did, QString* eid, QString* wid, OAIBTAssemblyTransformedInstancesDefinitionParams& oaibt_assembly_transformed_instances_definition_params);
    void transformOccurrences(QString* did, QString* eid, QString* wid, OAIBTAssemblyTransformDefinitionParams& oaibt_assembly_transform_definition_params);
    void translateFormat(QString* did, QString* wv, QString* wvid, QString* eid, OAIBTTranslateFormatParams& oaibt_translate_format_params);
    void updateFeature(QString* did, QString* wid, QString* eid, QString* fid, QString*& body);
    
private:
    void addFeatureCallback (OAIHttpRequestWorker * worker);
    void createAssemblyCallback (OAIHttpRequestWorker * worker);
    void createInstanceCallback (OAIHttpRequestWorker * worker);
    void deleteFeatureCallback (OAIHttpRequestWorker * worker);
    void deleteInstanceCallback (OAIHttpRequestWorker * worker);
    void getAssemblyBoundingBoxesCallback (OAIHttpRequestWorker * worker);
    void getAssemblyDefinitionCallback (OAIHttpRequestWorker * worker);
    void getAssemblyShadedViewsCallback (OAIHttpRequestWorker * worker);
    void getBillOfMaterialsCallback (OAIHttpRequestWorker * worker);
    void getFeatureSpecsCallback (OAIHttpRequestWorker * worker);
    void getFeaturesCallback (OAIHttpRequestWorker * worker);
    void getNamedViewsCallback (OAIHttpRequestWorker * worker);
    void getOrCreateBillOfMaterialsElementCallback (OAIHttpRequestWorker * worker);
    void getTranslatorFormatsCallback (OAIHttpRequestWorker * worker);
    void insertTransformedInstancesCallback (OAIHttpRequestWorker * worker);
    void transformOccurrencesCallback (OAIHttpRequestWorker * worker);
    void translateFormatCallback (OAIHttpRequestWorker * worker);
    void updateFeatureCallback (OAIHttpRequestWorker * worker);
    
signals:
    void addFeatureSignal(OAIBTFeatureDefinitionResponse-1617* summary);
    void createAssemblySignal(OAIBTDocumentElementInfo* summary);
    void createInstanceSignal(QList<OAIBTOccurrence-74*>* summary);
    void deleteFeatureSignal(OAIBTFeatureApiBase-1430* summary);
    void deleteInstanceSignal();
    void getAssemblyBoundingBoxesSignal(OAIBTBoundingBoxInfo* summary);
    void getAssemblyDefinitionSignal(OAIBTAssemblyDefinitionInfo* summary);
    void getAssemblyShadedViewsSignal(OAIBTShadedViewsInfo* summary);
    void getBillOfMaterialsSignal(OAIJsonNode* summary);
    void getFeatureSpecsSignal(OAIBTFeatureSpecsResponse-664* summary);
    void getFeaturesSignal(OAIBTAssemblyFeatureListResponse-1174* summary);
    void getNamedViewsSignal(OAIBTNamedViewsInfo* summary);
    void getOrCreateBillOfMaterialsElementSignal(OAIBTDocumentElementInfo* summary);
    void getTranslatorFormatsSignal(QList<OAIBTModelFormatInfo*>* summary);
    void insertTransformedInstancesSignal(OAIBTAssemblyInsertTransformedInstancesResponse* summary);
    void transformOccurrencesSignal();
    void translateFormatSignal(OAIBTTranslationRequestInfo* summary);
    void updateFeatureSignal(OAIBTFeatureDefinitionResponse-1617* summary);
    
    void addFeatureSignalE(OAIBTFeatureDefinitionResponse-1617* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void createAssemblySignalE(OAIBTDocumentElementInfo* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void createInstanceSignalE(QList<OAIBTOccurrence-74*>* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void deleteFeatureSignalE(OAIBTFeatureApiBase-1430* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void deleteInstanceSignalE(QNetworkReply::NetworkError error_type, QString& error_str);
    void getAssemblyBoundingBoxesSignalE(OAIBTBoundingBoxInfo* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void getAssemblyDefinitionSignalE(OAIBTAssemblyDefinitionInfo* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void getAssemblyShadedViewsSignalE(OAIBTShadedViewsInfo* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void getBillOfMaterialsSignalE(OAIJsonNode* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void getFeatureSpecsSignalE(OAIBTFeatureSpecsResponse-664* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void getFeaturesSignalE(OAIBTAssemblyFeatureListResponse-1174* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void getNamedViewsSignalE(OAIBTNamedViewsInfo* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void getOrCreateBillOfMaterialsElementSignalE(OAIBTDocumentElementInfo* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void getTranslatorFormatsSignalE(QList<OAIBTModelFormatInfo*>* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void insertTransformedInstancesSignalE(OAIBTAssemblyInsertTransformedInstancesResponse* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void transformOccurrencesSignalE(QNetworkReply::NetworkError error_type, QString& error_str);
    void translateFormatSignalE(OAIBTTranslationRequestInfo* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void updateFeatureSignalE(OAIBTFeatureDefinitionResponse-1617* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    
    void addFeatureSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void createAssemblySignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void createInstanceSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void deleteFeatureSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void deleteInstanceSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void getAssemblyBoundingBoxesSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void getAssemblyDefinitionSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void getAssemblyShadedViewsSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void getBillOfMaterialsSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void getFeatureSpecsSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void getFeaturesSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void getNamedViewsSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void getOrCreateBillOfMaterialsElementSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void getTranslatorFormatsSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void insertTransformedInstancesSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void transformOccurrencesSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void translateFormatSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void updateFeatureSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    
};

}
#endif
