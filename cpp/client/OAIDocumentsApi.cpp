/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * OpenAPI spec version: 1.111
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDocumentsApi.h"
#include "OAIHelpers.h"
#include "OAIModelFactory.h"
#include "OAIQObjectWrapper.h"

#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAIDocumentsApi::OAIDocumentsApi() {}

OAIDocumentsApi::~OAIDocumentsApi() {}

OAIDocumentsApi::OAIDocumentsApi(QString host, QString basePath) {
    this->host = host;
    this->basePath = basePath;
}

void
OAIDocumentsApi::copyWorkspace(QString* did, QString* wid, OAIBTCopyDocumentParams& oaibt_copy_document_params) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/api/documents/{did}/workspaces/{wid}/copy");

    QString didPathParam("{"); didPathParam.append("did").append("}");
    fullPath.replace(didPathParam, stringValue(did));
    QString widPathParam("{"); widPathParam.append("wid").append("}");
    fullPath.replace(widPathParam, stringValue(wid));


    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "POST");


    
    QString output = oaibt_copy_document_params.asJson();
    input.request_body.append(output);
    


    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIDocumentsApi::copyWorkspaceCallback);

    worker->execute(&input);
}

void
OAIDocumentsApi::copyWorkspaceCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QString json(worker->response);
    OAIBTCopyDocumentInfo* output = static_cast<OAIBTCopyDocumentInfo*>(create(json, QString("OAIBTCopyDocumentInfo")));
    auto wrapper = new OAIQObjectWrapper<OAIBTCopyDocumentInfo*> (output);
    wrapper->deleteLater();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit copyWorkspaceSignal(output);
    } else {
        emit copyWorkspaceSignalE(output, error_type, error_str);
        emit copyWorkspaceSignalEFull(worker, error_type, error_str);
    }
}

void
OAIDocumentsApi::createDocument(OAIBTDocumentParams& oaibt_document_params) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/api/documents");



    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "POST");


    
    QString output = oaibt_document_params.asJson();
    input.request_body.append(output);
    


    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIDocumentsApi::createDocumentCallback);

    worker->execute(&input);
}

void
OAIDocumentsApi::createDocumentCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QString json(worker->response);
    OAIBTDocumentInfo* output = static_cast<OAIBTDocumentInfo*>(create(json, QString("OAIBTDocumentInfo")));
    auto wrapper = new OAIQObjectWrapper<OAIBTDocumentInfo*> (output);
    wrapper->deleteLater();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit createDocumentSignal(output);
    } else {
        emit createDocumentSignalE(output, error_type, error_str);
        emit createDocumentSignalEFull(worker, error_type, error_str);
    }
}

void
OAIDocumentsApi::createVersion(QString* did, OAIBTVersionOrWorkspaceParams& oaibt_version_or_workspace_params) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/api/documents/d/{did}/versions");

    QString didPathParam("{"); didPathParam.append("did").append("}");
    fullPath.replace(didPathParam, stringValue(did));


    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "POST");


    
    QString output = oaibt_version_or_workspace_params.asJson();
    input.request_body.append(output);
    


    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIDocumentsApi::createVersionCallback);

    worker->execute(&input);
}

void
OAIDocumentsApi::createVersionCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QString json(worker->response);
    OAIBTVersionInfo* output = static_cast<OAIBTVersionInfo*>(create(json, QString("OAIBTVersionInfo")));
    auto wrapper = new OAIQObjectWrapper<OAIBTVersionInfo*> (output);
    wrapper->deleteLater();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit createVersionSignal(output);
    } else {
        emit createVersionSignalE(output, error_type, error_str);
        emit createVersionSignalEFull(worker, error_type, error_str);
    }
}

void
OAIDocumentsApi::createWorkspace(QString* did, OAIBTVersionOrWorkspaceParams& oaibt_version_or_workspace_params) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/api/documents/d/{did}/workspaces");

    QString didPathParam("{"); didPathParam.append("did").append("}");
    fullPath.replace(didPathParam, stringValue(did));


    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "POST");


    
    QString output = oaibt_version_or_workspace_params.asJson();
    input.request_body.append(output);
    


    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIDocumentsApi::createWorkspaceCallback);

    worker->execute(&input);
}

void
OAIDocumentsApi::createWorkspaceCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QString json(worker->response);
    OAIBTWorkspaceInfo* output = static_cast<OAIBTWorkspaceInfo*>(create(json, QString("OAIBTWorkspaceInfo")));
    auto wrapper = new OAIQObjectWrapper<OAIBTWorkspaceInfo*> (output);
    wrapper->deleteLater();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit createWorkspaceSignal(output);
    } else {
        emit createWorkspaceSignalE(output, error_type, error_str);
        emit createWorkspaceSignalEFull(worker, error_type, error_str);
    }
}

void
OAIDocumentsApi::deleteDocument(QString* did, bool forever) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/api/documents/{did}");

    QString didPathParam("{"); didPathParam.append("did").append("}");
    fullPath.replace(didPathParam, stringValue(did));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("forever"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(forever)));


    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "DELETE");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIDocumentsApi::deleteDocumentCallback);

    worker->execute(&input);
}

void
OAIDocumentsApi::deleteDocumentCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit deleteDocumentSignal();
    } else {
        emit deleteDocumentSignalE(error_type, error_str);
        emit deleteDocumentSignalEFull(worker, error_type, error_str);
    }
}

void
OAIDocumentsApi::deleteWorkspace(QString* did, QString* wid) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/api/documents/d/{did}/workspaces/{wid}");

    QString didPathParam("{"); didPathParam.append("did").append("}");
    fullPath.replace(didPathParam, stringValue(did));
    QString widPathParam("{"); widPathParam.append("wid").append("}");
    fullPath.replace(widPathParam, stringValue(wid));


    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "DELETE");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIDocumentsApi::deleteWorkspaceCallback);

    worker->execute(&input);
}

void
OAIDocumentsApi::deleteWorkspaceCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit deleteWorkspaceSignal();
    } else {
        emit deleteWorkspaceSignalE(error_type, error_str);
        emit deleteWorkspaceSignalEFull(worker, error_type, error_str);
    }
}

void
OAIDocumentsApi::downloadExternalData(QString* did, QString* fid, QString* if_none_match) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/api/documents/d/{did}/externaldata/{fid}");

    QString didPathParam("{"); didPathParam.append("did").append("}");
    fullPath.replace(didPathParam, stringValue(did));
    QString fidPathParam("{"); fidPathParam.append("fid").append("}");
    fullPath.replace(fidPathParam, stringValue(fid));


    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");




    if (if_none_match != nullptr) {
        input.headers.insert("If-None-Match", "if_none_match");
    }

    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIDocumentsApi::downloadExternalDataCallback);

    worker->execute(&input);
}

void
OAIDocumentsApi::downloadExternalDataCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QString json(worker->response);
    OAIHttpRequestInputFileElement* output = static_cast<OAIHttpRequestInputFileElement*>(create(json, QString("OAIHttpRequestInputFileElement")));
    auto wrapper = new OAIQObjectWrapper<OAIHttpRequestInputFileElement*> (output);
    wrapper->deleteLater();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit downloadExternalDataSignal(output);
    } else {
        emit downloadExternalDataSignalE(output, error_type, error_str);
        emit downloadExternalDataSignalEFull(worker, error_type, error_str);
    }
}

void
OAIDocumentsApi::export2Json(QString* did, QString* wv, QString* wvid, QString* eid, OAIBTExportModelParams& oaibt_export_model_params) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/api/documents/d/{did}/{wv}/{wvid}/e/{eid}/export");

    QString didPathParam("{"); didPathParam.append("did").append("}");
    fullPath.replace(didPathParam, stringValue(did));
    QString wvPathParam("{"); wvPathParam.append("wv").append("}");
    fullPath.replace(wvPathParam, stringValue(wv));
    QString wvidPathParam("{"); wvidPathParam.append("wvid").append("}");
    fullPath.replace(wvidPathParam, stringValue(wvid));
    QString eidPathParam("{"); eidPathParam.append("eid").append("}");
    fullPath.replace(eidPathParam, stringValue(eid));


    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "POST");


    
    QString output = oaibt_export_model_params.asJson();
    input.request_body.append(output);
    


    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIDocumentsApi::export2JsonCallback);

    worker->execute(&input);
}

void
OAIDocumentsApi::export2JsonCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit export2JsonSignal();
    } else {
        emit export2JsonSignalE(error_type, error_str);
        emit export2JsonSignalEFull(worker, error_type, error_str);
    }
}

void
OAIDocumentsApi::getCurrentMicroversion(QString* did, QString* wv, QString* wvid) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/api/documents/d/{did}/{wv}/{wvid}/currentmicroversion");

    QString didPathParam("{"); didPathParam.append("did").append("}");
    fullPath.replace(didPathParam, stringValue(did));
    QString wvPathParam("{"); wvPathParam.append("wv").append("}");
    fullPath.replace(wvPathParam, stringValue(wv));
    QString wvidPathParam("{"); wvidPathParam.append("wvid").append("}");
    fullPath.replace(wvidPathParam, stringValue(wvid));


    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIDocumentsApi::getCurrentMicroversionCallback);

    worker->execute(&input);
}

void
OAIDocumentsApi::getCurrentMicroversionCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QString json(worker->response);
    OAIBTMicroversionInfo* output = static_cast<OAIBTMicroversionInfo*>(create(json, QString("OAIBTMicroversionInfo")));
    auto wrapper = new OAIQObjectWrapper<OAIBTMicroversionInfo*> (output);
    wrapper->deleteLater();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit getCurrentMicroversionSignal(output);
    } else {
        emit getCurrentMicroversionSignalE(output, error_type, error_str);
        emit getCurrentMicroversionSignalEFull(worker, error_type, error_str);
    }
}

void
OAIDocumentsApi::getDocument(QString* did) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/api/documents/{did}");

    QString didPathParam("{"); didPathParam.append("did").append("}");
    fullPath.replace(didPathParam, stringValue(did));


    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIDocumentsApi::getDocumentCallback);

    worker->execute(&input);
}

void
OAIDocumentsApi::getDocumentCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QString json(worker->response);
    OAIBTDocumentInfo* output = static_cast<OAIBTDocumentInfo*>(create(json, QString("OAIBTDocumentInfo")));
    auto wrapper = new OAIQObjectWrapper<OAIBTDocumentInfo*> (output);
    wrapper->deleteLater();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit getDocumentSignal(output);
    } else {
        emit getDocumentSignalE(output, error_type, error_str);
        emit getDocumentSignalEFull(worker, error_type, error_str);
    }
}

void
OAIDocumentsApi::getDocumentAcl(QString* did) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/api/documents/{did}/acl");

    QString didPathParam("{"); didPathParam.append("did").append("}");
    fullPath.replace(didPathParam, stringValue(did));


    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIDocumentsApi::getDocumentAclCallback);

    worker->execute(&input);
}

void
OAIDocumentsApi::getDocumentAclCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QString json(worker->response);
    OAIBTAclInfo* output = static_cast<OAIBTAclInfo*>(create(json, QString("OAIBTAclInfo")));
    auto wrapper = new OAIQObjectWrapper<OAIBTAclInfo*> (output);
    wrapper->deleteLater();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit getDocumentAclSignal(output);
    } else {
        emit getDocumentAclSignalE(output, error_type, error_str);
        emit getDocumentAclSignalEFull(worker, error_type, error_str);
    }
}

void
OAIDocumentsApi::getDocumentPermissionSet(QString* did) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/api/documents/{did}/permissionset");

    QString didPathParam("{"); didPathParam.append("did").append("}");
    fullPath.replace(didPathParam, stringValue(did));


    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIDocumentsApi::getDocumentPermissionSetCallback);

    worker->execute(&input);
}

void
OAIDocumentsApi::getDocumentPermissionSetCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QString json(worker->response);
    OAIBTPermissionSet* output = static_cast<OAIBTPermissionSet*>(create(json, QString("OAIBTPermissionSet")));
    auto wrapper = new OAIQObjectWrapper<OAIBTPermissionSet*> (output);
    wrapper->deleteLater();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit getDocumentPermissionSetSignal(output);
    } else {
        emit getDocumentPermissionSetSignalE(output, error_type, error_str);
        emit getDocumentPermissionSetSignalEFull(worker, error_type, error_str);
    }
}

void
OAIDocumentsApi::getDocumentVersions(QString* did, qint32 offset, qint32 limit) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/api/documents/d/{did}/versions");

    QString didPathParam("{"); didPathParam.append("did").append("}");
    fullPath.replace(didPathParam, stringValue(did));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("offset"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(offset)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("limit"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(limit)));


    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIDocumentsApi::getDocumentVersionsCallback);

    worker->execute(&input);
}

void
OAIDocumentsApi::getDocumentVersionsCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QList<OAIBTVersionInfo*>* output = new QList<OAIBTVersionInfo*>();
    QString json(worker->response);
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    auto wrapper = new OAIQObjectWrapper<QList<OAIBTVersionInfo*>*> (output);
    wrapper->deleteLater();
    foreach(QJsonValue obj, jsonArray) {
        OAIBTVersionInfo* o = new OAIBTVersionInfo();
        QJsonObject jv = obj.toObject();
        QJsonObject * ptr = (QJsonObject*)&jv;
        o->fromJsonObject(*ptr);
        auto objwrapper = new OAIQObjectWrapper<OAIBTVersionInfo*> (o);
        objwrapper->deleteLater();
        output->append(o);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit getDocumentVersionsSignal(output);
    } else {
        emit getDocumentVersionsSignalE(output, error_type, error_str);
        emit getDocumentVersionsSignalEFull(worker, error_type, error_str);
    }
}

void
OAIDocumentsApi::getDocumentWorkspaces(QString* did) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/api/documents/d/{did}/workspaces");

    QString didPathParam("{"); didPathParam.append("did").append("}");
    fullPath.replace(didPathParam, stringValue(did));


    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIDocumentsApi::getDocumentWorkspacesCallback);

    worker->execute(&input);
}

void
OAIDocumentsApi::getDocumentWorkspacesCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QList<OAIBTWorkspaceInfo*>* output = new QList<OAIBTWorkspaceInfo*>();
    QString json(worker->response);
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    auto wrapper = new OAIQObjectWrapper<QList<OAIBTWorkspaceInfo*>*> (output);
    wrapper->deleteLater();
    foreach(QJsonValue obj, jsonArray) {
        OAIBTWorkspaceInfo* o = new OAIBTWorkspaceInfo();
        QJsonObject jv = obj.toObject();
        QJsonObject * ptr = (QJsonObject*)&jv;
        o->fromJsonObject(*ptr);
        auto objwrapper = new OAIQObjectWrapper<OAIBTWorkspaceInfo*> (o);
        objwrapper->deleteLater();
        output->append(o);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit getDocumentWorkspacesSignal(output);
    } else {
        emit getDocumentWorkspacesSignalE(output, error_type, error_str);
        emit getDocumentWorkspacesSignalEFull(worker, error_type, error_str);
    }
}

void
OAIDocumentsApi::getDocuments(QString* q, qint32 filter, QString* owner, qint32 owner_type, QString* sort_column, QString* sort_order, qint32 offset, qint32 limit, QString* label, QString* project, QString* parent_id) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/api/documents");


    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("q"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(q)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("filter"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(filter)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("owner"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(owner)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("ownerType"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(owner_type)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("sortColumn"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(sort_column)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("sortOrder"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(sort_order)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("offset"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(offset)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("limit"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(limit)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("label"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(label)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("project"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(project)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("parentId"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(parent_id)));


    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIDocumentsApi::getDocumentsCallback);

    worker->execute(&input);
}

void
OAIDocumentsApi::getDocumentsCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QString json(worker->response);
    OAIBTGlobalTreeNodeListResponse* output = static_cast<OAIBTGlobalTreeNodeListResponse*>(create(json, QString("OAIBTGlobalTreeNodeListResponse")));
    auto wrapper = new OAIQObjectWrapper<OAIBTGlobalTreeNodeListResponse*> (output);
    wrapper->deleteLater();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit getDocumentsSignal(output);
    } else {
        emit getDocumentsSignalE(output, error_type, error_str);
        emit getDocumentsSignalEFull(worker, error_type, error_str);
    }
}

void
OAIDocumentsApi::getElementsInDocument(QString* did, QString* wvm, QString* wvmid, QString* element_type, QString* element_id, bool with_thumbnails, QString* link_document_id) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/api/documents/d/{did}/{wvm}/{wvmid}/elements");

    QString didPathParam("{"); didPathParam.append("did").append("}");
    fullPath.replace(didPathParam, stringValue(did));
    QString wvmPathParam("{"); wvmPathParam.append("wvm").append("}");
    fullPath.replace(wvmPathParam, stringValue(wvm));
    QString wvmidPathParam("{"); wvmidPathParam.append("wvmid").append("}");
    fullPath.replace(wvmidPathParam, stringValue(wvmid));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("elementType"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(element_type)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("elementId"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(element_id)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("withThumbnails"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(with_thumbnails)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("linkDocumentId"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(link_document_id)));


    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIDocumentsApi::getElementsInDocumentCallback);

    worker->execute(&input);
}

void
OAIDocumentsApi::getElementsInDocumentCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QList<OAIBTDocumentElementInfo*>* output = new QList<OAIBTDocumentElementInfo*>();
    QString json(worker->response);
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    auto wrapper = new OAIQObjectWrapper<QList<OAIBTDocumentElementInfo*>*> (output);
    wrapper->deleteLater();
    foreach(QJsonValue obj, jsonArray) {
        OAIBTDocumentElementInfo* o = new OAIBTDocumentElementInfo();
        QJsonObject jv = obj.toObject();
        QJsonObject * ptr = (QJsonObject*)&jv;
        o->fromJsonObject(*ptr);
        auto objwrapper = new OAIQObjectWrapper<OAIBTDocumentElementInfo*> (o);
        objwrapper->deleteLater();
        output->append(o);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit getElementsInDocumentSignal(output);
    } else {
        emit getElementsInDocumentSignalE(output, error_type, error_str);
        emit getElementsInDocumentSignalEFull(worker, error_type, error_str);
    }
}

void
OAIDocumentsApi::getInsertables(QString* did, QString* wvm, QString* wvmid, QList<QString*>* beta_capability_ids, bool include_parts, bool include_surfaces, bool include_wires, bool include_sketches, bool include_reference_features, bool include_assemblies, bool include_features, bool include_feature_studios, bool include_part_studios, bool include_blobs, bool include_meshes, bool include_flattened_bodies, QString* allowed_blob_mime_types, qint32 max_feature_script_version, bool include_applications, QString* allowed_application_mime_types, bool include_composite_parts, bool include_fs_tables) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/api/documents/d/{did}/{wvm}/{wvmid}/insertables");

    QString didPathParam("{"); didPathParam.append("did").append("}");
    fullPath.replace(didPathParam, stringValue(did));
    QString wvmPathParam("{"); wvmPathParam.append("wvm").append("}");
    fullPath.replace(wvmPathParam, stringValue(wvm));
    QString wvmidPathParam("{"); wvmidPathParam.append("wvmid").append("}");
    fullPath.replace(wvmidPathParam, stringValue(wvmid));



    if (beta_capability_ids->size() > 0) {
      if (QString("multi").indexOf("multi") == 0) {
        foreach(QString* t, *beta_capability_ids) {
          if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
          else
            fullPath.append("?");
          fullPath.append("betaCapabilityIds=").append(stringValue(t));
        }
      }
      else if (QString("multi").indexOf("ssv") == 0) {
        if (fullPath.indexOf("?") > 0)
          fullPath.append("&");
        else
          fullPath.append("?");
        fullPath.append("betaCapabilityIds=");
        qint32 count = 0;
        foreach(QString* t, *beta_capability_ids) {
          if (count > 0) {
            fullPath.append(" ");
          }
          fullPath.append(stringValue(t));
        }
      }
      else if (QString("multi").indexOf("tsv") == 0) {
        if (fullPath.indexOf("?") > 0)
          fullPath.append("&");
        else
          fullPath.append("?");
        fullPath.append("betaCapabilityIds=");
        qint32 count = 0;
        foreach(QString* t, *beta_capability_ids) {
          if (count > 0) {
            fullPath.append("\t");
          }
          fullPath.append(stringValue(t));
        }
      }
    }

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("includeParts"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(include_parts)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("includeSurfaces"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(include_surfaces)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("includeWires"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(include_wires)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("includeSketches"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(include_sketches)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("includeReferenceFeatures"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(include_reference_features)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("includeAssemblies"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(include_assemblies)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("includeFeatures"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(include_features)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("includeFeatureStudios"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(include_feature_studios)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("includePartStudios"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(include_part_studios)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("includeBlobs"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(include_blobs)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("includeMeshes"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(include_meshes)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("includeFlattenedBodies"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(include_flattened_bodies)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("allowedBlobMimeTypes"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(allowed_blob_mime_types)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("maxFeatureScriptVersion"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(max_feature_script_version)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("includeApplications"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(include_applications)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("allowedApplicationMimeTypes"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(allowed_application_mime_types)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("includeCompositeParts"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(include_composite_parts)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("includeFSTables"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(include_fs_tables)));


    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIDocumentsApi::getInsertablesCallback);

    worker->execute(&input);
}

void
OAIDocumentsApi::getInsertablesCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QString json(worker->response);
    OAIBTInsertablesListResponse* output = static_cast<OAIBTInsertablesListResponse*>(create(json, QString("OAIBTInsertablesListResponse")));
    auto wrapper = new OAIQObjectWrapper<OAIBTInsertablesListResponse*> (output);
    wrapper->deleteLater();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit getInsertablesSignal(output);
    } else {
        emit getInsertablesSignalE(output, error_type, error_str);
        emit getInsertablesSignalEFull(worker, error_type, error_str);
    }
}

void
OAIDocumentsApi::getVersion(QString* did, QString* vid, bool parents, QString* link_document_id) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/api/documents/d/{did}/versions/{vid}");

    QString didPathParam("{"); didPathParam.append("did").append("}");
    fullPath.replace(didPathParam, stringValue(did));
    QString vidPathParam("{"); vidPathParam.append("vid").append("}");
    fullPath.replace(vidPathParam, stringValue(vid));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("parents"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(parents)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("linkDocumentId"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(link_document_id)));


    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIDocumentsApi::getVersionCallback);

    worker->execute(&input);
}

void
OAIDocumentsApi::getVersionCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QString json(worker->response);
    OAIBTVersionInfo* output = static_cast<OAIBTVersionInfo*>(create(json, QString("OAIBTVersionInfo")));
    auto wrapper = new OAIQObjectWrapper<OAIBTVersionInfo*> (output);
    wrapper->deleteLater();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit getVersionSignal(output);
    } else {
        emit getVersionSignalE(output, error_type, error_str);
        emit getVersionSignalEFull(worker, error_type, error_str);
    }
}

void
OAIDocumentsApi::mergeIntoWorkspace(QString* did, QString* wid, OAIBTVersionOrWorkspaceInfo& oaibt_version_or_workspace_info) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/api/documents/{did}/workspaces/{wid}/merge");

    QString didPathParam("{"); didPathParam.append("did").append("}");
    fullPath.replace(didPathParam, stringValue(did));
    QString widPathParam("{"); widPathParam.append("wid").append("}");
    fullPath.replace(widPathParam, stringValue(wid));


    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "POST");


    
    QString output = oaibt_version_or_workspace_info.asJson();
    input.request_body.append(output);
    


    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIDocumentsApi::mergeIntoWorkspaceCallback);

    worker->execute(&input);
}

void
OAIDocumentsApi::mergeIntoWorkspaceCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QString json(worker->response);
    OAIBTDocumentMergeInfo* output = static_cast<OAIBTDocumentMergeInfo*>(create(json, QString("OAIBTDocumentMergeInfo")));
    auto wrapper = new OAIQObjectWrapper<OAIBTDocumentMergeInfo*> (output);
    wrapper->deleteLater();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit mergeIntoWorkspaceSignal(output);
    } else {
        emit mergeIntoWorkspaceSignalE(output, error_type, error_str);
        emit mergeIntoWorkspaceSignalEFull(worker, error_type, error_str);
    }
}

void
OAIDocumentsApi::moveElementsToDocument(QString* did, QString* wid, OAIBTMoveElementParams& oaibt_move_element_params) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/api/documents/d/{did}/w/{wid}/moveelement");

    QString didPathParam("{"); didPathParam.append("did").append("}");
    fullPath.replace(didPathParam, stringValue(did));
    QString widPathParam("{"); widPathParam.append("wid").append("}");
    fullPath.replace(widPathParam, stringValue(wid));


    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "POST");


    
    QString output = oaibt_move_element_params.asJson();
    input.request_body.append(output);
    


    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIDocumentsApi::moveElementsToDocumentCallback);

    worker->execute(&input);
}

void
OAIDocumentsApi::moveElementsToDocumentCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QString json(worker->response);
    OAIBTMoveElementInfo* output = static_cast<OAIBTMoveElementInfo*>(create(json, QString("OAIBTMoveElementInfo")));
    auto wrapper = new OAIQObjectWrapper<OAIBTMoveElementInfo*> (output);
    wrapper->deleteLater();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit moveElementsToDocumentSignal(output);
    } else {
        emit moveElementsToDocumentSignalE(output, error_type, error_str);
        emit moveElementsToDocumentSignalEFull(worker, error_type, error_str);
    }
}

void
OAIDocumentsApi::restoreFromHistory(QString* did, QString* wid, QString* vm, QString* vmid) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/api/documents/{did}/w/{wid}/restore/{vm}/{vmid}");

    QString didPathParam("{"); didPathParam.append("did").append("}");
    fullPath.replace(didPathParam, stringValue(did));
    QString widPathParam("{"); widPathParam.append("wid").append("}");
    fullPath.replace(widPathParam, stringValue(wid));
    QString vmPathParam("{"); vmPathParam.append("vm").append("}");
    fullPath.replace(vmPathParam, stringValue(vm));
    QString vmidPathParam("{"); vmidPathParam.append("vmid").append("}");
    fullPath.replace(vmidPathParam, stringValue(vmid));


    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "POST");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIDocumentsApi::restoreFromHistoryCallback);

    worker->execute(&input);
}

void
OAIDocumentsApi::restoreFromHistoryCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit restoreFromHistorySignal();
    } else {
        emit restoreFromHistorySignalE(error_type, error_str);
        emit restoreFromHistorySignalEFull(worker, error_type, error_str);
    }
}

void
OAIDocumentsApi::search(OAIBTDocumentSearchParams& oaibt_document_search_params) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/api/documents/search");



    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "POST");


    
    QString output = oaibt_document_search_params.asJson();
    input.request_body.append(output);
    


    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIDocumentsApi::searchCallback);

    worker->execute(&input);
}

void
OAIDocumentsApi::searchCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit searchSignal();
    } else {
        emit searchSignalE(error_type, error_str);
        emit searchSignalEFull(worker, error_type, error_str);
    }
}

void
OAIDocumentsApi::shareDocument(QString* did, OAIBTShareParams& oaibt_share_params) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/api/documents/{did}/share");

    QString didPathParam("{"); didPathParam.append("did").append("}");
    fullPath.replace(didPathParam, stringValue(did));


    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "POST");


    
    QString output = oaibt_share_params.asJson();
    input.request_body.append(output);
    


    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIDocumentsApi::shareDocumentCallback);

    worker->execute(&input);
}

void
OAIDocumentsApi::shareDocumentCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QString json(worker->response);
    OAIBTAclInfo* output = static_cast<OAIBTAclInfo*>(create(json, QString("OAIBTAclInfo")));
    auto wrapper = new OAIQObjectWrapper<OAIBTAclInfo*> (output);
    wrapper->deleteLater();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit shareDocumentSignal(output);
    } else {
        emit shareDocumentSignalE(output, error_type, error_str);
        emit shareDocumentSignalEFull(worker, error_type, error_str);
    }
}

void
OAIDocumentsApi::syncApplicationElements(QString* did, QString* wid, QList<QString*>* application_element_ids, QString* description) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/api/documents/d/{did}/w/{wid}/syncApplicationElements");

    QString didPathParam("{"); didPathParam.append("did").append("}");
    fullPath.replace(didPathParam, stringValue(did));
    QString widPathParam("{"); widPathParam.append("wid").append("}");
    fullPath.replace(widPathParam, stringValue(wid));



    if (application_element_ids->size() > 0) {
      if (QString("multi").indexOf("multi") == 0) {
        foreach(QString* t, *application_element_ids) {
          if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
          else
            fullPath.append("?");
          fullPath.append("applicationElementIds=").append(stringValue(t));
        }
      }
      else if (QString("multi").indexOf("ssv") == 0) {
        if (fullPath.indexOf("?") > 0)
          fullPath.append("&");
        else
          fullPath.append("?");
        fullPath.append("applicationElementIds=");
        qint32 count = 0;
        foreach(QString* t, *application_element_ids) {
          if (count > 0) {
            fullPath.append(" ");
          }
          fullPath.append(stringValue(t));
        }
      }
      else if (QString("multi").indexOf("tsv") == 0) {
        if (fullPath.indexOf("?") > 0)
          fullPath.append("&");
        else
          fullPath.append("?");
        fullPath.append("applicationElementIds=");
        qint32 count = 0;
        foreach(QString* t, *application_element_ids) {
          if (count > 0) {
            fullPath.append("\t");
          }
          fullPath.append(stringValue(t));
        }
      }
    }

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("description"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(description)));


    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "POST");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIDocumentsApi::syncApplicationElementsCallback);

    worker->execute(&input);
}

void
OAIDocumentsApi::syncApplicationElementsCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit syncApplicationElementsSignal();
    } else {
        emit syncApplicationElementsSignalE(error_type, error_str);
        emit syncApplicationElementsSignalEFull(worker, error_type, error_str);
    }
}

void
OAIDocumentsApi::unShareDocument(QString* did, QString* eid, qint32 entry_type) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/api/documents/{did}/share/{eid}");

    QString didPathParam("{"); didPathParam.append("did").append("}");
    fullPath.replace(didPathParam, stringValue(did));
    QString eidPathParam("{"); eidPathParam.append("eid").append("}");
    fullPath.replace(eidPathParam, stringValue(eid));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("entryType"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(entry_type)));


    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "DELETE");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIDocumentsApi::unShareDocumentCallback);

    worker->execute(&input);
}

void
OAIDocumentsApi::unShareDocumentCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit unShareDocumentSignal();
    } else {
        emit unShareDocumentSignalE(error_type, error_str);
        emit unShareDocumentSignalEFull(worker, error_type, error_str);
    }
}

void
OAIDocumentsApi::updateDocumentAttributes(QString* did, OAIBTDocumentParams& oaibt_document_params) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/api/documents/{did}");

    QString didPathParam("{"); didPathParam.append("did").append("}");
    fullPath.replace(didPathParam, stringValue(did));


    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "POST");


    
    QString output = oaibt_document_params.asJson();
    input.request_body.append(output);
    


    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIDocumentsApi::updateDocumentAttributesCallback);

    worker->execute(&input);
}

void
OAIDocumentsApi::updateDocumentAttributesCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit updateDocumentAttributesSignal();
    } else {
        emit updateDocumentAttributesSignalE(error_type, error_str);
        emit updateDocumentAttributesSignalEFull(worker, error_type, error_str);
    }
}

void
OAIDocumentsApi::updateExternalReferencesToLatestDocuments(QString* did, QString* wid, QString* eid, OAIBTLinkToLatestDocumentParams& oaibt_link_to_latest_document_params) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/api/documents/d/{did}/w/{wid}/e/{eid}/latestdocumentreferences");

    QString didPathParam("{"); didPathParam.append("did").append("}");
    fullPath.replace(didPathParam, stringValue(did));
    QString widPathParam("{"); widPathParam.append("wid").append("}");
    fullPath.replace(widPathParam, stringValue(wid));
    QString eidPathParam("{"); eidPathParam.append("eid").append("}");
    fullPath.replace(eidPathParam, stringValue(eid));


    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "POST");


    
    QString output = oaibt_link_to_latest_document_params.asJson();
    input.request_body.append(output);
    


    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIDocumentsApi::updateExternalReferencesToLatestDocumentsCallback);

    worker->execute(&input);
}

void
OAIDocumentsApi::updateExternalReferencesToLatestDocumentsCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QString json(worker->response);
    OAIBTLinkToLatestDocumentInfo* output = static_cast<OAIBTLinkToLatestDocumentInfo*>(create(json, QString("OAIBTLinkToLatestDocumentInfo")));
    auto wrapper = new OAIQObjectWrapper<OAIBTLinkToLatestDocumentInfo*> (output);
    wrapper->deleteLater();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit updateExternalReferencesToLatestDocumentsSignal(output);
    } else {
        emit updateExternalReferencesToLatestDocumentsSignalE(output, error_type, error_str);
        emit updateExternalReferencesToLatestDocumentsSignalEFull(worker, error_type, error_str);
    }
}


}
