/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * OpenAPI spec version: 1.111
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIBTMetadataPropertySummaryInfo.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIBTMetadataPropertySummaryInfo::OAIBTMetadataPropertySummaryInfo(QString json) {
    init();
    this->fromJson(json);
}

OAIBTMetadataPropertySummaryInfo::OAIBTMetadataPropertySummaryInfo() {
    init();
}

OAIBTMetadataPropertySummaryInfo::~OAIBTMetadataPropertySummaryInfo() {
    this->cleanup();
}

void
OAIBTMetadataPropertySummaryInfo::init() {
    description = new QString("");
    m_description_isSet = false;
    editable_in_microversion = false;
    m_editable_in_microversion_isSet = false;
    editable_in_version = false;
    m_editable_in_version_isSet = false;
    href = new QString("");
    m_href_isSet = false;
    id = new QString("");
    m_id_isSet = false;
    name = new QString("");
    m_name_isSet = false;
    _namespace = new QString("");
    m__namespace_isSet = false;
    owner_id = new QString("");
    m_owner_id_isSet = false;
    owner_type = 0;
    m_owner_type_isSet = false;
    property_config_summary_info_list = new QList<OAIBTMetadataPropertyConfigSummaryInfo*>();
    m_property_config_summary_info_list_isSet = false;
    ui_readonly_in_microversion = false;
    m_ui_readonly_in_microversion_isSet = false;
    ui_readonly_in_version = false;
    m_ui_readonly_in_version_isSet = false;
    value_type = 0;
    m_value_type_isSet = false;
    view_ref = new QString("");
    m_view_ref_isSet = false;
}

void
OAIBTMetadataPropertySummaryInfo::cleanup() {
    if(description != nullptr) { 
        delete description;
    }


    if(href != nullptr) { 
        delete href;
    }
    if(id != nullptr) { 
        delete id;
    }
    if(name != nullptr) { 
        delete name;
    }
    if(_namespace != nullptr) { 
        delete _namespace;
    }
    if(owner_id != nullptr) { 
        delete owner_id;
    }

    if(property_config_summary_info_list != nullptr) { 
        auto arr = property_config_summary_info_list;
        for(auto o: *arr) { 
            delete o;
        }
        delete property_config_summary_info_list;
    }



    if(view_ref != nullptr) { 
        delete view_ref;
    }
}

OAIBTMetadataPropertySummaryInfo*
OAIBTMetadataPropertySummaryInfo::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIBTMetadataPropertySummaryInfo::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&description, pJson["description"], "QString", "QString");
    
    ::OpenAPI::setValue(&editable_in_microversion, pJson["editableInMicroversion"], "bool", "");
    
    ::OpenAPI::setValue(&editable_in_version, pJson["editableInVersion"], "bool", "");
    
    ::OpenAPI::setValue(&href, pJson["href"], "QString", "QString");
    
    ::OpenAPI::setValue(&id, pJson["id"], "QString", "QString");
    
    ::OpenAPI::setValue(&name, pJson["name"], "QString", "QString");
    
    ::OpenAPI::setValue(&_namespace, pJson["namespace"], "QString", "QString");
    
    ::OpenAPI::setValue(&owner_id, pJson["ownerId"], "QString", "QString");
    
    ::OpenAPI::setValue(&owner_type, pJson["ownerType"], "qint32", "");
    
    
    ::OpenAPI::setValue(&property_config_summary_info_list, pJson["propertyConfigSummaryInfoList"], "QList", "OAIBTMetadataPropertyConfigSummaryInfo");
    ::OpenAPI::setValue(&ui_readonly_in_microversion, pJson["uiReadonlyInMicroversion"], "bool", "");
    
    ::OpenAPI::setValue(&ui_readonly_in_version, pJson["uiReadonlyInVersion"], "bool", "");
    
    ::OpenAPI::setValue(&value_type, pJson["valueType"], "qint32", "");
    
    ::OpenAPI::setValue(&view_ref, pJson["viewRef"], "QString", "QString");
    
}

QString
OAIBTMetadataPropertySummaryInfo::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIBTMetadataPropertySummaryInfo::asJsonObject() {
    QJsonObject obj;
    if(description != nullptr && *description != QString("")){
        toJsonValue(QString("description"), description, obj, QString("QString"));
    }
    if(m_editable_in_microversion_isSet){
        obj.insert("editableInMicroversion", QJsonValue(editable_in_microversion));
    }
    if(m_editable_in_version_isSet){
        obj.insert("editableInVersion", QJsonValue(editable_in_version));
    }
    if(href != nullptr && *href != QString("")){
        toJsonValue(QString("href"), href, obj, QString("QString"));
    }
    if(id != nullptr && *id != QString("")){
        toJsonValue(QString("id"), id, obj, QString("QString"));
    }
    if(name != nullptr && *name != QString("")){
        toJsonValue(QString("name"), name, obj, QString("QString"));
    }
    if(_namespace != nullptr && *_namespace != QString("")){
        toJsonValue(QString("namespace"), _namespace, obj, QString("QString"));
    }
    if(owner_id != nullptr && *owner_id != QString("")){
        toJsonValue(QString("ownerId"), owner_id, obj, QString("QString"));
    }
    if(m_owner_type_isSet){
        obj.insert("ownerType", QJsonValue(owner_type));
    }
    if(property_config_summary_info_list->size() > 0){
        toJsonArray((QList<void*>*)property_config_summary_info_list, obj, "propertyConfigSummaryInfoList", "OAIBTMetadataPropertyConfigSummaryInfo");
    }
    if(m_ui_readonly_in_microversion_isSet){
        obj.insert("uiReadonlyInMicroversion", QJsonValue(ui_readonly_in_microversion));
    }
    if(m_ui_readonly_in_version_isSet){
        obj.insert("uiReadonlyInVersion", QJsonValue(ui_readonly_in_version));
    }
    if(m_value_type_isSet){
        obj.insert("valueType", QJsonValue(value_type));
    }
    if(view_ref != nullptr && *view_ref != QString("")){
        toJsonValue(QString("viewRef"), view_ref, obj, QString("QString"));
    }

    return obj;
}

QString*
OAIBTMetadataPropertySummaryInfo::getDescription() {
    return description;
}
void
OAIBTMetadataPropertySummaryInfo::setDescription(QString* description) {
    this->description = description;
    this->m_description_isSet = true;
}

bool
OAIBTMetadataPropertySummaryInfo::isEditableInMicroversion() {
    return editable_in_microversion;
}
void
OAIBTMetadataPropertySummaryInfo::setEditableInMicroversion(bool editable_in_microversion) {
    this->editable_in_microversion = editable_in_microversion;
    this->m_editable_in_microversion_isSet = true;
}

bool
OAIBTMetadataPropertySummaryInfo::isEditableInVersion() {
    return editable_in_version;
}
void
OAIBTMetadataPropertySummaryInfo::setEditableInVersion(bool editable_in_version) {
    this->editable_in_version = editable_in_version;
    this->m_editable_in_version_isSet = true;
}

QString*
OAIBTMetadataPropertySummaryInfo::getHref() {
    return href;
}
void
OAIBTMetadataPropertySummaryInfo::setHref(QString* href) {
    this->href = href;
    this->m_href_isSet = true;
}

QString*
OAIBTMetadataPropertySummaryInfo::getId() {
    return id;
}
void
OAIBTMetadataPropertySummaryInfo::setId(QString* id) {
    this->id = id;
    this->m_id_isSet = true;
}

QString*
OAIBTMetadataPropertySummaryInfo::getName() {
    return name;
}
void
OAIBTMetadataPropertySummaryInfo::setName(QString* name) {
    this->name = name;
    this->m_name_isSet = true;
}

QString*
OAIBTMetadataPropertySummaryInfo::getNamespace() {
    return _namespace;
}
void
OAIBTMetadataPropertySummaryInfo::setNamespace(QString* _namespace) {
    this->_namespace = _namespace;
    this->m__namespace_isSet = true;
}

QString*
OAIBTMetadataPropertySummaryInfo::getOwnerId() {
    return owner_id;
}
void
OAIBTMetadataPropertySummaryInfo::setOwnerId(QString* owner_id) {
    this->owner_id = owner_id;
    this->m_owner_id_isSet = true;
}

qint32
OAIBTMetadataPropertySummaryInfo::getOwnerType() {
    return owner_type;
}
void
OAIBTMetadataPropertySummaryInfo::setOwnerType(qint32 owner_type) {
    this->owner_type = owner_type;
    this->m_owner_type_isSet = true;
}

QList<OAIBTMetadataPropertyConfigSummaryInfo*>*
OAIBTMetadataPropertySummaryInfo::getPropertyConfigSummaryInfoList() {
    return property_config_summary_info_list;
}
void
OAIBTMetadataPropertySummaryInfo::setPropertyConfigSummaryInfoList(QList<OAIBTMetadataPropertyConfigSummaryInfo*>* property_config_summary_info_list) {
    this->property_config_summary_info_list = property_config_summary_info_list;
    this->m_property_config_summary_info_list_isSet = true;
}

bool
OAIBTMetadataPropertySummaryInfo::isUiReadonlyInMicroversion() {
    return ui_readonly_in_microversion;
}
void
OAIBTMetadataPropertySummaryInfo::setUiReadonlyInMicroversion(bool ui_readonly_in_microversion) {
    this->ui_readonly_in_microversion = ui_readonly_in_microversion;
    this->m_ui_readonly_in_microversion_isSet = true;
}

bool
OAIBTMetadataPropertySummaryInfo::isUiReadonlyInVersion() {
    return ui_readonly_in_version;
}
void
OAIBTMetadataPropertySummaryInfo::setUiReadonlyInVersion(bool ui_readonly_in_version) {
    this->ui_readonly_in_version = ui_readonly_in_version;
    this->m_ui_readonly_in_version_isSet = true;
}

qint32
OAIBTMetadataPropertySummaryInfo::getValueType() {
    return value_type;
}
void
OAIBTMetadataPropertySummaryInfo::setValueType(qint32 value_type) {
    this->value_type = value_type;
    this->m_value_type_isSet = true;
}

QString*
OAIBTMetadataPropertySummaryInfo::getViewRef() {
    return view_ref;
}
void
OAIBTMetadataPropertySummaryInfo::setViewRef(QString* view_ref) {
    this->view_ref = view_ref;
    this->m_view_ref_isSet = true;
}


bool
OAIBTMetadataPropertySummaryInfo::isSet(){
    bool isObjectUpdated = false;
    do{
        if(description != nullptr && *description != QString("")){ isObjectUpdated = true; break;}
        if(m_editable_in_microversion_isSet){ isObjectUpdated = true; break;}
        if(m_editable_in_version_isSet){ isObjectUpdated = true; break;}
        if(href != nullptr && *href != QString("")){ isObjectUpdated = true; break;}
        if(id != nullptr && *id != QString("")){ isObjectUpdated = true; break;}
        if(name != nullptr && *name != QString("")){ isObjectUpdated = true; break;}
        if(_namespace != nullptr && *_namespace != QString("")){ isObjectUpdated = true; break;}
        if(owner_id != nullptr && *owner_id != QString("")){ isObjectUpdated = true; break;}
        if(m_owner_type_isSet){ isObjectUpdated = true; break;}
        if(property_config_summary_info_list->size() > 0){ isObjectUpdated = true; break;}
        if(m_ui_readonly_in_microversion_isSet){ isObjectUpdated = true; break;}
        if(m_ui_readonly_in_version_isSet){ isObjectUpdated = true; break;}
        if(m_value_type_isSet){ isObjectUpdated = true; break;}
        if(view_ref != nullptr && *view_ref != QString("")){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

