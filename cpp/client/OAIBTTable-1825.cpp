/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * OpenAPI spec version: 1.111
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIBTTable-1825.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIBTTable-1825::OAIBTTable-1825(QString json) {
    init();
    this->fromJson(json);
}

OAIBTTable-1825::OAIBTTable-1825() {
    init();
}

OAIBTTable-1825::~OAIBTTable-1825() {
    this->cleanup();
}

void
OAIBTTable-1825::init() {
    all_row_values = new QList<QList<QString*>*>();
    m_all_row_values_isSet = false;
    bt_type = new QString("");
    m_bt_type_isSet = false;
    column_count = 0;
    m_column_count_isSet = false;
    frozen_columns = 0;
    m_frozen_columns_isSet = false;
    node_id = new QString("");
    m_node_id_isSet = false;
    read_only = false;
    m_read_only_isSet = false;
    row_count = 0;
    m_row_count_isSet = false;
    table_columns = new QList<OAIBTTableColumnInfo-1222*>();
    m_table_columns_isSet = false;
    table_id = new QString("");
    m_table_id_isSet = false;
    table_rows = new QList<OAIBTTableRow-1054*>();
    m_table_rows_isSet = false;
    title = new QString("");
    m_title_isSet = false;
}

void
OAIBTTable-1825::cleanup() {
    if(all_row_values != nullptr) { 
        auto arr = all_row_values;
        for(auto o: *arr) { 
            for(auto o1: *o) {
                delete o1;
            }
            delete o;
        }
        delete all_row_values;
    }
    if(bt_type != nullptr) { 
        delete bt_type;
    }


    if(node_id != nullptr) { 
        delete node_id;
    }


    if(table_columns != nullptr) { 
        auto arr = table_columns;
        for(auto o: *arr) { 
            delete o;
        }
        delete table_columns;
    }
    if(table_id != nullptr) { 
        delete table_id;
    }
    if(table_rows != nullptr) { 
        auto arr = table_rows;
        for(auto o: *arr) { 
            delete o;
        }
        delete table_rows;
    }
    if(title != nullptr) { 
        delete title;
    }
}

OAIBTTable-1825*
OAIBTTable-1825::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIBTTable-1825::fromJsonObject(QJsonObject pJson) {
    
    
    if(pJson["allRowValues"].isArray()){
        auto arr = pJson["allRowValues"].toArray();
        for (const QJsonValue & jval : arr) {
            auto all_row_values_item = new QList<QString*>();
            
            auto jsonval = jval.toObject();
            ::OpenAPI::setValue(all_row_values_item, jsonval, "QList", "QString");
            all_row_values->push_back(all_row_values_item);
        }
    }
    ::OpenAPI::setValue(&bt_type, pJson["btType"], "QString", "QString");
    
    ::OpenAPI::setValue(&column_count, pJson["columnCount"], "qint32", "");
    
    ::OpenAPI::setValue(&frozen_columns, pJson["frozenColumns"], "qint32", "");
    
    ::OpenAPI::setValue(&node_id, pJson["nodeId"], "QString", "QString");
    
    ::OpenAPI::setValue(&read_only, pJson["readOnly"], "bool", "");
    
    ::OpenAPI::setValue(&row_count, pJson["rowCount"], "qint32", "");
    
    
    ::OpenAPI::setValue(&table_columns, pJson["tableColumns"], "QList", "OAIBTTableColumnInfo-1222");
    ::OpenAPI::setValue(&table_id, pJson["tableId"], "QString", "QString");
    
    
    ::OpenAPI::setValue(&table_rows, pJson["tableRows"], "QList", "OAIBTTableRow-1054");
    ::OpenAPI::setValue(&title, pJson["title"], "QString", "QString");
    
}

QString
OAIBTTable-1825::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIBTTable-1825::asJsonObject() {
    QJsonObject obj;
    if(all_row_values->size() > 0){
        QJsonArray jarray;
        for(auto items : *all_row_values){
            QJsonObject jobj;
            toJsonArray((QList<void*>*)items, jobj, "allRowValues", "QString");
            jarray.append(jobj.value("allRowValues"));
        }
        obj.insert("allRowValues", jarray);
    }
    if(bt_type != nullptr && *bt_type != QString("")){
        toJsonValue(QString("btType"), bt_type, obj, QString("QString"));
    }
    if(m_column_count_isSet){
        obj.insert("columnCount", QJsonValue(column_count));
    }
    if(m_frozen_columns_isSet){
        obj.insert("frozenColumns", QJsonValue(frozen_columns));
    }
    if(node_id != nullptr && *node_id != QString("")){
        toJsonValue(QString("nodeId"), node_id, obj, QString("QString"));
    }
    if(m_read_only_isSet){
        obj.insert("readOnly", QJsonValue(read_only));
    }
    if(m_row_count_isSet){
        obj.insert("rowCount", QJsonValue(row_count));
    }
    if(table_columns->size() > 0){
        toJsonArray((QList<void*>*)table_columns, obj, "tableColumns", "OAIBTTableColumnInfo-1222");
    }
    if(table_id != nullptr && *table_id != QString("")){
        toJsonValue(QString("tableId"), table_id, obj, QString("QString"));
    }
    if(table_rows->size() > 0){
        toJsonArray((QList<void*>*)table_rows, obj, "tableRows", "OAIBTTableRow-1054");
    }
    if(title != nullptr && *title != QString("")){
        toJsonValue(QString("title"), title, obj, QString("QString"));
    }

    return obj;
}

QList<QList<QString*>*>*
OAIBTTable-1825::getAllRowValues() {
    return all_row_values;
}
void
OAIBTTable-1825::setAllRowValues(QList<QList<QString*>*>* all_row_values) {
    this->all_row_values = all_row_values;
    this->m_all_row_values_isSet = true;
}

QString*
OAIBTTable-1825::getBtType() {
    return bt_type;
}
void
OAIBTTable-1825::setBtType(QString* bt_type) {
    this->bt_type = bt_type;
    this->m_bt_type_isSet = true;
}

qint32
OAIBTTable-1825::getColumnCount() {
    return column_count;
}
void
OAIBTTable-1825::setColumnCount(qint32 column_count) {
    this->column_count = column_count;
    this->m_column_count_isSet = true;
}

qint32
OAIBTTable-1825::getFrozenColumns() {
    return frozen_columns;
}
void
OAIBTTable-1825::setFrozenColumns(qint32 frozen_columns) {
    this->frozen_columns = frozen_columns;
    this->m_frozen_columns_isSet = true;
}

QString*
OAIBTTable-1825::getNodeId() {
    return node_id;
}
void
OAIBTTable-1825::setNodeId(QString* node_id) {
    this->node_id = node_id;
    this->m_node_id_isSet = true;
}

bool
OAIBTTable-1825::isReadOnly() {
    return read_only;
}
void
OAIBTTable-1825::setReadOnly(bool read_only) {
    this->read_only = read_only;
    this->m_read_only_isSet = true;
}

qint32
OAIBTTable-1825::getRowCount() {
    return row_count;
}
void
OAIBTTable-1825::setRowCount(qint32 row_count) {
    this->row_count = row_count;
    this->m_row_count_isSet = true;
}

QList<OAIBTTableColumnInfo-1222*>*
OAIBTTable-1825::getTableColumns() {
    return table_columns;
}
void
OAIBTTable-1825::setTableColumns(QList<OAIBTTableColumnInfo-1222*>* table_columns) {
    this->table_columns = table_columns;
    this->m_table_columns_isSet = true;
}

QString*
OAIBTTable-1825::getTableId() {
    return table_id;
}
void
OAIBTTable-1825::setTableId(QString* table_id) {
    this->table_id = table_id;
    this->m_table_id_isSet = true;
}

QList<OAIBTTableRow-1054*>*
OAIBTTable-1825::getTableRows() {
    return table_rows;
}
void
OAIBTTable-1825::setTableRows(QList<OAIBTTableRow-1054*>* table_rows) {
    this->table_rows = table_rows;
    this->m_table_rows_isSet = true;
}

QString*
OAIBTTable-1825::getTitle() {
    return title;
}
void
OAIBTTable-1825::setTitle(QString* title) {
    this->title = title;
    this->m_title_isSet = true;
}


bool
OAIBTTable-1825::isSet(){
    bool isObjectUpdated = false;
    do{
        if(all_row_values->size() > 0){ isObjectUpdated = true; break;}
        if(bt_type != nullptr && *bt_type != QString("")){ isObjectUpdated = true; break;}
        if(m_column_count_isSet){ isObjectUpdated = true; break;}
        if(m_frozen_columns_isSet){ isObjectUpdated = true; break;}
        if(node_id != nullptr && *node_id != QString("")){ isObjectUpdated = true; break;}
        if(m_read_only_isSet){ isObjectUpdated = true; break;}
        if(m_row_count_isSet){ isObjectUpdated = true; break;}
        if(table_columns->size() > 0){ isObjectUpdated = true; break;}
        if(table_id != nullptr && *table_id != QString("")){ isObjectUpdated = true; break;}
        if(table_rows->size() > 0){ isObjectUpdated = true; break;}
        if(title != nullptr && *title != QString("")){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

