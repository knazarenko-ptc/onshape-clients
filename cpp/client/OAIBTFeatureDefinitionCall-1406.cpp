/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * OpenAPI spec version: 1.111
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIBTFeatureDefinitionCall-1406.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIBTFeatureDefinitionCall-1406::OAIBTFeatureDefinitionCall-1406(QString json) {
    init();
    this->fromJson(json);
}

OAIBTFeatureDefinitionCall-1406::OAIBTFeatureDefinitionCall-1406() {
    init();
}

OAIBTFeatureDefinitionCall-1406::~OAIBTFeatureDefinitionCall-1406() {
    this->cleanup();
}

void
OAIBTFeatureDefinitionCall-1406::init() {
    bt_type = new QString("");
    m_bt_type_isSet = false;
    library_version = 0;
    m_library_version_isSet = false;
    microversion_skew = false;
    m_microversion_skew_isSet = false;
    reject_microversion_skew = false;
    m_reject_microversion_skew_isSet = false;
    serialization_version = new QString("");
    m_serialization_version_isSet = false;
    source_microversion = new QString("");
    m_source_microversion_isSet = false;
    feature = new OAIBTMFeature-134();
    m_feature_isSet = false;
}

void
OAIBTFeatureDefinitionCall-1406::cleanup() {
    if(bt_type != nullptr) { 
        delete bt_type;
    }



    if(serialization_version != nullptr) { 
        delete serialization_version;
    }
    if(source_microversion != nullptr) { 
        delete source_microversion;
    }
    if(feature != nullptr) { 
        delete feature;
    }
}

OAIBTFeatureDefinitionCall-1406*
OAIBTFeatureDefinitionCall-1406::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIBTFeatureDefinitionCall-1406::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&bt_type, pJson["btType"], "QString", "QString");
    
    ::OpenAPI::setValue(&library_version, pJson["libraryVersion"], "qint32", "");
    
    ::OpenAPI::setValue(&microversion_skew, pJson["microversionSkew"], "bool", "");
    
    ::OpenAPI::setValue(&reject_microversion_skew, pJson["rejectMicroversionSkew"], "bool", "");
    
    ::OpenAPI::setValue(&serialization_version, pJson["serializationVersion"], "QString", "QString");
    
    ::OpenAPI::setValue(&source_microversion, pJson["sourceMicroversion"], "QString", "QString");
    
    ::OpenAPI::setValue(&feature, pJson["feature"], "OAIBTMFeature-134", "OAIBTMFeature-134");
    
}

QString
OAIBTFeatureDefinitionCall-1406::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIBTFeatureDefinitionCall-1406::asJsonObject() {
    QJsonObject obj;
    if(bt_type != nullptr && *bt_type != QString("")){
        toJsonValue(QString("btType"), bt_type, obj, QString("QString"));
    }
    if(m_library_version_isSet){
        obj.insert("libraryVersion", QJsonValue(library_version));
    }
    if(m_microversion_skew_isSet){
        obj.insert("microversionSkew", QJsonValue(microversion_skew));
    }
    if(m_reject_microversion_skew_isSet){
        obj.insert("rejectMicroversionSkew", QJsonValue(reject_microversion_skew));
    }
    if(serialization_version != nullptr && *serialization_version != QString("")){
        toJsonValue(QString("serializationVersion"), serialization_version, obj, QString("QString"));
    }
    if(source_microversion != nullptr && *source_microversion != QString("")){
        toJsonValue(QString("sourceMicroversion"), source_microversion, obj, QString("QString"));
    }
    if((feature != nullptr) && (feature->isSet())){
        toJsonValue(QString("feature"), feature, obj, QString("OAIBTMFeature-134"));
    }

    return obj;
}

QString*
OAIBTFeatureDefinitionCall-1406::getBtType() {
    return bt_type;
}
void
OAIBTFeatureDefinitionCall-1406::setBtType(QString* bt_type) {
    this->bt_type = bt_type;
    this->m_bt_type_isSet = true;
}

qint32
OAIBTFeatureDefinitionCall-1406::getLibraryVersion() {
    return library_version;
}
void
OAIBTFeatureDefinitionCall-1406::setLibraryVersion(qint32 library_version) {
    this->library_version = library_version;
    this->m_library_version_isSet = true;
}

bool
OAIBTFeatureDefinitionCall-1406::isMicroversionSkew() {
    return microversion_skew;
}
void
OAIBTFeatureDefinitionCall-1406::setMicroversionSkew(bool microversion_skew) {
    this->microversion_skew = microversion_skew;
    this->m_microversion_skew_isSet = true;
}

bool
OAIBTFeatureDefinitionCall-1406::isRejectMicroversionSkew() {
    return reject_microversion_skew;
}
void
OAIBTFeatureDefinitionCall-1406::setRejectMicroversionSkew(bool reject_microversion_skew) {
    this->reject_microversion_skew = reject_microversion_skew;
    this->m_reject_microversion_skew_isSet = true;
}

QString*
OAIBTFeatureDefinitionCall-1406::getSerializationVersion() {
    return serialization_version;
}
void
OAIBTFeatureDefinitionCall-1406::setSerializationVersion(QString* serialization_version) {
    this->serialization_version = serialization_version;
    this->m_serialization_version_isSet = true;
}

QString*
OAIBTFeatureDefinitionCall-1406::getSourceMicroversion() {
    return source_microversion;
}
void
OAIBTFeatureDefinitionCall-1406::setSourceMicroversion(QString* source_microversion) {
    this->source_microversion = source_microversion;
    this->m_source_microversion_isSet = true;
}

OAIBTMFeature-134*
OAIBTFeatureDefinitionCall-1406::getFeature() {
    return feature;
}
void
OAIBTFeatureDefinitionCall-1406::setFeature(OAIBTMFeature-134* feature) {
    this->feature = feature;
    this->m_feature_isSet = true;
}


bool
OAIBTFeatureDefinitionCall-1406::isSet(){
    bool isObjectUpdated = false;
    do{
        if(bt_type != nullptr && *bt_type != QString("")){ isObjectUpdated = true; break;}
        if(m_library_version_isSet){ isObjectUpdated = true; break;}
        if(m_microversion_skew_isSet){ isObjectUpdated = true; break;}
        if(m_reject_microversion_skew_isSet){ isObjectUpdated = true; break;}
        if(serialization_version != nullptr && *serialization_version != QString("")){ isObjectUpdated = true; break;}
        if(source_microversion != nullptr && *source_microversion != QString("")){ isObjectUpdated = true; break;}
        if(feature != nullptr && feature->isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

