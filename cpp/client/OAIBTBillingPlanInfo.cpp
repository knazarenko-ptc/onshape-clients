/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * OpenAPI spec version: 1.111
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIBTBillingPlanInfo.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIBTBillingPlanInfo::OAIBTBillingPlanInfo(QString json) {
    init();
    this->fromJson(json);
}

OAIBTBillingPlanInfo::OAIBTBillingPlanInfo() {
    init();
}

OAIBTBillingPlanInfo::~OAIBTBillingPlanInfo() {
    this->cleanup();
}

void
OAIBTBillingPlanInfo::init() {
    amount_cents = 0;
    m_amount_cents_isSet = false;
    application_id = new QString("");
    m_application_id_isSet = false;
    client_id = new QString("");
    m_client_id_isSet = false;
    company_plan = false;
    m_company_plan_isSet = false;
    consumable_quantity = 0;
    m_consumable_quantity_isSet = false;
    deprecated = false;
    m_deprecated_isSet = false;
    description = new QString("");
    m_description_isSet = false;
    discount_info = new OAIBTDiscountInfo();
    m_discount_info_isSet = false;
    group = new QString("");
    m_group_isSet = false;
    hidden = false;
    m_hidden_isSet = false;
    href = new QString("");
    m_href_isSet = false;
    id = new QString("");
    m_id_isSet = false;
    interval = new QString("");
    m_interval_isSet = false;
    name = new QString("");
    m_name_isSet = false;
    onshape_plan = false;
    m_onshape_plan_isSet = false;
    plan_type = 0;
    m_plan_type_isSet = false;
    trial_period_days = 0;
    m_trial_period_days_isSet = false;
    view_ref = new QString("");
    m_view_ref_isSet = false;
}

void
OAIBTBillingPlanInfo::cleanup() {

    if(application_id != nullptr) { 
        delete application_id;
    }
    if(client_id != nullptr) { 
        delete client_id;
    }



    if(description != nullptr) { 
        delete description;
    }
    if(discount_info != nullptr) { 
        delete discount_info;
    }
    if(group != nullptr) { 
        delete group;
    }

    if(href != nullptr) { 
        delete href;
    }
    if(id != nullptr) { 
        delete id;
    }
    if(interval != nullptr) { 
        delete interval;
    }
    if(name != nullptr) { 
        delete name;
    }



    if(view_ref != nullptr) { 
        delete view_ref;
    }
}

OAIBTBillingPlanInfo*
OAIBTBillingPlanInfo::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIBTBillingPlanInfo::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&amount_cents, pJson["amountCents"], "qint32", "");
    
    ::OpenAPI::setValue(&application_id, pJson["applicationId"], "QString", "QString");
    
    ::OpenAPI::setValue(&client_id, pJson["clientId"], "QString", "QString");
    
    ::OpenAPI::setValue(&company_plan, pJson["companyPlan"], "bool", "");
    
    ::OpenAPI::setValue(&consumable_quantity, pJson["consumableQuantity"], "qint32", "");
    
    ::OpenAPI::setValue(&deprecated, pJson["deprecated"], "bool", "");
    
    ::OpenAPI::setValue(&description, pJson["description"], "QString", "QString");
    
    ::OpenAPI::setValue(&discount_info, pJson["discountInfo"], "OAIBTDiscountInfo", "OAIBTDiscountInfo");
    
    ::OpenAPI::setValue(&group, pJson["group"], "QString", "QString");
    
    ::OpenAPI::setValue(&hidden, pJson["hidden"], "bool", "");
    
    ::OpenAPI::setValue(&href, pJson["href"], "QString", "QString");
    
    ::OpenAPI::setValue(&id, pJson["id"], "QString", "QString");
    
    ::OpenAPI::setValue(&interval, pJson["interval"], "QString", "QString");
    
    ::OpenAPI::setValue(&name, pJson["name"], "QString", "QString");
    
    ::OpenAPI::setValue(&onshape_plan, pJson["onshapePlan"], "bool", "");
    
    ::OpenAPI::setValue(&plan_type, pJson["planType"], "qint32", "");
    
    ::OpenAPI::setValue(&trial_period_days, pJson["trialPeriodDays"], "qint32", "");
    
    ::OpenAPI::setValue(&view_ref, pJson["viewRef"], "QString", "QString");
    
}

QString
OAIBTBillingPlanInfo::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIBTBillingPlanInfo::asJsonObject() {
    QJsonObject obj;
    if(m_amount_cents_isSet){
        obj.insert("amountCents", QJsonValue(amount_cents));
    }
    if(application_id != nullptr && *application_id != QString("")){
        toJsonValue(QString("applicationId"), application_id, obj, QString("QString"));
    }
    if(client_id != nullptr && *client_id != QString("")){
        toJsonValue(QString("clientId"), client_id, obj, QString("QString"));
    }
    if(m_company_plan_isSet){
        obj.insert("companyPlan", QJsonValue(company_plan));
    }
    if(m_consumable_quantity_isSet){
        obj.insert("consumableQuantity", QJsonValue(consumable_quantity));
    }
    if(m_deprecated_isSet){
        obj.insert("deprecated", QJsonValue(deprecated));
    }
    if(description != nullptr && *description != QString("")){
        toJsonValue(QString("description"), description, obj, QString("QString"));
    }
    if((discount_info != nullptr) && (discount_info->isSet())){
        toJsonValue(QString("discountInfo"), discount_info, obj, QString("OAIBTDiscountInfo"));
    }
    if(group != nullptr && *group != QString("")){
        toJsonValue(QString("group"), group, obj, QString("QString"));
    }
    if(m_hidden_isSet){
        obj.insert("hidden", QJsonValue(hidden));
    }
    if(href != nullptr && *href != QString("")){
        toJsonValue(QString("href"), href, obj, QString("QString"));
    }
    if(id != nullptr && *id != QString("")){
        toJsonValue(QString("id"), id, obj, QString("QString"));
    }
    if(interval != nullptr && *interval != QString("")){
        toJsonValue(QString("interval"), interval, obj, QString("QString"));
    }
    if(name != nullptr && *name != QString("")){
        toJsonValue(QString("name"), name, obj, QString("QString"));
    }
    if(m_onshape_plan_isSet){
        obj.insert("onshapePlan", QJsonValue(onshape_plan));
    }
    if(m_plan_type_isSet){
        obj.insert("planType", QJsonValue(plan_type));
    }
    if(m_trial_period_days_isSet){
        obj.insert("trialPeriodDays", QJsonValue(trial_period_days));
    }
    if(view_ref != nullptr && *view_ref != QString("")){
        toJsonValue(QString("viewRef"), view_ref, obj, QString("QString"));
    }

    return obj;
}

qint32
OAIBTBillingPlanInfo::getAmountCents() {
    return amount_cents;
}
void
OAIBTBillingPlanInfo::setAmountCents(qint32 amount_cents) {
    this->amount_cents = amount_cents;
    this->m_amount_cents_isSet = true;
}

QString*
OAIBTBillingPlanInfo::getApplicationId() {
    return application_id;
}
void
OAIBTBillingPlanInfo::setApplicationId(QString* application_id) {
    this->application_id = application_id;
    this->m_application_id_isSet = true;
}

QString*
OAIBTBillingPlanInfo::getClientId() {
    return client_id;
}
void
OAIBTBillingPlanInfo::setClientId(QString* client_id) {
    this->client_id = client_id;
    this->m_client_id_isSet = true;
}

bool
OAIBTBillingPlanInfo::isCompanyPlan() {
    return company_plan;
}
void
OAIBTBillingPlanInfo::setCompanyPlan(bool company_plan) {
    this->company_plan = company_plan;
    this->m_company_plan_isSet = true;
}

qint32
OAIBTBillingPlanInfo::getConsumableQuantity() {
    return consumable_quantity;
}
void
OAIBTBillingPlanInfo::setConsumableQuantity(qint32 consumable_quantity) {
    this->consumable_quantity = consumable_quantity;
    this->m_consumable_quantity_isSet = true;
}

bool
OAIBTBillingPlanInfo::isDeprecated() {
    return deprecated;
}
void
OAIBTBillingPlanInfo::setDeprecated(bool deprecated) {
    this->deprecated = deprecated;
    this->m_deprecated_isSet = true;
}

QString*
OAIBTBillingPlanInfo::getDescription() {
    return description;
}
void
OAIBTBillingPlanInfo::setDescription(QString* description) {
    this->description = description;
    this->m_description_isSet = true;
}

OAIBTDiscountInfo*
OAIBTBillingPlanInfo::getDiscountInfo() {
    return discount_info;
}
void
OAIBTBillingPlanInfo::setDiscountInfo(OAIBTDiscountInfo* discount_info) {
    this->discount_info = discount_info;
    this->m_discount_info_isSet = true;
}

QString*
OAIBTBillingPlanInfo::getGroup() {
    return group;
}
void
OAIBTBillingPlanInfo::setGroup(QString* group) {
    this->group = group;
    this->m_group_isSet = true;
}

bool
OAIBTBillingPlanInfo::isHidden() {
    return hidden;
}
void
OAIBTBillingPlanInfo::setHidden(bool hidden) {
    this->hidden = hidden;
    this->m_hidden_isSet = true;
}

QString*
OAIBTBillingPlanInfo::getHref() {
    return href;
}
void
OAIBTBillingPlanInfo::setHref(QString* href) {
    this->href = href;
    this->m_href_isSet = true;
}

QString*
OAIBTBillingPlanInfo::getId() {
    return id;
}
void
OAIBTBillingPlanInfo::setId(QString* id) {
    this->id = id;
    this->m_id_isSet = true;
}

QString*
OAIBTBillingPlanInfo::getInterval() {
    return interval;
}
void
OAIBTBillingPlanInfo::setInterval(QString* interval) {
    this->interval = interval;
    this->m_interval_isSet = true;
}

QString*
OAIBTBillingPlanInfo::getName() {
    return name;
}
void
OAIBTBillingPlanInfo::setName(QString* name) {
    this->name = name;
    this->m_name_isSet = true;
}

bool
OAIBTBillingPlanInfo::isOnshapePlan() {
    return onshape_plan;
}
void
OAIBTBillingPlanInfo::setOnshapePlan(bool onshape_plan) {
    this->onshape_plan = onshape_plan;
    this->m_onshape_plan_isSet = true;
}

qint32
OAIBTBillingPlanInfo::getPlanType() {
    return plan_type;
}
void
OAIBTBillingPlanInfo::setPlanType(qint32 plan_type) {
    this->plan_type = plan_type;
    this->m_plan_type_isSet = true;
}

qint32
OAIBTBillingPlanInfo::getTrialPeriodDays() {
    return trial_period_days;
}
void
OAIBTBillingPlanInfo::setTrialPeriodDays(qint32 trial_period_days) {
    this->trial_period_days = trial_period_days;
    this->m_trial_period_days_isSet = true;
}

QString*
OAIBTBillingPlanInfo::getViewRef() {
    return view_ref;
}
void
OAIBTBillingPlanInfo::setViewRef(QString* view_ref) {
    this->view_ref = view_ref;
    this->m_view_ref_isSet = true;
}


bool
OAIBTBillingPlanInfo::isSet(){
    bool isObjectUpdated = false;
    do{
        if(m_amount_cents_isSet){ isObjectUpdated = true; break;}
        if(application_id != nullptr && *application_id != QString("")){ isObjectUpdated = true; break;}
        if(client_id != nullptr && *client_id != QString("")){ isObjectUpdated = true; break;}
        if(m_company_plan_isSet){ isObjectUpdated = true; break;}
        if(m_consumable_quantity_isSet){ isObjectUpdated = true; break;}
        if(m_deprecated_isSet){ isObjectUpdated = true; break;}
        if(description != nullptr && *description != QString("")){ isObjectUpdated = true; break;}
        if(discount_info != nullptr && discount_info->isSet()){ isObjectUpdated = true; break;}
        if(group != nullptr && *group != QString("")){ isObjectUpdated = true; break;}
        if(m_hidden_isSet){ isObjectUpdated = true; break;}
        if(href != nullptr && *href != QString("")){ isObjectUpdated = true; break;}
        if(id != nullptr && *id != QString("")){ isObjectUpdated = true; break;}
        if(interval != nullptr && *interval != QString("")){ isObjectUpdated = true; break;}
        if(name != nullptr && *name != QString("")){ isObjectUpdated = true; break;}
        if(m_onshape_plan_isSet){ isObjectUpdated = true; break;}
        if(m_plan_type_isSet){ isObjectUpdated = true; break;}
        if(m_trial_period_days_isSet){ isObjectUpdated = true; break;}
        if(view_ref != nullptr && *view_ref != QString("")){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

