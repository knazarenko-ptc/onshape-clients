/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * OpenAPI spec version: 1.111
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITeamsApi.h"
#include "OAIHelpers.h"
#include "OAIModelFactory.h"
#include "OAIQObjectWrapper.h"

#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAITeamsApi::OAITeamsApi() {}

OAITeamsApi::~OAITeamsApi() {}

OAITeamsApi::OAITeamsApi(QString host, QString basePath) {
    this->host = host;
    this->basePath = basePath;
}

void
OAITeamsApi::find(QString* prefix, QString* uid, QString* company_id, bool include_company_owned_teams) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/api/teams");


    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("prefix"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(prefix)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("uid"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(uid)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("companyId"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(company_id)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("includeCompanyOwnedTeams"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(include_company_owned_teams)));


    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAITeamsApi::findCallback);

    worker->execute(&input);
}

void
OAITeamsApi::findCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QString json(worker->response);
    OAIBTGlobalTreeNodeListResponseBTTeamInfo* output = static_cast<OAIBTGlobalTreeNodeListResponseBTTeamInfo*>(create(json, QString("OAIBTGlobalTreeNodeListResponseBTTeamInfo")));
    auto wrapper = new OAIQObjectWrapper<OAIBTGlobalTreeNodeListResponseBTTeamInfo*> (output);
    wrapper->deleteLater();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit findSignal(output);
    } else {
        emit findSignalE(output, error_type, error_str);
        emit findSignalEFull(worker, error_type, error_str);
    }
}

void
OAITeamsApi::getTeam(QString* tid) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/api/teams/{tid}");

    QString tidPathParam("{"); tidPathParam.append("tid").append("}");
    fullPath.replace(tidPathParam, stringValue(tid));


    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAITeamsApi::getTeamCallback);

    worker->execute(&input);
}

void
OAITeamsApi::getTeamCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QString json(worker->response);
    OAIBTTeamInfo* output = static_cast<OAIBTTeamInfo*>(create(json, QString("OAIBTTeamInfo")));
    auto wrapper = new OAIQObjectWrapper<OAIBTTeamInfo*> (output);
    wrapper->deleteLater();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit getTeamSignal(output);
    } else {
        emit getTeamSignalE(output, error_type, error_str);
        emit getTeamSignalEFull(worker, error_type, error_str);
    }
}


}
