/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * OpenAPI spec version: 1.111
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIBTAppElementReferenceResolveInfo.h
 *
 * 
 */

#ifndef OAIBTAppElementReferenceResolveInfo_H_
#define OAIBTAppElementReferenceResolveInfo_H_

#include <QJsonObject>


#include <QList>
#include <QString>

#include "OAIObject.h"

namespace OpenAPI {

class OAIBTAppElementReferenceResolveInfo: public OAIObject {
public:
    OAIBTAppElementReferenceResolveInfo();
    OAIBTAppElementReferenceResolveInfo(QString json);
    ~OAIBTAppElementReferenceResolveInfo();
    void init();
    void cleanup();

    QString asJson () override;
    QJsonObject asJsonObject() override;
    void fromJsonObject(QJsonObject json) override;
    OAIBTAppElementReferenceResolveInfo* fromJson(QString jsonString) override;

    QString* getChangeId();
    void setChangeId(QString* change_id);

    qint32 getErrorCode();
    void setErrorCode(qint32 error_code);

    QString* getErrorDescription();
    void setErrorDescription(QString* error_description);

    QString* getErrorValue();
    void setErrorValue(QString* error_value);

    QString* getIdTag();
    void setIdTag(QString* id_tag);

    bool isIdTagIsValid();
    void setIdTagIsValid(bool id_tag_is_valid);

    bool isIsConfigurable();
    void setIsConfigurable(bool is_configurable);

    bool isIsFlattenedPart();
    void setIsFlattenedPart(bool is_flattened_part);

    bool isIsSketchOnly();
    void setIsSketchOnly(bool is_sketch_only);

    bool isIsSurface();
    void setIsSurface(bool is_surface);

    QString* getPartNumber();
    void setPartNumber(QString* part_number);

    QString* getReferenceId();
    void setReferenceId(QString* reference_id);

    qint32 getReferenceType();
    void setReferenceType(qint32 reference_type);

    QString* getResolvedDocumentMicroversionId();
    void setResolvedDocumentMicroversionId(QString* resolved_document_microversion_id);

    QString* getResolvedElementMicroversionId();
    void setResolvedElementMicroversionId(QString* resolved_element_microversion_id);

    QString* getRevision();
    void setRevision(QString* revision);

    QList<QString*>* getSketchIds();
    void setSketchIds(QList<QString*>* sketch_ids);

    QString* getTargetConfiguration();
    void setTargetConfiguration(QString* target_configuration);

    QString* getTargetDocumentId();
    void setTargetDocumentId(QString* target_document_id);

    QString* getTargetDocumentMicroversionId();
    void setTargetDocumentMicroversionId(QString* target_document_microversion_id);

    QString* getTargetElementId();
    void setTargetElementId(QString* target_element_id);

    QString* getTargetElementMicroversionId();
    void setTargetElementMicroversionId(QString* target_element_microversion_id);

    QString* getTargetVersionId();
    void setTargetVersionId(QString* target_version_id);

    bool isTrackNewVersions();
    void setTrackNewVersions(bool track_new_versions);


    virtual bool isSet() override;

private:
    QString* change_id;
    bool m_change_id_isSet;

    qint32 error_code;
    bool m_error_code_isSet;

    QString* error_description;
    bool m_error_description_isSet;

    QString* error_value;
    bool m_error_value_isSet;

    QString* id_tag;
    bool m_id_tag_isSet;

    bool id_tag_is_valid;
    bool m_id_tag_is_valid_isSet;

    bool is_configurable;
    bool m_is_configurable_isSet;

    bool is_flattened_part;
    bool m_is_flattened_part_isSet;

    bool is_sketch_only;
    bool m_is_sketch_only_isSet;

    bool is_surface;
    bool m_is_surface_isSet;

    QString* part_number;
    bool m_part_number_isSet;

    QString* reference_id;
    bool m_reference_id_isSet;

    qint32 reference_type;
    bool m_reference_type_isSet;

    QString* resolved_document_microversion_id;
    bool m_resolved_document_microversion_id_isSet;

    QString* resolved_element_microversion_id;
    bool m_resolved_element_microversion_id_isSet;

    QString* revision;
    bool m_revision_isSet;

    QList<QString*>* sketch_ids;
    bool m_sketch_ids_isSet;

    QString* target_configuration;
    bool m_target_configuration_isSet;

    QString* target_document_id;
    bool m_target_document_id_isSet;

    QString* target_document_microversion_id;
    bool m_target_document_microversion_id_isSet;

    QString* target_element_id;
    bool m_target_element_id_isSet;

    QString* target_element_microversion_id;
    bool m_target_element_microversion_id_isSet;

    QString* target_version_id;
    bool m_target_version_id_isSet;

    bool track_new_versions;
    bool m_track_new_versions_isSet;

};

}

#endif /* OAIBTAppElementReferenceResolveInfo_H_ */
