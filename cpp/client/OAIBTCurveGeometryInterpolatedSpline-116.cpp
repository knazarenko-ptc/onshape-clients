/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * OpenAPI spec version: 1.111
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIBTCurveGeometryInterpolatedSpline-116.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIBTCurveGeometryInterpolatedSpline-116::OAIBTCurveGeometryInterpolatedSpline-116(QString json) {
    init();
    this->fromJson(json);
}

OAIBTCurveGeometryInterpolatedSpline-116::OAIBTCurveGeometryInterpolatedSpline-116() {
    init();
}

OAIBTCurveGeometryInterpolatedSpline-116::~OAIBTCurveGeometryInterpolatedSpline-116() {
    this->cleanup();
}

void
OAIBTCurveGeometryInterpolatedSpline-116::init() {
    bt_type = new QString("");
    m_bt_type_isSet = false;
    is_periodic = false;
    m_is_periodic_isSet = false;
    interpolation_points = new QList<double>();
    m_interpolation_points_isSet = false;
    start_derivative_x = 0.0;
    m_start_derivative_x_isSet = false;
    start_derivative_y = 0.0;
    m_start_derivative_y_isSet = false;
    end_derivative_x = 0.0;
    m_end_derivative_x_isSet = false;
    end_derivative_y = 0.0;
    m_end_derivative_y_isSet = false;
    start_handle_x = 0.0;
    m_start_handle_x_isSet = false;
    start_handle_y = 0.0;
    m_start_handle_y_isSet = false;
    end_handle_x = 0.0;
    m_end_handle_x_isSet = false;
    end_handle_y = 0.0;
    m_end_handle_y_isSet = false;
}

void
OAIBTCurveGeometryInterpolatedSpline-116::cleanup() {
    if(bt_type != nullptr) { 
        delete bt_type;
    }


    if(interpolation_points != nullptr) { 
        delete interpolation_points;
    }








}

OAIBTCurveGeometryInterpolatedSpline-116*
OAIBTCurveGeometryInterpolatedSpline-116::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIBTCurveGeometryInterpolatedSpline-116::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&bt_type, pJson["btType"], "QString", "QString");
    
    ::OpenAPI::setValue(&is_periodic, pJson["isPeriodic"], "bool", "");
    
    
    ::OpenAPI::setValue(&interpolation_points, pJson["interpolationPoints"], "QList", "double");
    ::OpenAPI::setValue(&start_derivative_x, pJson["startDerivativeX"], "double", "");
    
    ::OpenAPI::setValue(&start_derivative_y, pJson["startDerivativeY"], "double", "");
    
    ::OpenAPI::setValue(&end_derivative_x, pJson["endDerivativeX"], "double", "");
    
    ::OpenAPI::setValue(&end_derivative_y, pJson["endDerivativeY"], "double", "");
    
    ::OpenAPI::setValue(&start_handle_x, pJson["startHandleX"], "double", "");
    
    ::OpenAPI::setValue(&start_handle_y, pJson["startHandleY"], "double", "");
    
    ::OpenAPI::setValue(&end_handle_x, pJson["endHandleX"], "double", "");
    
    ::OpenAPI::setValue(&end_handle_y, pJson["endHandleY"], "double", "");
    
}

QString
OAIBTCurveGeometryInterpolatedSpline-116::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIBTCurveGeometryInterpolatedSpline-116::asJsonObject() {
    QJsonObject obj;
    if(bt_type != nullptr && *bt_type != QString("")){
        toJsonValue(QString("btType"), bt_type, obj, QString("QString"));
    }
    if(m_is_periodic_isSet){
        obj.insert("isPeriodic", QJsonValue(is_periodic));
    }
    if(interpolation_points->size() > 0){
        toJsonArray((QList<void*>*)interpolation_points, obj, "interpolationPoints", "");
    }
    if(m_start_derivative_x_isSet){
        obj.insert("startDerivativeX", QJsonValue(start_derivative_x));
    }
    if(m_start_derivative_y_isSet){
        obj.insert("startDerivativeY", QJsonValue(start_derivative_y));
    }
    if(m_end_derivative_x_isSet){
        obj.insert("endDerivativeX", QJsonValue(end_derivative_x));
    }
    if(m_end_derivative_y_isSet){
        obj.insert("endDerivativeY", QJsonValue(end_derivative_y));
    }
    if(m_start_handle_x_isSet){
        obj.insert("startHandleX", QJsonValue(start_handle_x));
    }
    if(m_start_handle_y_isSet){
        obj.insert("startHandleY", QJsonValue(start_handle_y));
    }
    if(m_end_handle_x_isSet){
        obj.insert("endHandleX", QJsonValue(end_handle_x));
    }
    if(m_end_handle_y_isSet){
        obj.insert("endHandleY", QJsonValue(end_handle_y));
    }

    return obj;
}

QString*
OAIBTCurveGeometryInterpolatedSpline-116::getBtType() {
    return bt_type;
}
void
OAIBTCurveGeometryInterpolatedSpline-116::setBtType(QString* bt_type) {
    this->bt_type = bt_type;
    this->m_bt_type_isSet = true;
}

bool
OAIBTCurveGeometryInterpolatedSpline-116::isIsPeriodic() {
    return is_periodic;
}
void
OAIBTCurveGeometryInterpolatedSpline-116::setIsPeriodic(bool is_periodic) {
    this->is_periodic = is_periodic;
    this->m_is_periodic_isSet = true;
}

QList<double>*
OAIBTCurveGeometryInterpolatedSpline-116::getInterpolationPoints() {
    return interpolation_points;
}
void
OAIBTCurveGeometryInterpolatedSpline-116::setInterpolationPoints(QList<double>* interpolation_points) {
    this->interpolation_points = interpolation_points;
    this->m_interpolation_points_isSet = true;
}

double
OAIBTCurveGeometryInterpolatedSpline-116::getStartDerivativeX() {
    return start_derivative_x;
}
void
OAIBTCurveGeometryInterpolatedSpline-116::setStartDerivativeX(double start_derivative_x) {
    this->start_derivative_x = start_derivative_x;
    this->m_start_derivative_x_isSet = true;
}

double
OAIBTCurveGeometryInterpolatedSpline-116::getStartDerivativeY() {
    return start_derivative_y;
}
void
OAIBTCurveGeometryInterpolatedSpline-116::setStartDerivativeY(double start_derivative_y) {
    this->start_derivative_y = start_derivative_y;
    this->m_start_derivative_y_isSet = true;
}

double
OAIBTCurveGeometryInterpolatedSpline-116::getEndDerivativeX() {
    return end_derivative_x;
}
void
OAIBTCurveGeometryInterpolatedSpline-116::setEndDerivativeX(double end_derivative_x) {
    this->end_derivative_x = end_derivative_x;
    this->m_end_derivative_x_isSet = true;
}

double
OAIBTCurveGeometryInterpolatedSpline-116::getEndDerivativeY() {
    return end_derivative_y;
}
void
OAIBTCurveGeometryInterpolatedSpline-116::setEndDerivativeY(double end_derivative_y) {
    this->end_derivative_y = end_derivative_y;
    this->m_end_derivative_y_isSet = true;
}

double
OAIBTCurveGeometryInterpolatedSpline-116::getStartHandleX() {
    return start_handle_x;
}
void
OAIBTCurveGeometryInterpolatedSpline-116::setStartHandleX(double start_handle_x) {
    this->start_handle_x = start_handle_x;
    this->m_start_handle_x_isSet = true;
}

double
OAIBTCurveGeometryInterpolatedSpline-116::getStartHandleY() {
    return start_handle_y;
}
void
OAIBTCurveGeometryInterpolatedSpline-116::setStartHandleY(double start_handle_y) {
    this->start_handle_y = start_handle_y;
    this->m_start_handle_y_isSet = true;
}

double
OAIBTCurveGeometryInterpolatedSpline-116::getEndHandleX() {
    return end_handle_x;
}
void
OAIBTCurveGeometryInterpolatedSpline-116::setEndHandleX(double end_handle_x) {
    this->end_handle_x = end_handle_x;
    this->m_end_handle_x_isSet = true;
}

double
OAIBTCurveGeometryInterpolatedSpline-116::getEndHandleY() {
    return end_handle_y;
}
void
OAIBTCurveGeometryInterpolatedSpline-116::setEndHandleY(double end_handle_y) {
    this->end_handle_y = end_handle_y;
    this->m_end_handle_y_isSet = true;
}


bool
OAIBTCurveGeometryInterpolatedSpline-116::isSet(){
    bool isObjectUpdated = false;
    do{
        if(bt_type != nullptr && *bt_type != QString("")){ isObjectUpdated = true; break;}
        if(m_is_periodic_isSet){ isObjectUpdated = true; break;}
        if(m_interpolation_points_isSet){ isObjectUpdated = true; break;}
        if(interpolation_points->size() > 0){ isObjectUpdated = true; break;}
        if(m_start_derivative_x_isSet){ isObjectUpdated = true; break;}
        if(m_start_derivative_y_isSet){ isObjectUpdated = true; break;}
        if(m_end_derivative_x_isSet){ isObjectUpdated = true; break;}
        if(m_end_derivative_y_isSet){ isObjectUpdated = true; break;}
        if(m_start_handle_x_isSet){ isObjectUpdated = true; break;}
        if(m_start_handle_y_isSet){ isObjectUpdated = true; break;}
        if(m_end_handle_x_isSet){ isObjectUpdated = true; break;}
        if(m_end_handle_y_isSet){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

