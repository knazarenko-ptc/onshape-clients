/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * OpenAPI spec version: 1.111
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIXML.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIXML::OAIXML(QString json) {
    init();
    this->fromJson(json);
}

OAIXML::OAIXML() {
    init();
}

OAIXML::~OAIXML() {
    this->cleanup();
}

void
OAIXML::init() {
    attribute = false;
    m_attribute_isSet = false;
    extensions = new QMap<QString, OAIObject*>();
    m_extensions_isSet = false;
    name = new QString("");
    m_name_isSet = false;
    _namespace = new QString("");
    m__namespace_isSet = false;
    prefix = new QString("");
    m_prefix_isSet = false;
    wrapped = false;
    m_wrapped_isSet = false;
}

void
OAIXML::cleanup() {

    if(extensions != nullptr) { 
        auto arr = extensions;
        for(auto o: *arr) { 
            delete o;
        }
        delete extensions;
    }
    if(name != nullptr) { 
        delete name;
    }
    if(_namespace != nullptr) { 
        delete _namespace;
    }
    if(prefix != nullptr) { 
        delete prefix;
    }

}

OAIXML*
OAIXML::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIXML::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&attribute, pJson["attribute"], "bool", "");
    
    
    ::OpenAPI::setValue(&extensions, pJson["extensions"], "QMap", "OAIObject");
    ::OpenAPI::setValue(&name, pJson["name"], "QString", "QString");
    
    ::OpenAPI::setValue(&_namespace, pJson["namespace"], "QString", "QString");
    
    ::OpenAPI::setValue(&prefix, pJson["prefix"], "QString", "QString");
    
    ::OpenAPI::setValue(&wrapped, pJson["wrapped"], "bool", "");
    
}

QString
OAIXML::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIXML::asJsonObject() {
    QJsonObject obj;
    if(m_attribute_isSet){
        obj.insert("attribute", QJsonValue(attribute));
    }
    if(extensions->size() > 0){
        toJsonMap((QMap<QString, void*>*) extensions, obj, "extensions", "OAIObject");
    }
    if(name != nullptr && *name != QString("")){
        toJsonValue(QString("name"), name, obj, QString("QString"));
    }
    if(_namespace != nullptr && *_namespace != QString("")){
        toJsonValue(QString("namespace"), _namespace, obj, QString("QString"));
    }
    if(prefix != nullptr && *prefix != QString("")){
        toJsonValue(QString("prefix"), prefix, obj, QString("QString"));
    }
    if(m_wrapped_isSet){
        obj.insert("wrapped", QJsonValue(wrapped));
    }

    return obj;
}

bool
OAIXML::isAttribute() {
    return attribute;
}
void
OAIXML::setAttribute(bool attribute) {
    this->attribute = attribute;
    this->m_attribute_isSet = true;
}

QMap<QString, OAIObject*>*
OAIXML::getExtensions() {
    return extensions;
}
void
OAIXML::setExtensions(QMap<QString, OAIObject*>* extensions) {
    this->extensions = extensions;
    this->m_extensions_isSet = true;
}

QString*
OAIXML::getName() {
    return name;
}
void
OAIXML::setName(QString* name) {
    this->name = name;
    this->m_name_isSet = true;
}

QString*
OAIXML::getNamespace() {
    return _namespace;
}
void
OAIXML::setNamespace(QString* _namespace) {
    this->_namespace = _namespace;
    this->m__namespace_isSet = true;
}

QString*
OAIXML::getPrefix() {
    return prefix;
}
void
OAIXML::setPrefix(QString* prefix) {
    this->prefix = prefix;
    this->m_prefix_isSet = true;
}

bool
OAIXML::isWrapped() {
    return wrapped;
}
void
OAIXML::setWrapped(bool wrapped) {
    this->wrapped = wrapped;
    this->m_wrapped_isSet = true;
}


bool
OAIXML::isSet(){
    bool isObjectUpdated = false;
    do{
        if(m_attribute_isSet){ isObjectUpdated = true; break;}
        if(extensions->size() > 0){ isObjectUpdated = true; break;}
        if(name != nullptr && *name != QString("")){ isObjectUpdated = true; break;}
        if(_namespace != nullptr && *_namespace != QString("")){ isObjectUpdated = true; break;}
        if(prefix != nullptr && *prefix != QString("")){ isObjectUpdated = true; break;}
        if(m_wrapped_isSet){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

