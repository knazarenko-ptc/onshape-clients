/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * OpenAPI spec version: 1.111
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWebhooksApi.h"
#include "OAIHelpers.h"
#include "OAIModelFactory.h"
#include "OAIQObjectWrapper.h"

#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAIWebhooksApi::OAIWebhooksApi() {}

OAIWebhooksApi::~OAIWebhooksApi() {}

OAIWebhooksApi::OAIWebhooksApi(QString host, QString basePath) {
    this->host = host;
    this->basePath = basePath;
}

void
OAIWebhooksApi::createWebhook(OAIBTWebhookParams& oaibt_webhook_params) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/api/webhooks");



    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "POST");


    
    QString output = oaibt_webhook_params.asJson();
    input.request_body.append(output);
    


    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIWebhooksApi::createWebhookCallback);

    worker->execute(&input);
}

void
OAIWebhooksApi::createWebhookCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QString json(worker->response);
    OAIBTWebhookInfo* output = static_cast<OAIBTWebhookInfo*>(create(json, QString("OAIBTWebhookInfo")));
    auto wrapper = new OAIQObjectWrapper<OAIBTWebhookInfo*> (output);
    wrapper->deleteLater();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit createWebhookSignal(output);
    } else {
        emit createWebhookSignalE(output, error_type, error_str);
        emit createWebhookSignalEFull(worker, error_type, error_str);
    }
}

void
OAIWebhooksApi::getWebhook(QString* webhookid) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/api/webhooks/{webhookid}");

    QString webhookidPathParam("{"); webhookidPathParam.append("webhookid").append("}");
    fullPath.replace(webhookidPathParam, stringValue(webhookid));


    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIWebhooksApi::getWebhookCallback);

    worker->execute(&input);
}

void
OAIWebhooksApi::getWebhookCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QString json(worker->response);
    OAIBTWebhookInfo* output = static_cast<OAIBTWebhookInfo*>(create(json, QString("OAIBTWebhookInfo")));
    auto wrapper = new OAIQObjectWrapper<OAIBTWebhookInfo*> (output);
    wrapper->deleteLater();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit getWebhookSignal(output);
    } else {
        emit getWebhookSignalE(output, error_type, error_str);
        emit getWebhookSignalEFull(worker, error_type, error_str);
    }
}

void
OAIWebhooksApi::getWebhooks(QString* company, QString* user, qint32 offset, qint32 limit) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/api/webhooks");


    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("company"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(company)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("user"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(user)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("offset"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(offset)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("limit"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(limit)));


    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIWebhooksApi::getWebhooksCallback);

    worker->execute(&input);
}

void
OAIWebhooksApi::getWebhooksCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QString json(worker->response);
    OAIBTListResponseBTWebhookInfo* output = static_cast<OAIBTListResponseBTWebhookInfo*>(create(json, QString("OAIBTListResponseBTWebhookInfo")));
    auto wrapper = new OAIQObjectWrapper<OAIBTListResponseBTWebhookInfo*> (output);
    wrapper->deleteLater();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit getWebhooksSignal(output);
    } else {
        emit getWebhooksSignalE(output, error_type, error_str);
        emit getWebhooksSignalEFull(worker, error_type, error_str);
    }
}

void
OAIWebhooksApi::pingWebhook(QString* webhookid) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/api/webhooks/{webhookid}/ping");

    QString webhookidPathParam("{"); webhookidPathParam.append("webhookid").append("}");
    fullPath.replace(webhookidPathParam, stringValue(webhookid));


    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "POST");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIWebhooksApi::pingWebhookCallback);

    worker->execute(&input);
}

void
OAIWebhooksApi::pingWebhookCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit pingWebhookSignal();
    } else {
        emit pingWebhookSignalE(error_type, error_str);
        emit pingWebhookSignalEFull(worker, error_type, error_str);
    }
}

void
OAIWebhooksApi::unregisterWebhook(QString* webhookid) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/api/webhooks/{webhookid}");

    QString webhookidPathParam("{"); webhookidPathParam.append("webhookid").append("}");
    fullPath.replace(webhookidPathParam, stringValue(webhookid));


    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "DELETE");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIWebhooksApi::unregisterWebhookCallback);

    worker->execute(&input);
}

void
OAIWebhooksApi::unregisterWebhookCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit unregisterWebhookSignal();
    } else {
        emit unregisterWebhookSignalE(error_type, error_str);
        emit unregisterWebhookSignalEFull(worker, error_type, error_str);
    }
}

void
OAIWebhooksApi::updateWebhook(QString* webhookid, OAIBTWebhookParams& oaibt_webhook_params) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/api/webhooks/{webhookid}");

    QString webhookidPathParam("{"); webhookidPathParam.append("webhookid").append("}");
    fullPath.replace(webhookidPathParam, stringValue(webhookid));


    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "POST");


    
    QString output = oaibt_webhook_params.asJson();
    input.request_body.append(output);
    


    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIWebhooksApi::updateWebhookCallback);

    worker->execute(&input);
}

void
OAIWebhooksApi::updateWebhookCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QString json(worker->response);
    OAIBTWebhookInfo* output = static_cast<OAIBTWebhookInfo*>(create(json, QString("OAIBTWebhookInfo")));
    auto wrapper = new OAIQObjectWrapper<OAIBTWebhookInfo*> (output);
    wrapper->deleteLater();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit updateWebhookSignal(output);
    } else {
        emit updateWebhookSignalE(output, error_type, error_str);
        emit updateWebhookSignalEFull(worker, error_type, error_str);
    }
}


}
