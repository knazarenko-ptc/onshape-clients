/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * OpenAPI spec version: 1.111
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBlobElementsApi.h"
#include "OAIHelpers.h"
#include "OAIModelFactory.h"
#include "OAIQObjectWrapper.h"

#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAIBlobElementsApi::OAIBlobElementsApi() {}

OAIBlobElementsApi::~OAIBlobElementsApi() {}

OAIBlobElementsApi::OAIBlobElementsApi(QString host, QString basePath) {
    this->host = host;
    this->basePath = basePath;
}

void
OAIBlobElementsApi::createBlobTranslation(QString* did, QString* wv, QString* wvid, QString* eid, OAIBTTranslateFormatParams& oaibt_translate_format_params) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/api/blobelements/d/{did}/{wv}/{wvid}/e/{eid}/translations");

    QString didPathParam("{"); didPathParam.append("did").append("}");
    fullPath.replace(didPathParam, stringValue(did));
    QString wvPathParam("{"); wvPathParam.append("wv").append("}");
    fullPath.replace(wvPathParam, stringValue(wv));
    QString wvidPathParam("{"); wvidPathParam.append("wvid").append("}");
    fullPath.replace(wvidPathParam, stringValue(wvid));
    QString eidPathParam("{"); eidPathParam.append("eid").append("}");
    fullPath.replace(eidPathParam, stringValue(eid));


    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "POST");


    
    QString output = oaibt_translate_format_params.asJson();
    input.request_body.append(output);
    


    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIBlobElementsApi::createBlobTranslationCallback);

    worker->execute(&input);
}

void
OAIBlobElementsApi::createBlobTranslationCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QString json(worker->response);
    OAIBTTranslationRequestInfo* output = static_cast<OAIBTTranslationRequestInfo*>(create(json, QString("OAIBTTranslationRequestInfo")));
    auto wrapper = new OAIQObjectWrapper<OAIBTTranslationRequestInfo*> (output);
    wrapper->deleteLater();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit createBlobTranslationSignal(output);
    } else {
        emit createBlobTranslationSignalE(output, error_type, error_str);
        emit createBlobTranslationSignalEFull(worker, error_type, error_str);
    }
}

void
OAIBlobElementsApi::downloadFileWorkspace(QString* did, QString* wid, QString* eid, QString* content_disposition, QString* if_none_match, QString* link_document_id) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/api/blobelements/d/{did}/w/{wid}/e/{eid}");

    QString didPathParam("{"); didPathParam.append("did").append("}");
    fullPath.replace(didPathParam, stringValue(did));
    QString widPathParam("{"); widPathParam.append("wid").append("}");
    fullPath.replace(widPathParam, stringValue(wid));
    QString eidPathParam("{"); eidPathParam.append("eid").append("}");
    fullPath.replace(eidPathParam, stringValue(eid));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("contentDisposition"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(content_disposition)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("linkDocumentId"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(link_document_id)));


    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");




    if (if_none_match != nullptr) {
        input.headers.insert("If-None-Match", "if_none_match");
    }

    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIBlobElementsApi::downloadFileWorkspaceCallback);

    worker->execute(&input);
}

void
OAIBlobElementsApi::downloadFileWorkspaceCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QString json(worker->response);
    OAIHttpRequestInputFileElement* output = static_cast<OAIHttpRequestInputFileElement*>(create(json, QString("OAIHttpRequestInputFileElement")));
    auto wrapper = new OAIQObjectWrapper<OAIHttpRequestInputFileElement*> (output);
    wrapper->deleteLater();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit downloadFileWorkspaceSignal(output);
    } else {
        emit downloadFileWorkspaceSignalE(output, error_type, error_str);
        emit downloadFileWorkspaceSignalEFull(worker, error_type, error_str);
    }
}

void
OAIBlobElementsApi::updateUnits(QString* did, QString* eid, QString* wid, OAIBTUpdateMeshUnitsParams& oaibt_update_mesh_units_params) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/api/blobelements/d/{did}/w/{wid}/e/{eid}/units");

    QString didPathParam("{"); didPathParam.append("did").append("}");
    fullPath.replace(didPathParam, stringValue(did));
    QString eidPathParam("{"); eidPathParam.append("eid").append("}");
    fullPath.replace(eidPathParam, stringValue(eid));
    QString widPathParam("{"); widPathParam.append("wid").append("}");
    fullPath.replace(widPathParam, stringValue(wid));


    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "POST");


    
    QString output = oaibt_update_mesh_units_params.asJson();
    input.request_body.append(output);
    


    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIBlobElementsApi::updateUnitsCallback);

    worker->execute(&input);
}

void
OAIBlobElementsApi::updateUnitsCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QString json(worker->response);
    OAIBTDocumentElementProcessingInfo* output = static_cast<OAIBTDocumentElementProcessingInfo*>(create(json, QString("OAIBTDocumentElementProcessingInfo")));
    auto wrapper = new OAIQObjectWrapper<OAIBTDocumentElementProcessingInfo*> (output);
    wrapper->deleteLater();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit updateUnitsSignal(output);
    } else {
        emit updateUnitsSignalE(output, error_type, error_str);
        emit updateUnitsSignalEFull(worker, error_type, error_str);
    }
}

void
OAIBlobElementsApi::uploadFileCreateElement(QString* did, QString* wid, bool allow_faulty_parts, bool create_composite, bool create_drawing_if_possible, QString* encoded_filename, bool extract_assembly_hierarchy, OAIHttpRequestInputFileElement* file, OAIFormDataBodyPart* file_body_with_details, qint64 file_content_length, OAIFormDataContentDisposition* file_detail, bool flatten_assemblies, QString* format_name, bool isy_axis_is_up, bool join_adjacent_surfaces, QString* location_element_id, QString* location_group_id, qint32 location_position, bool notify_user, QString* owner_id, QString* owner_type, QString* parent_id, QString* project_id, bool _public, bool split_assemblies_into_multiple_documents, bool store_in_document, bool translate, QString* unit, QString* upload_id, QString* version_string) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/api/blobelements/d/{did}/w/{wid}");

    QString didPathParam("{"); didPathParam.append("did").append("}");
    fullPath.replace(didPathParam, stringValue(did));
    QString widPathParam("{"); widPathParam.append("wid").append("}");
    fullPath.replace(widPathParam, stringValue(wid));


    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "POST");

    if (allow_faulty_parts != nullptr) {
        input.add_var("allowFaultyParts", *allow_faulty_parts);
    }
    if (create_composite != nullptr) {
        input.add_var("createComposite", *create_composite);
    }
    if (create_drawing_if_possible != nullptr) {
        input.add_var("createDrawingIfPossible", *create_drawing_if_possible);
    }
    if (encoded_filename != nullptr) {
        input.add_var("encodedFilename", *encoded_filename);
    }
    if (extract_assembly_hierarchy != nullptr) {
        input.add_var("extractAssemblyHierarchy", *extract_assembly_hierarchy);
    }
    if (file != nullptr) {
        input.add_file("file", (*file).local_filename, (*file).request_filename, (*file).mime_type);
    }
    if (file_body_with_details != nullptr) {
        input.add_var("fileBodyWithDetails", *file_body_with_details);
    }
    if (file_content_length != nullptr) {
        input.add_var("fileContentLength", *file_content_length);
    }
    if (file_detail != nullptr) {
        input.add_var("fileDetail", *file_detail);
    }
    if (flatten_assemblies != nullptr) {
        input.add_var("flattenAssemblies", *flatten_assemblies);
    }
    if (format_name != nullptr) {
        input.add_var("formatName", *format_name);
    }
    if (isy_axis_is_up != nullptr) {
        input.add_var("isyAxisIsUp", *isy_axis_is_up);
    }
    if (join_adjacent_surfaces != nullptr) {
        input.add_var("joinAdjacentSurfaces", *join_adjacent_surfaces);
    }
    if (location_element_id != nullptr) {
        input.add_var("locationElementId", *location_element_id);
    }
    if (location_group_id != nullptr) {
        input.add_var("locationGroupId", *location_group_id);
    }
    if (location_position != nullptr) {
        input.add_var("locationPosition", *location_position);
    }
    if (notify_user != nullptr) {
        input.add_var("notifyUser", *notify_user);
    }
    if (owner_id != nullptr) {
        input.add_var("ownerId", *owner_id);
    }
    if (owner_type != nullptr) {
        input.add_var("ownerType", *owner_type);
    }
    if (parent_id != nullptr) {
        input.add_var("parentId", *parent_id);
    }
    if (project_id != nullptr) {
        input.add_var("projectId", *project_id);
    }
    if (_public != nullptr) {
        input.add_var("public", *_public);
    }
    if (split_assemblies_into_multiple_documents != nullptr) {
        input.add_var("splitAssembliesIntoMultipleDocuments", *split_assemblies_into_multiple_documents);
    }
    if (store_in_document != nullptr) {
        input.add_var("storeInDocument", *store_in_document);
    }
    if (translate != nullptr) {
        input.add_var("translate", *translate);
    }
    if (unit != nullptr) {
        input.add_var("unit", *unit);
    }
    if (upload_id != nullptr) {
        input.add_var("uploadId", *upload_id);
    }
    if (version_string != nullptr) {
        input.add_var("versionString", *version_string);
    }




    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIBlobElementsApi::uploadFileCreateElementCallback);

    worker->execute(&input);
}

void
OAIBlobElementsApi::uploadFileCreateElementCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QString json(worker->response);
    OAIBTDocumentElementProcessingInfo* output = static_cast<OAIBTDocumentElementProcessingInfo*>(create(json, QString("OAIBTDocumentElementProcessingInfo")));
    auto wrapper = new OAIQObjectWrapper<OAIBTDocumentElementProcessingInfo*> (output);
    wrapper->deleteLater();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit uploadFileCreateElementSignal(output);
    } else {
        emit uploadFileCreateElementSignalE(output, error_type, error_str);
        emit uploadFileCreateElementSignalEFull(worker, error_type, error_str);
    }
}

void
OAIBlobElementsApi::uploadFileUpdateElement(QString* did, QString* eid, QString* wid, QString* parent_change_id) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/api/blobelements/d/{did}/w/{wid}/e/{eid}");

    QString didPathParam("{"); didPathParam.append("did").append("}");
    fullPath.replace(didPathParam, stringValue(did));
    QString eidPathParam("{"); eidPathParam.append("eid").append("}");
    fullPath.replace(eidPathParam, stringValue(eid));
    QString widPathParam("{"); widPathParam.append("wid").append("}");
    fullPath.replace(widPathParam, stringValue(wid));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("parentChangeId"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(parent_change_id)));


    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "POST");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIBlobElementsApi::uploadFileUpdateElementCallback);

    worker->execute(&input);
}

void
OAIBlobElementsApi::uploadFileUpdateElementCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QString json(worker->response);
    OAIBTDocumentElementProcessingInfo* output = static_cast<OAIBTDocumentElementProcessingInfo*>(create(json, QString("OAIBTDocumentElementProcessingInfo")));
    auto wrapper = new OAIQObjectWrapper<OAIBTDocumentElementProcessingInfo*> (output);
    wrapper->deleteLater();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit uploadFileUpdateElementSignal(output);
    } else {
        emit uploadFileUpdateElementSignalE(output, error_type, error_str);
        emit uploadFileUpdateElementSignalEFull(worker, error_type, error_str);
    }
}


}
