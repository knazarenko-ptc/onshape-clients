/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * OpenAPI spec version: 1.111
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIBTPartMetadataInfo.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIBTPartMetadataInfo::OAIBTPartMetadataInfo(QString json) {
    init();
    this->fromJson(json);
}

OAIBTPartMetadataInfo::OAIBTPartMetadataInfo() {
    init();
}

OAIBTPartMetadataInfo::~OAIBTPartMetadataInfo() {
    this->cleanup();
}

void
OAIBTPartMetadataInfo::init() {
    appearance = new OAIBTPartAppearanceInfo();
    m_appearance_isSet = false;
    body_type = new QString("");
    m_body_type_isSet = false;
    configuration_id = new QString("");
    m_configuration_id_isSet = false;
    custom_properties = new QMap<QString, QString*>();
    m_custom_properties_isSet = false;
    custom_property_definitions = new QMap<QString, OAIBTCustomPropertyDefinitionInfo*>();
    m_custom_property_definitions_isSet = false;
    description = new QString("");
    m_description_isSet = false;
    element_id = new QString("");
    m_element_id_isSet = false;
    href = new QString("");
    m_href_isSet = false;
    id = new QString("");
    m_id_isSet = false;
    is_flattened_body = false;
    m_is_flattened_body_isSet = false;
    is_hidden = false;
    m_is_hidden_isSet = false;
    is_mesh = false;
    m_is_mesh_isSet = false;
    material = new OAIBTPartMaterialInfo();
    m_material_isSet = false;
    microversion_id = new QString("");
    m_microversion_id_isSet = false;
    name = new QString("");
    m_name_isSet = false;
    ordinal = 0;
    m_ordinal_isSet = false;
    part_id = new QString("");
    m_part_id_isSet = false;
    part_number = new QString("");
    m_part_number_isSet = false;
    part_query = new QString("");
    m_part_query_isSet = false;
    product_line = new QString("");
    m_product_line_isSet = false;
    project = new QString("");
    m_project_isSet = false;
    property_source_types = new QMap<QString, qint32>();
    m_property_source_types_isSet = false;
    referencing_configured_part_node_ids = new QList<QString*>();
    m_referencing_configured_part_node_ids_isSet = false;
    revision = new QString("");
    m_revision_isSet = false;
    state = new QString("");
    m_state_isSet = false;
    thumbnail_configuration_id = new QString("");
    m_thumbnail_configuration_id_isSet = false;
    thumbnail_info = new OAIBTThumbnailInfo();
    m_thumbnail_info_isSet = false;
    title1 = new QString("");
    m_title1_isSet = false;
    title2 = new QString("");
    m_title2_isSet = false;
    title3 = new QString("");
    m_title3_isSet = false;
    unflattened_part_id = new QString("");
    m_unflattened_part_id_isSet = false;
    vendor = new QString("");
    m_vendor_isSet = false;
}

void
OAIBTPartMetadataInfo::cleanup() {
    if(appearance != nullptr) { 
        delete appearance;
    }
    if(body_type != nullptr) { 
        delete body_type;
    }
    if(configuration_id != nullptr) { 
        delete configuration_id;
    }
    if(custom_properties != nullptr) { 
        auto arr = custom_properties;
        for(auto o: *arr) { 
            delete o;
        }
        delete custom_properties;
    }
    if(custom_property_definitions != nullptr) { 
        auto arr = custom_property_definitions;
        for(auto o: *arr) { 
            delete o;
        }
        delete custom_property_definitions;
    }
    if(description != nullptr) { 
        delete description;
    }
    if(element_id != nullptr) { 
        delete element_id;
    }
    if(href != nullptr) { 
        delete href;
    }
    if(id != nullptr) { 
        delete id;
    }



    if(material != nullptr) { 
        delete material;
    }
    if(microversion_id != nullptr) { 
        delete microversion_id;
    }
    if(name != nullptr) { 
        delete name;
    }

    if(part_id != nullptr) { 
        delete part_id;
    }
    if(part_number != nullptr) { 
        delete part_number;
    }
    if(part_query != nullptr) { 
        delete part_query;
    }
    if(product_line != nullptr) { 
        delete product_line;
    }
    if(project != nullptr) { 
        delete project;
    }

    if(property_source_types != nullptr) { 
        delete property_source_types;
    }
    if(referencing_configured_part_node_ids != nullptr) { 
        auto arr = referencing_configured_part_node_ids;
        for(auto o: *arr) { 
            delete o;
        }
        delete referencing_configured_part_node_ids;
    }
    if(revision != nullptr) { 
        delete revision;
    }
    if(state != nullptr) { 
        delete state;
    }
    if(thumbnail_configuration_id != nullptr) { 
        delete thumbnail_configuration_id;
    }
    if(thumbnail_info != nullptr) { 
        delete thumbnail_info;
    }
    if(title1 != nullptr) { 
        delete title1;
    }
    if(title2 != nullptr) { 
        delete title2;
    }
    if(title3 != nullptr) { 
        delete title3;
    }
    if(unflattened_part_id != nullptr) { 
        delete unflattened_part_id;
    }
    if(vendor != nullptr) { 
        delete vendor;
    }
}

OAIBTPartMetadataInfo*
OAIBTPartMetadataInfo::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIBTPartMetadataInfo::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&appearance, pJson["appearance"], "OAIBTPartAppearanceInfo", "OAIBTPartAppearanceInfo");
    
    ::OpenAPI::setValue(&body_type, pJson["bodyType"], "QString", "QString");
    
    ::OpenAPI::setValue(&configuration_id, pJson["configurationId"], "QString", "QString");
    
    
    ::OpenAPI::setValue(&custom_properties, pJson["customProperties"], "QMap", "QString");
    
    ::OpenAPI::setValue(&custom_property_definitions, pJson["customPropertyDefinitions"], "QMap", "OAIBTCustomPropertyDefinitionInfo");
    ::OpenAPI::setValue(&description, pJson["description"], "QString", "QString");
    
    ::OpenAPI::setValue(&element_id, pJson["elementId"], "QString", "QString");
    
    ::OpenAPI::setValue(&href, pJson["href"], "QString", "QString");
    
    ::OpenAPI::setValue(&id, pJson["id"], "QString", "QString");
    
    ::OpenAPI::setValue(&is_flattened_body, pJson["isFlattenedBody"], "bool", "");
    
    ::OpenAPI::setValue(&is_hidden, pJson["isHidden"], "bool", "");
    
    ::OpenAPI::setValue(&is_mesh, pJson["isMesh"], "bool", "");
    
    ::OpenAPI::setValue(&material, pJson["material"], "OAIBTPartMaterialInfo", "OAIBTPartMaterialInfo");
    
    ::OpenAPI::setValue(&microversion_id, pJson["microversionId"], "QString", "QString");
    
    ::OpenAPI::setValue(&name, pJson["name"], "QString", "QString");
    
    ::OpenAPI::setValue(&ordinal, pJson["ordinal"], "qint32", "");
    
    ::OpenAPI::setValue(&part_id, pJson["partId"], "QString", "QString");
    
    ::OpenAPI::setValue(&part_number, pJson["partNumber"], "QString", "QString");
    
    ::OpenAPI::setValue(&part_query, pJson["partQuery"], "QString", "QString");
    
    ::OpenAPI::setValue(&product_line, pJson["productLine"], "QString", "QString");
    
    ::OpenAPI::setValue(&project, pJson["project"], "QString", "QString");
    
    
    ::OpenAPI::setValue(&property_source_types, pJson["propertySourceTypes"], "QMap", "qint32");
    
    ::OpenAPI::setValue(&referencing_configured_part_node_ids, pJson["referencingConfiguredPartNodeIds"], "QList", "QString");
    ::OpenAPI::setValue(&revision, pJson["revision"], "QString", "QString");
    
    ::OpenAPI::setValue(&state, pJson["state"], "QString", "QString");
    
    ::OpenAPI::setValue(&thumbnail_configuration_id, pJson["thumbnailConfigurationId"], "QString", "QString");
    
    ::OpenAPI::setValue(&thumbnail_info, pJson["thumbnailInfo"], "OAIBTThumbnailInfo", "OAIBTThumbnailInfo");
    
    ::OpenAPI::setValue(&title1, pJson["title1"], "QString", "QString");
    
    ::OpenAPI::setValue(&title2, pJson["title2"], "QString", "QString");
    
    ::OpenAPI::setValue(&title3, pJson["title3"], "QString", "QString");
    
    ::OpenAPI::setValue(&unflattened_part_id, pJson["unflattenedPartId"], "QString", "QString");
    
    ::OpenAPI::setValue(&vendor, pJson["vendor"], "QString", "QString");
    
}

QString
OAIBTPartMetadataInfo::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIBTPartMetadataInfo::asJsonObject() {
    QJsonObject obj;
    if((appearance != nullptr) && (appearance->isSet())){
        toJsonValue(QString("appearance"), appearance, obj, QString("OAIBTPartAppearanceInfo"));
    }
    if(body_type != nullptr && *body_type != QString("")){
        toJsonValue(QString("bodyType"), body_type, obj, QString("QString"));
    }
    if(configuration_id != nullptr && *configuration_id != QString("")){
        toJsonValue(QString("configurationId"), configuration_id, obj, QString("QString"));
    }
    if(custom_properties->size() > 0){
        toJsonMap((QMap<QString, void*>*) custom_properties, obj, "customProperties", "QString");
    }
    if(custom_property_definitions->size() > 0){
        toJsonMap((QMap<QString, void*>*) custom_property_definitions, obj, "customPropertyDefinitions", "OAIBTCustomPropertyDefinitionInfo");
    }
    if(description != nullptr && *description != QString("")){
        toJsonValue(QString("description"), description, obj, QString("QString"));
    }
    if(element_id != nullptr && *element_id != QString("")){
        toJsonValue(QString("elementId"), element_id, obj, QString("QString"));
    }
    if(href != nullptr && *href != QString("")){
        toJsonValue(QString("href"), href, obj, QString("QString"));
    }
    if(id != nullptr && *id != QString("")){
        toJsonValue(QString("id"), id, obj, QString("QString"));
    }
    if(m_is_flattened_body_isSet){
        obj.insert("isFlattenedBody", QJsonValue(is_flattened_body));
    }
    if(m_is_hidden_isSet){
        obj.insert("isHidden", QJsonValue(is_hidden));
    }
    if(m_is_mesh_isSet){
        obj.insert("isMesh", QJsonValue(is_mesh));
    }
    if((material != nullptr) && (material->isSet())){
        toJsonValue(QString("material"), material, obj, QString("OAIBTPartMaterialInfo"));
    }
    if(microversion_id != nullptr && *microversion_id != QString("")){
        toJsonValue(QString("microversionId"), microversion_id, obj, QString("QString"));
    }
    if(name != nullptr && *name != QString("")){
        toJsonValue(QString("name"), name, obj, QString("QString"));
    }
    if(m_ordinal_isSet){
        obj.insert("ordinal", QJsonValue(ordinal));
    }
    if(part_id != nullptr && *part_id != QString("")){
        toJsonValue(QString("partId"), part_id, obj, QString("QString"));
    }
    if(part_number != nullptr && *part_number != QString("")){
        toJsonValue(QString("partNumber"), part_number, obj, QString("QString"));
    }
    if(part_query != nullptr && *part_query != QString("")){
        toJsonValue(QString("partQuery"), part_query, obj, QString("QString"));
    }
    if(product_line != nullptr && *product_line != QString("")){
        toJsonValue(QString("productLine"), product_line, obj, QString("QString"));
    }
    if(project != nullptr && *project != QString("")){
        toJsonValue(QString("project"), project, obj, QString("QString"));
    }
    if(property_source_types->size() > 0){
        toJsonMap((QMap<QString, void*>*) property_source_types, obj, "propertySourceTypes", "");
    }
    if(referencing_configured_part_node_ids->size() > 0){
        toJsonArray((QList<void*>*)referencing_configured_part_node_ids, obj, "referencingConfiguredPartNodeIds", "QString");
    }
    if(revision != nullptr && *revision != QString("")){
        toJsonValue(QString("revision"), revision, obj, QString("QString"));
    }
    if(state != nullptr && *state != QString("")){
        toJsonValue(QString("state"), state, obj, QString("QString"));
    }
    if(thumbnail_configuration_id != nullptr && *thumbnail_configuration_id != QString("")){
        toJsonValue(QString("thumbnailConfigurationId"), thumbnail_configuration_id, obj, QString("QString"));
    }
    if((thumbnail_info != nullptr) && (thumbnail_info->isSet())){
        toJsonValue(QString("thumbnailInfo"), thumbnail_info, obj, QString("OAIBTThumbnailInfo"));
    }
    if(title1 != nullptr && *title1 != QString("")){
        toJsonValue(QString("title1"), title1, obj, QString("QString"));
    }
    if(title2 != nullptr && *title2 != QString("")){
        toJsonValue(QString("title2"), title2, obj, QString("QString"));
    }
    if(title3 != nullptr && *title3 != QString("")){
        toJsonValue(QString("title3"), title3, obj, QString("QString"));
    }
    if(unflattened_part_id != nullptr && *unflattened_part_id != QString("")){
        toJsonValue(QString("unflattenedPartId"), unflattened_part_id, obj, QString("QString"));
    }
    if(vendor != nullptr && *vendor != QString("")){
        toJsonValue(QString("vendor"), vendor, obj, QString("QString"));
    }

    return obj;
}

OAIBTPartAppearanceInfo*
OAIBTPartMetadataInfo::getAppearance() {
    return appearance;
}
void
OAIBTPartMetadataInfo::setAppearance(OAIBTPartAppearanceInfo* appearance) {
    this->appearance = appearance;
    this->m_appearance_isSet = true;
}

QString*
OAIBTPartMetadataInfo::getBodyType() {
    return body_type;
}
void
OAIBTPartMetadataInfo::setBodyType(QString* body_type) {
    this->body_type = body_type;
    this->m_body_type_isSet = true;
}

QString*
OAIBTPartMetadataInfo::getConfigurationId() {
    return configuration_id;
}
void
OAIBTPartMetadataInfo::setConfigurationId(QString* configuration_id) {
    this->configuration_id = configuration_id;
    this->m_configuration_id_isSet = true;
}

QMap<QString, QString*>*
OAIBTPartMetadataInfo::getCustomProperties() {
    return custom_properties;
}
void
OAIBTPartMetadataInfo::setCustomProperties(QMap<QString, QString*>* custom_properties) {
    this->custom_properties = custom_properties;
    this->m_custom_properties_isSet = true;
}

QMap<QString, OAIBTCustomPropertyDefinitionInfo*>*
OAIBTPartMetadataInfo::getCustomPropertyDefinitions() {
    return custom_property_definitions;
}
void
OAIBTPartMetadataInfo::setCustomPropertyDefinitions(QMap<QString, OAIBTCustomPropertyDefinitionInfo*>* custom_property_definitions) {
    this->custom_property_definitions = custom_property_definitions;
    this->m_custom_property_definitions_isSet = true;
}

QString*
OAIBTPartMetadataInfo::getDescription() {
    return description;
}
void
OAIBTPartMetadataInfo::setDescription(QString* description) {
    this->description = description;
    this->m_description_isSet = true;
}

QString*
OAIBTPartMetadataInfo::getElementId() {
    return element_id;
}
void
OAIBTPartMetadataInfo::setElementId(QString* element_id) {
    this->element_id = element_id;
    this->m_element_id_isSet = true;
}

QString*
OAIBTPartMetadataInfo::getHref() {
    return href;
}
void
OAIBTPartMetadataInfo::setHref(QString* href) {
    this->href = href;
    this->m_href_isSet = true;
}

QString*
OAIBTPartMetadataInfo::getId() {
    return id;
}
void
OAIBTPartMetadataInfo::setId(QString* id) {
    this->id = id;
    this->m_id_isSet = true;
}

bool
OAIBTPartMetadataInfo::isIsFlattenedBody() {
    return is_flattened_body;
}
void
OAIBTPartMetadataInfo::setIsFlattenedBody(bool is_flattened_body) {
    this->is_flattened_body = is_flattened_body;
    this->m_is_flattened_body_isSet = true;
}

bool
OAIBTPartMetadataInfo::isIsHidden() {
    return is_hidden;
}
void
OAIBTPartMetadataInfo::setIsHidden(bool is_hidden) {
    this->is_hidden = is_hidden;
    this->m_is_hidden_isSet = true;
}

bool
OAIBTPartMetadataInfo::isIsMesh() {
    return is_mesh;
}
void
OAIBTPartMetadataInfo::setIsMesh(bool is_mesh) {
    this->is_mesh = is_mesh;
    this->m_is_mesh_isSet = true;
}

OAIBTPartMaterialInfo*
OAIBTPartMetadataInfo::getMaterial() {
    return material;
}
void
OAIBTPartMetadataInfo::setMaterial(OAIBTPartMaterialInfo* material) {
    this->material = material;
    this->m_material_isSet = true;
}

QString*
OAIBTPartMetadataInfo::getMicroversionId() {
    return microversion_id;
}
void
OAIBTPartMetadataInfo::setMicroversionId(QString* microversion_id) {
    this->microversion_id = microversion_id;
    this->m_microversion_id_isSet = true;
}

QString*
OAIBTPartMetadataInfo::getName() {
    return name;
}
void
OAIBTPartMetadataInfo::setName(QString* name) {
    this->name = name;
    this->m_name_isSet = true;
}

qint32
OAIBTPartMetadataInfo::getOrdinal() {
    return ordinal;
}
void
OAIBTPartMetadataInfo::setOrdinal(qint32 ordinal) {
    this->ordinal = ordinal;
    this->m_ordinal_isSet = true;
}

QString*
OAIBTPartMetadataInfo::getPartId() {
    return part_id;
}
void
OAIBTPartMetadataInfo::setPartId(QString* part_id) {
    this->part_id = part_id;
    this->m_part_id_isSet = true;
}

QString*
OAIBTPartMetadataInfo::getPartNumber() {
    return part_number;
}
void
OAIBTPartMetadataInfo::setPartNumber(QString* part_number) {
    this->part_number = part_number;
    this->m_part_number_isSet = true;
}

QString*
OAIBTPartMetadataInfo::getPartQuery() {
    return part_query;
}
void
OAIBTPartMetadataInfo::setPartQuery(QString* part_query) {
    this->part_query = part_query;
    this->m_part_query_isSet = true;
}

QString*
OAIBTPartMetadataInfo::getProductLine() {
    return product_line;
}
void
OAIBTPartMetadataInfo::setProductLine(QString* product_line) {
    this->product_line = product_line;
    this->m_product_line_isSet = true;
}

QString*
OAIBTPartMetadataInfo::getProject() {
    return project;
}
void
OAIBTPartMetadataInfo::setProject(QString* project) {
    this->project = project;
    this->m_project_isSet = true;
}

QMap<QString, qint32>*
OAIBTPartMetadataInfo::getPropertySourceTypes() {
    return property_source_types;
}
void
OAIBTPartMetadataInfo::setPropertySourceTypes(QMap<QString, qint32>* property_source_types) {
    this->property_source_types = property_source_types;
    this->m_property_source_types_isSet = true;
}

QList<QString*>*
OAIBTPartMetadataInfo::getReferencingConfiguredPartNodeIds() {
    return referencing_configured_part_node_ids;
}
void
OAIBTPartMetadataInfo::setReferencingConfiguredPartNodeIds(QList<QString*>* referencing_configured_part_node_ids) {
    this->referencing_configured_part_node_ids = referencing_configured_part_node_ids;
    this->m_referencing_configured_part_node_ids_isSet = true;
}

QString*
OAIBTPartMetadataInfo::getRevision() {
    return revision;
}
void
OAIBTPartMetadataInfo::setRevision(QString* revision) {
    this->revision = revision;
    this->m_revision_isSet = true;
}

QString*
OAIBTPartMetadataInfo::getState() {
    return state;
}
void
OAIBTPartMetadataInfo::setState(QString* state) {
    this->state = state;
    this->m_state_isSet = true;
}

QString*
OAIBTPartMetadataInfo::getThumbnailConfigurationId() {
    return thumbnail_configuration_id;
}
void
OAIBTPartMetadataInfo::setThumbnailConfigurationId(QString* thumbnail_configuration_id) {
    this->thumbnail_configuration_id = thumbnail_configuration_id;
    this->m_thumbnail_configuration_id_isSet = true;
}

OAIBTThumbnailInfo*
OAIBTPartMetadataInfo::getThumbnailInfo() {
    return thumbnail_info;
}
void
OAIBTPartMetadataInfo::setThumbnailInfo(OAIBTThumbnailInfo* thumbnail_info) {
    this->thumbnail_info = thumbnail_info;
    this->m_thumbnail_info_isSet = true;
}

QString*
OAIBTPartMetadataInfo::getTitle1() {
    return title1;
}
void
OAIBTPartMetadataInfo::setTitle1(QString* title1) {
    this->title1 = title1;
    this->m_title1_isSet = true;
}

QString*
OAIBTPartMetadataInfo::getTitle2() {
    return title2;
}
void
OAIBTPartMetadataInfo::setTitle2(QString* title2) {
    this->title2 = title2;
    this->m_title2_isSet = true;
}

QString*
OAIBTPartMetadataInfo::getTitle3() {
    return title3;
}
void
OAIBTPartMetadataInfo::setTitle3(QString* title3) {
    this->title3 = title3;
    this->m_title3_isSet = true;
}

QString*
OAIBTPartMetadataInfo::getUnflattenedPartId() {
    return unflattened_part_id;
}
void
OAIBTPartMetadataInfo::setUnflattenedPartId(QString* unflattened_part_id) {
    this->unflattened_part_id = unflattened_part_id;
    this->m_unflattened_part_id_isSet = true;
}

QString*
OAIBTPartMetadataInfo::getVendor() {
    return vendor;
}
void
OAIBTPartMetadataInfo::setVendor(QString* vendor) {
    this->vendor = vendor;
    this->m_vendor_isSet = true;
}


bool
OAIBTPartMetadataInfo::isSet(){
    bool isObjectUpdated = false;
    do{
        if(appearance != nullptr && appearance->isSet()){ isObjectUpdated = true; break;}
        if(body_type != nullptr && *body_type != QString("")){ isObjectUpdated = true; break;}
        if(configuration_id != nullptr && *configuration_id != QString("")){ isObjectUpdated = true; break;}
        if(custom_properties->size() > 0){ isObjectUpdated = true; break;}
        if(custom_property_definitions->size() > 0){ isObjectUpdated = true; break;}
        if(description != nullptr && *description != QString("")){ isObjectUpdated = true; break;}
        if(element_id != nullptr && *element_id != QString("")){ isObjectUpdated = true; break;}
        if(href != nullptr && *href != QString("")){ isObjectUpdated = true; break;}
        if(id != nullptr && *id != QString("")){ isObjectUpdated = true; break;}
        if(m_is_flattened_body_isSet){ isObjectUpdated = true; break;}
        if(m_is_hidden_isSet){ isObjectUpdated = true; break;}
        if(m_is_mesh_isSet){ isObjectUpdated = true; break;}
        if(material != nullptr && material->isSet()){ isObjectUpdated = true; break;}
        if(microversion_id != nullptr && *microversion_id != QString("")){ isObjectUpdated = true; break;}
        if(name != nullptr && *name != QString("")){ isObjectUpdated = true; break;}
        if(m_ordinal_isSet){ isObjectUpdated = true; break;}
        if(part_id != nullptr && *part_id != QString("")){ isObjectUpdated = true; break;}
        if(part_number != nullptr && *part_number != QString("")){ isObjectUpdated = true; break;}
        if(part_query != nullptr && *part_query != QString("")){ isObjectUpdated = true; break;}
        if(product_line != nullptr && *product_line != QString("")){ isObjectUpdated = true; break;}
        if(project != nullptr && *project != QString("")){ isObjectUpdated = true; break;}
        if(m_property_source_types_isSet){ isObjectUpdated = true; break;}
        if(property_source_types->size() > 0){ isObjectUpdated = true; break;}
        if(referencing_configured_part_node_ids->size() > 0){ isObjectUpdated = true; break;}
        if(revision != nullptr && *revision != QString("")){ isObjectUpdated = true; break;}
        if(state != nullptr && *state != QString("")){ isObjectUpdated = true; break;}
        if(thumbnail_configuration_id != nullptr && *thumbnail_configuration_id != QString("")){ isObjectUpdated = true; break;}
        if(thumbnail_info != nullptr && thumbnail_info->isSet()){ isObjectUpdated = true; break;}
        if(title1 != nullptr && *title1 != QString("")){ isObjectUpdated = true; break;}
        if(title2 != nullptr && *title2 != QString("")){ isObjectUpdated = true; break;}
        if(title3 != nullptr && *title3 != QString("")){ isObjectUpdated = true; break;}
        if(unflattened_part_id != nullptr && *unflattened_part_id != QString("")){ isObjectUpdated = true; break;}
        if(vendor != nullptr && *vendor != QString("")){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

