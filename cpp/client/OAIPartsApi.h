/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * OpenAPI spec version: 1.111
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef _OAI_OAIPartsApi_H_
#define _OAI_OAIPartsApi_H_

#include "OAIHttpRequest.h"

#include "OAIBTBoundingBoxInfo.h"
#include "OAIBTExportModelBodiesResponse-734.h"
#include "OAIBTExportTessellatedEdgesResponse-327.h"
#include "OAIBTExportTessellatedFacesResponse-898.h"
#include "OAIBTMassPropertiesBulkInfo.h"
#include "OAIBTPartMetadataInfo.h"
#include "OAIBTShadedViewsInfo.h"
#include "OAIBTTableResponse-1546.h"
#include "OAIBTWorkspacePartParams.h"
#include "OAIHttpRequest.h"
#include <QString>

#include <QObject>

namespace OpenAPI {

class OAIPartsApi: public QObject {
    Q_OBJECT

public:
    OAIPartsApi();
    OAIPartsApi(QString host, QString basePath);
    ~OAIPartsApi();

    QString host;
    QString basePath;
    QMap<QString, QString> defaultHeaders;

    void exportPS(QString* did, QString* wvm, QString* wvmid, QString* eid, QString* partid, QString* version, QString* configuration, QString* link_document_id);
    void getBendTable(QString* did, QString* wvm, QString* wvmid, QString* eid, QString* partid, QString* link_document_id);
    void getBodyDetails(QString* did, QString* wvm, QString* wvmid, QString* eid, QString* partid, QString* configuration, QString* link_document_id);
    void getBoundingBoxes(QString* did, QString* wvm, QString* wvmid, QString* eid, QString* partid, bool include_hidden, QString* configuration, QString* link_document_id);
    void getEdges(QString* did, QString* wvm, QString* wvmid, QString* eid, QString* partid, double angle_tolerance, double chord_tolerance, QList<QString*>* edge_id, QString* configuration, QString* link_document_id, QString*& body);
    void getFaces1(QString* did, QString* wvm, QString* wvmid, QString* eid, QString* partid, double angle_tolerance, double chord_tolerance, double max_facet_width, bool output_vertex_normals, bool output_facet_normals, bool output_texture_coordinates, bool output_face_appearances, bool output_index_table, QList<QString*>* face_id, QString* configuration, bool output_error_faces, QString* link_document_id, QString*& body);
    void getMassProperties(QString* did, QString* wvm, QString* wvmid, QString* eid, QString* partid, bool infer_metadata_owner, QString* link_document_id, QString* configuration);
    void getPartMetadata(QString* did, QString* wvm, QString* wvmid, QString* eid, QString* partid, bool infer_metadata_owner, bool include_property_defaults, bool friendly_user_ids, QString* configuration, QString* link_document_id);
    void getPartsWMV(QString* did, QString* wvm, QString* wvmid, QString* element_id, bool with_thumbnails, bool include_property_defaults, QString* link_document_id, QString* configuration);
    void getPartsWMVE(QString* did, QString* wvm, QString* wvmid, QString* eid, bool with_thumbnails, bool include_property_defaults, QString* configuration, QString* link_document_id);
    void getShadedViews1(QString* did, QString* wvm, QString* wvmid, QString* eid, QString* partid, QString* view_matrix, qint32 output_height, qint32 output_width, double pixel_size, QString* edges, bool use_anti_aliasing, QString* configuration, QString* link_document_id);
    void getStandardContentPartMetadata(QString* did, QString* vid, QString* eid, QString* otype, QString* oid, QString* partid, bool include_property_defaults, QString* configuration, QString* link_document_id);
    void updatePartMetadata(QString* did, QString* wvm, QString* wvmid, QString* eid, QString* partid, QString*& body);
    void updateStandardContentPartMetadata(QString* did, QString* vid, QString* eid, QString* otype, QString* oid, QString* partid, QString* link_document_id, bool include_property_defaults, OAIBTWorkspacePartParams& oaibt_workspace_part_params);
    
private:
    void exportPSCallback (OAIHttpRequestWorker * worker);
    void getBendTableCallback (OAIHttpRequestWorker * worker);
    void getBodyDetailsCallback (OAIHttpRequestWorker * worker);
    void getBoundingBoxesCallback (OAIHttpRequestWorker * worker);
    void getEdgesCallback (OAIHttpRequestWorker * worker);
    void getFaces1Callback (OAIHttpRequestWorker * worker);
    void getMassPropertiesCallback (OAIHttpRequestWorker * worker);
    void getPartMetadataCallback (OAIHttpRequestWorker * worker);
    void getPartsWMVCallback (OAIHttpRequestWorker * worker);
    void getPartsWMVECallback (OAIHttpRequestWorker * worker);
    void getShadedViews1Callback (OAIHttpRequestWorker * worker);
    void getStandardContentPartMetadataCallback (OAIHttpRequestWorker * worker);
    void updatePartMetadataCallback (OAIHttpRequestWorker * worker);
    void updateStandardContentPartMetadataCallback (OAIHttpRequestWorker * worker);
    
signals:
    void exportPSSignal(OAIHttpRequestInputFileElement* summary);
    void getBendTableSignal(OAIBTTableResponse-1546* summary);
    void getBodyDetailsSignal(OAIBTExportModelBodiesResponse-734* summary);
    void getBoundingBoxesSignal(OAIBTBoundingBoxInfo* summary);
    void getEdgesSignal(OAIBTExportTessellatedEdgesResponse-327* summary);
    void getFaces1Signal(OAIBTExportTessellatedFacesResponse-898* summary);
    void getMassPropertiesSignal(OAIBTMassPropertiesBulkInfo* summary);
    void getPartMetadataSignal(OAIBTPartMetadataInfo* summary);
    void getPartsWMVSignal(QList<OAIBTPartMetadataInfo*>* summary);
    void getPartsWMVESignal(QList<OAIBTPartMetadataInfo*>* summary);
    void getShadedViews1Signal(OAIBTShadedViewsInfo* summary);
    void getStandardContentPartMetadataSignal(OAIBTPartMetadataInfo* summary);
    void updatePartMetadataSignal(OAIBTPartMetadataInfo* summary);
    void updateStandardContentPartMetadataSignal(OAIBTPartMetadataInfo* summary);
    
    void exportPSSignalE(OAIHttpRequestInputFileElement* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void getBendTableSignalE(OAIBTTableResponse-1546* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void getBodyDetailsSignalE(OAIBTExportModelBodiesResponse-734* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void getBoundingBoxesSignalE(OAIBTBoundingBoxInfo* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void getEdgesSignalE(OAIBTExportTessellatedEdgesResponse-327* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void getFaces1SignalE(OAIBTExportTessellatedFacesResponse-898* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void getMassPropertiesSignalE(OAIBTMassPropertiesBulkInfo* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void getPartMetadataSignalE(OAIBTPartMetadataInfo* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void getPartsWMVSignalE(QList<OAIBTPartMetadataInfo*>* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void getPartsWMVESignalE(QList<OAIBTPartMetadataInfo*>* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void getShadedViews1SignalE(OAIBTShadedViewsInfo* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void getStandardContentPartMetadataSignalE(OAIBTPartMetadataInfo* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void updatePartMetadataSignalE(OAIBTPartMetadataInfo* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void updateStandardContentPartMetadataSignalE(OAIBTPartMetadataInfo* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    
    void exportPSSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void getBendTableSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void getBodyDetailsSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void getBoundingBoxesSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void getEdgesSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void getFaces1SignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void getMassPropertiesSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void getPartMetadataSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void getPartsWMVSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void getPartsWMVESignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void getShadedViews1SignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void getStandardContentPartMetadataSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void updatePartMetadataSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void updateStandardContentPartMetadataSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    
};

}
#endif
