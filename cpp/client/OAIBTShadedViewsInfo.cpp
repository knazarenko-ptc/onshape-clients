/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * OpenAPI spec version: 1.111
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIBTShadedViewsInfo.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIBTShadedViewsInfo::OAIBTShadedViewsInfo(QString json) {
    init();
    this->fromJson(json);
}

OAIBTShadedViewsInfo::OAIBTShadedViewsInfo() {
    init();
}

OAIBTShadedViewsInfo::~OAIBTShadedViewsInfo() {
    this->cleanup();
}

void
OAIBTShadedViewsInfo::init() {
    images = new QList<QList<QByteArray*>*>();
    m_images_isSet = false;
}

void
OAIBTShadedViewsInfo::cleanup() {
    if(images != nullptr) { 
        auto arr = images;
        for(auto o: *arr) { 
            for(auto o1: *o) {
                delete o1;
            }
            delete o;
        }
        delete images;
    }
}

OAIBTShadedViewsInfo*
OAIBTShadedViewsInfo::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIBTShadedViewsInfo::fromJsonObject(QJsonObject pJson) {
    
    
    if(pJson["images"].isArray()){
        auto arr = pJson["images"].toArray();
        for (const QJsonValue & jval : arr) {
            auto images_item = new QList<QByteArray*>();
            
            auto jsonval = jval.toObject();
            ::OpenAPI::setValue(images_item, jsonval, "QList", "QByteArray");
            images->push_back(images_item);
        }
    }
}

QString
OAIBTShadedViewsInfo::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIBTShadedViewsInfo::asJsonObject() {
    QJsonObject obj;
    if(images->size() > 0){
        QJsonArray jarray;
        for(auto items : *images){
            QJsonObject jobj;
            toJsonArray((QList<void*>*)items, jobj, "images", "QByteArray");
            jarray.append(jobj.value("images"));
        }
        obj.insert("images", jarray);
    }

    return obj;
}

QList<QList<QByteArray*>*>*
OAIBTShadedViewsInfo::getImages() {
    return images;
}
void
OAIBTShadedViewsInfo::setImages(QList<QList<QByteArray*>*>* images) {
    this->images = images;
    this->m_images_isSet = true;
}


bool
OAIBTShadedViewsInfo::isSet(){
    bool isObjectUpdated = false;
    do{
        if(images->size() > 0){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

