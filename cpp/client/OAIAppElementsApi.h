/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * OpenAPI spec version: 1.111
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef _OAI_OAIAppElementsApi_H_
#define _OAI_OAIAppElementsApi_H_

#include "OAIHttpRequest.h"

#include "OAIBTAppElementCommitTransactionParams.h"
#include "OAIBTAppElementContentInfo.h"
#include "OAIBTAppElementHistoryInfo.h"
#include "OAIBTAppElementModifyInfo.h"
#include "OAIBTAppElementParams.h"
#include "OAIBTAppElementReferenceInfo.h"
#include "OAIBTAppElementReferenceParams.h"
#include "OAIBTAppElementReferenceResolveInfo.h"
#include "OAIBTAppElementReferencesResolveInfo.h"
#include "OAIBTAppElementStartTransactionParams.h"
#include "OAIBTAppElementUpdateParams.h"
#include <QString>

#include <QObject>

namespace OpenAPI {

class OAIAppElementsApi: public QObject {
    Q_OBJECT

public:
    OAIAppElementsApi();
    OAIAppElementsApi(QString host, QString basePath);
    ~OAIAppElementsApi();

    QString host;
    QString basePath;
    QMap<QString, QString> defaultHeaders;

    void commitTransaction(QString* did, QString* eid, QString* wid, QString* tid, OAIBTAppElementCommitTransactionParams& oaibt_app_element_commit_transaction_params);
    void createElement(QString* did, QString* wid, OAIBTAppElementParams& oaibt_app_element_params);
    void createReference(QString* did, QString* eid, QString* wvm, QString* wvmid, OAIBTAppElementReferenceParams& oaibt_app_element_reference_params);
    void deleteAppElementContent(QString* did, QString* eid, QString* wvm, QString* wvmid, QString* sid, QString* transaction_id, QString* parent_change_id, QString* description);
    void deleteReference(QString* did, QString* eid, QString* wvm, QString* wvmid, QString* rid, QString* transaction_id, QString* parent_change_id, QString* description);
    void getAppElementHistory(QString* did, QString* eid, QString* wvm, QString* wvmid);
    void getSubElementContent(QString* did, QString* eid, QString* wvm, QString* wvmid, QString* transaction_id, QString* change_id, QString* base_change_id, QString* subelement_id, QString* link_document_id);
    void getSubelementIds(QString* did, QString* eid, QString* wvm, QString* wvmid, QString* transaction_id, QString* change_id);
    void resolveReference(QString* did, QString* eid, QString* wvm, QString* wvmid, QString* rid, QString* transaction_id, QString* parent_change_id, bool include_internal, QString* link_document_id);
    void resolveReferences(QString* did, QString* eid, QString* wvm, QString* wvmid, QString* transaction_id, QString* parent_change_id, bool include_internal, QString* link_document_id, QString* reference_ids);
    void startTransaction(QString* did, QString* eid, QString* wid, OAIBTAppElementStartTransactionParams& oaibt_app_element_start_transaction_params);
    void updateAppElement(QString* did, QString* eid, QString* wvm, QString* wvmid, OAIBTAppElementUpdateParams& oaibt_app_element_update_params);
    void updateReference(QString* did, QString* eid, QString* wvm, QString* wvmid, QString* rid, OAIBTAppElementReferenceParams& oaibt_app_element_reference_params);
    
private:
    void commitTransactionCallback (OAIHttpRequestWorker * worker);
    void createElementCallback (OAIHttpRequestWorker * worker);
    void createReferenceCallback (OAIHttpRequestWorker * worker);
    void deleteAppElementContentCallback (OAIHttpRequestWorker * worker);
    void deleteReferenceCallback (OAIHttpRequestWorker * worker);
    void getAppElementHistoryCallback (OAIHttpRequestWorker * worker);
    void getSubElementContentCallback (OAIHttpRequestWorker * worker);
    void getSubelementIdsCallback (OAIHttpRequestWorker * worker);
    void resolveReferenceCallback (OAIHttpRequestWorker * worker);
    void resolveReferencesCallback (OAIHttpRequestWorker * worker);
    void startTransactionCallback (OAIHttpRequestWorker * worker);
    void updateAppElementCallback (OAIHttpRequestWorker * worker);
    void updateReferenceCallback (OAIHttpRequestWorker * worker);
    
signals:
    void commitTransactionSignal(OAIBTAppElementModifyInfo* summary);
    void createElementSignal(OAIBTAppElementModifyInfo* summary);
    void createReferenceSignal(OAIBTAppElementReferenceInfo* summary);
    void deleteAppElementContentSignal(OAIBTAppElementModifyInfo* summary);
    void deleteReferenceSignal(OAIBTAppElementReferenceInfo* summary);
    void getAppElementHistorySignal(OAIBTAppElementHistoryInfo* summary);
    void getSubElementContentSignal(OAIBTAppElementContentInfo* summary);
    void getSubelementIdsSignal(OAIBTAppElementModifyInfo* summary);
    void resolveReferenceSignal(OAIBTAppElementReferenceResolveInfo* summary);
    void resolveReferencesSignal(OAIBTAppElementReferencesResolveInfo* summary);
    void startTransactionSignal(OAIBTAppElementModifyInfo* summary);
    void updateAppElementSignal(OAIBTAppElementModifyInfo* summary);
    void updateReferenceSignal(OAIBTAppElementReferenceInfo* summary);
    
    void commitTransactionSignalE(OAIBTAppElementModifyInfo* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void createElementSignalE(OAIBTAppElementModifyInfo* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void createReferenceSignalE(OAIBTAppElementReferenceInfo* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void deleteAppElementContentSignalE(OAIBTAppElementModifyInfo* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void deleteReferenceSignalE(OAIBTAppElementReferenceInfo* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void getAppElementHistorySignalE(OAIBTAppElementHistoryInfo* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void getSubElementContentSignalE(OAIBTAppElementContentInfo* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void getSubelementIdsSignalE(OAIBTAppElementModifyInfo* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void resolveReferenceSignalE(OAIBTAppElementReferenceResolveInfo* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void resolveReferencesSignalE(OAIBTAppElementReferencesResolveInfo* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void startTransactionSignalE(OAIBTAppElementModifyInfo* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void updateAppElementSignalE(OAIBTAppElementModifyInfo* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void updateReferenceSignalE(OAIBTAppElementReferenceInfo* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    
    void commitTransactionSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void createElementSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void createReferenceSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void deleteAppElementContentSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void deleteReferenceSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void getAppElementHistorySignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void getSubElementContentSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void getSubelementIdsSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void resolveReferenceSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void resolveReferencesSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void startTransactionSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void updateAppElementSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void updateReferenceSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    
};

}
#endif
