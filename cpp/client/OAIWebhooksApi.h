/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * OpenAPI spec version: 1.111
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef _OAI_OAIWebhooksApi_H_
#define _OAI_OAIWebhooksApi_H_

#include "OAIHttpRequest.h"

#include "OAIBTListResponseBTWebhookInfo.h"
#include "OAIBTWebhookInfo.h"
#include "OAIBTWebhookParams.h"
#include <QString>

#include <QObject>

namespace OpenAPI {

class OAIWebhooksApi: public QObject {
    Q_OBJECT

public:
    OAIWebhooksApi();
    OAIWebhooksApi(QString host, QString basePath);
    ~OAIWebhooksApi();

    QString host;
    QString basePath;
    QMap<QString, QString> defaultHeaders;

    void createWebhook(OAIBTWebhookParams& oaibt_webhook_params);
    void getWebhook(QString* webhookid);
    void getWebhooks(QString* company, QString* user, qint32 offset, qint32 limit);
    void pingWebhook(QString* webhookid);
    void unregisterWebhook(QString* webhookid);
    void updateWebhook(QString* webhookid, OAIBTWebhookParams& oaibt_webhook_params);
    
private:
    void createWebhookCallback (OAIHttpRequestWorker * worker);
    void getWebhookCallback (OAIHttpRequestWorker * worker);
    void getWebhooksCallback (OAIHttpRequestWorker * worker);
    void pingWebhookCallback (OAIHttpRequestWorker * worker);
    void unregisterWebhookCallback (OAIHttpRequestWorker * worker);
    void updateWebhookCallback (OAIHttpRequestWorker * worker);
    
signals:
    void createWebhookSignal(OAIBTWebhookInfo* summary);
    void getWebhookSignal(OAIBTWebhookInfo* summary);
    void getWebhooksSignal(OAIBTListResponseBTWebhookInfo* summary);
    void pingWebhookSignal();
    void unregisterWebhookSignal();
    void updateWebhookSignal(OAIBTWebhookInfo* summary);
    
    void createWebhookSignalE(OAIBTWebhookInfo* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void getWebhookSignalE(OAIBTWebhookInfo* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void getWebhooksSignalE(OAIBTListResponseBTWebhookInfo* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void pingWebhookSignalE(QNetworkReply::NetworkError error_type, QString& error_str);
    void unregisterWebhookSignalE(QNetworkReply::NetworkError error_type, QString& error_str);
    void updateWebhookSignalE(OAIBTWebhookInfo* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    
    void createWebhookSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void getWebhookSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void getWebhooksSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void pingWebhookSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void unregisterWebhookSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void updateWebhookSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    
};

}
#endif
