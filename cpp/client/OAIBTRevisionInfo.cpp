/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * OpenAPI spec version: 1.111
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIBTRevisionInfo.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIBTRevisionInfo::OAIBTRevisionInfo(QString json) {
    init();
    this->fromJson(json);
}

OAIBTRevisionInfo::OAIBTRevisionInfo() {
    init();
}

OAIBTRevisionInfo::~OAIBTRevisionInfo() {
    this->cleanup();
}

void
OAIBTRevisionInfo::init() {
    approvers = new QList<OAIBTRevisionApproverInfo*>();
    m_approvers_isSet = false;
    auto_obsoletion_release_id = new QString("");
    m_auto_obsoletion_release_id_isSet = false;
    auto_obsoletion_release_name = new QString("");
    m_auto_obsoletion_release_name_isSet = false;
    can_current_user_obsolete = false;
    m_can_current_user_obsolete_isSet = false;
    can_export = false;
    m_can_export_isSet = false;
    company_id = new QString("");
    m_company_id_isSet = false;
    configuration = new QString("");
    m_configuration_isSet = false;
    document_id = new QString("");
    m_document_id_isSet = false;
    document_name = new QString("");
    m_document_name_isSet = false;
    element_id = new QString("");
    m_element_id_isSet = false;
    element_type = 0;
    m_element_type_isSet = false;
    error_message = new QString("");
    m_error_message_isSet = false;
    file_name = new QString("");
    m_file_name_isSet = false;
    flat_part_insertable_id = new QString("");
    m_flat_part_insertable_id_isSet = false;
    href = new QString("");
    m_href_isSet = false;
    id = new QString("");
    m_id_isSet = false;
    insertable_id = new QString("");
    m_insertable_id_isSet = false;
    is_obsolete = false;
    m_is_obsolete_isSet = false;
    is_translatable = false;
    m_is_translatable_isSet = false;
    mime_type = new QString("");
    m_mime_type_isSet = false;
    name = new QString("");
    m_name_isSet = false;
    next_revision_id = new QString("");
    m_next_revision_id_isSet = false;
    obsoletion_package_id = new QString("");
    m_obsoletion_package_id_isSet = false;
    part_id = new QString("");
    m_part_id_isSet = false;
    part_number = new QString("");
    m_part_number_isSet = false;
    previous_revision_id = new QString("");
    m_previous_revision_id_isSet = false;
    release_created_date = NULL;
    m_release_created_date_isSet = false;
    release_id = new QString("");
    m_release_id_isSet = false;
    release_name = new QString("");
    m_release_name_isSet = false;
    released_by = new OAIBTUserSummaryInfo();
    m_released_by_isSet = false;
    revision = new QString("");
    m_revision_isSet = false;
    revision_rule_id = new QString("");
    m_revision_rule_id_isSet = false;
    version_id = new QString("");
    m_version_id_isSet = false;
    version_name = new QString("");
    m_version_name_isSet = false;
    view_ref = new QString("");
    m_view_ref_isSet = false;
}

void
OAIBTRevisionInfo::cleanup() {
    if(approvers != nullptr) { 
        auto arr = approvers;
        for(auto o: *arr) { 
            delete o;
        }
        delete approvers;
    }
    if(auto_obsoletion_release_id != nullptr) { 
        delete auto_obsoletion_release_id;
    }
    if(auto_obsoletion_release_name != nullptr) { 
        delete auto_obsoletion_release_name;
    }


    if(company_id != nullptr) { 
        delete company_id;
    }
    if(configuration != nullptr) { 
        delete configuration;
    }
    if(document_id != nullptr) { 
        delete document_id;
    }
    if(document_name != nullptr) { 
        delete document_name;
    }
    if(element_id != nullptr) { 
        delete element_id;
    }

    if(error_message != nullptr) { 
        delete error_message;
    }
    if(file_name != nullptr) { 
        delete file_name;
    }
    if(flat_part_insertable_id != nullptr) { 
        delete flat_part_insertable_id;
    }
    if(href != nullptr) { 
        delete href;
    }
    if(id != nullptr) { 
        delete id;
    }
    if(insertable_id != nullptr) { 
        delete insertable_id;
    }


    if(mime_type != nullptr) { 
        delete mime_type;
    }
    if(name != nullptr) { 
        delete name;
    }
    if(next_revision_id != nullptr) { 
        delete next_revision_id;
    }
    if(obsoletion_package_id != nullptr) { 
        delete obsoletion_package_id;
    }
    if(part_id != nullptr) { 
        delete part_id;
    }
    if(part_number != nullptr) { 
        delete part_number;
    }
    if(previous_revision_id != nullptr) { 
        delete previous_revision_id;
    }
    if(release_created_date != nullptr) { 
        delete release_created_date;
    }
    if(release_id != nullptr) { 
        delete release_id;
    }
    if(release_name != nullptr) { 
        delete release_name;
    }
    if(released_by != nullptr) { 
        delete released_by;
    }
    if(revision != nullptr) { 
        delete revision;
    }
    if(revision_rule_id != nullptr) { 
        delete revision_rule_id;
    }
    if(version_id != nullptr) { 
        delete version_id;
    }
    if(version_name != nullptr) { 
        delete version_name;
    }
    if(view_ref != nullptr) { 
        delete view_ref;
    }
}

OAIBTRevisionInfo*
OAIBTRevisionInfo::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIBTRevisionInfo::fromJsonObject(QJsonObject pJson) {
    
    ::OpenAPI::setValue(&approvers, pJson["approvers"], "QList", "OAIBTRevisionApproverInfo");
    ::OpenAPI::setValue(&auto_obsoletion_release_id, pJson["autoObsoletionReleaseId"], "QString", "QString");
    
    ::OpenAPI::setValue(&auto_obsoletion_release_name, pJson["autoObsoletionReleaseName"], "QString", "QString");
    
    ::OpenAPI::setValue(&can_current_user_obsolete, pJson["canCurrentUserObsolete"], "bool", "");
    
    ::OpenAPI::setValue(&can_export, pJson["canExport"], "bool", "");
    
    ::OpenAPI::setValue(&company_id, pJson["companyId"], "QString", "QString");
    
    ::OpenAPI::setValue(&configuration, pJson["configuration"], "QString", "QString");
    
    ::OpenAPI::setValue(&document_id, pJson["documentId"], "QString", "QString");
    
    ::OpenAPI::setValue(&document_name, pJson["documentName"], "QString", "QString");
    
    ::OpenAPI::setValue(&element_id, pJson["elementId"], "QString", "QString");
    
    ::OpenAPI::setValue(&element_type, pJson["elementType"], "qint32", "");
    
    ::OpenAPI::setValue(&error_message, pJson["errorMessage"], "QString", "QString");
    
    ::OpenAPI::setValue(&file_name, pJson["fileName"], "QString", "QString");
    
    ::OpenAPI::setValue(&flat_part_insertable_id, pJson["flatPartInsertableId"], "QString", "QString");
    
    ::OpenAPI::setValue(&href, pJson["href"], "QString", "QString");
    
    ::OpenAPI::setValue(&id, pJson["id"], "QString", "QString");
    
    ::OpenAPI::setValue(&insertable_id, pJson["insertableId"], "QString", "QString");
    
    ::OpenAPI::setValue(&is_obsolete, pJson["isObsolete"], "bool", "");
    
    ::OpenAPI::setValue(&is_translatable, pJson["isTranslatable"], "bool", "");
    
    ::OpenAPI::setValue(&mime_type, pJson["mimeType"], "QString", "QString");
    
    ::OpenAPI::setValue(&name, pJson["name"], "QString", "QString");
    
    ::OpenAPI::setValue(&next_revision_id, pJson["nextRevisionId"], "QString", "QString");
    
    ::OpenAPI::setValue(&obsoletion_package_id, pJson["obsoletionPackageId"], "QString", "QString");
    
    ::OpenAPI::setValue(&part_id, pJson["partId"], "QString", "QString");
    
    ::OpenAPI::setValue(&part_number, pJson["partNumber"], "QString", "QString");
    
    ::OpenAPI::setValue(&previous_revision_id, pJson["previousRevisionId"], "QString", "QString");
    
    ::OpenAPI::setValue(&release_created_date, pJson["releaseCreatedDate"], "QDateTime", "QDateTime");
    
    ::OpenAPI::setValue(&release_id, pJson["releaseId"], "QString", "QString");
    
    ::OpenAPI::setValue(&release_name, pJson["releaseName"], "QString", "QString");
    
    ::OpenAPI::setValue(&released_by, pJson["releasedBy"], "OAIBTUserSummaryInfo", "OAIBTUserSummaryInfo");
    
    ::OpenAPI::setValue(&revision, pJson["revision"], "QString", "QString");
    
    ::OpenAPI::setValue(&revision_rule_id, pJson["revisionRuleId"], "QString", "QString");
    
    ::OpenAPI::setValue(&version_id, pJson["versionId"], "QString", "QString");
    
    ::OpenAPI::setValue(&version_name, pJson["versionName"], "QString", "QString");
    
    ::OpenAPI::setValue(&view_ref, pJson["viewRef"], "QString", "QString");
    
}

QString
OAIBTRevisionInfo::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIBTRevisionInfo::asJsonObject() {
    QJsonObject obj;
    if(approvers->size() > 0){
        toJsonArray((QList<void*>*)approvers, obj, "approvers", "OAIBTRevisionApproverInfo");
    }
    if(auto_obsoletion_release_id != nullptr && *auto_obsoletion_release_id != QString("")){
        toJsonValue(QString("autoObsoletionReleaseId"), auto_obsoletion_release_id, obj, QString("QString"));
    }
    if(auto_obsoletion_release_name != nullptr && *auto_obsoletion_release_name != QString("")){
        toJsonValue(QString("autoObsoletionReleaseName"), auto_obsoletion_release_name, obj, QString("QString"));
    }
    if(m_can_current_user_obsolete_isSet){
        obj.insert("canCurrentUserObsolete", QJsonValue(can_current_user_obsolete));
    }
    if(m_can_export_isSet){
        obj.insert("canExport", QJsonValue(can_export));
    }
    if(company_id != nullptr && *company_id != QString("")){
        toJsonValue(QString("companyId"), company_id, obj, QString("QString"));
    }
    if(configuration != nullptr && *configuration != QString("")){
        toJsonValue(QString("configuration"), configuration, obj, QString("QString"));
    }
    if(document_id != nullptr && *document_id != QString("")){
        toJsonValue(QString("documentId"), document_id, obj, QString("QString"));
    }
    if(document_name != nullptr && *document_name != QString("")){
        toJsonValue(QString("documentName"), document_name, obj, QString("QString"));
    }
    if(element_id != nullptr && *element_id != QString("")){
        toJsonValue(QString("elementId"), element_id, obj, QString("QString"));
    }
    if(m_element_type_isSet){
        obj.insert("elementType", QJsonValue(element_type));
    }
    if(error_message != nullptr && *error_message != QString("")){
        toJsonValue(QString("errorMessage"), error_message, obj, QString("QString"));
    }
    if(file_name != nullptr && *file_name != QString("")){
        toJsonValue(QString("fileName"), file_name, obj, QString("QString"));
    }
    if(flat_part_insertable_id != nullptr && *flat_part_insertable_id != QString("")){
        toJsonValue(QString("flatPartInsertableId"), flat_part_insertable_id, obj, QString("QString"));
    }
    if(href != nullptr && *href != QString("")){
        toJsonValue(QString("href"), href, obj, QString("QString"));
    }
    if(id != nullptr && *id != QString("")){
        toJsonValue(QString("id"), id, obj, QString("QString"));
    }
    if(insertable_id != nullptr && *insertable_id != QString("")){
        toJsonValue(QString("insertableId"), insertable_id, obj, QString("QString"));
    }
    if(m_is_obsolete_isSet){
        obj.insert("isObsolete", QJsonValue(is_obsolete));
    }
    if(m_is_translatable_isSet){
        obj.insert("isTranslatable", QJsonValue(is_translatable));
    }
    if(mime_type != nullptr && *mime_type != QString("")){
        toJsonValue(QString("mimeType"), mime_type, obj, QString("QString"));
    }
    if(name != nullptr && *name != QString("")){
        toJsonValue(QString("name"), name, obj, QString("QString"));
    }
    if(next_revision_id != nullptr && *next_revision_id != QString("")){
        toJsonValue(QString("nextRevisionId"), next_revision_id, obj, QString("QString"));
    }
    if(obsoletion_package_id != nullptr && *obsoletion_package_id != QString("")){
        toJsonValue(QString("obsoletionPackageId"), obsoletion_package_id, obj, QString("QString"));
    }
    if(part_id != nullptr && *part_id != QString("")){
        toJsonValue(QString("partId"), part_id, obj, QString("QString"));
    }
    if(part_number != nullptr && *part_number != QString("")){
        toJsonValue(QString("partNumber"), part_number, obj, QString("QString"));
    }
    if(previous_revision_id != nullptr && *previous_revision_id != QString("")){
        toJsonValue(QString("previousRevisionId"), previous_revision_id, obj, QString("QString"));
    }
    if(release_created_date != nullptr) { 
        toJsonValue(QString("releaseCreatedDate"), release_created_date, obj, QString("QDateTime"));
    }
    if(release_id != nullptr && *release_id != QString("")){
        toJsonValue(QString("releaseId"), release_id, obj, QString("QString"));
    }
    if(release_name != nullptr && *release_name != QString("")){
        toJsonValue(QString("releaseName"), release_name, obj, QString("QString"));
    }
    if((released_by != nullptr) && (released_by->isSet())){
        toJsonValue(QString("releasedBy"), released_by, obj, QString("OAIBTUserSummaryInfo"));
    }
    if(revision != nullptr && *revision != QString("")){
        toJsonValue(QString("revision"), revision, obj, QString("QString"));
    }
    if(revision_rule_id != nullptr && *revision_rule_id != QString("")){
        toJsonValue(QString("revisionRuleId"), revision_rule_id, obj, QString("QString"));
    }
    if(version_id != nullptr && *version_id != QString("")){
        toJsonValue(QString("versionId"), version_id, obj, QString("QString"));
    }
    if(version_name != nullptr && *version_name != QString("")){
        toJsonValue(QString("versionName"), version_name, obj, QString("QString"));
    }
    if(view_ref != nullptr && *view_ref != QString("")){
        toJsonValue(QString("viewRef"), view_ref, obj, QString("QString"));
    }

    return obj;
}

QList<OAIBTRevisionApproverInfo*>*
OAIBTRevisionInfo::getApprovers() {
    return approvers;
}
void
OAIBTRevisionInfo::setApprovers(QList<OAIBTRevisionApproverInfo*>* approvers) {
    this->approvers = approvers;
    this->m_approvers_isSet = true;
}

QString*
OAIBTRevisionInfo::getAutoObsoletionReleaseId() {
    return auto_obsoletion_release_id;
}
void
OAIBTRevisionInfo::setAutoObsoletionReleaseId(QString* auto_obsoletion_release_id) {
    this->auto_obsoletion_release_id = auto_obsoletion_release_id;
    this->m_auto_obsoletion_release_id_isSet = true;
}

QString*
OAIBTRevisionInfo::getAutoObsoletionReleaseName() {
    return auto_obsoletion_release_name;
}
void
OAIBTRevisionInfo::setAutoObsoletionReleaseName(QString* auto_obsoletion_release_name) {
    this->auto_obsoletion_release_name = auto_obsoletion_release_name;
    this->m_auto_obsoletion_release_name_isSet = true;
}

bool
OAIBTRevisionInfo::isCanCurrentUserObsolete() {
    return can_current_user_obsolete;
}
void
OAIBTRevisionInfo::setCanCurrentUserObsolete(bool can_current_user_obsolete) {
    this->can_current_user_obsolete = can_current_user_obsolete;
    this->m_can_current_user_obsolete_isSet = true;
}

bool
OAIBTRevisionInfo::isCanExport() {
    return can_export;
}
void
OAIBTRevisionInfo::setCanExport(bool can_export) {
    this->can_export = can_export;
    this->m_can_export_isSet = true;
}

QString*
OAIBTRevisionInfo::getCompanyId() {
    return company_id;
}
void
OAIBTRevisionInfo::setCompanyId(QString* company_id) {
    this->company_id = company_id;
    this->m_company_id_isSet = true;
}

QString*
OAIBTRevisionInfo::getConfiguration() {
    return configuration;
}
void
OAIBTRevisionInfo::setConfiguration(QString* configuration) {
    this->configuration = configuration;
    this->m_configuration_isSet = true;
}

QString*
OAIBTRevisionInfo::getDocumentId() {
    return document_id;
}
void
OAIBTRevisionInfo::setDocumentId(QString* document_id) {
    this->document_id = document_id;
    this->m_document_id_isSet = true;
}

QString*
OAIBTRevisionInfo::getDocumentName() {
    return document_name;
}
void
OAIBTRevisionInfo::setDocumentName(QString* document_name) {
    this->document_name = document_name;
    this->m_document_name_isSet = true;
}

QString*
OAIBTRevisionInfo::getElementId() {
    return element_id;
}
void
OAIBTRevisionInfo::setElementId(QString* element_id) {
    this->element_id = element_id;
    this->m_element_id_isSet = true;
}

qint32
OAIBTRevisionInfo::getElementType() {
    return element_type;
}
void
OAIBTRevisionInfo::setElementType(qint32 element_type) {
    this->element_type = element_type;
    this->m_element_type_isSet = true;
}

QString*
OAIBTRevisionInfo::getErrorMessage() {
    return error_message;
}
void
OAIBTRevisionInfo::setErrorMessage(QString* error_message) {
    this->error_message = error_message;
    this->m_error_message_isSet = true;
}

QString*
OAIBTRevisionInfo::getFileName() {
    return file_name;
}
void
OAIBTRevisionInfo::setFileName(QString* file_name) {
    this->file_name = file_name;
    this->m_file_name_isSet = true;
}

QString*
OAIBTRevisionInfo::getFlatPartInsertableId() {
    return flat_part_insertable_id;
}
void
OAIBTRevisionInfo::setFlatPartInsertableId(QString* flat_part_insertable_id) {
    this->flat_part_insertable_id = flat_part_insertable_id;
    this->m_flat_part_insertable_id_isSet = true;
}

QString*
OAIBTRevisionInfo::getHref() {
    return href;
}
void
OAIBTRevisionInfo::setHref(QString* href) {
    this->href = href;
    this->m_href_isSet = true;
}

QString*
OAIBTRevisionInfo::getId() {
    return id;
}
void
OAIBTRevisionInfo::setId(QString* id) {
    this->id = id;
    this->m_id_isSet = true;
}

QString*
OAIBTRevisionInfo::getInsertableId() {
    return insertable_id;
}
void
OAIBTRevisionInfo::setInsertableId(QString* insertable_id) {
    this->insertable_id = insertable_id;
    this->m_insertable_id_isSet = true;
}

bool
OAIBTRevisionInfo::isIsObsolete() {
    return is_obsolete;
}
void
OAIBTRevisionInfo::setIsObsolete(bool is_obsolete) {
    this->is_obsolete = is_obsolete;
    this->m_is_obsolete_isSet = true;
}

bool
OAIBTRevisionInfo::isIsTranslatable() {
    return is_translatable;
}
void
OAIBTRevisionInfo::setIsTranslatable(bool is_translatable) {
    this->is_translatable = is_translatable;
    this->m_is_translatable_isSet = true;
}

QString*
OAIBTRevisionInfo::getMimeType() {
    return mime_type;
}
void
OAIBTRevisionInfo::setMimeType(QString* mime_type) {
    this->mime_type = mime_type;
    this->m_mime_type_isSet = true;
}

QString*
OAIBTRevisionInfo::getName() {
    return name;
}
void
OAIBTRevisionInfo::setName(QString* name) {
    this->name = name;
    this->m_name_isSet = true;
}

QString*
OAIBTRevisionInfo::getNextRevisionId() {
    return next_revision_id;
}
void
OAIBTRevisionInfo::setNextRevisionId(QString* next_revision_id) {
    this->next_revision_id = next_revision_id;
    this->m_next_revision_id_isSet = true;
}

QString*
OAIBTRevisionInfo::getObsoletionPackageId() {
    return obsoletion_package_id;
}
void
OAIBTRevisionInfo::setObsoletionPackageId(QString* obsoletion_package_id) {
    this->obsoletion_package_id = obsoletion_package_id;
    this->m_obsoletion_package_id_isSet = true;
}

QString*
OAIBTRevisionInfo::getPartId() {
    return part_id;
}
void
OAIBTRevisionInfo::setPartId(QString* part_id) {
    this->part_id = part_id;
    this->m_part_id_isSet = true;
}

QString*
OAIBTRevisionInfo::getPartNumber() {
    return part_number;
}
void
OAIBTRevisionInfo::setPartNumber(QString* part_number) {
    this->part_number = part_number;
    this->m_part_number_isSet = true;
}

QString*
OAIBTRevisionInfo::getPreviousRevisionId() {
    return previous_revision_id;
}
void
OAIBTRevisionInfo::setPreviousRevisionId(QString* previous_revision_id) {
    this->previous_revision_id = previous_revision_id;
    this->m_previous_revision_id_isSet = true;
}

QDateTime*
OAIBTRevisionInfo::getReleaseCreatedDate() {
    return release_created_date;
}
void
OAIBTRevisionInfo::setReleaseCreatedDate(QDateTime* release_created_date) {
    this->release_created_date = release_created_date;
    this->m_release_created_date_isSet = true;
}

QString*
OAIBTRevisionInfo::getReleaseId() {
    return release_id;
}
void
OAIBTRevisionInfo::setReleaseId(QString* release_id) {
    this->release_id = release_id;
    this->m_release_id_isSet = true;
}

QString*
OAIBTRevisionInfo::getReleaseName() {
    return release_name;
}
void
OAIBTRevisionInfo::setReleaseName(QString* release_name) {
    this->release_name = release_name;
    this->m_release_name_isSet = true;
}

OAIBTUserSummaryInfo*
OAIBTRevisionInfo::getReleasedBy() {
    return released_by;
}
void
OAIBTRevisionInfo::setReleasedBy(OAIBTUserSummaryInfo* released_by) {
    this->released_by = released_by;
    this->m_released_by_isSet = true;
}

QString*
OAIBTRevisionInfo::getRevision() {
    return revision;
}
void
OAIBTRevisionInfo::setRevision(QString* revision) {
    this->revision = revision;
    this->m_revision_isSet = true;
}

QString*
OAIBTRevisionInfo::getRevisionRuleId() {
    return revision_rule_id;
}
void
OAIBTRevisionInfo::setRevisionRuleId(QString* revision_rule_id) {
    this->revision_rule_id = revision_rule_id;
    this->m_revision_rule_id_isSet = true;
}

QString*
OAIBTRevisionInfo::getVersionId() {
    return version_id;
}
void
OAIBTRevisionInfo::setVersionId(QString* version_id) {
    this->version_id = version_id;
    this->m_version_id_isSet = true;
}

QString*
OAIBTRevisionInfo::getVersionName() {
    return version_name;
}
void
OAIBTRevisionInfo::setVersionName(QString* version_name) {
    this->version_name = version_name;
    this->m_version_name_isSet = true;
}

QString*
OAIBTRevisionInfo::getViewRef() {
    return view_ref;
}
void
OAIBTRevisionInfo::setViewRef(QString* view_ref) {
    this->view_ref = view_ref;
    this->m_view_ref_isSet = true;
}


bool
OAIBTRevisionInfo::isSet(){
    bool isObjectUpdated = false;
    do{
        if(approvers->size() > 0){ isObjectUpdated = true; break;}
        if(auto_obsoletion_release_id != nullptr && *auto_obsoletion_release_id != QString("")){ isObjectUpdated = true; break;}
        if(auto_obsoletion_release_name != nullptr && *auto_obsoletion_release_name != QString("")){ isObjectUpdated = true; break;}
        if(m_can_current_user_obsolete_isSet){ isObjectUpdated = true; break;}
        if(m_can_export_isSet){ isObjectUpdated = true; break;}
        if(company_id != nullptr && *company_id != QString("")){ isObjectUpdated = true; break;}
        if(configuration != nullptr && *configuration != QString("")){ isObjectUpdated = true; break;}
        if(document_id != nullptr && *document_id != QString("")){ isObjectUpdated = true; break;}
        if(document_name != nullptr && *document_name != QString("")){ isObjectUpdated = true; break;}
        if(element_id != nullptr && *element_id != QString("")){ isObjectUpdated = true; break;}
        if(m_element_type_isSet){ isObjectUpdated = true; break;}
        if(error_message != nullptr && *error_message != QString("")){ isObjectUpdated = true; break;}
        if(file_name != nullptr && *file_name != QString("")){ isObjectUpdated = true; break;}
        if(flat_part_insertable_id != nullptr && *flat_part_insertable_id != QString("")){ isObjectUpdated = true; break;}
        if(href != nullptr && *href != QString("")){ isObjectUpdated = true; break;}
        if(id != nullptr && *id != QString("")){ isObjectUpdated = true; break;}
        if(insertable_id != nullptr && *insertable_id != QString("")){ isObjectUpdated = true; break;}
        if(m_is_obsolete_isSet){ isObjectUpdated = true; break;}
        if(m_is_translatable_isSet){ isObjectUpdated = true; break;}
        if(mime_type != nullptr && *mime_type != QString("")){ isObjectUpdated = true; break;}
        if(name != nullptr && *name != QString("")){ isObjectUpdated = true; break;}
        if(next_revision_id != nullptr && *next_revision_id != QString("")){ isObjectUpdated = true; break;}
        if(obsoletion_package_id != nullptr && *obsoletion_package_id != QString("")){ isObjectUpdated = true; break;}
        if(part_id != nullptr && *part_id != QString("")){ isObjectUpdated = true; break;}
        if(part_number != nullptr && *part_number != QString("")){ isObjectUpdated = true; break;}
        if(previous_revision_id != nullptr && *previous_revision_id != QString("")){ isObjectUpdated = true; break;}
        if(release_id != nullptr && *release_id != QString("")){ isObjectUpdated = true; break;}
        if(release_name != nullptr && *release_name != QString("")){ isObjectUpdated = true; break;}
        if(released_by != nullptr && released_by->isSet()){ isObjectUpdated = true; break;}
        if(revision != nullptr && *revision != QString("")){ isObjectUpdated = true; break;}
        if(revision_rule_id != nullptr && *revision_rule_id != QString("")){ isObjectUpdated = true; break;}
        if(version_id != nullptr && *version_id != QString("")){ isObjectUpdated = true; break;}
        if(version_name != nullptr && *version_name != QString("")){ isObjectUpdated = true; break;}
        if(view_ref != nullptr && *view_ref != QString("")){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

