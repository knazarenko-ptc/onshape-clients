/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * OpenAPI spec version: 1.111
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIBTProjectInfo.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIBTProjectInfo::OAIBTProjectInfo(QString json) {
    init();
    this->fromJson(json);
}

OAIBTProjectInfo::OAIBTProjectInfo() {
    init();
}

OAIBTProjectInfo::~OAIBTProjectInfo() {
    this->cleanup();
}

void
OAIBTProjectInfo::init() {
    can_move = false;
    m_can_move_isSet = false;
    created_at = NULL;
    m_created_at_isSet = false;
    created_by = new OAIBTUserBasicSummaryInfo();
    m_created_by_isSet = false;
    description = new QString("");
    m_description_isSet = false;
    href = new QString("");
    m_href_isSet = false;
    id = new QString("");
    m_id_isSet = false;
    is_container = false;
    m_is_container_isSet = false;
    is_enterprise_owned = false;
    m_is_enterprise_owned_isSet = false;
    is_mutable = false;
    m_is_mutable_isSet = false;
    modified_at = NULL;
    m_modified_at_isSet = false;
    modified_by = new OAIBTUserBasicSummaryInfo();
    m_modified_by_isSet = false;
    name = new QString("");
    m_name_isSet = false;
    owner = new OAIBTOwnerInfo();
    m_owner_isSet = false;
    permission_scheme = new OAIBTRbacPermissionSchemeInfo();
    m_permission_scheme_isSet = false;
    permission_set = new OAIBTPermissionSet();
    m_permission_set_isSet = false;
    project_id = new QString("");
    m_project_id_isSet = false;
    resource_type = new QString("");
    m_resource_type_isSet = false;
    role_map_entries = new QList<OAIRoleMapEntry*>();
    m_role_map_entries_isSet = false;
    trash = false;
    m_trash_isSet = false;
    tree_href = new QString("");
    m_tree_href_isSet = false;
    view_ref = new QString("");
    m_view_ref_isSet = false;
}

void
OAIBTProjectInfo::cleanup() {

    if(created_at != nullptr) { 
        delete created_at;
    }
    if(created_by != nullptr) { 
        delete created_by;
    }
    if(description != nullptr) { 
        delete description;
    }
    if(href != nullptr) { 
        delete href;
    }
    if(id != nullptr) { 
        delete id;
    }



    if(modified_at != nullptr) { 
        delete modified_at;
    }
    if(modified_by != nullptr) { 
        delete modified_by;
    }
    if(name != nullptr) { 
        delete name;
    }
    if(owner != nullptr) { 
        delete owner;
    }
    if(permission_scheme != nullptr) { 
        delete permission_scheme;
    }
    if(permission_set != nullptr) { 
        delete permission_set;
    }
    if(project_id != nullptr) { 
        delete project_id;
    }
    if(resource_type != nullptr) { 
        delete resource_type;
    }
    if(role_map_entries != nullptr) { 
        auto arr = role_map_entries;
        for(auto o: *arr) { 
            delete o;
        }
        delete role_map_entries;
    }

    if(tree_href != nullptr) { 
        delete tree_href;
    }
    if(view_ref != nullptr) { 
        delete view_ref;
    }
}

OAIBTProjectInfo*
OAIBTProjectInfo::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIBTProjectInfo::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&can_move, pJson["canMove"], "bool", "");
    
    ::OpenAPI::setValue(&created_at, pJson["createdAt"], "QDateTime", "QDateTime");
    
    ::OpenAPI::setValue(&created_by, pJson["createdBy"], "OAIBTUserBasicSummaryInfo", "OAIBTUserBasicSummaryInfo");
    
    ::OpenAPI::setValue(&description, pJson["description"], "QString", "QString");
    
    ::OpenAPI::setValue(&href, pJson["href"], "QString", "QString");
    
    ::OpenAPI::setValue(&id, pJson["id"], "QString", "QString");
    
    ::OpenAPI::setValue(&is_container, pJson["isContainer"], "bool", "");
    
    ::OpenAPI::setValue(&is_enterprise_owned, pJson["isEnterpriseOwned"], "bool", "");
    
    ::OpenAPI::setValue(&is_mutable, pJson["isMutable"], "bool", "");
    
    ::OpenAPI::setValue(&modified_at, pJson["modifiedAt"], "QDateTime", "QDateTime");
    
    ::OpenAPI::setValue(&modified_by, pJson["modifiedBy"], "OAIBTUserBasicSummaryInfo", "OAIBTUserBasicSummaryInfo");
    
    ::OpenAPI::setValue(&name, pJson["name"], "QString", "QString");
    
    ::OpenAPI::setValue(&owner, pJson["owner"], "OAIBTOwnerInfo", "OAIBTOwnerInfo");
    
    ::OpenAPI::setValue(&permission_scheme, pJson["permissionScheme"], "OAIBTRbacPermissionSchemeInfo", "OAIBTRbacPermissionSchemeInfo");
    
    ::OpenAPI::setValue(&permission_set, pJson["permissionSet"], "OAIBTPermissionSet", "OAIBTPermissionSet");
    
    ::OpenAPI::setValue(&project_id, pJson["projectId"], "QString", "QString");
    
    ::OpenAPI::setValue(&resource_type, pJson["resourceType"], "QString", "QString");
    
    
    ::OpenAPI::setValue(&role_map_entries, pJson["roleMapEntries"], "QList", "OAIRoleMapEntry");
    ::OpenAPI::setValue(&trash, pJson["trash"], "bool", "");
    
    ::OpenAPI::setValue(&tree_href, pJson["treeHref"], "QString", "QString");
    
    ::OpenAPI::setValue(&view_ref, pJson["viewRef"], "QString", "QString");
    
}

QString
OAIBTProjectInfo::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIBTProjectInfo::asJsonObject() {
    QJsonObject obj;
    if(m_can_move_isSet){
        obj.insert("canMove", QJsonValue(can_move));
    }
    if(created_at != nullptr) { 
        toJsonValue(QString("createdAt"), created_at, obj, QString("QDateTime"));
    }
    if((created_by != nullptr) && (created_by->isSet())){
        toJsonValue(QString("createdBy"), created_by, obj, QString("OAIBTUserBasicSummaryInfo"));
    }
    if(description != nullptr && *description != QString("")){
        toJsonValue(QString("description"), description, obj, QString("QString"));
    }
    if(href != nullptr && *href != QString("")){
        toJsonValue(QString("href"), href, obj, QString("QString"));
    }
    if(id != nullptr && *id != QString("")){
        toJsonValue(QString("id"), id, obj, QString("QString"));
    }
    if(m_is_container_isSet){
        obj.insert("isContainer", QJsonValue(is_container));
    }
    if(m_is_enterprise_owned_isSet){
        obj.insert("isEnterpriseOwned", QJsonValue(is_enterprise_owned));
    }
    if(m_is_mutable_isSet){
        obj.insert("isMutable", QJsonValue(is_mutable));
    }
    if(modified_at != nullptr) { 
        toJsonValue(QString("modifiedAt"), modified_at, obj, QString("QDateTime"));
    }
    if((modified_by != nullptr) && (modified_by->isSet())){
        toJsonValue(QString("modifiedBy"), modified_by, obj, QString("OAIBTUserBasicSummaryInfo"));
    }
    if(name != nullptr && *name != QString("")){
        toJsonValue(QString("name"), name, obj, QString("QString"));
    }
    if((owner != nullptr) && (owner->isSet())){
        toJsonValue(QString("owner"), owner, obj, QString("OAIBTOwnerInfo"));
    }
    if((permission_scheme != nullptr) && (permission_scheme->isSet())){
        toJsonValue(QString("permissionScheme"), permission_scheme, obj, QString("OAIBTRbacPermissionSchemeInfo"));
    }
    if((permission_set != nullptr) && (permission_set->isSet())){
        toJsonValue(QString("permissionSet"), permission_set, obj, QString("OAIBTPermissionSet"));
    }
    if(project_id != nullptr && *project_id != QString("")){
        toJsonValue(QString("projectId"), project_id, obj, QString("QString"));
    }
    if(resource_type != nullptr && *resource_type != QString("")){
        toJsonValue(QString("resourceType"), resource_type, obj, QString("QString"));
    }
    if(role_map_entries->size() > 0){
        toJsonArray((QList<void*>*)role_map_entries, obj, "roleMapEntries", "OAIRoleMapEntry");
    }
    if(m_trash_isSet){
        obj.insert("trash", QJsonValue(trash));
    }
    if(tree_href != nullptr && *tree_href != QString("")){
        toJsonValue(QString("treeHref"), tree_href, obj, QString("QString"));
    }
    if(view_ref != nullptr && *view_ref != QString("")){
        toJsonValue(QString("viewRef"), view_ref, obj, QString("QString"));
    }

    return obj;
}

bool
OAIBTProjectInfo::isCanMove() {
    return can_move;
}
void
OAIBTProjectInfo::setCanMove(bool can_move) {
    this->can_move = can_move;
    this->m_can_move_isSet = true;
}

QDateTime*
OAIBTProjectInfo::getCreatedAt() {
    return created_at;
}
void
OAIBTProjectInfo::setCreatedAt(QDateTime* created_at) {
    this->created_at = created_at;
    this->m_created_at_isSet = true;
}

OAIBTUserBasicSummaryInfo*
OAIBTProjectInfo::getCreatedBy() {
    return created_by;
}
void
OAIBTProjectInfo::setCreatedBy(OAIBTUserBasicSummaryInfo* created_by) {
    this->created_by = created_by;
    this->m_created_by_isSet = true;
}

QString*
OAIBTProjectInfo::getDescription() {
    return description;
}
void
OAIBTProjectInfo::setDescription(QString* description) {
    this->description = description;
    this->m_description_isSet = true;
}

QString*
OAIBTProjectInfo::getHref() {
    return href;
}
void
OAIBTProjectInfo::setHref(QString* href) {
    this->href = href;
    this->m_href_isSet = true;
}

QString*
OAIBTProjectInfo::getId() {
    return id;
}
void
OAIBTProjectInfo::setId(QString* id) {
    this->id = id;
    this->m_id_isSet = true;
}

bool
OAIBTProjectInfo::isIsContainer() {
    return is_container;
}
void
OAIBTProjectInfo::setIsContainer(bool is_container) {
    this->is_container = is_container;
    this->m_is_container_isSet = true;
}

bool
OAIBTProjectInfo::isIsEnterpriseOwned() {
    return is_enterprise_owned;
}
void
OAIBTProjectInfo::setIsEnterpriseOwned(bool is_enterprise_owned) {
    this->is_enterprise_owned = is_enterprise_owned;
    this->m_is_enterprise_owned_isSet = true;
}

bool
OAIBTProjectInfo::isIsMutable() {
    return is_mutable;
}
void
OAIBTProjectInfo::setIsMutable(bool is_mutable) {
    this->is_mutable = is_mutable;
    this->m_is_mutable_isSet = true;
}

QDateTime*
OAIBTProjectInfo::getModifiedAt() {
    return modified_at;
}
void
OAIBTProjectInfo::setModifiedAt(QDateTime* modified_at) {
    this->modified_at = modified_at;
    this->m_modified_at_isSet = true;
}

OAIBTUserBasicSummaryInfo*
OAIBTProjectInfo::getModifiedBy() {
    return modified_by;
}
void
OAIBTProjectInfo::setModifiedBy(OAIBTUserBasicSummaryInfo* modified_by) {
    this->modified_by = modified_by;
    this->m_modified_by_isSet = true;
}

QString*
OAIBTProjectInfo::getName() {
    return name;
}
void
OAIBTProjectInfo::setName(QString* name) {
    this->name = name;
    this->m_name_isSet = true;
}

OAIBTOwnerInfo*
OAIBTProjectInfo::getOwner() {
    return owner;
}
void
OAIBTProjectInfo::setOwner(OAIBTOwnerInfo* owner) {
    this->owner = owner;
    this->m_owner_isSet = true;
}

OAIBTRbacPermissionSchemeInfo*
OAIBTProjectInfo::getPermissionScheme() {
    return permission_scheme;
}
void
OAIBTProjectInfo::setPermissionScheme(OAIBTRbacPermissionSchemeInfo* permission_scheme) {
    this->permission_scheme = permission_scheme;
    this->m_permission_scheme_isSet = true;
}

OAIBTPermissionSet*
OAIBTProjectInfo::getPermissionSet() {
    return permission_set;
}
void
OAIBTProjectInfo::setPermissionSet(OAIBTPermissionSet* permission_set) {
    this->permission_set = permission_set;
    this->m_permission_set_isSet = true;
}

QString*
OAIBTProjectInfo::getProjectId() {
    return project_id;
}
void
OAIBTProjectInfo::setProjectId(QString* project_id) {
    this->project_id = project_id;
    this->m_project_id_isSet = true;
}

QString*
OAIBTProjectInfo::getResourceType() {
    return resource_type;
}
void
OAIBTProjectInfo::setResourceType(QString* resource_type) {
    this->resource_type = resource_type;
    this->m_resource_type_isSet = true;
}

QList<OAIRoleMapEntry*>*
OAIBTProjectInfo::getRoleMapEntries() {
    return role_map_entries;
}
void
OAIBTProjectInfo::setRoleMapEntries(QList<OAIRoleMapEntry*>* role_map_entries) {
    this->role_map_entries = role_map_entries;
    this->m_role_map_entries_isSet = true;
}

bool
OAIBTProjectInfo::isTrash() {
    return trash;
}
void
OAIBTProjectInfo::setTrash(bool trash) {
    this->trash = trash;
    this->m_trash_isSet = true;
}

QString*
OAIBTProjectInfo::getTreeHref() {
    return tree_href;
}
void
OAIBTProjectInfo::setTreeHref(QString* tree_href) {
    this->tree_href = tree_href;
    this->m_tree_href_isSet = true;
}

QString*
OAIBTProjectInfo::getViewRef() {
    return view_ref;
}
void
OAIBTProjectInfo::setViewRef(QString* view_ref) {
    this->view_ref = view_ref;
    this->m_view_ref_isSet = true;
}


bool
OAIBTProjectInfo::isSet(){
    bool isObjectUpdated = false;
    do{
        if(m_can_move_isSet){ isObjectUpdated = true; break;}
        if(created_by != nullptr && created_by->isSet()){ isObjectUpdated = true; break;}
        if(description != nullptr && *description != QString("")){ isObjectUpdated = true; break;}
        if(href != nullptr && *href != QString("")){ isObjectUpdated = true; break;}
        if(id != nullptr && *id != QString("")){ isObjectUpdated = true; break;}
        if(m_is_container_isSet){ isObjectUpdated = true; break;}
        if(m_is_enterprise_owned_isSet){ isObjectUpdated = true; break;}
        if(m_is_mutable_isSet){ isObjectUpdated = true; break;}
        if(modified_by != nullptr && modified_by->isSet()){ isObjectUpdated = true; break;}
        if(name != nullptr && *name != QString("")){ isObjectUpdated = true; break;}
        if(owner != nullptr && owner->isSet()){ isObjectUpdated = true; break;}
        if(permission_scheme != nullptr && permission_scheme->isSet()){ isObjectUpdated = true; break;}
        if(permission_set != nullptr && permission_set->isSet()){ isObjectUpdated = true; break;}
        if(project_id != nullptr && *project_id != QString("")){ isObjectUpdated = true; break;}
        if(resource_type != nullptr && *resource_type != QString("")){ isObjectUpdated = true; break;}
        if(role_map_entries->size() > 0){ isObjectUpdated = true; break;}
        if(m_trash_isSet){ isObjectUpdated = true; break;}
        if(tree_href != nullptr && *tree_href != QString("")){ isObjectUpdated = true; break;}
        if(view_ref != nullptr && *view_ref != QString("")){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

