/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * OpenAPI spec version: 1.111
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIBTWorkflowableTestObjectInfo.h
 *
 * 
 */

#ifndef OAIBTWorkflowableTestObjectInfo_H_
#define OAIBTWorkflowableTestObjectInfo_H_

#include <QJsonObject>


#include "OAIBTPublishedWorkflowId.h"
#include "OAIBTWorkflowPropertyInfo.h"
#include "OAIBTWorkflowSnapshotInfo.h"
#include <QList>
#include <QMap>
#include <QString>

#include "OAIObject.h"

namespace OpenAPI {

class OAIBTWorkflowableTestObjectInfo: public OAIObject {
public:
    OAIBTWorkflowableTestObjectInfo();
    OAIBTWorkflowableTestObjectInfo(QString json);
    ~OAIBTWorkflowableTestObjectInfo();
    void init();
    void cleanup();

    QString asJson () override;
    QJsonObject asJsonObject() override;
    void fromJsonObject(QJsonObject json) override;
    OAIBTWorkflowableTestObjectInfo* fromJson(QString jsonString) override;

    QString* getCompanyId();
    void setCompanyId(QString* company_id);

    QString* getDescription();
    void setDescription(QString* description);

    QString* getDescriptionAsProperty();
    void setDescriptionAsProperty(QString* description_as_property);

    QString* getDocumentId();
    void setDocumentId(QString* document_id);

    QString* getHref();
    void setHref(QString* href);

    QString* getId();
    void setId(QString* id);

    QMap<QString, QString*>* getInfo();
    void setInfo(QMap<QString, QString*>* info);

    bool isIsObsoletion();
    void setIsObsoletion(bool is_obsoletion);

    QString* getName();
    void setName(QString* name);

    QString* getNameAsProperty();
    void setNameAsProperty(QString* name_as_property);

    QList<OAIBTWorkflowPropertyInfo*>* getProperties();
    void setProperties(QList<OAIBTWorkflowPropertyInfo*>* properties);

    QString* getViewRef();
    void setViewRef(QString* view_ref);

    OAIBTWorkflowSnapshotInfo* getWorkflow();
    void setWorkflow(OAIBTWorkflowSnapshotInfo* workflow);

    OAIBTPublishedWorkflowId* getWorkflowId();
    void setWorkflowId(OAIBTPublishedWorkflowId* workflow_id);


    virtual bool isSet() override;

private:
    QString* company_id;
    bool m_company_id_isSet;

    QString* description;
    bool m_description_isSet;

    QString* description_as_property;
    bool m_description_as_property_isSet;

    QString* document_id;
    bool m_document_id_isSet;

    QString* href;
    bool m_href_isSet;

    QString* id;
    bool m_id_isSet;

    QMap<QString, QString*>* info;
    bool m_info_isSet;

    bool is_obsoletion;
    bool m_is_obsoletion_isSet;

    QString* name;
    bool m_name_isSet;

    QString* name_as_property;
    bool m_name_as_property_isSet;

    QList<OAIBTWorkflowPropertyInfo*>* properties;
    bool m_properties_isSet;

    QString* view_ref;
    bool m_view_ref_isSet;

    OAIBTWorkflowSnapshotInfo* workflow;
    bool m_workflow_isSet;

    OAIBTPublishedWorkflowId* workflow_id;
    bool m_workflow_id_isSet;

};

}

#endif /* OAIBTWorkflowableTestObjectInfo_H_ */
