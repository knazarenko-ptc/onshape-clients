/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * OpenAPI spec version: 1.111
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIBTDocumentProcessingInfo.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIBTDocumentProcessingInfo::OAIBTDocumentProcessingInfo(QString json) {
    init();
    this->fromJson(json);
}

OAIBTDocumentProcessingInfo::OAIBTDocumentProcessingInfo() {
    init();
}

OAIBTDocumentProcessingInfo::~OAIBTDocumentProcessingInfo() {
    this->cleanup();
}

void
OAIBTDocumentProcessingInfo::init() {
    anonymous_access_allowed = false;
    m_anonymous_access_allowed_isSet = false;
    anonymous_allows_export = false;
    m_anonymous_allows_export_isSet = false;
    beta_capability_ids = new QList<QString*>();
    m_beta_capability_ids_isSet = false;
    can_move = false;
    m_can_move_isSet = false;
    can_unshare = false;
    m_can_unshare_isSet = false;
    created_at = NULL;
    m_created_at_isSet = false;
    created_by = new OAIBTUserBasicSummaryInfo();
    m_created_by_isSet = false;
    created_with_education_plan = false;
    m_created_with_education_plan_isSet = false;
    default_element_id = new QString("");
    m_default_element_id_isSet = false;
    default_workspace = new OAIBTWorkspaceInfo();
    m_default_workspace_isSet = false;
    description = new QString("");
    m_description_isSet = false;
    document_labels = new QList<OAIBTDocumentLabelInfo*>();
    m_document_labels_isSet = false;
    document_thumbnail_element_id = new QString("");
    m_document_thumbnail_element_id_isSet = false;
    duplicate_name_violation_error = new QString("");
    m_duplicate_name_violation_error_isSet = false;
    has_pending_owner = false;
    m_has_pending_owner_isSet = false;
    has_release_revisionable_objects = false;
    m_has_release_revisionable_objects_isSet = false;
    has_relevant_insertables = false;
    m_has_relevant_insertables_isSet = false;
    href = new QString("");
    m_href_isSet = false;
    id = new QString("");
    m_id_isSet = false;
    is_container = false;
    m_is_container_isSet = false;
    is_enterprise_owned = false;
    m_is_enterprise_owned_isSet = false;
    is_mutable = false;
    m_is_mutable_isSet = false;
    is_orphaned = false;
    m_is_orphaned_isSet = false;
    is_upgraded_to_latest_version = false;
    m_is_upgraded_to_latest_version_isSet = false;
    is_using_managed_workflow = false;
    m_is_using_managed_workflow_isSet = false;
    json_type = new QString("");
    m_json_type_isSet = false;
    liked_by_current_user = false;
    m_liked_by_current_user_isSet = false;
    likes = 0L;
    m_likes_isSet = false;
    modified_at = NULL;
    m_modified_at_isSet = false;
    modified_by = new OAIBTUserBasicSummaryInfo();
    m_modified_by_isSet = false;
    name = new QString("");
    m_name_isSet = false;
    not_revision_managed = false;
    m_not_revision_managed_isSet = false;
    number_of_times_copied = 0L;
    m_number_of_times_copied_isSet = false;
    number_of_times_referenced = 0L;
    m_number_of_times_referenced_isSet = false;
    owner = new OAIBTOwnerInfo();
    m_owner_isSet = false;
    parent_id = new QString("");
    m_parent_id_isSet = false;
    permission = new QString("");
    m_permission_isSet = false;
    permission_set = new OAIBTPermissionSet();
    m_permission_set_isSet = false;
    project_id = new QString("");
    m_project_id_isSet = false;
    _public = false;
    m__public_isSet = false;
    recent_version = new OAIBTBaseInfo();
    m_recent_version_isSet = false;
    resource_type = new QString("");
    m_resource_type_isSet = false;
    support_team_user_and_shared = false;
    m_support_team_user_and_shared_isSet = false;
    tags = new QList<QString*>();
    m_tags_isSet = false;
    thumbnail = new OAIBTThumbnailInfo();
    m_thumbnail_isSet = false;
    total_workspaces_scheduled_for_update = 0;
    m_total_workspaces_scheduled_for_update_isSet = false;
    total_workspaces_updating = 0;
    m_total_workspaces_updating_isSet = false;
    trash = false;
    m_trash_isSet = false;
    trashed_at = NULL;
    m_trashed_at_isSet = false;
    tree_href = new QString("");
    m_tree_href_isSet = false;
    user_account_limits_breached = false;
    m_user_account_limits_breached_isSet = false;
    view_ref = new QString("");
    m_view_ref_isSet = false;
    translation_event_key = new QString("");
    m_translation_event_key_isSet = false;
    translation_id = new QString("");
    m_translation_id_isSet = false;
}

void
OAIBTDocumentProcessingInfo::cleanup() {


    if(beta_capability_ids != nullptr) { 
        auto arr = beta_capability_ids;
        for(auto o: *arr) { 
            delete o;
        }
        delete beta_capability_ids;
    }


    if(created_at != nullptr) { 
        delete created_at;
    }
    if(created_by != nullptr) { 
        delete created_by;
    }

    if(default_element_id != nullptr) { 
        delete default_element_id;
    }
    if(default_workspace != nullptr) { 
        delete default_workspace;
    }
    if(description != nullptr) { 
        delete description;
    }
    if(document_labels != nullptr) { 
        auto arr = document_labels;
        for(auto o: *arr) { 
            delete o;
        }
        delete document_labels;
    }
    if(document_thumbnail_element_id != nullptr) { 
        delete document_thumbnail_element_id;
    }
    if(duplicate_name_violation_error != nullptr) { 
        delete duplicate_name_violation_error;
    }



    if(href != nullptr) { 
        delete href;
    }
    if(id != nullptr) { 
        delete id;
    }






    if(json_type != nullptr) { 
        delete json_type;
    }


    if(modified_at != nullptr) { 
        delete modified_at;
    }
    if(modified_by != nullptr) { 
        delete modified_by;
    }
    if(name != nullptr) { 
        delete name;
    }



    if(owner != nullptr) { 
        delete owner;
    }
    if(parent_id != nullptr) { 
        delete parent_id;
    }
    if(permission != nullptr) { 
        delete permission;
    }
    if(permission_set != nullptr) { 
        delete permission_set;
    }
    if(project_id != nullptr) { 
        delete project_id;
    }

    if(recent_version != nullptr) { 
        delete recent_version;
    }
    if(resource_type != nullptr) { 
        delete resource_type;
    }

    if(tags != nullptr) { 
        auto arr = tags;
        for(auto o: *arr) { 
            delete o;
        }
        delete tags;
    }
    if(thumbnail != nullptr) { 
        delete thumbnail;
    }



    if(trashed_at != nullptr) { 
        delete trashed_at;
    }
    if(tree_href != nullptr) { 
        delete tree_href;
    }

    if(view_ref != nullptr) { 
        delete view_ref;
    }
    if(translation_event_key != nullptr) { 
        delete translation_event_key;
    }
    if(translation_id != nullptr) { 
        delete translation_id;
    }
}

OAIBTDocumentProcessingInfo*
OAIBTDocumentProcessingInfo::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIBTDocumentProcessingInfo::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&anonymous_access_allowed, pJson["anonymousAccessAllowed"], "bool", "");
    
    ::OpenAPI::setValue(&anonymous_allows_export, pJson["anonymousAllowsExport"], "bool", "");
    
    
    ::OpenAPI::setValue(&beta_capability_ids, pJson["betaCapabilityIds"], "QList", "QString");
    ::OpenAPI::setValue(&can_move, pJson["canMove"], "bool", "");
    
    ::OpenAPI::setValue(&can_unshare, pJson["canUnshare"], "bool", "");
    
    ::OpenAPI::setValue(&created_at, pJson["createdAt"], "QDateTime", "QDateTime");
    
    ::OpenAPI::setValue(&created_by, pJson["createdBy"], "OAIBTUserBasicSummaryInfo", "OAIBTUserBasicSummaryInfo");
    
    ::OpenAPI::setValue(&created_with_education_plan, pJson["createdWithEducationPlan"], "bool", "");
    
    ::OpenAPI::setValue(&default_element_id, pJson["defaultElementId"], "QString", "QString");
    
    ::OpenAPI::setValue(&default_workspace, pJson["defaultWorkspace"], "OAIBTWorkspaceInfo", "OAIBTWorkspaceInfo");
    
    ::OpenAPI::setValue(&description, pJson["description"], "QString", "QString");
    
    
    ::OpenAPI::setValue(&document_labels, pJson["documentLabels"], "QList", "OAIBTDocumentLabelInfo");
    ::OpenAPI::setValue(&document_thumbnail_element_id, pJson["documentThumbnailElementId"], "QString", "QString");
    
    ::OpenAPI::setValue(&duplicate_name_violation_error, pJson["duplicateNameViolationError"], "QString", "QString");
    
    ::OpenAPI::setValue(&has_pending_owner, pJson["hasPendingOwner"], "bool", "");
    
    ::OpenAPI::setValue(&has_release_revisionable_objects, pJson["hasReleaseRevisionableObjects"], "bool", "");
    
    ::OpenAPI::setValue(&has_relevant_insertables, pJson["hasRelevantInsertables"], "bool", "");
    
    ::OpenAPI::setValue(&href, pJson["href"], "QString", "QString");
    
    ::OpenAPI::setValue(&id, pJson["id"], "QString", "QString");
    
    ::OpenAPI::setValue(&is_container, pJson["isContainer"], "bool", "");
    
    ::OpenAPI::setValue(&is_enterprise_owned, pJson["isEnterpriseOwned"], "bool", "");
    
    ::OpenAPI::setValue(&is_mutable, pJson["isMutable"], "bool", "");
    
    ::OpenAPI::setValue(&is_orphaned, pJson["isOrphaned"], "bool", "");
    
    ::OpenAPI::setValue(&is_upgraded_to_latest_version, pJson["isUpgradedToLatestVersion"], "bool", "");
    
    ::OpenAPI::setValue(&is_using_managed_workflow, pJson["isUsingManagedWorkflow"], "bool", "");
    
    ::OpenAPI::setValue(&json_type, pJson["jsonType"], "QString", "QString");
    
    ::OpenAPI::setValue(&liked_by_current_user, pJson["likedByCurrentUser"], "bool", "");
    
    ::OpenAPI::setValue(&likes, pJson["likes"], "qint64", "");
    
    ::OpenAPI::setValue(&modified_at, pJson["modifiedAt"], "QDateTime", "QDateTime");
    
    ::OpenAPI::setValue(&modified_by, pJson["modifiedBy"], "OAIBTUserBasicSummaryInfo", "OAIBTUserBasicSummaryInfo");
    
    ::OpenAPI::setValue(&name, pJson["name"], "QString", "QString");
    
    ::OpenAPI::setValue(&not_revision_managed, pJson["notRevisionManaged"], "bool", "");
    
    ::OpenAPI::setValue(&number_of_times_copied, pJson["numberOfTimesCopied"], "qint64", "");
    
    ::OpenAPI::setValue(&number_of_times_referenced, pJson["numberOfTimesReferenced"], "qint64", "");
    
    ::OpenAPI::setValue(&owner, pJson["owner"], "OAIBTOwnerInfo", "OAIBTOwnerInfo");
    
    ::OpenAPI::setValue(&parent_id, pJson["parentId"], "QString", "QString");
    
    ::OpenAPI::setValue(&permission, pJson["permission"], "QString", "QString");
    
    ::OpenAPI::setValue(&permission_set, pJson["permissionSet"], "OAIBTPermissionSet", "OAIBTPermissionSet");
    
    ::OpenAPI::setValue(&project_id, pJson["projectId"], "QString", "QString");
    
    ::OpenAPI::setValue(&_public, pJson["public"], "bool", "");
    
    ::OpenAPI::setValue(&recent_version, pJson["recentVersion"], "OAIBTBaseInfo", "OAIBTBaseInfo");
    
    ::OpenAPI::setValue(&resource_type, pJson["resourceType"], "QString", "QString");
    
    ::OpenAPI::setValue(&support_team_user_and_shared, pJson["supportTeamUserAndShared"], "bool", "");
    
    
    ::OpenAPI::setValue(&tags, pJson["tags"], "QList", "QString");
    ::OpenAPI::setValue(&thumbnail, pJson["thumbnail"], "OAIBTThumbnailInfo", "OAIBTThumbnailInfo");
    
    ::OpenAPI::setValue(&total_workspaces_scheduled_for_update, pJson["totalWorkspacesScheduledForUpdate"], "qint32", "");
    
    ::OpenAPI::setValue(&total_workspaces_updating, pJson["totalWorkspacesUpdating"], "qint32", "");
    
    ::OpenAPI::setValue(&trash, pJson["trash"], "bool", "");
    
    ::OpenAPI::setValue(&trashed_at, pJson["trashedAt"], "QDateTime", "QDateTime");
    
    ::OpenAPI::setValue(&tree_href, pJson["treeHref"], "QString", "QString");
    
    ::OpenAPI::setValue(&user_account_limits_breached, pJson["userAccountLimitsBreached"], "bool", "");
    
    ::OpenAPI::setValue(&view_ref, pJson["viewRef"], "QString", "QString");
    
    ::OpenAPI::setValue(&translation_event_key, pJson["translationEventKey"], "QString", "QString");
    
    ::OpenAPI::setValue(&translation_id, pJson["translationId"], "QString", "QString");
    
}

QString
OAIBTDocumentProcessingInfo::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIBTDocumentProcessingInfo::asJsonObject() {
    QJsonObject obj;
    if(m_anonymous_access_allowed_isSet){
        obj.insert("anonymousAccessAllowed", QJsonValue(anonymous_access_allowed));
    }
    if(m_anonymous_allows_export_isSet){
        obj.insert("anonymousAllowsExport", QJsonValue(anonymous_allows_export));
    }
    if(beta_capability_ids->size() > 0){
        toJsonArray((QList<void*>*)beta_capability_ids, obj, "betaCapabilityIds", "QString");
    }
    if(m_can_move_isSet){
        obj.insert("canMove", QJsonValue(can_move));
    }
    if(m_can_unshare_isSet){
        obj.insert("canUnshare", QJsonValue(can_unshare));
    }
    if(created_at != nullptr) { 
        toJsonValue(QString("createdAt"), created_at, obj, QString("QDateTime"));
    }
    if((created_by != nullptr) && (created_by->isSet())){
        toJsonValue(QString("createdBy"), created_by, obj, QString("OAIBTUserBasicSummaryInfo"));
    }
    if(m_created_with_education_plan_isSet){
        obj.insert("createdWithEducationPlan", QJsonValue(created_with_education_plan));
    }
    if(default_element_id != nullptr && *default_element_id != QString("")){
        toJsonValue(QString("defaultElementId"), default_element_id, obj, QString("QString"));
    }
    if((default_workspace != nullptr) && (default_workspace->isSet())){
        toJsonValue(QString("defaultWorkspace"), default_workspace, obj, QString("OAIBTWorkspaceInfo"));
    }
    if(description != nullptr && *description != QString("")){
        toJsonValue(QString("description"), description, obj, QString("QString"));
    }
    if(document_labels->size() > 0){
        toJsonArray((QList<void*>*)document_labels, obj, "documentLabels", "OAIBTDocumentLabelInfo");
    }
    if(document_thumbnail_element_id != nullptr && *document_thumbnail_element_id != QString("")){
        toJsonValue(QString("documentThumbnailElementId"), document_thumbnail_element_id, obj, QString("QString"));
    }
    if(duplicate_name_violation_error != nullptr && *duplicate_name_violation_error != QString("")){
        toJsonValue(QString("duplicateNameViolationError"), duplicate_name_violation_error, obj, QString("QString"));
    }
    if(m_has_pending_owner_isSet){
        obj.insert("hasPendingOwner", QJsonValue(has_pending_owner));
    }
    if(m_has_release_revisionable_objects_isSet){
        obj.insert("hasReleaseRevisionableObjects", QJsonValue(has_release_revisionable_objects));
    }
    if(m_has_relevant_insertables_isSet){
        obj.insert("hasRelevantInsertables", QJsonValue(has_relevant_insertables));
    }
    if(href != nullptr && *href != QString("")){
        toJsonValue(QString("href"), href, obj, QString("QString"));
    }
    if(id != nullptr && *id != QString("")){
        toJsonValue(QString("id"), id, obj, QString("QString"));
    }
    if(m_is_container_isSet){
        obj.insert("isContainer", QJsonValue(is_container));
    }
    if(m_is_enterprise_owned_isSet){
        obj.insert("isEnterpriseOwned", QJsonValue(is_enterprise_owned));
    }
    if(m_is_mutable_isSet){
        obj.insert("isMutable", QJsonValue(is_mutable));
    }
    if(m_is_orphaned_isSet){
        obj.insert("isOrphaned", QJsonValue(is_orphaned));
    }
    if(m_is_upgraded_to_latest_version_isSet){
        obj.insert("isUpgradedToLatestVersion", QJsonValue(is_upgraded_to_latest_version));
    }
    if(m_is_using_managed_workflow_isSet){
        obj.insert("isUsingManagedWorkflow", QJsonValue(is_using_managed_workflow));
    }
    if(json_type != nullptr && *json_type != QString("")){
        toJsonValue(QString("jsonType"), json_type, obj, QString("QString"));
    }
    if(m_liked_by_current_user_isSet){
        obj.insert("likedByCurrentUser", QJsonValue(liked_by_current_user));
    }
    if(m_likes_isSet){
        obj.insert("likes", QJsonValue(likes));
    }
    if(modified_at != nullptr) { 
        toJsonValue(QString("modifiedAt"), modified_at, obj, QString("QDateTime"));
    }
    if((modified_by != nullptr) && (modified_by->isSet())){
        toJsonValue(QString("modifiedBy"), modified_by, obj, QString("OAIBTUserBasicSummaryInfo"));
    }
    if(name != nullptr && *name != QString("")){
        toJsonValue(QString("name"), name, obj, QString("QString"));
    }
    if(m_not_revision_managed_isSet){
        obj.insert("notRevisionManaged", QJsonValue(not_revision_managed));
    }
    if(m_number_of_times_copied_isSet){
        obj.insert("numberOfTimesCopied", QJsonValue(number_of_times_copied));
    }
    if(m_number_of_times_referenced_isSet){
        obj.insert("numberOfTimesReferenced", QJsonValue(number_of_times_referenced));
    }
    if((owner != nullptr) && (owner->isSet())){
        toJsonValue(QString("owner"), owner, obj, QString("OAIBTOwnerInfo"));
    }
    if(parent_id != nullptr && *parent_id != QString("")){
        toJsonValue(QString("parentId"), parent_id, obj, QString("QString"));
    }
    if(permission != nullptr && *permission != QString("")){
        toJsonValue(QString("permission"), permission, obj, QString("QString"));
    }
    if((permission_set != nullptr) && (permission_set->isSet())){
        toJsonValue(QString("permissionSet"), permission_set, obj, QString("OAIBTPermissionSet"));
    }
    if(project_id != nullptr && *project_id != QString("")){
        toJsonValue(QString("projectId"), project_id, obj, QString("QString"));
    }
    if(m__public_isSet){
        obj.insert("public", QJsonValue(_public));
    }
    if((recent_version != nullptr) && (recent_version->isSet())){
        toJsonValue(QString("recentVersion"), recent_version, obj, QString("OAIBTBaseInfo"));
    }
    if(resource_type != nullptr && *resource_type != QString("")){
        toJsonValue(QString("resourceType"), resource_type, obj, QString("QString"));
    }
    if(m_support_team_user_and_shared_isSet){
        obj.insert("supportTeamUserAndShared", QJsonValue(support_team_user_and_shared));
    }
    if(tags->size() > 0){
        toJsonArray((QList<void*>*)tags, obj, "tags", "QString");
    }
    if((thumbnail != nullptr) && (thumbnail->isSet())){
        toJsonValue(QString("thumbnail"), thumbnail, obj, QString("OAIBTThumbnailInfo"));
    }
    if(m_total_workspaces_scheduled_for_update_isSet){
        obj.insert("totalWorkspacesScheduledForUpdate", QJsonValue(total_workspaces_scheduled_for_update));
    }
    if(m_total_workspaces_updating_isSet){
        obj.insert("totalWorkspacesUpdating", QJsonValue(total_workspaces_updating));
    }
    if(m_trash_isSet){
        obj.insert("trash", QJsonValue(trash));
    }
    if(trashed_at != nullptr) { 
        toJsonValue(QString("trashedAt"), trashed_at, obj, QString("QDateTime"));
    }
    if(tree_href != nullptr && *tree_href != QString("")){
        toJsonValue(QString("treeHref"), tree_href, obj, QString("QString"));
    }
    if(m_user_account_limits_breached_isSet){
        obj.insert("userAccountLimitsBreached", QJsonValue(user_account_limits_breached));
    }
    if(view_ref != nullptr && *view_ref != QString("")){
        toJsonValue(QString("viewRef"), view_ref, obj, QString("QString"));
    }
    if(translation_event_key != nullptr && *translation_event_key != QString("")){
        toJsonValue(QString("translationEventKey"), translation_event_key, obj, QString("QString"));
    }
    if(translation_id != nullptr && *translation_id != QString("")){
        toJsonValue(QString("translationId"), translation_id, obj, QString("QString"));
    }

    return obj;
}

bool
OAIBTDocumentProcessingInfo::isAnonymousAccessAllowed() {
    return anonymous_access_allowed;
}
void
OAIBTDocumentProcessingInfo::setAnonymousAccessAllowed(bool anonymous_access_allowed) {
    this->anonymous_access_allowed = anonymous_access_allowed;
    this->m_anonymous_access_allowed_isSet = true;
}

bool
OAIBTDocumentProcessingInfo::isAnonymousAllowsExport() {
    return anonymous_allows_export;
}
void
OAIBTDocumentProcessingInfo::setAnonymousAllowsExport(bool anonymous_allows_export) {
    this->anonymous_allows_export = anonymous_allows_export;
    this->m_anonymous_allows_export_isSet = true;
}

QList<QString*>*
OAIBTDocumentProcessingInfo::getBetaCapabilityIds() {
    return beta_capability_ids;
}
void
OAIBTDocumentProcessingInfo::setBetaCapabilityIds(QList<QString*>* beta_capability_ids) {
    this->beta_capability_ids = beta_capability_ids;
    this->m_beta_capability_ids_isSet = true;
}

bool
OAIBTDocumentProcessingInfo::isCanMove() {
    return can_move;
}
void
OAIBTDocumentProcessingInfo::setCanMove(bool can_move) {
    this->can_move = can_move;
    this->m_can_move_isSet = true;
}

bool
OAIBTDocumentProcessingInfo::isCanUnshare() {
    return can_unshare;
}
void
OAIBTDocumentProcessingInfo::setCanUnshare(bool can_unshare) {
    this->can_unshare = can_unshare;
    this->m_can_unshare_isSet = true;
}

QDateTime*
OAIBTDocumentProcessingInfo::getCreatedAt() {
    return created_at;
}
void
OAIBTDocumentProcessingInfo::setCreatedAt(QDateTime* created_at) {
    this->created_at = created_at;
    this->m_created_at_isSet = true;
}

OAIBTUserBasicSummaryInfo*
OAIBTDocumentProcessingInfo::getCreatedBy() {
    return created_by;
}
void
OAIBTDocumentProcessingInfo::setCreatedBy(OAIBTUserBasicSummaryInfo* created_by) {
    this->created_by = created_by;
    this->m_created_by_isSet = true;
}

bool
OAIBTDocumentProcessingInfo::isCreatedWithEducationPlan() {
    return created_with_education_plan;
}
void
OAIBTDocumentProcessingInfo::setCreatedWithEducationPlan(bool created_with_education_plan) {
    this->created_with_education_plan = created_with_education_plan;
    this->m_created_with_education_plan_isSet = true;
}

QString*
OAIBTDocumentProcessingInfo::getDefaultElementId() {
    return default_element_id;
}
void
OAIBTDocumentProcessingInfo::setDefaultElementId(QString* default_element_id) {
    this->default_element_id = default_element_id;
    this->m_default_element_id_isSet = true;
}

OAIBTWorkspaceInfo*
OAIBTDocumentProcessingInfo::getDefaultWorkspace() {
    return default_workspace;
}
void
OAIBTDocumentProcessingInfo::setDefaultWorkspace(OAIBTWorkspaceInfo* default_workspace) {
    this->default_workspace = default_workspace;
    this->m_default_workspace_isSet = true;
}

QString*
OAIBTDocumentProcessingInfo::getDescription() {
    return description;
}
void
OAIBTDocumentProcessingInfo::setDescription(QString* description) {
    this->description = description;
    this->m_description_isSet = true;
}

QList<OAIBTDocumentLabelInfo*>*
OAIBTDocumentProcessingInfo::getDocumentLabels() {
    return document_labels;
}
void
OAIBTDocumentProcessingInfo::setDocumentLabels(QList<OAIBTDocumentLabelInfo*>* document_labels) {
    this->document_labels = document_labels;
    this->m_document_labels_isSet = true;
}

QString*
OAIBTDocumentProcessingInfo::getDocumentThumbnailElementId() {
    return document_thumbnail_element_id;
}
void
OAIBTDocumentProcessingInfo::setDocumentThumbnailElementId(QString* document_thumbnail_element_id) {
    this->document_thumbnail_element_id = document_thumbnail_element_id;
    this->m_document_thumbnail_element_id_isSet = true;
}

QString*
OAIBTDocumentProcessingInfo::getDuplicateNameViolationError() {
    return duplicate_name_violation_error;
}
void
OAIBTDocumentProcessingInfo::setDuplicateNameViolationError(QString* duplicate_name_violation_error) {
    this->duplicate_name_violation_error = duplicate_name_violation_error;
    this->m_duplicate_name_violation_error_isSet = true;
}

bool
OAIBTDocumentProcessingInfo::isHasPendingOwner() {
    return has_pending_owner;
}
void
OAIBTDocumentProcessingInfo::setHasPendingOwner(bool has_pending_owner) {
    this->has_pending_owner = has_pending_owner;
    this->m_has_pending_owner_isSet = true;
}

bool
OAIBTDocumentProcessingInfo::isHasReleaseRevisionableObjects() {
    return has_release_revisionable_objects;
}
void
OAIBTDocumentProcessingInfo::setHasReleaseRevisionableObjects(bool has_release_revisionable_objects) {
    this->has_release_revisionable_objects = has_release_revisionable_objects;
    this->m_has_release_revisionable_objects_isSet = true;
}

bool
OAIBTDocumentProcessingInfo::isHasRelevantInsertables() {
    return has_relevant_insertables;
}
void
OAIBTDocumentProcessingInfo::setHasRelevantInsertables(bool has_relevant_insertables) {
    this->has_relevant_insertables = has_relevant_insertables;
    this->m_has_relevant_insertables_isSet = true;
}

QString*
OAIBTDocumentProcessingInfo::getHref() {
    return href;
}
void
OAIBTDocumentProcessingInfo::setHref(QString* href) {
    this->href = href;
    this->m_href_isSet = true;
}

QString*
OAIBTDocumentProcessingInfo::getId() {
    return id;
}
void
OAIBTDocumentProcessingInfo::setId(QString* id) {
    this->id = id;
    this->m_id_isSet = true;
}

bool
OAIBTDocumentProcessingInfo::isIsContainer() {
    return is_container;
}
void
OAIBTDocumentProcessingInfo::setIsContainer(bool is_container) {
    this->is_container = is_container;
    this->m_is_container_isSet = true;
}

bool
OAIBTDocumentProcessingInfo::isIsEnterpriseOwned() {
    return is_enterprise_owned;
}
void
OAIBTDocumentProcessingInfo::setIsEnterpriseOwned(bool is_enterprise_owned) {
    this->is_enterprise_owned = is_enterprise_owned;
    this->m_is_enterprise_owned_isSet = true;
}

bool
OAIBTDocumentProcessingInfo::isIsMutable() {
    return is_mutable;
}
void
OAIBTDocumentProcessingInfo::setIsMutable(bool is_mutable) {
    this->is_mutable = is_mutable;
    this->m_is_mutable_isSet = true;
}

bool
OAIBTDocumentProcessingInfo::isIsOrphaned() {
    return is_orphaned;
}
void
OAIBTDocumentProcessingInfo::setIsOrphaned(bool is_orphaned) {
    this->is_orphaned = is_orphaned;
    this->m_is_orphaned_isSet = true;
}

bool
OAIBTDocumentProcessingInfo::isIsUpgradedToLatestVersion() {
    return is_upgraded_to_latest_version;
}
void
OAIBTDocumentProcessingInfo::setIsUpgradedToLatestVersion(bool is_upgraded_to_latest_version) {
    this->is_upgraded_to_latest_version = is_upgraded_to_latest_version;
    this->m_is_upgraded_to_latest_version_isSet = true;
}

bool
OAIBTDocumentProcessingInfo::isIsUsingManagedWorkflow() {
    return is_using_managed_workflow;
}
void
OAIBTDocumentProcessingInfo::setIsUsingManagedWorkflow(bool is_using_managed_workflow) {
    this->is_using_managed_workflow = is_using_managed_workflow;
    this->m_is_using_managed_workflow_isSet = true;
}

QString*
OAIBTDocumentProcessingInfo::getJsonType() {
    return json_type;
}
void
OAIBTDocumentProcessingInfo::setJsonType(QString* json_type) {
    this->json_type = json_type;
    this->m_json_type_isSet = true;
}

bool
OAIBTDocumentProcessingInfo::isLikedByCurrentUser() {
    return liked_by_current_user;
}
void
OAIBTDocumentProcessingInfo::setLikedByCurrentUser(bool liked_by_current_user) {
    this->liked_by_current_user = liked_by_current_user;
    this->m_liked_by_current_user_isSet = true;
}

qint64
OAIBTDocumentProcessingInfo::getLikes() {
    return likes;
}
void
OAIBTDocumentProcessingInfo::setLikes(qint64 likes) {
    this->likes = likes;
    this->m_likes_isSet = true;
}

QDateTime*
OAIBTDocumentProcessingInfo::getModifiedAt() {
    return modified_at;
}
void
OAIBTDocumentProcessingInfo::setModifiedAt(QDateTime* modified_at) {
    this->modified_at = modified_at;
    this->m_modified_at_isSet = true;
}

OAIBTUserBasicSummaryInfo*
OAIBTDocumentProcessingInfo::getModifiedBy() {
    return modified_by;
}
void
OAIBTDocumentProcessingInfo::setModifiedBy(OAIBTUserBasicSummaryInfo* modified_by) {
    this->modified_by = modified_by;
    this->m_modified_by_isSet = true;
}

QString*
OAIBTDocumentProcessingInfo::getName() {
    return name;
}
void
OAIBTDocumentProcessingInfo::setName(QString* name) {
    this->name = name;
    this->m_name_isSet = true;
}

bool
OAIBTDocumentProcessingInfo::isNotRevisionManaged() {
    return not_revision_managed;
}
void
OAIBTDocumentProcessingInfo::setNotRevisionManaged(bool not_revision_managed) {
    this->not_revision_managed = not_revision_managed;
    this->m_not_revision_managed_isSet = true;
}

qint64
OAIBTDocumentProcessingInfo::getNumberOfTimesCopied() {
    return number_of_times_copied;
}
void
OAIBTDocumentProcessingInfo::setNumberOfTimesCopied(qint64 number_of_times_copied) {
    this->number_of_times_copied = number_of_times_copied;
    this->m_number_of_times_copied_isSet = true;
}

qint64
OAIBTDocumentProcessingInfo::getNumberOfTimesReferenced() {
    return number_of_times_referenced;
}
void
OAIBTDocumentProcessingInfo::setNumberOfTimesReferenced(qint64 number_of_times_referenced) {
    this->number_of_times_referenced = number_of_times_referenced;
    this->m_number_of_times_referenced_isSet = true;
}

OAIBTOwnerInfo*
OAIBTDocumentProcessingInfo::getOwner() {
    return owner;
}
void
OAIBTDocumentProcessingInfo::setOwner(OAIBTOwnerInfo* owner) {
    this->owner = owner;
    this->m_owner_isSet = true;
}

QString*
OAIBTDocumentProcessingInfo::getParentId() {
    return parent_id;
}
void
OAIBTDocumentProcessingInfo::setParentId(QString* parent_id) {
    this->parent_id = parent_id;
    this->m_parent_id_isSet = true;
}

QString*
OAIBTDocumentProcessingInfo::getPermission() {
    return permission;
}
void
OAIBTDocumentProcessingInfo::setPermission(QString* permission) {
    this->permission = permission;
    this->m_permission_isSet = true;
}

OAIBTPermissionSet*
OAIBTDocumentProcessingInfo::getPermissionSet() {
    return permission_set;
}
void
OAIBTDocumentProcessingInfo::setPermissionSet(OAIBTPermissionSet* permission_set) {
    this->permission_set = permission_set;
    this->m_permission_set_isSet = true;
}

QString*
OAIBTDocumentProcessingInfo::getProjectId() {
    return project_id;
}
void
OAIBTDocumentProcessingInfo::setProjectId(QString* project_id) {
    this->project_id = project_id;
    this->m_project_id_isSet = true;
}

bool
OAIBTDocumentProcessingInfo::isPublic() {
    return _public;
}
void
OAIBTDocumentProcessingInfo::setPublic(bool _public) {
    this->_public = _public;
    this->m__public_isSet = true;
}

OAIBTBaseInfo*
OAIBTDocumentProcessingInfo::getRecentVersion() {
    return recent_version;
}
void
OAIBTDocumentProcessingInfo::setRecentVersion(OAIBTBaseInfo* recent_version) {
    this->recent_version = recent_version;
    this->m_recent_version_isSet = true;
}

QString*
OAIBTDocumentProcessingInfo::getResourceType() {
    return resource_type;
}
void
OAIBTDocumentProcessingInfo::setResourceType(QString* resource_type) {
    this->resource_type = resource_type;
    this->m_resource_type_isSet = true;
}

bool
OAIBTDocumentProcessingInfo::isSupportTeamUserAndShared() {
    return support_team_user_and_shared;
}
void
OAIBTDocumentProcessingInfo::setSupportTeamUserAndShared(bool support_team_user_and_shared) {
    this->support_team_user_and_shared = support_team_user_and_shared;
    this->m_support_team_user_and_shared_isSet = true;
}

QList<QString*>*
OAIBTDocumentProcessingInfo::getTags() {
    return tags;
}
void
OAIBTDocumentProcessingInfo::setTags(QList<QString*>* tags) {
    this->tags = tags;
    this->m_tags_isSet = true;
}

OAIBTThumbnailInfo*
OAIBTDocumentProcessingInfo::getThumbnail() {
    return thumbnail;
}
void
OAIBTDocumentProcessingInfo::setThumbnail(OAIBTThumbnailInfo* thumbnail) {
    this->thumbnail = thumbnail;
    this->m_thumbnail_isSet = true;
}

qint32
OAIBTDocumentProcessingInfo::getTotalWorkspacesScheduledForUpdate() {
    return total_workspaces_scheduled_for_update;
}
void
OAIBTDocumentProcessingInfo::setTotalWorkspacesScheduledForUpdate(qint32 total_workspaces_scheduled_for_update) {
    this->total_workspaces_scheduled_for_update = total_workspaces_scheduled_for_update;
    this->m_total_workspaces_scheduled_for_update_isSet = true;
}

qint32
OAIBTDocumentProcessingInfo::getTotalWorkspacesUpdating() {
    return total_workspaces_updating;
}
void
OAIBTDocumentProcessingInfo::setTotalWorkspacesUpdating(qint32 total_workspaces_updating) {
    this->total_workspaces_updating = total_workspaces_updating;
    this->m_total_workspaces_updating_isSet = true;
}

bool
OAIBTDocumentProcessingInfo::isTrash() {
    return trash;
}
void
OAIBTDocumentProcessingInfo::setTrash(bool trash) {
    this->trash = trash;
    this->m_trash_isSet = true;
}

QDateTime*
OAIBTDocumentProcessingInfo::getTrashedAt() {
    return trashed_at;
}
void
OAIBTDocumentProcessingInfo::setTrashedAt(QDateTime* trashed_at) {
    this->trashed_at = trashed_at;
    this->m_trashed_at_isSet = true;
}

QString*
OAIBTDocumentProcessingInfo::getTreeHref() {
    return tree_href;
}
void
OAIBTDocumentProcessingInfo::setTreeHref(QString* tree_href) {
    this->tree_href = tree_href;
    this->m_tree_href_isSet = true;
}

bool
OAIBTDocumentProcessingInfo::isUserAccountLimitsBreached() {
    return user_account_limits_breached;
}
void
OAIBTDocumentProcessingInfo::setUserAccountLimitsBreached(bool user_account_limits_breached) {
    this->user_account_limits_breached = user_account_limits_breached;
    this->m_user_account_limits_breached_isSet = true;
}

QString*
OAIBTDocumentProcessingInfo::getViewRef() {
    return view_ref;
}
void
OAIBTDocumentProcessingInfo::setViewRef(QString* view_ref) {
    this->view_ref = view_ref;
    this->m_view_ref_isSet = true;
}

QString*
OAIBTDocumentProcessingInfo::getTranslationEventKey() {
    return translation_event_key;
}
void
OAIBTDocumentProcessingInfo::setTranslationEventKey(QString* translation_event_key) {
    this->translation_event_key = translation_event_key;
    this->m_translation_event_key_isSet = true;
}

QString*
OAIBTDocumentProcessingInfo::getTranslationId() {
    return translation_id;
}
void
OAIBTDocumentProcessingInfo::setTranslationId(QString* translation_id) {
    this->translation_id = translation_id;
    this->m_translation_id_isSet = true;
}


bool
OAIBTDocumentProcessingInfo::isSet(){
    bool isObjectUpdated = false;
    do{
        if(m_anonymous_access_allowed_isSet){ isObjectUpdated = true; break;}
        if(m_anonymous_allows_export_isSet){ isObjectUpdated = true; break;}
        if(beta_capability_ids->size() > 0){ isObjectUpdated = true; break;}
        if(m_can_move_isSet){ isObjectUpdated = true; break;}
        if(m_can_unshare_isSet){ isObjectUpdated = true; break;}
        if(created_by != nullptr && created_by->isSet()){ isObjectUpdated = true; break;}
        if(m_created_with_education_plan_isSet){ isObjectUpdated = true; break;}
        if(default_element_id != nullptr && *default_element_id != QString("")){ isObjectUpdated = true; break;}
        if(default_workspace != nullptr && default_workspace->isSet()){ isObjectUpdated = true; break;}
        if(description != nullptr && *description != QString("")){ isObjectUpdated = true; break;}
        if(document_labels->size() > 0){ isObjectUpdated = true; break;}
        if(document_thumbnail_element_id != nullptr && *document_thumbnail_element_id != QString("")){ isObjectUpdated = true; break;}
        if(duplicate_name_violation_error != nullptr && *duplicate_name_violation_error != QString("")){ isObjectUpdated = true; break;}
        if(m_has_pending_owner_isSet){ isObjectUpdated = true; break;}
        if(m_has_release_revisionable_objects_isSet){ isObjectUpdated = true; break;}
        if(m_has_relevant_insertables_isSet){ isObjectUpdated = true; break;}
        if(href != nullptr && *href != QString("")){ isObjectUpdated = true; break;}
        if(id != nullptr && *id != QString("")){ isObjectUpdated = true; break;}
        if(m_is_container_isSet){ isObjectUpdated = true; break;}
        if(m_is_enterprise_owned_isSet){ isObjectUpdated = true; break;}
        if(m_is_mutable_isSet){ isObjectUpdated = true; break;}
        if(m_is_orphaned_isSet){ isObjectUpdated = true; break;}
        if(m_is_upgraded_to_latest_version_isSet){ isObjectUpdated = true; break;}
        if(m_is_using_managed_workflow_isSet){ isObjectUpdated = true; break;}
        if(json_type != nullptr && *json_type != QString("")){ isObjectUpdated = true; break;}
        if(m_liked_by_current_user_isSet){ isObjectUpdated = true; break;}
        if(m_likes_isSet){ isObjectUpdated = true; break;}
        if(modified_by != nullptr && modified_by->isSet()){ isObjectUpdated = true; break;}
        if(name != nullptr && *name != QString("")){ isObjectUpdated = true; break;}
        if(m_not_revision_managed_isSet){ isObjectUpdated = true; break;}
        if(m_number_of_times_copied_isSet){ isObjectUpdated = true; break;}
        if(m_number_of_times_referenced_isSet){ isObjectUpdated = true; break;}
        if(owner != nullptr && owner->isSet()){ isObjectUpdated = true; break;}
        if(parent_id != nullptr && *parent_id != QString("")){ isObjectUpdated = true; break;}
        if(permission != nullptr && *permission != QString("")){ isObjectUpdated = true; break;}
        if(permission_set != nullptr && permission_set->isSet()){ isObjectUpdated = true; break;}
        if(project_id != nullptr && *project_id != QString("")){ isObjectUpdated = true; break;}
        if(m__public_isSet){ isObjectUpdated = true; break;}
        if(recent_version != nullptr && recent_version->isSet()){ isObjectUpdated = true; break;}
        if(resource_type != nullptr && *resource_type != QString("")){ isObjectUpdated = true; break;}
        if(m_support_team_user_and_shared_isSet){ isObjectUpdated = true; break;}
        if(tags->size() > 0){ isObjectUpdated = true; break;}
        if(thumbnail != nullptr && thumbnail->isSet()){ isObjectUpdated = true; break;}
        if(m_total_workspaces_scheduled_for_update_isSet){ isObjectUpdated = true; break;}
        if(m_total_workspaces_updating_isSet){ isObjectUpdated = true; break;}
        if(m_trash_isSet){ isObjectUpdated = true; break;}
        if(tree_href != nullptr && *tree_href != QString("")){ isObjectUpdated = true; break;}
        if(m_user_account_limits_breached_isSet){ isObjectUpdated = true; break;}
        if(view_ref != nullptr && *view_ref != QString("")){ isObjectUpdated = true; break;}
        if(translation_event_key != nullptr && *translation_event_key != QString("")){ isObjectUpdated = true; break;}
        if(translation_id != nullptr && *translation_id != QString("")){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

