/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * OpenAPI spec version: 1.111
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIBTMParameterArray-2025.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIBTMParameterArray-2025::OAIBTMParameterArray-2025(QString json) {
    init();
    this->fromJson(json);
}

OAIBTMParameterArray-2025::OAIBTMParameterArray-2025() {
    init();
}

OAIBTMParameterArray-2025::~OAIBTMParameterArray-2025() {
    this->cleanup();
}

void
OAIBTMParameterArray-2025::init() {
    bt_type = new QString("");
    m_bt_type_isSet = false;
    import_microversion = new QString("");
    m_import_microversion_isSet = false;
    node_id = new QString("");
    m_node_id_isSet = false;
    parameter_id = new QString("");
    m_parameter_id_isSet = false;
    items = new QList<OAIBTMArrayParameterItem-1843*>();
    m_items_isSet = false;
}

void
OAIBTMParameterArray-2025::cleanup() {
    if(bt_type != nullptr) { 
        delete bt_type;
    }
    if(import_microversion != nullptr) { 
        delete import_microversion;
    }
    if(node_id != nullptr) { 
        delete node_id;
    }
    if(parameter_id != nullptr) { 
        delete parameter_id;
    }
    if(items != nullptr) { 
        auto arr = items;
        for(auto o: *arr) { 
            delete o;
        }
        delete items;
    }
}

OAIBTMParameterArray-2025*
OAIBTMParameterArray-2025::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIBTMParameterArray-2025::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&bt_type, pJson["btType"], "QString", "QString");
    
    ::OpenAPI::setValue(&import_microversion, pJson["importMicroversion"], "QString", "QString");
    
    ::OpenAPI::setValue(&node_id, pJson["nodeId"], "QString", "QString");
    
    ::OpenAPI::setValue(&parameter_id, pJson["parameterId"], "QString", "QString");
    
    
    ::OpenAPI::setValue(&items, pJson["items"], "QList", "OAIBTMArrayParameterItem-1843");
}

QString
OAIBTMParameterArray-2025::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIBTMParameterArray-2025::asJsonObject() {
    QJsonObject obj;
    if(bt_type != nullptr && *bt_type != QString("")){
        toJsonValue(QString("btType"), bt_type, obj, QString("QString"));
    }
    if(import_microversion != nullptr && *import_microversion != QString("")){
        toJsonValue(QString("importMicroversion"), import_microversion, obj, QString("QString"));
    }
    if(node_id != nullptr && *node_id != QString("")){
        toJsonValue(QString("nodeId"), node_id, obj, QString("QString"));
    }
    if(parameter_id != nullptr && *parameter_id != QString("")){
        toJsonValue(QString("parameterId"), parameter_id, obj, QString("QString"));
    }
    if(items->size() > 0){
        toJsonArray((QList<void*>*)items, obj, "items", "OAIBTMArrayParameterItem-1843");
    }

    return obj;
}

QString*
OAIBTMParameterArray-2025::getBtType() {
    return bt_type;
}
void
OAIBTMParameterArray-2025::setBtType(QString* bt_type) {
    this->bt_type = bt_type;
    this->m_bt_type_isSet = true;
}

QString*
OAIBTMParameterArray-2025::getImportMicroversion() {
    return import_microversion;
}
void
OAIBTMParameterArray-2025::setImportMicroversion(QString* import_microversion) {
    this->import_microversion = import_microversion;
    this->m_import_microversion_isSet = true;
}

QString*
OAIBTMParameterArray-2025::getNodeId() {
    return node_id;
}
void
OAIBTMParameterArray-2025::setNodeId(QString* node_id) {
    this->node_id = node_id;
    this->m_node_id_isSet = true;
}

QString*
OAIBTMParameterArray-2025::getParameterId() {
    return parameter_id;
}
void
OAIBTMParameterArray-2025::setParameterId(QString* parameter_id) {
    this->parameter_id = parameter_id;
    this->m_parameter_id_isSet = true;
}

QList<OAIBTMArrayParameterItem-1843*>*
OAIBTMParameterArray-2025::getItems() {
    return items;
}
void
OAIBTMParameterArray-2025::setItems(QList<OAIBTMArrayParameterItem-1843*>* items) {
    this->items = items;
    this->m_items_isSet = true;
}


bool
OAIBTMParameterArray-2025::isSet(){
    bool isObjectUpdated = false;
    do{
        if(bt_type != nullptr && *bt_type != QString("")){ isObjectUpdated = true; break;}
        if(import_microversion != nullptr && *import_microversion != QString("")){ isObjectUpdated = true; break;}
        if(node_id != nullptr && *node_id != QString("")){ isObjectUpdated = true; break;}
        if(parameter_id != nullptr && *parameter_id != QString("")){ isObjectUpdated = true; break;}
        if(items->size() > 0){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

