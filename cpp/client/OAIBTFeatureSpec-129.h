/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * OpenAPI spec version: 1.111
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIBTFeatureSpec-129.h
 *
 * 
 */

#ifndef OAIBTFeatureSpec-129_H_
#define OAIBTFeatureSpec-129_H_

#include <QJsonObject>


#include "OAIBTEditingLogic-2350.h"
#include "OAIBTLocationInfo-226.h"
#include "OAIBTParameterGroupSpec-3469.h"
#include "OAIBTParameterSpec-6.h"
#include <QList>
#include <QString>

#include "OAIObject.h"

namespace OpenAPI {

class OAIBTFeatureSpec-129: public OAIObject {
public:
    OAIBTFeatureSpec-129();
    OAIBTFeatureSpec-129(QString json);
    ~OAIBTFeatureSpec-129();
    void init();
    void cleanup();

    QString asJson () override;
    QJsonObject asJsonObject() override;
    void fromJsonObject(QJsonObject json) override;
    OAIBTFeatureSpec-129* fromJson(QString jsonString) override;

    qint32 getAdditionalLocalizedStrings();
    void setAdditionalLocalizedStrings(qint32 additional_localized_strings);

    QList<OAIBTParameterSpec-6*>* getAllParameters();
    void setAllParameters(QList<OAIBTParameterSpec-6*>* all_parameters);

    QString* getBtType();
    void setBtType(QString* bt_type);

    OAIBTEditingLogic-2350* getEditingLogic();
    void setEditingLogic(OAIBTEditingLogic-2350* editing_logic);

    QString* getFeatureNameTemplate();
    void setFeatureNameTemplate(QString* feature_name_template);

    QString* getFeatureType();
    void setFeatureType(QString* feature_type);

    QString* getFeatureTypeName();
    void setFeatureTypeName(QString* feature_type_name);

    QList<QString*>* getFilterSelectors();
    void setFilterSelectors(QList<QString*>* filter_selectors);

    QString* getFullFeatureType();
    void setFullFeatureType(QString* full_feature_type);

    QList<OAIBTParameterGroupSpec-3469*>* getGroups();
    void setGroups(QList<OAIBTParameterGroupSpec-3469*>* groups);

    QString* getIconUri();
    void setIconUri(QString* icon_uri);

    qint32 getLanguageVersion();
    void setLanguageVersion(qint32 language_version);

    QString* getLinkedLocationName();
    void setLinkedLocationName(QString* linked_location_name);

    QString* getLocalizableName();
    void setLocalizableName(QString* localizable_name);

    QString* getLocalizedName();
    void setLocalizedName(QString* localized_name);

    QList<OAIBTLocationInfo-226*>* getLocationInfos();
    void setLocationInfos(QList<OAIBTLocationInfo-226*>* location_infos);

    QString* getManipulatorChangeFunction();
    void setManipulatorChangeFunction(QString* manipulator_change_function);

    QString* getNamespace();
    void setNamespace(QString* _namespace);

    QString* getNamespaceIncludingEnums();
    void setNamespaceIncludingEnums(QString* namespace_including_enums);

    bool isNamespaceTheSource();
    void setNamespaceTheSource(bool namespace_the_source);

    QList<OAIBTParameterSpec-6*>* getParameters();
    void setParameters(QList<OAIBTParameterSpec-6*>* parameters);

    QString* getSignature();
    void setSignature(QString* signature);

    OAIBTLocationInfo-226* getSourceLocation();
    void setSourceLocation(OAIBTLocationInfo-226* source_location);

    QString* getSourceMicroversionId();
    void setSourceMicroversionId(QString* source_microversion_id);

    QList<QString*>* getStringsToLocalize();
    void setStringsToLocalize(QList<QString*>* strings_to_localize);

    bool isTableSpec();
    void setTableSpec(bool table_spec);

    QList<QString*>* getUiHints();
    void setUiHints(QList<QString*>* ui_hints);


    virtual bool isSet() override;

private:
    qint32 additional_localized_strings;
    bool m_additional_localized_strings_isSet;

    QList<OAIBTParameterSpec-6*>* all_parameters;
    bool m_all_parameters_isSet;

    QString* bt_type;
    bool m_bt_type_isSet;

    OAIBTEditingLogic-2350* editing_logic;
    bool m_editing_logic_isSet;

    QString* feature_name_template;
    bool m_feature_name_template_isSet;

    QString* feature_type;
    bool m_feature_type_isSet;

    QString* feature_type_name;
    bool m_feature_type_name_isSet;

    QList<QString*>* filter_selectors;
    bool m_filter_selectors_isSet;

    QString* full_feature_type;
    bool m_full_feature_type_isSet;

    QList<OAIBTParameterGroupSpec-3469*>* groups;
    bool m_groups_isSet;

    QString* icon_uri;
    bool m_icon_uri_isSet;

    qint32 language_version;
    bool m_language_version_isSet;

    QString* linked_location_name;
    bool m_linked_location_name_isSet;

    QString* localizable_name;
    bool m_localizable_name_isSet;

    QString* localized_name;
    bool m_localized_name_isSet;

    QList<OAIBTLocationInfo-226*>* location_infos;
    bool m_location_infos_isSet;

    QString* manipulator_change_function;
    bool m_manipulator_change_function_isSet;

    QString* _namespace;
    bool m__namespace_isSet;

    QString* namespace_including_enums;
    bool m_namespace_including_enums_isSet;

    bool namespace_the_source;
    bool m_namespace_the_source_isSet;

    QList<OAIBTParameterSpec-6*>* parameters;
    bool m_parameters_isSet;

    QString* signature;
    bool m_signature_isSet;

    OAIBTLocationInfo-226* source_location;
    bool m_source_location_isSet;

    QString* source_microversion_id;
    bool m_source_microversion_id_isSet;

    QList<QString*>* strings_to_localize;
    bool m_strings_to_localize_isSet;

    bool table_spec;
    bool m_table_spec_isSet;

    QList<QString*>* ui_hints;
    bool m_ui_hints_isSet;

};

}

#endif /* OAIBTFeatureSpec-129_H_ */
