/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * OpenAPI spec version: 1.111
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIBTAssemblyOccurrenceInfo.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIBTAssemblyOccurrenceInfo::OAIBTAssemblyOccurrenceInfo(QString json) {
    init();
    this->fromJson(json);
}

OAIBTAssemblyOccurrenceInfo::OAIBTAssemblyOccurrenceInfo() {
    init();
}

OAIBTAssemblyOccurrenceInfo::~OAIBTAssemblyOccurrenceInfo() {
    this->cleanup();
}

void
OAIBTAssemblyOccurrenceInfo::init() {
    fixed = false;
    m_fixed_isSet = false;
    hidden = false;
    m_hidden_isSet = false;
    path = new QList<QString*>();
    m_path_isSet = false;
    transform = new QList<double>();
    m_transform_isSet = false;
}

void
OAIBTAssemblyOccurrenceInfo::cleanup() {


    if(path != nullptr) { 
        auto arr = path;
        for(auto o: *arr) { 
            delete o;
        }
        delete path;
    }

    if(transform != nullptr) { 
        delete transform;
    }
}

OAIBTAssemblyOccurrenceInfo*
OAIBTAssemblyOccurrenceInfo::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIBTAssemblyOccurrenceInfo::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&fixed, pJson["fixed"], "bool", "");
    
    ::OpenAPI::setValue(&hidden, pJson["hidden"], "bool", "");
    
    
    ::OpenAPI::setValue(&path, pJson["path"], "QList", "QString");
    
    ::OpenAPI::setValue(&transform, pJson["transform"], "QList", "double");
}

QString
OAIBTAssemblyOccurrenceInfo::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIBTAssemblyOccurrenceInfo::asJsonObject() {
    QJsonObject obj;
    if(m_fixed_isSet){
        obj.insert("fixed", QJsonValue(fixed));
    }
    if(m_hidden_isSet){
        obj.insert("hidden", QJsonValue(hidden));
    }
    if(path->size() > 0){
        toJsonArray((QList<void*>*)path, obj, "path", "QString");
    }
    if(transform->size() > 0){
        toJsonArray((QList<void*>*)transform, obj, "transform", "");
    }

    return obj;
}

bool
OAIBTAssemblyOccurrenceInfo::isFixed() {
    return fixed;
}
void
OAIBTAssemblyOccurrenceInfo::setFixed(bool fixed) {
    this->fixed = fixed;
    this->m_fixed_isSet = true;
}

bool
OAIBTAssemblyOccurrenceInfo::isHidden() {
    return hidden;
}
void
OAIBTAssemblyOccurrenceInfo::setHidden(bool hidden) {
    this->hidden = hidden;
    this->m_hidden_isSet = true;
}

QList<QString*>*
OAIBTAssemblyOccurrenceInfo::getPath() {
    return path;
}
void
OAIBTAssemblyOccurrenceInfo::setPath(QList<QString*>* path) {
    this->path = path;
    this->m_path_isSet = true;
}

QList<double>*
OAIBTAssemblyOccurrenceInfo::getTransform() {
    return transform;
}
void
OAIBTAssemblyOccurrenceInfo::setTransform(QList<double>* transform) {
    this->transform = transform;
    this->m_transform_isSet = true;
}


bool
OAIBTAssemblyOccurrenceInfo::isSet(){
    bool isObjectUpdated = false;
    do{
        if(m_fixed_isSet){ isObjectUpdated = true; break;}
        if(m_hidden_isSet){ isObjectUpdated = true; break;}
        if(path->size() > 0){ isObjectUpdated = true; break;}
        if(m_transform_isSet){ isObjectUpdated = true; break;}
        if(transform->size() > 0){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

