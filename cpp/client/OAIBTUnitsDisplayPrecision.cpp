/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * OpenAPI spec version: 1.111
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIBTUnitsDisplayPrecision.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIBTUnitsDisplayPrecision::OAIBTUnitsDisplayPrecision(QString json) {
    init();
    this->fromJson(json);
}

OAIBTUnitsDisplayPrecision::OAIBTUnitsDisplayPrecision() {
    init();
}

OAIBTUnitsDisplayPrecision::~OAIBTUnitsDisplayPrecision() {
    this->cleanup();
}

void
OAIBTUnitsDisplayPrecision::init() {
    centimeter = 0;
    m_centimeter_isSet = false;
    degree = 0;
    m_degree_isSet = false;
    foot = 0;
    m_foot_isSet = false;
    gram = 0;
    m_gram_isSet = false;
    inch = 0;
    m_inch_isSet = false;
    kilogram = 0;
    m_kilogram_isSet = false;
    meter = 0;
    m_meter_isSet = false;
    millimeter = 0;
    m_millimeter_isSet = false;
    ounce = 0;
    m_ounce_isSet = false;
    pound = 0;
    m_pound_isSet = false;
    radian = 0;
    m_radian_isSet = false;
    yard = 0;
    m_yard_isSet = false;
}

void
OAIBTUnitsDisplayPrecision::cleanup() {












}

OAIBTUnitsDisplayPrecision*
OAIBTUnitsDisplayPrecision::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIBTUnitsDisplayPrecision::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&centimeter, pJson["centimeter"], "qint32", "");
    
    ::OpenAPI::setValue(&degree, pJson["degree"], "qint32", "");
    
    ::OpenAPI::setValue(&foot, pJson["foot"], "qint32", "");
    
    ::OpenAPI::setValue(&gram, pJson["gram"], "qint32", "");
    
    ::OpenAPI::setValue(&inch, pJson["inch"], "qint32", "");
    
    ::OpenAPI::setValue(&kilogram, pJson["kilogram"], "qint32", "");
    
    ::OpenAPI::setValue(&meter, pJson["meter"], "qint32", "");
    
    ::OpenAPI::setValue(&millimeter, pJson["millimeter"], "qint32", "");
    
    ::OpenAPI::setValue(&ounce, pJson["ounce"], "qint32", "");
    
    ::OpenAPI::setValue(&pound, pJson["pound"], "qint32", "");
    
    ::OpenAPI::setValue(&radian, pJson["radian"], "qint32", "");
    
    ::OpenAPI::setValue(&yard, pJson["yard"], "qint32", "");
    
}

QString
OAIBTUnitsDisplayPrecision::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIBTUnitsDisplayPrecision::asJsonObject() {
    QJsonObject obj;
    if(m_centimeter_isSet){
        obj.insert("centimeter", QJsonValue(centimeter));
    }
    if(m_degree_isSet){
        obj.insert("degree", QJsonValue(degree));
    }
    if(m_foot_isSet){
        obj.insert("foot", QJsonValue(foot));
    }
    if(m_gram_isSet){
        obj.insert("gram", QJsonValue(gram));
    }
    if(m_inch_isSet){
        obj.insert("inch", QJsonValue(inch));
    }
    if(m_kilogram_isSet){
        obj.insert("kilogram", QJsonValue(kilogram));
    }
    if(m_meter_isSet){
        obj.insert("meter", QJsonValue(meter));
    }
    if(m_millimeter_isSet){
        obj.insert("millimeter", QJsonValue(millimeter));
    }
    if(m_ounce_isSet){
        obj.insert("ounce", QJsonValue(ounce));
    }
    if(m_pound_isSet){
        obj.insert("pound", QJsonValue(pound));
    }
    if(m_radian_isSet){
        obj.insert("radian", QJsonValue(radian));
    }
    if(m_yard_isSet){
        obj.insert("yard", QJsonValue(yard));
    }

    return obj;
}

qint32
OAIBTUnitsDisplayPrecision::getCentimeter() {
    return centimeter;
}
void
OAIBTUnitsDisplayPrecision::setCentimeter(qint32 centimeter) {
    this->centimeter = centimeter;
    this->m_centimeter_isSet = true;
}

qint32
OAIBTUnitsDisplayPrecision::getDegree() {
    return degree;
}
void
OAIBTUnitsDisplayPrecision::setDegree(qint32 degree) {
    this->degree = degree;
    this->m_degree_isSet = true;
}

qint32
OAIBTUnitsDisplayPrecision::getFoot() {
    return foot;
}
void
OAIBTUnitsDisplayPrecision::setFoot(qint32 foot) {
    this->foot = foot;
    this->m_foot_isSet = true;
}

qint32
OAIBTUnitsDisplayPrecision::getGram() {
    return gram;
}
void
OAIBTUnitsDisplayPrecision::setGram(qint32 gram) {
    this->gram = gram;
    this->m_gram_isSet = true;
}

qint32
OAIBTUnitsDisplayPrecision::getInch() {
    return inch;
}
void
OAIBTUnitsDisplayPrecision::setInch(qint32 inch) {
    this->inch = inch;
    this->m_inch_isSet = true;
}

qint32
OAIBTUnitsDisplayPrecision::getKilogram() {
    return kilogram;
}
void
OAIBTUnitsDisplayPrecision::setKilogram(qint32 kilogram) {
    this->kilogram = kilogram;
    this->m_kilogram_isSet = true;
}

qint32
OAIBTUnitsDisplayPrecision::getMeter() {
    return meter;
}
void
OAIBTUnitsDisplayPrecision::setMeter(qint32 meter) {
    this->meter = meter;
    this->m_meter_isSet = true;
}

qint32
OAIBTUnitsDisplayPrecision::getMillimeter() {
    return millimeter;
}
void
OAIBTUnitsDisplayPrecision::setMillimeter(qint32 millimeter) {
    this->millimeter = millimeter;
    this->m_millimeter_isSet = true;
}

qint32
OAIBTUnitsDisplayPrecision::getOunce() {
    return ounce;
}
void
OAIBTUnitsDisplayPrecision::setOunce(qint32 ounce) {
    this->ounce = ounce;
    this->m_ounce_isSet = true;
}

qint32
OAIBTUnitsDisplayPrecision::getPound() {
    return pound;
}
void
OAIBTUnitsDisplayPrecision::setPound(qint32 pound) {
    this->pound = pound;
    this->m_pound_isSet = true;
}

qint32
OAIBTUnitsDisplayPrecision::getRadian() {
    return radian;
}
void
OAIBTUnitsDisplayPrecision::setRadian(qint32 radian) {
    this->radian = radian;
    this->m_radian_isSet = true;
}

qint32
OAIBTUnitsDisplayPrecision::getYard() {
    return yard;
}
void
OAIBTUnitsDisplayPrecision::setYard(qint32 yard) {
    this->yard = yard;
    this->m_yard_isSet = true;
}


bool
OAIBTUnitsDisplayPrecision::isSet(){
    bool isObjectUpdated = false;
    do{
        if(m_centimeter_isSet){ isObjectUpdated = true; break;}
        if(m_degree_isSet){ isObjectUpdated = true; break;}
        if(m_foot_isSet){ isObjectUpdated = true; break;}
        if(m_gram_isSet){ isObjectUpdated = true; break;}
        if(m_inch_isSet){ isObjectUpdated = true; break;}
        if(m_kilogram_isSet){ isObjectUpdated = true; break;}
        if(m_meter_isSet){ isObjectUpdated = true; break;}
        if(m_millimeter_isSet){ isObjectUpdated = true; break;}
        if(m_ounce_isSet){ isObjectUpdated = true; break;}
        if(m_pound_isSet){ isObjectUpdated = true; break;}
        if(m_radian_isSet){ isObjectUpdated = true; break;}
        if(m_yard_isSet){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

