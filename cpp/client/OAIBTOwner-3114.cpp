/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * OpenAPI spec version: 1.111
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIBTOwner-3114.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIBTOwner-3114::OAIBTOwner-3114(QString json) {
    init();
    this->fromJson(json);
}

OAIBTOwner-3114::OAIBTOwner-3114() {
    init();
}

OAIBTOwner-3114::~OAIBTOwner-3114() {
    this->cleanup();
}

void
OAIBTOwner-3114::init() {
    bt_type = new QString("");
    m_bt_type_isSet = false;
    owner_id = new QString("");
    m_owner_id_isSet = false;
    owner_type = new QString("");
    m_owner_type_isSet = false;
    owner_type_ordinal = 0;
    m_owner_type_ordinal_isSet = false;
}

void
OAIBTOwner-3114::cleanup() {
    if(bt_type != nullptr) { 
        delete bt_type;
    }
    if(owner_id != nullptr) { 
        delete owner_id;
    }
    if(owner_type != nullptr) { 
        delete owner_type;
    }

}

OAIBTOwner-3114*
OAIBTOwner-3114::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIBTOwner-3114::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&bt_type, pJson["btType"], "QString", "QString");
    
    ::OpenAPI::setValue(&owner_id, pJson["ownerId"], "QString", "QString");
    
    ::OpenAPI::setValue(&owner_type, pJson["ownerType"], "QString", "QString");
    
    ::OpenAPI::setValue(&owner_type_ordinal, pJson["ownerTypeOrdinal"], "qint32", "");
    
}

QString
OAIBTOwner-3114::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIBTOwner-3114::asJsonObject() {
    QJsonObject obj;
    if(bt_type != nullptr && *bt_type != QString("")){
        toJsonValue(QString("btType"), bt_type, obj, QString("QString"));
    }
    if(owner_id != nullptr && *owner_id != QString("")){
        toJsonValue(QString("ownerId"), owner_id, obj, QString("QString"));
    }
    if(owner_type != nullptr && *owner_type != QString("")){
        toJsonValue(QString("ownerType"), owner_type, obj, QString("QString"));
    }
    if(m_owner_type_ordinal_isSet){
        obj.insert("ownerTypeOrdinal", QJsonValue(owner_type_ordinal));
    }

    return obj;
}

QString*
OAIBTOwner-3114::getBtType() {
    return bt_type;
}
void
OAIBTOwner-3114::setBtType(QString* bt_type) {
    this->bt_type = bt_type;
    this->m_bt_type_isSet = true;
}

QString*
OAIBTOwner-3114::getOwnerId() {
    return owner_id;
}
void
OAIBTOwner-3114::setOwnerId(QString* owner_id) {
    this->owner_id = owner_id;
    this->m_owner_id_isSet = true;
}

QString*
OAIBTOwner-3114::getOwnerType() {
    return owner_type;
}
void
OAIBTOwner-3114::setOwnerType(QString* owner_type) {
    this->owner_type = owner_type;
    this->m_owner_type_isSet = true;
}

qint32
OAIBTOwner-3114::getOwnerTypeOrdinal() {
    return owner_type_ordinal;
}
void
OAIBTOwner-3114::setOwnerTypeOrdinal(qint32 owner_type_ordinal) {
    this->owner_type_ordinal = owner_type_ordinal;
    this->m_owner_type_ordinal_isSet = true;
}


bool
OAIBTOwner-3114::isSet(){
    bool isObjectUpdated = false;
    do{
        if(bt_type != nullptr && *bt_type != QString("")){ isObjectUpdated = true; break;}
        if(owner_id != nullptr && *owner_id != QString("")){ isObjectUpdated = true; break;}
        if(owner_type != nullptr && *owner_type != QString("")){ isObjectUpdated = true; break;}
        if(m_owner_type_ordinal_isSet){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

