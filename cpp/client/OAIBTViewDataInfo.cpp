/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * OpenAPI spec version: 1.111
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIBTViewDataInfo.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIBTViewDataInfo::OAIBTViewDataInfo(QString json) {
    init();
    this->fromJson(json);
}

OAIBTViewDataInfo::OAIBTViewDataInfo() {
    init();
}

OAIBTViewDataInfo::~OAIBTViewDataInfo() {
    this->cleanup();
}

void
OAIBTViewDataInfo::init() {
    angle = 0.0;
    m_angle_isSet = false;
    camera_viewport = new QList<double>();
    m_camera_viewport_isSet = false;
    is_perspective = false;
    m_is_perspective_isSet = false;
    view_matrix = new QList<double>();
    m_view_matrix_isSet = false;
}

void
OAIBTViewDataInfo::cleanup() {


    if(camera_viewport != nullptr) { 
        delete camera_viewport;
    }


    if(view_matrix != nullptr) { 
        delete view_matrix;
    }
}

OAIBTViewDataInfo*
OAIBTViewDataInfo::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIBTViewDataInfo::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&angle, pJson["angle"], "double", "");
    
    
    ::OpenAPI::setValue(&camera_viewport, pJson["cameraViewport"], "QList", "double");
    ::OpenAPI::setValue(&is_perspective, pJson["isPerspective"], "bool", "");
    
    
    ::OpenAPI::setValue(&view_matrix, pJson["viewMatrix"], "QList", "double");
}

QString
OAIBTViewDataInfo::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIBTViewDataInfo::asJsonObject() {
    QJsonObject obj;
    if(m_angle_isSet){
        obj.insert("angle", QJsonValue(angle));
    }
    if(camera_viewport->size() > 0){
        toJsonArray((QList<void*>*)camera_viewport, obj, "cameraViewport", "");
    }
    if(m_is_perspective_isSet){
        obj.insert("isPerspective", QJsonValue(is_perspective));
    }
    if(view_matrix->size() > 0){
        toJsonArray((QList<void*>*)view_matrix, obj, "viewMatrix", "");
    }

    return obj;
}

double
OAIBTViewDataInfo::getAngle() {
    return angle;
}
void
OAIBTViewDataInfo::setAngle(double angle) {
    this->angle = angle;
    this->m_angle_isSet = true;
}

QList<double>*
OAIBTViewDataInfo::getCameraViewport() {
    return camera_viewport;
}
void
OAIBTViewDataInfo::setCameraViewport(QList<double>* camera_viewport) {
    this->camera_viewport = camera_viewport;
    this->m_camera_viewport_isSet = true;
}

bool
OAIBTViewDataInfo::isIsPerspective() {
    return is_perspective;
}
void
OAIBTViewDataInfo::setIsPerspective(bool is_perspective) {
    this->is_perspective = is_perspective;
    this->m_is_perspective_isSet = true;
}

QList<double>*
OAIBTViewDataInfo::getViewMatrix() {
    return view_matrix;
}
void
OAIBTViewDataInfo::setViewMatrix(QList<double>* view_matrix) {
    this->view_matrix = view_matrix;
    this->m_view_matrix_isSet = true;
}


bool
OAIBTViewDataInfo::isSet(){
    bool isObjectUpdated = false;
    do{
        if(m_angle_isSet){ isObjectUpdated = true; break;}
        if(m_camera_viewport_isSet){ isObjectUpdated = true; break;}
        if(camera_viewport->size() > 0){ isObjectUpdated = true; break;}
        if(m_is_perspective_isSet){ isObjectUpdated = true; break;}
        if(m_view_matrix_isSet){ isObjectUpdated = true; break;}
        if(view_matrix->size() > 0){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

