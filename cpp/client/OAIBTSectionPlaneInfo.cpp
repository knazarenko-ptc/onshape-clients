/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * OpenAPI spec version: 1.111
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIBTSectionPlaneInfo.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIBTSectionPlaneInfo::OAIBTSectionPlaneInfo(QString json) {
    init();
    this->fromJson(json);
}

OAIBTSectionPlaneInfo::OAIBTSectionPlaneInfo() {
    init();
}

OAIBTSectionPlaneInfo::~OAIBTSectionPlaneInfo() {
    this->cleanup();
}

void
OAIBTSectionPlaneInfo::init() {
    center = new QList<double>();
    m_center_isSet = false;
    normal = new QList<double>();
    m_normal_isSet = false;
    tangent = new QList<double>();
    m_tangent_isSet = false;
}

void
OAIBTSectionPlaneInfo::cleanup() {

    if(center != nullptr) { 
        delete center;
    }

    if(normal != nullptr) { 
        delete normal;
    }

    if(tangent != nullptr) { 
        delete tangent;
    }
}

OAIBTSectionPlaneInfo*
OAIBTSectionPlaneInfo::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIBTSectionPlaneInfo::fromJsonObject(QJsonObject pJson) {
    
    ::OpenAPI::setValue(&center, pJson["center"], "QList", "double");
    
    ::OpenAPI::setValue(&normal, pJson["normal"], "QList", "double");
    
    ::OpenAPI::setValue(&tangent, pJson["tangent"], "QList", "double");
}

QString
OAIBTSectionPlaneInfo::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIBTSectionPlaneInfo::asJsonObject() {
    QJsonObject obj;
    if(center->size() > 0){
        toJsonArray((QList<void*>*)center, obj, "center", "");
    }
    if(normal->size() > 0){
        toJsonArray((QList<void*>*)normal, obj, "normal", "");
    }
    if(tangent->size() > 0){
        toJsonArray((QList<void*>*)tangent, obj, "tangent", "");
    }

    return obj;
}

QList<double>*
OAIBTSectionPlaneInfo::getCenter() {
    return center;
}
void
OAIBTSectionPlaneInfo::setCenter(QList<double>* center) {
    this->center = center;
    this->m_center_isSet = true;
}

QList<double>*
OAIBTSectionPlaneInfo::getNormal() {
    return normal;
}
void
OAIBTSectionPlaneInfo::setNormal(QList<double>* normal) {
    this->normal = normal;
    this->m_normal_isSet = true;
}

QList<double>*
OAIBTSectionPlaneInfo::getTangent() {
    return tangent;
}
void
OAIBTSectionPlaneInfo::setTangent(QList<double>* tangent) {
    this->tangent = tangent;
    this->m_tangent_isSet = true;
}


bool
OAIBTSectionPlaneInfo::isSet(){
    bool isObjectUpdated = false;
    do{
        if(m_center_isSet){ isObjectUpdated = true; break;}
        if(center->size() > 0){ isObjectUpdated = true; break;}
        if(m_normal_isSet){ isObjectUpdated = true; break;}
        if(normal->size() > 0){ isObjectUpdated = true; break;}
        if(m_tangent_isSet){ isObjectUpdated = true; break;}
        if(tangent->size() > 0){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

