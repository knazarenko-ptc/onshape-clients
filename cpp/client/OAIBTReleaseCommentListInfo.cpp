/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * OpenAPI spec version: 1.111
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIBTReleaseCommentListInfo.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIBTReleaseCommentListInfo::OAIBTReleaseCommentListInfo(QString json) {
    init();
    this->fromJson(json);
}

OAIBTReleaseCommentListInfo::OAIBTReleaseCommentListInfo() {
    init();
}

OAIBTReleaseCommentListInfo::~OAIBTReleaseCommentListInfo() {
    this->cleanup();
}

void
OAIBTReleaseCommentListInfo::init() {
    comments = new QList<OAIBTCommentInfo*>();
    m_comments_isSet = false;
    rp_id = new QString("");
    m_rp_id_isSet = false;
    rp_name = new QString("");
    m_rp_name_isSet = false;
}

void
OAIBTReleaseCommentListInfo::cleanup() {
    if(comments != nullptr) { 
        auto arr = comments;
        for(auto o: *arr) { 
            delete o;
        }
        delete comments;
    }
    if(rp_id != nullptr) { 
        delete rp_id;
    }
    if(rp_name != nullptr) { 
        delete rp_name;
    }
}

OAIBTReleaseCommentListInfo*
OAIBTReleaseCommentListInfo::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIBTReleaseCommentListInfo::fromJsonObject(QJsonObject pJson) {
    
    ::OpenAPI::setValue(&comments, pJson["comments"], "QList", "OAIBTCommentInfo");
    ::OpenAPI::setValue(&rp_id, pJson["rpId"], "QString", "QString");
    
    ::OpenAPI::setValue(&rp_name, pJson["rpName"], "QString", "QString");
    
}

QString
OAIBTReleaseCommentListInfo::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIBTReleaseCommentListInfo::asJsonObject() {
    QJsonObject obj;
    if(comments->size() > 0){
        toJsonArray((QList<void*>*)comments, obj, "comments", "OAIBTCommentInfo");
    }
    if(rp_id != nullptr && *rp_id != QString("")){
        toJsonValue(QString("rpId"), rp_id, obj, QString("QString"));
    }
    if(rp_name != nullptr && *rp_name != QString("")){
        toJsonValue(QString("rpName"), rp_name, obj, QString("QString"));
    }

    return obj;
}

QList<OAIBTCommentInfo*>*
OAIBTReleaseCommentListInfo::getComments() {
    return comments;
}
void
OAIBTReleaseCommentListInfo::setComments(QList<OAIBTCommentInfo*>* comments) {
    this->comments = comments;
    this->m_comments_isSet = true;
}

QString*
OAIBTReleaseCommentListInfo::getRpId() {
    return rp_id;
}
void
OAIBTReleaseCommentListInfo::setRpId(QString* rp_id) {
    this->rp_id = rp_id;
    this->m_rp_id_isSet = true;
}

QString*
OAIBTReleaseCommentListInfo::getRpName() {
    return rp_name;
}
void
OAIBTReleaseCommentListInfo::setRpName(QString* rp_name) {
    this->rp_name = rp_name;
    this->m_rp_name_isSet = true;
}


bool
OAIBTReleaseCommentListInfo::isSet(){
    bool isObjectUpdated = false;
    do{
        if(comments->size() > 0){ isObjectUpdated = true; break;}
        if(rp_id != nullptr && *rp_id != QString("")){ isObjectUpdated = true; break;}
        if(rp_name != nullptr && *rp_name != QString("")){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

