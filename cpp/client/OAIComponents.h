/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * OpenAPI spec version: 1.111
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIComponents.h
 *
 * 
 */

#ifndef OAIComponents_H_
#define OAIComponents_H_

#include <QJsonObject>


#include "OAIApiResponse.h"
#include "OAIExample.h"
#include "OAIHeader.h"
#include "OAILink.h"
#include "OAIObject.h"
#include "OAIParameter.h"
#include "OAIRequestBody.h"
#include "OAISchema.h"
#include "OAISecurityScheme.h"
#include <QList>
#include <QMap>

#include "OAIObject.h"

namespace OpenAPI {

class OAIComponents: public OAIObject {
public:
    OAIComponents();
    OAIComponents(QString json);
    ~OAIComponents();
    void init();
    void cleanup();

    QString asJson () override;
    QJsonObject asJsonObject() override;
    void fromJsonObject(QJsonObject json) override;
    OAIComponents* fromJson(QString jsonString) override;

    QMap<QString, QMap*>* getCallbacks();
    void setCallbacks(QMap<QString, QMap*>* callbacks);

    QMap<QString, OAIExample*>* getExamples();
    void setExamples(QMap<QString, OAIExample*>* examples);

    QMap<QString, OAIObject*>* getExtensions();
    void setExtensions(QMap<QString, OAIObject*>* extensions);

    QMap<QString, OAIHeader*>* getHeaders();
    void setHeaders(QMap<QString, OAIHeader*>* headers);

    QMap<QString, OAILink*>* getLinks();
    void setLinks(QMap<QString, OAILink*>* links);

    QMap<QString, OAIParameter*>* getParameters();
    void setParameters(QMap<QString, OAIParameter*>* parameters);

    QMap<QString, OAIRequestBody*>* getRequestBodies();
    void setRequestBodies(QMap<QString, OAIRequestBody*>* request_bodies);

    QMap<QString, OAIApiResponse*>* getResponses();
    void setResponses(QMap<QString, OAIApiResponse*>* responses);

    QMap<QString, OAISchema*>* getSchemas();
    void setSchemas(QMap<QString, OAISchema*>* schemas);

    QMap<QString, OAISecurityScheme*>* getSecuritySchemes();
    void setSecuritySchemes(QMap<QString, OAISecurityScheme*>* security_schemes);


    virtual bool isSet() override;

private:
    QMap<QString, QMap*>* callbacks;
    bool m_callbacks_isSet;

    QMap<QString, OAIExample*>* examples;
    bool m_examples_isSet;

    QMap<QString, OAIObject*>* extensions;
    bool m_extensions_isSet;

    QMap<QString, OAIHeader*>* headers;
    bool m_headers_isSet;

    QMap<QString, OAILink*>* links;
    bool m_links_isSet;

    QMap<QString, OAIParameter*>* parameters;
    bool m_parameters_isSet;

    QMap<QString, OAIRequestBody*>* request_bodies;
    bool m_request_bodies_isSet;

    QMap<QString, OAIApiResponse*>* responses;
    bool m_responses_isSet;

    QMap<QString, OAISchema*>* schemas;
    bool m_schemas_isSet;

    QMap<QString, OAISecurityScheme*>* security_schemes;
    bool m_security_schemes_isSet;

};

}

#endif /* OAIComponents_H_ */
