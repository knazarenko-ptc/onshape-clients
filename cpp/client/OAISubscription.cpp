/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * OpenAPI spec version: 1.111
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAISubscription.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAISubscription::OAISubscription(QString json) {
    init();
    this->fromJson(json);
}

OAISubscription::OAISubscription() {
    init();
}

OAISubscription::~OAISubscription() {
    this->cleanup();
}

void
OAISubscription::init() {
    application_fee_percent = 0.0;
    m_application_fee_percent_isSet = false;
    billing = new QString("");
    m_billing_isSet = false;
    cancel_at_period_end = false;
    m_cancel_at_period_end_isSet = false;
    canceled_at = 0L;
    m_canceled_at_isSet = false;
    created = 0L;
    m_created_isSet = false;
    current_period_end = 0L;
    m_current_period_end_isSet = false;
    current_period_start = 0L;
    m_current_period_start_isSet = false;
    customer = new QString("");
    m_customer_isSet = false;
    customer_object = new OAICustomer();
    m_customer_object_isSet = false;
    days_until_due = 0;
    m_days_until_due_isSet = false;
    discount = new OAIDiscount();
    m_discount_isSet = false;
    ended_at = 0L;
    m_ended_at_isSet = false;
    id = new QString("");
    m_id_isSet = false;
    metadata = new QMap<QString, QString*>();
    m_metadata_isSet = false;
    object = new QString("");
    m_object_isSet = false;
    plan = new OAIPlan();
    m_plan_isSet = false;
    quantity = 0;
    m_quantity_isSet = false;
    start = 0L;
    m_start_isSet = false;
    status = new QString("");
    m_status_isSet = false;
    subscription_items = new OAISubscriptionItemCollection();
    m_subscription_items_isSet = false;
    tax_percent = 0.0;
    m_tax_percent_isSet = false;
    trial_end = 0L;
    m_trial_end_isSet = false;
    trial_start = 0L;
    m_trial_start_isSet = false;
}

void
OAISubscription::cleanup() {

    if(billing != nullptr) { 
        delete billing;
    }





    if(customer != nullptr) { 
        delete customer;
    }
    if(customer_object != nullptr) { 
        delete customer_object;
    }

    if(discount != nullptr) { 
        delete discount;
    }

    if(id != nullptr) { 
        delete id;
    }
    if(metadata != nullptr) { 
        auto arr = metadata;
        for(auto o: *arr) { 
            delete o;
        }
        delete metadata;
    }
    if(object != nullptr) { 
        delete object;
    }
    if(plan != nullptr) { 
        delete plan;
    }


    if(status != nullptr) { 
        delete status;
    }
    if(subscription_items != nullptr) { 
        delete subscription_items;
    }



}

OAISubscription*
OAISubscription::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAISubscription::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&application_fee_percent, pJson["applicationFeePercent"], "double", "");
    
    ::OpenAPI::setValue(&billing, pJson["billing"], "QString", "QString");
    
    ::OpenAPI::setValue(&cancel_at_period_end, pJson["cancelAtPeriodEnd"], "bool", "");
    
    ::OpenAPI::setValue(&canceled_at, pJson["canceledAt"], "qint64", "");
    
    ::OpenAPI::setValue(&created, pJson["created"], "qint64", "");
    
    ::OpenAPI::setValue(&current_period_end, pJson["currentPeriodEnd"], "qint64", "");
    
    ::OpenAPI::setValue(&current_period_start, pJson["currentPeriodStart"], "qint64", "");
    
    ::OpenAPI::setValue(&customer, pJson["customer"], "QString", "QString");
    
    ::OpenAPI::setValue(&customer_object, pJson["customerObject"], "OAICustomer", "OAICustomer");
    
    ::OpenAPI::setValue(&days_until_due, pJson["daysUntilDue"], "qint32", "");
    
    ::OpenAPI::setValue(&discount, pJson["discount"], "OAIDiscount", "OAIDiscount");
    
    ::OpenAPI::setValue(&ended_at, pJson["endedAt"], "qint64", "");
    
    ::OpenAPI::setValue(&id, pJson["id"], "QString", "QString");
    
    
    ::OpenAPI::setValue(&metadata, pJson["metadata"], "QMap", "QString");
    ::OpenAPI::setValue(&object, pJson["object"], "QString", "QString");
    
    ::OpenAPI::setValue(&plan, pJson["plan"], "OAIPlan", "OAIPlan");
    
    ::OpenAPI::setValue(&quantity, pJson["quantity"], "qint32", "");
    
    ::OpenAPI::setValue(&start, pJson["start"], "qint64", "");
    
    ::OpenAPI::setValue(&status, pJson["status"], "QString", "QString");
    
    ::OpenAPI::setValue(&subscription_items, pJson["subscriptionItems"], "OAISubscriptionItemCollection", "OAISubscriptionItemCollection");
    
    ::OpenAPI::setValue(&tax_percent, pJson["taxPercent"], "double", "");
    
    ::OpenAPI::setValue(&trial_end, pJson["trialEnd"], "qint64", "");
    
    ::OpenAPI::setValue(&trial_start, pJson["trialStart"], "qint64", "");
    
}

QString
OAISubscription::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAISubscription::asJsonObject() {
    QJsonObject obj;
    if(m_application_fee_percent_isSet){
        obj.insert("applicationFeePercent", QJsonValue(application_fee_percent));
    }
    if(billing != nullptr && *billing != QString("")){
        toJsonValue(QString("billing"), billing, obj, QString("QString"));
    }
    if(m_cancel_at_period_end_isSet){
        obj.insert("cancelAtPeriodEnd", QJsonValue(cancel_at_period_end));
    }
    if(m_canceled_at_isSet){
        obj.insert("canceledAt", QJsonValue(canceled_at));
    }
    if(m_created_isSet){
        obj.insert("created", QJsonValue(created));
    }
    if(m_current_period_end_isSet){
        obj.insert("currentPeriodEnd", QJsonValue(current_period_end));
    }
    if(m_current_period_start_isSet){
        obj.insert("currentPeriodStart", QJsonValue(current_period_start));
    }
    if(customer != nullptr && *customer != QString("")){
        toJsonValue(QString("customer"), customer, obj, QString("QString"));
    }
    if((customer_object != nullptr) && (customer_object->isSet())){
        toJsonValue(QString("customerObject"), customer_object, obj, QString("OAICustomer"));
    }
    if(m_days_until_due_isSet){
        obj.insert("daysUntilDue", QJsonValue(days_until_due));
    }
    if((discount != nullptr) && (discount->isSet())){
        toJsonValue(QString("discount"), discount, obj, QString("OAIDiscount"));
    }
    if(m_ended_at_isSet){
        obj.insert("endedAt", QJsonValue(ended_at));
    }
    if(id != nullptr && *id != QString("")){
        toJsonValue(QString("id"), id, obj, QString("QString"));
    }
    if(metadata->size() > 0){
        toJsonMap((QMap<QString, void*>*) metadata, obj, "metadata", "QString");
    }
    if(object != nullptr && *object != QString("")){
        toJsonValue(QString("object"), object, obj, QString("QString"));
    }
    if((plan != nullptr) && (plan->isSet())){
        toJsonValue(QString("plan"), plan, obj, QString("OAIPlan"));
    }
    if(m_quantity_isSet){
        obj.insert("quantity", QJsonValue(quantity));
    }
    if(m_start_isSet){
        obj.insert("start", QJsonValue(start));
    }
    if(status != nullptr && *status != QString("")){
        toJsonValue(QString("status"), status, obj, QString("QString"));
    }
    if((subscription_items != nullptr) && (subscription_items->isSet())){
        toJsonValue(QString("subscriptionItems"), subscription_items, obj, QString("OAISubscriptionItemCollection"));
    }
    if(m_tax_percent_isSet){
        obj.insert("taxPercent", QJsonValue(tax_percent));
    }
    if(m_trial_end_isSet){
        obj.insert("trialEnd", QJsonValue(trial_end));
    }
    if(m_trial_start_isSet){
        obj.insert("trialStart", QJsonValue(trial_start));
    }

    return obj;
}

double
OAISubscription::getApplicationFeePercent() {
    return application_fee_percent;
}
void
OAISubscription::setApplicationFeePercent(double application_fee_percent) {
    this->application_fee_percent = application_fee_percent;
    this->m_application_fee_percent_isSet = true;
}

QString*
OAISubscription::getBilling() {
    return billing;
}
void
OAISubscription::setBilling(QString* billing) {
    this->billing = billing;
    this->m_billing_isSet = true;
}

bool
OAISubscription::isCancelAtPeriodEnd() {
    return cancel_at_period_end;
}
void
OAISubscription::setCancelAtPeriodEnd(bool cancel_at_period_end) {
    this->cancel_at_period_end = cancel_at_period_end;
    this->m_cancel_at_period_end_isSet = true;
}

qint64
OAISubscription::getCanceledAt() {
    return canceled_at;
}
void
OAISubscription::setCanceledAt(qint64 canceled_at) {
    this->canceled_at = canceled_at;
    this->m_canceled_at_isSet = true;
}

qint64
OAISubscription::getCreated() {
    return created;
}
void
OAISubscription::setCreated(qint64 created) {
    this->created = created;
    this->m_created_isSet = true;
}

qint64
OAISubscription::getCurrentPeriodEnd() {
    return current_period_end;
}
void
OAISubscription::setCurrentPeriodEnd(qint64 current_period_end) {
    this->current_period_end = current_period_end;
    this->m_current_period_end_isSet = true;
}

qint64
OAISubscription::getCurrentPeriodStart() {
    return current_period_start;
}
void
OAISubscription::setCurrentPeriodStart(qint64 current_period_start) {
    this->current_period_start = current_period_start;
    this->m_current_period_start_isSet = true;
}

QString*
OAISubscription::getCustomer() {
    return customer;
}
void
OAISubscription::setCustomer(QString* customer) {
    this->customer = customer;
    this->m_customer_isSet = true;
}

OAICustomer*
OAISubscription::getCustomerObject() {
    return customer_object;
}
void
OAISubscription::setCustomerObject(OAICustomer* customer_object) {
    this->customer_object = customer_object;
    this->m_customer_object_isSet = true;
}

qint32
OAISubscription::getDaysUntilDue() {
    return days_until_due;
}
void
OAISubscription::setDaysUntilDue(qint32 days_until_due) {
    this->days_until_due = days_until_due;
    this->m_days_until_due_isSet = true;
}

OAIDiscount*
OAISubscription::getDiscount() {
    return discount;
}
void
OAISubscription::setDiscount(OAIDiscount* discount) {
    this->discount = discount;
    this->m_discount_isSet = true;
}

qint64
OAISubscription::getEndedAt() {
    return ended_at;
}
void
OAISubscription::setEndedAt(qint64 ended_at) {
    this->ended_at = ended_at;
    this->m_ended_at_isSet = true;
}

QString*
OAISubscription::getId() {
    return id;
}
void
OAISubscription::setId(QString* id) {
    this->id = id;
    this->m_id_isSet = true;
}

QMap<QString, QString*>*
OAISubscription::getMetadata() {
    return metadata;
}
void
OAISubscription::setMetadata(QMap<QString, QString*>* metadata) {
    this->metadata = metadata;
    this->m_metadata_isSet = true;
}

QString*
OAISubscription::getObject() {
    return object;
}
void
OAISubscription::setObject(QString* object) {
    this->object = object;
    this->m_object_isSet = true;
}

OAIPlan*
OAISubscription::getPlan() {
    return plan;
}
void
OAISubscription::setPlan(OAIPlan* plan) {
    this->plan = plan;
    this->m_plan_isSet = true;
}

qint32
OAISubscription::getQuantity() {
    return quantity;
}
void
OAISubscription::setQuantity(qint32 quantity) {
    this->quantity = quantity;
    this->m_quantity_isSet = true;
}

qint64
OAISubscription::getStart() {
    return start;
}
void
OAISubscription::setStart(qint64 start) {
    this->start = start;
    this->m_start_isSet = true;
}

QString*
OAISubscription::getStatus() {
    return status;
}
void
OAISubscription::setStatus(QString* status) {
    this->status = status;
    this->m_status_isSet = true;
}

OAISubscriptionItemCollection*
OAISubscription::getSubscriptionItems() {
    return subscription_items;
}
void
OAISubscription::setSubscriptionItems(OAISubscriptionItemCollection* subscription_items) {
    this->subscription_items = subscription_items;
    this->m_subscription_items_isSet = true;
}

double
OAISubscription::getTaxPercent() {
    return tax_percent;
}
void
OAISubscription::setTaxPercent(double tax_percent) {
    this->tax_percent = tax_percent;
    this->m_tax_percent_isSet = true;
}

qint64
OAISubscription::getTrialEnd() {
    return trial_end;
}
void
OAISubscription::setTrialEnd(qint64 trial_end) {
    this->trial_end = trial_end;
    this->m_trial_end_isSet = true;
}

qint64
OAISubscription::getTrialStart() {
    return trial_start;
}
void
OAISubscription::setTrialStart(qint64 trial_start) {
    this->trial_start = trial_start;
    this->m_trial_start_isSet = true;
}


bool
OAISubscription::isSet(){
    bool isObjectUpdated = false;
    do{
        if(m_application_fee_percent_isSet){ isObjectUpdated = true; break;}
        if(billing != nullptr && *billing != QString("")){ isObjectUpdated = true; break;}
        if(m_cancel_at_period_end_isSet){ isObjectUpdated = true; break;}
        if(m_canceled_at_isSet){ isObjectUpdated = true; break;}
        if(m_created_isSet){ isObjectUpdated = true; break;}
        if(m_current_period_end_isSet){ isObjectUpdated = true; break;}
        if(m_current_period_start_isSet){ isObjectUpdated = true; break;}
        if(customer != nullptr && *customer != QString("")){ isObjectUpdated = true; break;}
        if(customer_object != nullptr && customer_object->isSet()){ isObjectUpdated = true; break;}
        if(m_days_until_due_isSet){ isObjectUpdated = true; break;}
        if(discount != nullptr && discount->isSet()){ isObjectUpdated = true; break;}
        if(m_ended_at_isSet){ isObjectUpdated = true; break;}
        if(id != nullptr && *id != QString("")){ isObjectUpdated = true; break;}
        if(metadata->size() > 0){ isObjectUpdated = true; break;}
        if(object != nullptr && *object != QString("")){ isObjectUpdated = true; break;}
        if(plan != nullptr && plan->isSet()){ isObjectUpdated = true; break;}
        if(m_quantity_isSet){ isObjectUpdated = true; break;}
        if(m_start_isSet){ isObjectUpdated = true; break;}
        if(status != nullptr && *status != QString("")){ isObjectUpdated = true; break;}
        if(subscription_items != nullptr && subscription_items->isSet()){ isObjectUpdated = true; break;}
        if(m_tax_percent_isSet){ isObjectUpdated = true; break;}
        if(m_trial_end_isSet){ isObjectUpdated = true; break;}
        if(m_trial_start_isSet){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

