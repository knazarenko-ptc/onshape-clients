/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * OpenAPI spec version: 1.111
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIBTWorkflowableTestObjectInfo.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIBTWorkflowableTestObjectInfo::OAIBTWorkflowableTestObjectInfo(QString json) {
    init();
    this->fromJson(json);
}

OAIBTWorkflowableTestObjectInfo::OAIBTWorkflowableTestObjectInfo() {
    init();
}

OAIBTWorkflowableTestObjectInfo::~OAIBTWorkflowableTestObjectInfo() {
    this->cleanup();
}

void
OAIBTWorkflowableTestObjectInfo::init() {
    company_id = new QString("");
    m_company_id_isSet = false;
    description = new QString("");
    m_description_isSet = false;
    description_as_property = new QString("");
    m_description_as_property_isSet = false;
    document_id = new QString("");
    m_document_id_isSet = false;
    href = new QString("");
    m_href_isSet = false;
    id = new QString("");
    m_id_isSet = false;
    info = new QMap<QString, QString*>();
    m_info_isSet = false;
    is_obsoletion = false;
    m_is_obsoletion_isSet = false;
    name = new QString("");
    m_name_isSet = false;
    name_as_property = new QString("");
    m_name_as_property_isSet = false;
    properties = new QList<OAIBTWorkflowPropertyInfo*>();
    m_properties_isSet = false;
    view_ref = new QString("");
    m_view_ref_isSet = false;
    workflow = new OAIBTWorkflowSnapshotInfo();
    m_workflow_isSet = false;
    workflow_id = new OAIBTPublishedWorkflowId();
    m_workflow_id_isSet = false;
}

void
OAIBTWorkflowableTestObjectInfo::cleanup() {
    if(company_id != nullptr) { 
        delete company_id;
    }
    if(description != nullptr) { 
        delete description;
    }
    if(description_as_property != nullptr) { 
        delete description_as_property;
    }
    if(document_id != nullptr) { 
        delete document_id;
    }
    if(href != nullptr) { 
        delete href;
    }
    if(id != nullptr) { 
        delete id;
    }
    if(info != nullptr) { 
        auto arr = info;
        for(auto o: *arr) { 
            delete o;
        }
        delete info;
    }

    if(name != nullptr) { 
        delete name;
    }
    if(name_as_property != nullptr) { 
        delete name_as_property;
    }
    if(properties != nullptr) { 
        auto arr = properties;
        for(auto o: *arr) { 
            delete o;
        }
        delete properties;
    }
    if(view_ref != nullptr) { 
        delete view_ref;
    }
    if(workflow != nullptr) { 
        delete workflow;
    }
    if(workflow_id != nullptr) { 
        delete workflow_id;
    }
}

OAIBTWorkflowableTestObjectInfo*
OAIBTWorkflowableTestObjectInfo::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIBTWorkflowableTestObjectInfo::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&company_id, pJson["companyId"], "QString", "QString");
    
    ::OpenAPI::setValue(&description, pJson["description"], "QString", "QString");
    
    ::OpenAPI::setValue(&description_as_property, pJson["descriptionAsProperty"], "QString", "QString");
    
    ::OpenAPI::setValue(&document_id, pJson["documentId"], "QString", "QString");
    
    ::OpenAPI::setValue(&href, pJson["href"], "QString", "QString");
    
    ::OpenAPI::setValue(&id, pJson["id"], "QString", "QString");
    
    
    ::OpenAPI::setValue(&info, pJson["info"], "QMap", "QString");
    ::OpenAPI::setValue(&is_obsoletion, pJson["isObsoletion"], "bool", "");
    
    ::OpenAPI::setValue(&name, pJson["name"], "QString", "QString");
    
    ::OpenAPI::setValue(&name_as_property, pJson["nameAsProperty"], "QString", "QString");
    
    
    ::OpenAPI::setValue(&properties, pJson["properties"], "QList", "OAIBTWorkflowPropertyInfo");
    ::OpenAPI::setValue(&view_ref, pJson["viewRef"], "QString", "QString");
    
    ::OpenAPI::setValue(&workflow, pJson["workflow"], "OAIBTWorkflowSnapshotInfo", "OAIBTWorkflowSnapshotInfo");
    
    ::OpenAPI::setValue(&workflow_id, pJson["workflowId"], "OAIBTPublishedWorkflowId", "OAIBTPublishedWorkflowId");
    
}

QString
OAIBTWorkflowableTestObjectInfo::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIBTWorkflowableTestObjectInfo::asJsonObject() {
    QJsonObject obj;
    if(company_id != nullptr && *company_id != QString("")){
        toJsonValue(QString("companyId"), company_id, obj, QString("QString"));
    }
    if(description != nullptr && *description != QString("")){
        toJsonValue(QString("description"), description, obj, QString("QString"));
    }
    if(description_as_property != nullptr && *description_as_property != QString("")){
        toJsonValue(QString("descriptionAsProperty"), description_as_property, obj, QString("QString"));
    }
    if(document_id != nullptr && *document_id != QString("")){
        toJsonValue(QString("documentId"), document_id, obj, QString("QString"));
    }
    if(href != nullptr && *href != QString("")){
        toJsonValue(QString("href"), href, obj, QString("QString"));
    }
    if(id != nullptr && *id != QString("")){
        toJsonValue(QString("id"), id, obj, QString("QString"));
    }
    if(info->size() > 0){
        toJsonMap((QMap<QString, void*>*) info, obj, "info", "QString");
    }
    if(m_is_obsoletion_isSet){
        obj.insert("isObsoletion", QJsonValue(is_obsoletion));
    }
    if(name != nullptr && *name != QString("")){
        toJsonValue(QString("name"), name, obj, QString("QString"));
    }
    if(name_as_property != nullptr && *name_as_property != QString("")){
        toJsonValue(QString("nameAsProperty"), name_as_property, obj, QString("QString"));
    }
    if(properties->size() > 0){
        toJsonArray((QList<void*>*)properties, obj, "properties", "OAIBTWorkflowPropertyInfo");
    }
    if(view_ref != nullptr && *view_ref != QString("")){
        toJsonValue(QString("viewRef"), view_ref, obj, QString("QString"));
    }
    if((workflow != nullptr) && (workflow->isSet())){
        toJsonValue(QString("workflow"), workflow, obj, QString("OAIBTWorkflowSnapshotInfo"));
    }
    if((workflow_id != nullptr) && (workflow_id->isSet())){
        toJsonValue(QString("workflowId"), workflow_id, obj, QString("OAIBTPublishedWorkflowId"));
    }

    return obj;
}

QString*
OAIBTWorkflowableTestObjectInfo::getCompanyId() {
    return company_id;
}
void
OAIBTWorkflowableTestObjectInfo::setCompanyId(QString* company_id) {
    this->company_id = company_id;
    this->m_company_id_isSet = true;
}

QString*
OAIBTWorkflowableTestObjectInfo::getDescription() {
    return description;
}
void
OAIBTWorkflowableTestObjectInfo::setDescription(QString* description) {
    this->description = description;
    this->m_description_isSet = true;
}

QString*
OAIBTWorkflowableTestObjectInfo::getDescriptionAsProperty() {
    return description_as_property;
}
void
OAIBTWorkflowableTestObjectInfo::setDescriptionAsProperty(QString* description_as_property) {
    this->description_as_property = description_as_property;
    this->m_description_as_property_isSet = true;
}

QString*
OAIBTWorkflowableTestObjectInfo::getDocumentId() {
    return document_id;
}
void
OAIBTWorkflowableTestObjectInfo::setDocumentId(QString* document_id) {
    this->document_id = document_id;
    this->m_document_id_isSet = true;
}

QString*
OAIBTWorkflowableTestObjectInfo::getHref() {
    return href;
}
void
OAIBTWorkflowableTestObjectInfo::setHref(QString* href) {
    this->href = href;
    this->m_href_isSet = true;
}

QString*
OAIBTWorkflowableTestObjectInfo::getId() {
    return id;
}
void
OAIBTWorkflowableTestObjectInfo::setId(QString* id) {
    this->id = id;
    this->m_id_isSet = true;
}

QMap<QString, QString*>*
OAIBTWorkflowableTestObjectInfo::getInfo() {
    return info;
}
void
OAIBTWorkflowableTestObjectInfo::setInfo(QMap<QString, QString*>* info) {
    this->info = info;
    this->m_info_isSet = true;
}

bool
OAIBTWorkflowableTestObjectInfo::isIsObsoletion() {
    return is_obsoletion;
}
void
OAIBTWorkflowableTestObjectInfo::setIsObsoletion(bool is_obsoletion) {
    this->is_obsoletion = is_obsoletion;
    this->m_is_obsoletion_isSet = true;
}

QString*
OAIBTWorkflowableTestObjectInfo::getName() {
    return name;
}
void
OAIBTWorkflowableTestObjectInfo::setName(QString* name) {
    this->name = name;
    this->m_name_isSet = true;
}

QString*
OAIBTWorkflowableTestObjectInfo::getNameAsProperty() {
    return name_as_property;
}
void
OAIBTWorkflowableTestObjectInfo::setNameAsProperty(QString* name_as_property) {
    this->name_as_property = name_as_property;
    this->m_name_as_property_isSet = true;
}

QList<OAIBTWorkflowPropertyInfo*>*
OAIBTWorkflowableTestObjectInfo::getProperties() {
    return properties;
}
void
OAIBTWorkflowableTestObjectInfo::setProperties(QList<OAIBTWorkflowPropertyInfo*>* properties) {
    this->properties = properties;
    this->m_properties_isSet = true;
}

QString*
OAIBTWorkflowableTestObjectInfo::getViewRef() {
    return view_ref;
}
void
OAIBTWorkflowableTestObjectInfo::setViewRef(QString* view_ref) {
    this->view_ref = view_ref;
    this->m_view_ref_isSet = true;
}

OAIBTWorkflowSnapshotInfo*
OAIBTWorkflowableTestObjectInfo::getWorkflow() {
    return workflow;
}
void
OAIBTWorkflowableTestObjectInfo::setWorkflow(OAIBTWorkflowSnapshotInfo* workflow) {
    this->workflow = workflow;
    this->m_workflow_isSet = true;
}

OAIBTPublishedWorkflowId*
OAIBTWorkflowableTestObjectInfo::getWorkflowId() {
    return workflow_id;
}
void
OAIBTWorkflowableTestObjectInfo::setWorkflowId(OAIBTPublishedWorkflowId* workflow_id) {
    this->workflow_id = workflow_id;
    this->m_workflow_id_isSet = true;
}


bool
OAIBTWorkflowableTestObjectInfo::isSet(){
    bool isObjectUpdated = false;
    do{
        if(company_id != nullptr && *company_id != QString("")){ isObjectUpdated = true; break;}
        if(description != nullptr && *description != QString("")){ isObjectUpdated = true; break;}
        if(description_as_property != nullptr && *description_as_property != QString("")){ isObjectUpdated = true; break;}
        if(document_id != nullptr && *document_id != QString("")){ isObjectUpdated = true; break;}
        if(href != nullptr && *href != QString("")){ isObjectUpdated = true; break;}
        if(id != nullptr && *id != QString("")){ isObjectUpdated = true; break;}
        if(info->size() > 0){ isObjectUpdated = true; break;}
        if(m_is_obsoletion_isSet){ isObjectUpdated = true; break;}
        if(name != nullptr && *name != QString("")){ isObjectUpdated = true; break;}
        if(name_as_property != nullptr && *name_as_property != QString("")){ isObjectUpdated = true; break;}
        if(properties->size() > 0){ isObjectUpdated = true; break;}
        if(view_ref != nullptr && *view_ref != QString("")){ isObjectUpdated = true; break;}
        if(workflow != nullptr && workflow->isSet()){ isObjectUpdated = true; break;}
        if(workflow_id != nullptr && workflow_id->isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

