/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * OpenAPI spec version: 1.111
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPartStudiosApi.h"
#include "OAIHelpers.h"
#include "OAIModelFactory.h"
#include "OAIQObjectWrapper.h"

#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAIPartStudiosApi::OAIPartStudiosApi() {}

OAIPartStudiosApi::~OAIPartStudiosApi() {}

OAIPartStudiosApi::OAIPartStudiosApi(QString host, QString basePath) {
    this->host = host;
    this->basePath = basePath;
}

void
OAIPartStudiosApi::addPartStudioFeature(QString* did, QString* wvm, QString* wvmid, QString* eid, OAIBTFeatureDefinitionCall-1406& oaibt_feature_definition_call_1406) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/api/partstudios/d/{did}/{wvm}/{wvmid}/e/{eid}/features");

    QString didPathParam("{"); didPathParam.append("did").append("}");
    fullPath.replace(didPathParam, stringValue(did));
    QString wvmPathParam("{"); wvmPathParam.append("wvm").append("}");
    fullPath.replace(wvmPathParam, stringValue(wvm));
    QString wvmidPathParam("{"); wvmidPathParam.append("wvmid").append("}");
    fullPath.replace(wvmidPathParam, stringValue(wvmid));
    QString eidPathParam("{"); eidPathParam.append("eid").append("}");
    fullPath.replace(eidPathParam, stringValue(eid));


    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "POST");


    
    QString output = oaibt_feature_definition_call_1406.asJson();
    input.request_body.append(output);
    


    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIPartStudiosApi::addPartStudioFeatureCallback);

    worker->execute(&input);
}

void
OAIPartStudiosApi::addPartStudioFeatureCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QString json(worker->response);
    OAIBTFeatureDefinitionResponse-1617* output = static_cast<OAIBTFeatureDefinitionResponse-1617*>(create(json, QString("OAIBTFeatureDefinitionResponse-1617")));
    auto wrapper = new OAIQObjectWrapper<OAIBTFeatureDefinitionResponse-1617*> (output);
    wrapper->deleteLater();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit addPartStudioFeatureSignal(output);
    } else {
        emit addPartStudioFeatureSignalE(output, error_type, error_str);
        emit addPartStudioFeatureSignalEFull(worker, error_type, error_str);
    }
}

void
OAIPartStudiosApi::comparePartStudios(QString* did, QString* wvm, QString* wvmid, QString* eid, QString* workspace_id, QString* version_id, QString* microversion_id, QString* source_configuration, QString* target_configuration, QString* link_document_id) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/api/partstudios/d/{did}/{wvm}/{wvmid}/e/{eid}/compare");

    QString didPathParam("{"); didPathParam.append("did").append("}");
    fullPath.replace(didPathParam, stringValue(did));
    QString wvmPathParam("{"); wvmPathParam.append("wvm").append("}");
    fullPath.replace(wvmPathParam, stringValue(wvm));
    QString wvmidPathParam("{"); wvmidPathParam.append("wvmid").append("}");
    fullPath.replace(wvmidPathParam, stringValue(wvmid));
    QString eidPathParam("{"); eidPathParam.append("eid").append("}");
    fullPath.replace(eidPathParam, stringValue(eid));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("workspaceId"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(workspace_id)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("versionId"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(version_id)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("microversionId"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(microversion_id)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("sourceConfiguration"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(source_configuration)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("targetConfiguration"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(target_configuration)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("linkDocumentId"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(link_document_id)));


    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIPartStudiosApi::comparePartStudiosCallback);

    worker->execute(&input);
}

void
OAIPartStudiosApi::comparePartStudiosCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QString json(worker->response);
    OAIBTRootDiffInfo* output = static_cast<OAIBTRootDiffInfo*>(create(json, QString("OAIBTRootDiffInfo")));
    auto wrapper = new OAIQObjectWrapper<OAIBTRootDiffInfo*> (output);
    wrapper->deleteLater();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit comparePartStudiosSignal(output);
    } else {
        emit comparePartStudiosSignalE(output, error_type, error_str);
        emit comparePartStudiosSignalEFull(worker, error_type, error_str);
    }
}

void
OAIPartStudiosApi::createPartStudio(QString* did, QString* wid, OAIBTModelElementParams& oaibt_model_element_params) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/api/partstudios/d/{did}/w/{wid}");

    QString didPathParam("{"); didPathParam.append("did").append("}");
    fullPath.replace(didPathParam, stringValue(did));
    QString widPathParam("{"); widPathParam.append("wid").append("}");
    fullPath.replace(widPathParam, stringValue(wid));


    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "POST");


    
    QString output = oaibt_model_element_params.asJson();
    input.request_body.append(output);
    


    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIPartStudiosApi::createPartStudioCallback);

    worker->execute(&input);
}

void
OAIPartStudiosApi::createPartStudioCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QString json(worker->response);
    OAIBTDocumentElementInfo* output = static_cast<OAIBTDocumentElementInfo*>(create(json, QString("OAIBTDocumentElementInfo")));
    auto wrapper = new OAIQObjectWrapper<OAIBTDocumentElementInfo*> (output);
    wrapper->deleteLater();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit createPartStudioSignal(output);
    } else {
        emit createPartStudioSignalE(output, error_type, error_str);
        emit createPartStudioSignalEFull(worker, error_type, error_str);
    }
}

void
OAIPartStudiosApi::createPartStudioTranslation(QString* did, QString* wv, QString* wvid, QString* eid, OAIBTTranslateFormatParams& oaibt_translate_format_params) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/api/partstudios/d/{did}/{wv}/{wvid}/e/{eid}/translations");

    QString didPathParam("{"); didPathParam.append("did").append("}");
    fullPath.replace(didPathParam, stringValue(did));
    QString wvPathParam("{"); wvPathParam.append("wv").append("}");
    fullPath.replace(wvPathParam, stringValue(wv));
    QString wvidPathParam("{"); wvidPathParam.append("wvid").append("}");
    fullPath.replace(wvidPathParam, stringValue(wvid));
    QString eidPathParam("{"); eidPathParam.append("eid").append("}");
    fullPath.replace(eidPathParam, stringValue(eid));


    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "POST");


    
    QString output = oaibt_translate_format_params.asJson();
    input.request_body.append(output);
    


    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIPartStudiosApi::createPartStudioTranslationCallback);

    worker->execute(&input);
}

void
OAIPartStudiosApi::createPartStudioTranslationCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QString json(worker->response);
    OAIBTTranslationRequestInfo* output = static_cast<OAIBTTranslationRequestInfo*>(create(json, QString("OAIBTTranslationRequestInfo")));
    auto wrapper = new OAIQObjectWrapper<OAIBTTranslationRequestInfo*> (output);
    wrapper->deleteLater();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit createPartStudioTranslationSignal(output);
    } else {
        emit createPartStudioTranslationSignalE(output, error_type, error_str);
        emit createPartStudioTranslationSignalEFull(worker, error_type, error_str);
    }
}

void
OAIPartStudiosApi::deletePartStudioFeature(QString* did, QString* wid, QString* eid, QString* fid) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/api/partstudios/d/{did}/w/{wid}/e/{eid}/features/featureid/{fid}");

    QString didPathParam("{"); didPathParam.append("did").append("}");
    fullPath.replace(didPathParam, stringValue(did));
    QString widPathParam("{"); widPathParam.append("wid").append("}");
    fullPath.replace(widPathParam, stringValue(wid));
    QString eidPathParam("{"); eidPathParam.append("eid").append("}");
    fullPath.replace(eidPathParam, stringValue(eid));
    QString fidPathParam("{"); fidPathParam.append("fid").append("}");
    fullPath.replace(fidPathParam, stringValue(fid));


    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "DELETE");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIPartStudiosApi::deletePartStudioFeatureCallback);

    worker->execute(&input);
}

void
OAIPartStudiosApi::deletePartStudioFeatureCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QString json(worker->response);
    OAIBTFeatureApiBase-1430* output = static_cast<OAIBTFeatureApiBase-1430*>(create(json, QString("OAIBTFeatureApiBase-1430")));
    auto wrapper = new OAIQObjectWrapper<OAIBTFeatureApiBase-1430*> (output);
    wrapper->deleteLater();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit deletePartStudioFeatureSignal(output);
    } else {
        emit deletePartStudioFeatureSignalE(output, error_type, error_str);
        emit deletePartStudioFeatureSignalEFull(worker, error_type, error_str);
    }
}

void
OAIPartStudiosApi::evalFeatureScript(QString* did, QString* wvm, QString* wvmid, QString* eid, QString* configuration, OAIBTFeatureScriptEvalCall-2377& oaibt_feature_script_eval_call_2377) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/api/partstudios/d/{did}/{wvm}/{wvmid}/e/{eid}/featurescript");

    QString didPathParam("{"); didPathParam.append("did").append("}");
    fullPath.replace(didPathParam, stringValue(did));
    QString wvmPathParam("{"); wvmPathParam.append("wvm").append("}");
    fullPath.replace(wvmPathParam, stringValue(wvm));
    QString wvmidPathParam("{"); wvmidPathParam.append("wvmid").append("}");
    fullPath.replace(wvmidPathParam, stringValue(wvmid));
    QString eidPathParam("{"); eidPathParam.append("eid").append("}");
    fullPath.replace(eidPathParam, stringValue(eid));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("configuration"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(configuration)));


    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "POST");


    
    QString output = oaibt_feature_script_eval_call_2377.asJson();
    input.request_body.append(output);
    


    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIPartStudiosApi::evalFeatureScriptCallback);

    worker->execute(&input);
}

void
OAIPartStudiosApi::evalFeatureScriptCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QString json(worker->response);
    OAIBTFeatureScriptEvalResponse-1859* output = static_cast<OAIBTFeatureScriptEvalResponse-1859*>(create(json, QString("OAIBTFeatureScriptEvalResponse-1859")));
    auto wrapper = new OAIQObjectWrapper<OAIBTFeatureScriptEvalResponse-1859*> (output);
    wrapper->deleteLater();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit evalFeatureScriptSignal(output);
    } else {
        emit evalFeatureScriptSignalE(output, error_type, error_str);
        emit evalFeatureScriptSignalEFull(worker, error_type, error_str);
    }
}

void
OAIPartStudiosApi::exportPS1(QString* did, QString* wvm, QString* wvmid, QString* eid, QString* part_ids, QString* version, bool include_export_ids, QString* configuration, QString* link_document_id) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/api/partstudios/d/{did}/{wvm}/{wvmid}/e/{eid}/parasolid");

    QString didPathParam("{"); didPathParam.append("did").append("}");
    fullPath.replace(didPathParam, stringValue(did));
    QString wvmPathParam("{"); wvmPathParam.append("wvm").append("}");
    fullPath.replace(wvmPathParam, stringValue(wvm));
    QString wvmidPathParam("{"); wvmidPathParam.append("wvmid").append("}");
    fullPath.replace(wvmidPathParam, stringValue(wvmid));
    QString eidPathParam("{"); eidPathParam.append("eid").append("}");
    fullPath.replace(eidPathParam, stringValue(eid));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("partIds"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(part_ids)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("version"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(version)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("includeExportIds"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(include_export_ids)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("configuration"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(configuration)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("linkDocumentId"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(link_document_id)));


    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIPartStudiosApi::exportPS1Callback);

    worker->execute(&input);
}

void
OAIPartStudiosApi::exportPS1Callback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit exportPS1Signal();
    } else {
        emit exportPS1SignalE(error_type, error_str);
        emit exportPS1SignalEFull(worker, error_type, error_str);
    }
}

void
OAIPartStudiosApi::exportStl1(QString* did, QString* wvm, QString* wvmid, QString* eid, QString* part_ids, QString* mode, bool grouping, double scale, QString* units, double angle_tolerance, double chord_tolerance, double max_facet_width, double min_facet_width, QString* configuration, QString* link_document_id) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/api/partstudios/d/{did}/{wvm}/{wvmid}/e/{eid}/stl");

    QString didPathParam("{"); didPathParam.append("did").append("}");
    fullPath.replace(didPathParam, stringValue(did));
    QString wvmPathParam("{"); wvmPathParam.append("wvm").append("}");
    fullPath.replace(wvmPathParam, stringValue(wvm));
    QString wvmidPathParam("{"); wvmidPathParam.append("wvmid").append("}");
    fullPath.replace(wvmidPathParam, stringValue(wvmid));
    QString eidPathParam("{"); eidPathParam.append("eid").append("}");
    fullPath.replace(eidPathParam, stringValue(eid));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("partIds"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(part_ids)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("mode"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(mode)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("grouping"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(grouping)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("scale"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(scale)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("units"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(units)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("angleTolerance"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(angle_tolerance)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("chordTolerance"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(chord_tolerance)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("maxFacetWidth"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(max_facet_width)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("minFacetWidth"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(min_facet_width)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("configuration"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(configuration)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("linkDocumentId"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(link_document_id)));


    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIPartStudiosApi::exportStl1Callback);

    worker->execute(&input);
}

void
OAIPartStudiosApi::exportStl1Callback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit exportStl1Signal();
    } else {
        emit exportStl1SignalE(error_type, error_str);
        emit exportStl1SignalEFull(worker, error_type, error_str);
    }
}

void
OAIPartStudiosApi::getPartStudioBodyDetails(QString* did, QString* wvm, QString* wvmid, QString* eid, QString* configuration, QString* link_document_id, qint32 rollback_bar_index, QString*& body) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/api/partstudios/d/{did}/{wvm}/{wvmid}/e/{eid}/bodydetails");

    QString didPathParam("{"); didPathParam.append("did").append("}");
    fullPath.replace(didPathParam, stringValue(did));
    QString wvmPathParam("{"); wvmPathParam.append("wvm").append("}");
    fullPath.replace(wvmPathParam, stringValue(wvm));
    QString wvmidPathParam("{"); wvmidPathParam.append("wvmid").append("}");
    fullPath.replace(wvmidPathParam, stringValue(wvmid));
    QString eidPathParam("{"); eidPathParam.append("eid").append("}");
    fullPath.replace(eidPathParam, stringValue(eid));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("configuration"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(configuration)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("linkDocumentId"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(link_document_id)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("rollbackBarIndex"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(rollback_bar_index)));


    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");


    
    QString output(*body);
    input.request_body.append(output);
    


    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIPartStudiosApi::getPartStudioBodyDetailsCallback);

    worker->execute(&input);
}

void
OAIPartStudiosApi::getPartStudioBodyDetailsCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QString json(worker->response);
    OAIBTExportModelBodiesResponse-734* output = static_cast<OAIBTExportModelBodiesResponse-734*>(create(json, QString("OAIBTExportModelBodiesResponse-734")));
    auto wrapper = new OAIQObjectWrapper<OAIBTExportModelBodiesResponse-734*> (output);
    wrapper->deleteLater();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit getPartStudioBodyDetailsSignal(output);
    } else {
        emit getPartStudioBodyDetailsSignalE(output, error_type, error_str);
        emit getPartStudioBodyDetailsSignalEFull(worker, error_type, error_str);
    }
}

void
OAIPartStudiosApi::getPartStudioBoundingBoxes(QString* did, QString* wvm, QString* wvmid, QString* eid, bool include_hidden, bool include_wire_bodies, QString* configuration, QString* link_document_id) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/api/partstudios/d/{did}/{wvm}/{wvmid}/e/{eid}/boundingboxes");

    QString didPathParam("{"); didPathParam.append("did").append("}");
    fullPath.replace(didPathParam, stringValue(did));
    QString wvmPathParam("{"); wvmPathParam.append("wvm").append("}");
    fullPath.replace(wvmPathParam, stringValue(wvm));
    QString wvmidPathParam("{"); wvmidPathParam.append("wvmid").append("}");
    fullPath.replace(wvmidPathParam, stringValue(wvmid));
    QString eidPathParam("{"); eidPathParam.append("eid").append("}");
    fullPath.replace(eidPathParam, stringValue(eid));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("includeHidden"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(include_hidden)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("includeWireBodies"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(include_wire_bodies)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("configuration"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(configuration)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("linkDocumentId"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(link_document_id)));


    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIPartStudiosApi::getPartStudioBoundingBoxesCallback);

    worker->execute(&input);
}

void
OAIPartStudiosApi::getPartStudioBoundingBoxesCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QString json(worker->response);
    OAIBTBoundingBoxInfo* output = static_cast<OAIBTBoundingBoxInfo*>(create(json, QString("OAIBTBoundingBoxInfo")));
    auto wrapper = new OAIQObjectWrapper<OAIBTBoundingBoxInfo*> (output);
    wrapper->deleteLater();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit getPartStudioBoundingBoxesSignal(output);
    } else {
        emit getPartStudioBoundingBoxesSignalE(output, error_type, error_str);
        emit getPartStudioBoundingBoxesSignalEFull(worker, error_type, error_str);
    }
}

void
OAIPartStudiosApi::getPartStudioConfiguration(QString* did, QString* wvm, QString* wvmid, QString* eid) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/api/partstudios/d/{did}/{wvm}/{wvmid}/e/{eid}/configuration");

    QString didPathParam("{"); didPathParam.append("did").append("}");
    fullPath.replace(didPathParam, stringValue(did));
    QString wvmPathParam("{"); wvmPathParam.append("wvm").append("}");
    fullPath.replace(wvmPathParam, stringValue(wvm));
    QString wvmidPathParam("{"); wvmidPathParam.append("wvmid").append("}");
    fullPath.replace(wvmidPathParam, stringValue(wvmid));
    QString eidPathParam("{"); eidPathParam.append("eid").append("}");
    fullPath.replace(eidPathParam, stringValue(eid));


    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIPartStudiosApi::getPartStudioConfigurationCallback);

    worker->execute(&input);
}

void
OAIPartStudiosApi::getPartStudioConfigurationCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit getPartStudioConfigurationSignal();
    } else {
        emit getPartStudioConfigurationSignalE(error_type, error_str);
        emit getPartStudioConfigurationSignalEFull(worker, error_type, error_str);
    }
}

void
OAIPartStudiosApi::getPartStudioFeatureSpecs(QString* did, QString* wvm, QString* wvmid, QString* eid) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/api/partstudios/d/{did}/{wvm}/{wvmid}/e/{eid}/featurespecs");

    QString didPathParam("{"); didPathParam.append("did").append("}");
    fullPath.replace(didPathParam, stringValue(did));
    QString wvmPathParam("{"); wvmPathParam.append("wvm").append("}");
    fullPath.replace(wvmPathParam, stringValue(wvm));
    QString wvmidPathParam("{"); wvmidPathParam.append("wvmid").append("}");
    fullPath.replace(wvmidPathParam, stringValue(wvmid));
    QString eidPathParam("{"); eidPathParam.append("eid").append("}");
    fullPath.replace(eidPathParam, stringValue(eid));


    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIPartStudiosApi::getPartStudioFeatureSpecsCallback);

    worker->execute(&input);
}

void
OAIPartStudiosApi::getPartStudioFeatureSpecsCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QString json(worker->response);
    OAIBTFeatureSpecsResponse-664* output = static_cast<OAIBTFeatureSpecsResponse-664*>(create(json, QString("OAIBTFeatureSpecsResponse-664")));
    auto wrapper = new OAIQObjectWrapper<OAIBTFeatureSpecsResponse-664*> (output);
    wrapper->deleteLater();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit getPartStudioFeatureSpecsSignal(output);
    } else {
        emit getPartStudioFeatureSpecsSignalE(output, error_type, error_str);
        emit getPartStudioFeatureSpecsSignalEFull(worker, error_type, error_str);
    }
}

void
OAIPartStudiosApi::getPartStudioFeatures(QString* did, QString* wvm, QString* wvmid, QString* eid, QList<QString*>* feature_id, QString* link_document_id, bool no_sketch_geometry) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/api/partstudios/d/{did}/{wvm}/{wvmid}/e/{eid}/features");

    QString didPathParam("{"); didPathParam.append("did").append("}");
    fullPath.replace(didPathParam, stringValue(did));
    QString wvmPathParam("{"); wvmPathParam.append("wvm").append("}");
    fullPath.replace(wvmPathParam, stringValue(wvm));
    QString wvmidPathParam("{"); wvmidPathParam.append("wvmid").append("}");
    fullPath.replace(wvmidPathParam, stringValue(wvmid));
    QString eidPathParam("{"); eidPathParam.append("eid").append("}");
    fullPath.replace(eidPathParam, stringValue(eid));



    if (feature_id->size() > 0) {
      if (QString("multi").indexOf("multi") == 0) {
        foreach(QString* t, *feature_id) {
          if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
          else
            fullPath.append("?");
          fullPath.append("featureId=").append(stringValue(t));
        }
      }
      else if (QString("multi").indexOf("ssv") == 0) {
        if (fullPath.indexOf("?") > 0)
          fullPath.append("&");
        else
          fullPath.append("?");
        fullPath.append("featureId=");
        qint32 count = 0;
        foreach(QString* t, *feature_id) {
          if (count > 0) {
            fullPath.append(" ");
          }
          fullPath.append(stringValue(t));
        }
      }
      else if (QString("multi").indexOf("tsv") == 0) {
        if (fullPath.indexOf("?") > 0)
          fullPath.append("&");
        else
          fullPath.append("?");
        fullPath.append("featureId=");
        qint32 count = 0;
        foreach(QString* t, *feature_id) {
          if (count > 0) {
            fullPath.append("\t");
          }
          fullPath.append(stringValue(t));
        }
      }
    }

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("linkDocumentId"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(link_document_id)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("noSketchGeometry"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(no_sketch_geometry)));


    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIPartStudiosApi::getPartStudioFeaturesCallback);

    worker->execute(&input);
}

void
OAIPartStudiosApi::getPartStudioFeaturesCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QString json(worker->response);
    OAIBTFeatureListResponse-2457* output = static_cast<OAIBTFeatureListResponse-2457*>(create(json, QString("OAIBTFeatureListResponse-2457")));
    auto wrapper = new OAIQObjectWrapper<OAIBTFeatureListResponse-2457*> (output);
    wrapper->deleteLater();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit getPartStudioFeaturesSignal(output);
    } else {
        emit getPartStudioFeaturesSignalE(output, error_type, error_str);
        emit getPartStudioFeaturesSignalEFull(worker, error_type, error_str);
    }
}

void
OAIPartStudiosApi::getPartStudioMassProperties(QString* did, QString* wvm, QString* wvmid, QString* eid, QList<QString*>* part_id, bool mass_as_group, QString* configuration, QString* link_document_id) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/api/partstudios/d/{did}/{wvm}/{wvmid}/e/{eid}/massproperties");

    QString didPathParam("{"); didPathParam.append("did").append("}");
    fullPath.replace(didPathParam, stringValue(did));
    QString wvmPathParam("{"); wvmPathParam.append("wvm").append("}");
    fullPath.replace(wvmPathParam, stringValue(wvm));
    QString wvmidPathParam("{"); wvmidPathParam.append("wvmid").append("}");
    fullPath.replace(wvmidPathParam, stringValue(wvmid));
    QString eidPathParam("{"); eidPathParam.append("eid").append("}");
    fullPath.replace(eidPathParam, stringValue(eid));



    if (part_id->size() > 0) {
      if (QString("multi").indexOf("multi") == 0) {
        foreach(QString* t, *part_id) {
          if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
          else
            fullPath.append("?");
          fullPath.append("partId=").append(stringValue(t));
        }
      }
      else if (QString("multi").indexOf("ssv") == 0) {
        if (fullPath.indexOf("?") > 0)
          fullPath.append("&");
        else
          fullPath.append("?");
        fullPath.append("partId=");
        qint32 count = 0;
        foreach(QString* t, *part_id) {
          if (count > 0) {
            fullPath.append(" ");
          }
          fullPath.append(stringValue(t));
        }
      }
      else if (QString("multi").indexOf("tsv") == 0) {
        if (fullPath.indexOf("?") > 0)
          fullPath.append("&");
        else
          fullPath.append("?");
        fullPath.append("partId=");
        qint32 count = 0;
        foreach(QString* t, *part_id) {
          if (count > 0) {
            fullPath.append("\t");
          }
          fullPath.append(stringValue(t));
        }
      }
    }

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("massAsGroup"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(mass_as_group)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("configuration"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(configuration)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("linkDocumentId"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(link_document_id)));


    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIPartStudiosApi::getPartStudioMassPropertiesCallback);

    worker->execute(&input);
}

void
OAIPartStudiosApi::getPartStudioMassPropertiesCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QString json(worker->response);
    OAIBTMassPropertiesBulkInfo* output = static_cast<OAIBTMassPropertiesBulkInfo*>(create(json, QString("OAIBTMassPropertiesBulkInfo")));
    auto wrapper = new OAIQObjectWrapper<OAIBTMassPropertiesBulkInfo*> (output);
    wrapper->deleteLater();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit getPartStudioMassPropertiesSignal(output);
    } else {
        emit getPartStudioMassPropertiesSignalE(output, error_type, error_str);
        emit getPartStudioMassPropertiesSignalEFull(worker, error_type, error_str);
    }
}

void
OAIPartStudiosApi::getPartStudioNamedViews(QString* did, QString* eid, bool skip_perspective, bool include_section_cut_views, QString* link_document_id) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/api/partstudios/d/{did}/e/{eid}/namedViews");

    QString didPathParam("{"); didPathParam.append("did").append("}");
    fullPath.replace(didPathParam, stringValue(did));
    QString eidPathParam("{"); eidPathParam.append("eid").append("}");
    fullPath.replace(eidPathParam, stringValue(eid));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("skipPerspective"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(skip_perspective)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("includeSectionCutViews"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(include_section_cut_views)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("linkDocumentId"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(link_document_id)));


    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIPartStudiosApi::getPartStudioNamedViewsCallback);

    worker->execute(&input);
}

void
OAIPartStudiosApi::getPartStudioNamedViewsCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QString json(worker->response);
    OAIBTNamedViewsInfo* output = static_cast<OAIBTNamedViewsInfo*>(create(json, QString("OAIBTNamedViewsInfo")));
    auto wrapper = new OAIQObjectWrapper<OAIBTNamedViewsInfo*> (output);
    wrapper->deleteLater();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit getPartStudioNamedViewsSignal(output);
    } else {
        emit getPartStudioNamedViewsSignalE(output, error_type, error_str);
        emit getPartStudioNamedViewsSignalEFull(worker, error_type, error_str);
    }
}

void
OAIPartStudiosApi::getPartStudioShadedViews(QString* did, QString* wvm, QString* wvmid, QString* eid, QString* view_matrix, qint32 output_height, qint32 output_width, double pixel_size, QString* edges, bool show_all_parts, bool include_surfaces, bool use_anti_aliasing, QString* configuration, QString* link_document_id) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/api/partstudios/d/{did}/{wvm}/{wvmid}/e/{eid}/shadedviews");

    QString didPathParam("{"); didPathParam.append("did").append("}");
    fullPath.replace(didPathParam, stringValue(did));
    QString wvmPathParam("{"); wvmPathParam.append("wvm").append("}");
    fullPath.replace(wvmPathParam, stringValue(wvm));
    QString wvmidPathParam("{"); wvmidPathParam.append("wvmid").append("}");
    fullPath.replace(wvmidPathParam, stringValue(wvmid));
    QString eidPathParam("{"); eidPathParam.append("eid").append("}");
    fullPath.replace(eidPathParam, stringValue(eid));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("viewMatrix"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(view_matrix)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("outputHeight"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(output_height)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("outputWidth"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(output_width)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("pixelSize"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(pixel_size)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("edges"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(edges)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("showAllParts"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(show_all_parts)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("includeSurfaces"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(include_surfaces)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("useAntiAliasing"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(use_anti_aliasing)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("configuration"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(configuration)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("linkDocumentId"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(link_document_id)));


    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIPartStudiosApi::getPartStudioShadedViewsCallback);

    worker->execute(&input);
}

void
OAIPartStudiosApi::getPartStudioShadedViewsCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QString json(worker->response);
    OAIBTShadedViewsInfo* output = static_cast<OAIBTShadedViewsInfo*>(create(json, QString("OAIBTShadedViewsInfo")));
    auto wrapper = new OAIQObjectWrapper<OAIBTShadedViewsInfo*> (output);
    wrapper->deleteLater();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit getPartStudioShadedViewsSignal(output);
    } else {
        emit getPartStudioShadedViewsSignalE(output, error_type, error_str);
        emit getPartStudioShadedViewsSignalEFull(worker, error_type, error_str);
    }
}

void
OAIPartStudiosApi::getPartStudioTessellatedEdges(QString* did, QString* wvm, QString* wvmid, QString* eid, double angle_tolerance, double chord_tolerance, QList<QString*>* part_id, QList<QString*>* edge_id, QString* configuration, QString* link_document_id) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/api/partstudios/d/{did}/{wvm}/{wvmid}/e/{eid}/tessellatededges");

    QString didPathParam("{"); didPathParam.append("did").append("}");
    fullPath.replace(didPathParam, stringValue(did));
    QString wvmPathParam("{"); wvmPathParam.append("wvm").append("}");
    fullPath.replace(wvmPathParam, stringValue(wvm));
    QString wvmidPathParam("{"); wvmidPathParam.append("wvmid").append("}");
    fullPath.replace(wvmidPathParam, stringValue(wvmid));
    QString eidPathParam("{"); eidPathParam.append("eid").append("}");
    fullPath.replace(eidPathParam, stringValue(eid));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("angleTolerance"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(angle_tolerance)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("chordTolerance"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(chord_tolerance)));



    if (part_id->size() > 0) {
      if (QString("multi").indexOf("multi") == 0) {
        foreach(QString* t, *part_id) {
          if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
          else
            fullPath.append("?");
          fullPath.append("partId=").append(stringValue(t));
        }
      }
      else if (QString("multi").indexOf("ssv") == 0) {
        if (fullPath.indexOf("?") > 0)
          fullPath.append("&");
        else
          fullPath.append("?");
        fullPath.append("partId=");
        qint32 count = 0;
        foreach(QString* t, *part_id) {
          if (count > 0) {
            fullPath.append(" ");
          }
          fullPath.append(stringValue(t));
        }
      }
      else if (QString("multi").indexOf("tsv") == 0) {
        if (fullPath.indexOf("?") > 0)
          fullPath.append("&");
        else
          fullPath.append("?");
        fullPath.append("partId=");
        qint32 count = 0;
        foreach(QString* t, *part_id) {
          if (count > 0) {
            fullPath.append("\t");
          }
          fullPath.append(stringValue(t));
        }
      }
    }



    if (edge_id->size() > 0) {
      if (QString("multi").indexOf("multi") == 0) {
        foreach(QString* t, *edge_id) {
          if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
          else
            fullPath.append("?");
          fullPath.append("edgeId=").append(stringValue(t));
        }
      }
      else if (QString("multi").indexOf("ssv") == 0) {
        if (fullPath.indexOf("?") > 0)
          fullPath.append("&");
        else
          fullPath.append("?");
        fullPath.append("edgeId=");
        qint32 count = 0;
        foreach(QString* t, *edge_id) {
          if (count > 0) {
            fullPath.append(" ");
          }
          fullPath.append(stringValue(t));
        }
      }
      else if (QString("multi").indexOf("tsv") == 0) {
        if (fullPath.indexOf("?") > 0)
          fullPath.append("&");
        else
          fullPath.append("?");
        fullPath.append("edgeId=");
        qint32 count = 0;
        foreach(QString* t, *edge_id) {
          if (count > 0) {
            fullPath.append("\t");
          }
          fullPath.append(stringValue(t));
        }
      }
    }

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("configuration"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(configuration)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("linkDocumentId"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(link_document_id)));


    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIPartStudiosApi::getPartStudioTessellatedEdgesCallback);

    worker->execute(&input);
}

void
OAIPartStudiosApi::getPartStudioTessellatedEdgesCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QString json(worker->response);
    OAIBTExportTessellatedEdgesResponse-327* output = static_cast<OAIBTExportTessellatedEdgesResponse-327*>(create(json, QString("OAIBTExportTessellatedEdgesResponse-327")));
    auto wrapper = new OAIQObjectWrapper<OAIBTExportTessellatedEdgesResponse-327*> (output);
    wrapper->deleteLater();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit getPartStudioTessellatedEdgesSignal(output);
    } else {
        emit getPartStudioTessellatedEdgesSignalE(output, error_type, error_str);
        emit getPartStudioTessellatedEdgesSignalEFull(worker, error_type, error_str);
    }
}

void
OAIPartStudiosApi::getPartStudioTessellatedFaces(QString* did, QString* wvm, QString* wvmid, QString* eid, double angle_tolerance, double chord_tolerance, double max_facet_width, bool output_vertex_normals, bool output_facet_normals, bool output_texture_coordinates, bool output_face_appearances, bool output_index_table, QList<QString*>* part_id, QList<QString*>* face_id, bool output_error_faces, QString* configuration, QString* link_document_id, QString*& body) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/api/partstudios/d/{did}/{wvm}/{wvmid}/e/{eid}/tessellatedfaces");

    QString didPathParam("{"); didPathParam.append("did").append("}");
    fullPath.replace(didPathParam, stringValue(did));
    QString wvmPathParam("{"); wvmPathParam.append("wvm").append("}");
    fullPath.replace(wvmPathParam, stringValue(wvm));
    QString wvmidPathParam("{"); wvmidPathParam.append("wvmid").append("}");
    fullPath.replace(wvmidPathParam, stringValue(wvmid));
    QString eidPathParam("{"); eidPathParam.append("eid").append("}");
    fullPath.replace(eidPathParam, stringValue(eid));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("angleTolerance"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(angle_tolerance)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("chordTolerance"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(chord_tolerance)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("maxFacetWidth"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(max_facet_width)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("outputVertexNormals"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(output_vertex_normals)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("outputFacetNormals"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(output_facet_normals)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("outputTextureCoordinates"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(output_texture_coordinates)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("outputFaceAppearances"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(output_face_appearances)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("outputIndexTable"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(output_index_table)));



    if (part_id->size() > 0) {
      if (QString("multi").indexOf("multi") == 0) {
        foreach(QString* t, *part_id) {
          if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
          else
            fullPath.append("?");
          fullPath.append("partId=").append(stringValue(t));
        }
      }
      else if (QString("multi").indexOf("ssv") == 0) {
        if (fullPath.indexOf("?") > 0)
          fullPath.append("&");
        else
          fullPath.append("?");
        fullPath.append("partId=");
        qint32 count = 0;
        foreach(QString* t, *part_id) {
          if (count > 0) {
            fullPath.append(" ");
          }
          fullPath.append(stringValue(t));
        }
      }
      else if (QString("multi").indexOf("tsv") == 0) {
        if (fullPath.indexOf("?") > 0)
          fullPath.append("&");
        else
          fullPath.append("?");
        fullPath.append("partId=");
        qint32 count = 0;
        foreach(QString* t, *part_id) {
          if (count > 0) {
            fullPath.append("\t");
          }
          fullPath.append(stringValue(t));
        }
      }
    }



    if (face_id->size() > 0) {
      if (QString("multi").indexOf("multi") == 0) {
        foreach(QString* t, *face_id) {
          if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
          else
            fullPath.append("?");
          fullPath.append("faceId=").append(stringValue(t));
        }
      }
      else if (QString("multi").indexOf("ssv") == 0) {
        if (fullPath.indexOf("?") > 0)
          fullPath.append("&");
        else
          fullPath.append("?");
        fullPath.append("faceId=");
        qint32 count = 0;
        foreach(QString* t, *face_id) {
          if (count > 0) {
            fullPath.append(" ");
          }
          fullPath.append(stringValue(t));
        }
      }
      else if (QString("multi").indexOf("tsv") == 0) {
        if (fullPath.indexOf("?") > 0)
          fullPath.append("&");
        else
          fullPath.append("?");
        fullPath.append("faceId=");
        qint32 count = 0;
        foreach(QString* t, *face_id) {
          if (count > 0) {
            fullPath.append("\t");
          }
          fullPath.append(stringValue(t));
        }
      }
    }

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("outputErrorFaces"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(output_error_faces)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("configuration"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(configuration)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("linkDocumentId"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(link_document_id)));


    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");


    
    QString output(*body);
    input.request_body.append(output);
    


    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIPartStudiosApi::getPartStudioTessellatedFacesCallback);

    worker->execute(&input);
}

void
OAIPartStudiosApi::getPartStudioTessellatedFacesCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QString json(worker->response);
    OAIBTExportTessellatedFacesResponse-898* output = static_cast<OAIBTExportTessellatedFacesResponse-898*>(create(json, QString("OAIBTExportTessellatedFacesResponse-898")));
    auto wrapper = new OAIQObjectWrapper<OAIBTExportTessellatedFacesResponse-898*> (output);
    wrapper->deleteLater();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit getPartStudioTessellatedFacesSignal(output);
    } else {
        emit getPartStudioTessellatedFacesSignalE(output, error_type, error_str);
        emit getPartStudioTessellatedFacesSignalEFull(worker, error_type, error_str);
    }
}

void
OAIPartStudiosApi::translateIds(QString* did, QString* wvm, QString* wvmid, QString* eid, OAIBTIdTranslationParams& oaibt_id_translation_params) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/api/partstudios/d/{did}/{wvm}/{wvmid}/e/{eid}/idtranslations");

    QString didPathParam("{"); didPathParam.append("did").append("}");
    fullPath.replace(didPathParam, stringValue(did));
    QString wvmPathParam("{"); wvmPathParam.append("wvm").append("}");
    fullPath.replace(wvmPathParam, stringValue(wvm));
    QString wvmidPathParam("{"); wvmidPathParam.append("wvmid").append("}");
    fullPath.replace(wvmidPathParam, stringValue(wvmid));
    QString eidPathParam("{"); eidPathParam.append("eid").append("}");
    fullPath.replace(eidPathParam, stringValue(eid));


    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "POST");


    
    QString output = oaibt_id_translation_params.asJson();
    input.request_body.append(output);
    


    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIPartStudiosApi::translateIdsCallback);

    worker->execute(&input);
}

void
OAIPartStudiosApi::translateIdsCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QString json(worker->response);
    OAIBTIdTranslationInfo* output = static_cast<OAIBTIdTranslationInfo*>(create(json, QString("OAIBTIdTranslationInfo")));
    auto wrapper = new OAIQObjectWrapper<OAIBTIdTranslationInfo*> (output);
    wrapper->deleteLater();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit translateIdsSignal(output);
    } else {
        emit translateIdsSignalE(output, error_type, error_str);
        emit translateIdsSignalEFull(worker, error_type, error_str);
    }
}

void
OAIPartStudiosApi::updateFeatures(QString* did, QString* wid, QString* eid, QString*& body) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/api/partstudios/d/{did}/w/{wid}/e/{eid}/features/updates");

    QString didPathParam("{"); didPathParam.append("did").append("}");
    fullPath.replace(didPathParam, stringValue(did));
    QString widPathParam("{"); widPathParam.append("wid").append("}");
    fullPath.replace(widPathParam, stringValue(wid));
    QString eidPathParam("{"); eidPathParam.append("eid").append("}");
    fullPath.replace(eidPathParam, stringValue(eid));


    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "POST");


    
    QString output(*body);
    input.request_body.append(output);
    


    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIPartStudiosApi::updateFeaturesCallback);

    worker->execute(&input);
}

void
OAIPartStudiosApi::updateFeaturesCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QString json(worker->response);
    OAIBTUpdateFeaturesResponse-1333* output = static_cast<OAIBTUpdateFeaturesResponse-1333*>(create(json, QString("OAIBTUpdateFeaturesResponse-1333")));
    auto wrapper = new OAIQObjectWrapper<OAIBTUpdateFeaturesResponse-1333*> (output);
    wrapper->deleteLater();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit updateFeaturesSignal(output);
    } else {
        emit updateFeaturesSignalE(output, error_type, error_str);
        emit updateFeaturesSignalEFull(worker, error_type, error_str);
    }
}

void
OAIPartStudiosApi::updatePartStudioConfiguration(QString* did, QString* wvm, QString* wvmid, QString* eid, QString*& body) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/api/partstudios/d/{did}/{wvm}/{wvmid}/e/{eid}/configuration");

    QString didPathParam("{"); didPathParam.append("did").append("}");
    fullPath.replace(didPathParam, stringValue(did));
    QString wvmPathParam("{"); wvmPathParam.append("wvm").append("}");
    fullPath.replace(wvmPathParam, stringValue(wvm));
    QString wvmidPathParam("{"); wvmidPathParam.append("wvmid").append("}");
    fullPath.replace(wvmidPathParam, stringValue(wvmid));
    QString eidPathParam("{"); eidPathParam.append("eid").append("}");
    fullPath.replace(eidPathParam, stringValue(eid));


    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "POST");


    
    QString output(*body);
    input.request_body.append(output);
    


    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIPartStudiosApi::updatePartStudioConfigurationCallback);

    worker->execute(&input);
}

void
OAIPartStudiosApi::updatePartStudioConfigurationCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QString json(worker->response);
    OAIBTConfigurationResponse-2019* output = static_cast<OAIBTConfigurationResponse-2019*>(create(json, QString("OAIBTConfigurationResponse-2019")));
    auto wrapper = new OAIQObjectWrapper<OAIBTConfigurationResponse-2019*> (output);
    wrapper->deleteLater();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit updatePartStudioConfigurationSignal(output);
    } else {
        emit updatePartStudioConfigurationSignalE(output, error_type, error_str);
        emit updatePartStudioConfigurationSignalEFull(worker, error_type, error_str);
    }
}

void
OAIPartStudiosApi::updatePartStudioFeature(QString* did, QString* wid, QString* eid, QString* fid, QString*& body) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/api/partstudios/d/{did}/w/{wid}/e/{eid}/features/featureid/{fid}");

    QString didPathParam("{"); didPathParam.append("did").append("}");
    fullPath.replace(didPathParam, stringValue(did));
    QString widPathParam("{"); widPathParam.append("wid").append("}");
    fullPath.replace(widPathParam, stringValue(wid));
    QString eidPathParam("{"); eidPathParam.append("eid").append("}");
    fullPath.replace(eidPathParam, stringValue(eid));
    QString fidPathParam("{"); fidPathParam.append("fid").append("}");
    fullPath.replace(fidPathParam, stringValue(fid));


    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "POST");


    
    QString output(*body);
    input.request_body.append(output);
    


    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIPartStudiosApi::updatePartStudioFeatureCallback);

    worker->execute(&input);
}

void
OAIPartStudiosApi::updatePartStudioFeatureCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QString json(worker->response);
    OAIBTFeatureDefinitionResponse-1617* output = static_cast<OAIBTFeatureDefinitionResponse-1617*>(create(json, QString("OAIBTFeatureDefinitionResponse-1617")));
    auto wrapper = new OAIQObjectWrapper<OAIBTFeatureDefinitionResponse-1617*> (output);
    wrapper->deleteLater();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit updatePartStudioFeatureSignal(output);
    } else {
        emit updatePartStudioFeatureSignalE(output, error_type, error_str);
        emit updatePartStudioFeatureSignalEFull(worker, error_type, error_str);
    }
}

void
OAIPartStudiosApi::updateRollback(QString* did, QString* wid, QString* eid, QString*& body) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/api/partstudios/d/{did}/w/{wid}/e/{eid}/features/rollback");

    QString didPathParam("{"); didPathParam.append("did").append("}");
    fullPath.replace(didPathParam, stringValue(did));
    QString widPathParam("{"); widPathParam.append("wid").append("}");
    fullPath.replace(widPathParam, stringValue(wid));
    QString eidPathParam("{"); eidPathParam.append("eid").append("}");
    fullPath.replace(eidPathParam, stringValue(eid));


    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "POST");


    
    QString output(*body);
    input.request_body.append(output);
    


    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIPartStudiosApi::updateRollbackCallback);

    worker->execute(&input);
}

void
OAIPartStudiosApi::updateRollbackCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QString json(worker->response);
    OAIBTSetFeatureRollbackResponse-1042* output = static_cast<OAIBTSetFeatureRollbackResponse-1042*>(create(json, QString("OAIBTSetFeatureRollbackResponse-1042")));
    auto wrapper = new OAIQObjectWrapper<OAIBTSetFeatureRollbackResponse-1042*> (output);
    wrapper->deleteLater();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit updateRollbackSignal(output);
    } else {
        emit updateRollbackSignalE(output, error_type, error_str);
        emit updateRollbackSignalEFull(worker, error_type, error_str);
    }
}


}
