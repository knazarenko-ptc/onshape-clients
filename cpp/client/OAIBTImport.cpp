/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * OpenAPI spec version: 1.111
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIBTImport.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIBTImport::OAIBTImport(QString json) {
    init();
    this->fromJson(json);
}

OAIBTImport::OAIBTImport() {
    init();
}

OAIBTImport::~OAIBTImport() {
    this->cleanup();
}

void
OAIBTImport::init() {
    for_export = false;
    m_for_export_isSet = false;
    import_microversion = new QString("");
    m_import_microversion_isSet = false;
}

void
OAIBTImport::cleanup() {

    if(import_microversion != nullptr) { 
        delete import_microversion;
    }
}

OAIBTImport*
OAIBTImport::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIBTImport::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&for_export, pJson["forExport"], "bool", "");
    
    ::OpenAPI::setValue(&import_microversion, pJson["importMicroversion"], "QString", "QString");
    
}

QString
OAIBTImport::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIBTImport::asJsonObject() {
    QJsonObject obj;
    if(m_for_export_isSet){
        obj.insert("forExport", QJsonValue(for_export));
    }
    if(import_microversion != nullptr && *import_microversion != QString("")){
        toJsonValue(QString("importMicroversion"), import_microversion, obj, QString("QString"));
    }

    return obj;
}

bool
OAIBTImport::isForExport() {
    return for_export;
}
void
OAIBTImport::setForExport(bool for_export) {
    this->for_export = for_export;
    this->m_for_export_isSet = true;
}

QString*
OAIBTImport::getImportMicroversion() {
    return import_microversion;
}
void
OAIBTImport::setImportMicroversion(QString* import_microversion) {
    this->import_microversion = import_microversion;
    this->m_import_microversion_isSet = true;
}


bool
OAIBTImport::isSet(){
    bool isObjectUpdated = false;
    do{
        if(m_for_export_isSet){ isObjectUpdated = true; break;}
        if(import_microversion != nullptr && *import_microversion != QString("")){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

