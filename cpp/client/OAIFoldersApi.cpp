/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * OpenAPI spec version: 1.111
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFoldersApi.h"
#include "OAIHelpers.h"
#include "OAIModelFactory.h"
#include "OAIQObjectWrapper.h"

#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAIFoldersApi::OAIFoldersApi() {}

OAIFoldersApi::~OAIFoldersApi() {}

OAIFoldersApi::OAIFoldersApi(QString host, QString basePath) {
    this->host = host;
    this->basePath = basePath;
}

void
OAIFoldersApi::getFolderAcl(QString* fid) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/api/folders/{fid}/acl");

    QString fidPathParam("{"); fidPathParam.append("fid").append("}");
    fullPath.replace(fidPathParam, stringValue(fid));


    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIFoldersApi::getFolderAclCallback);

    worker->execute(&input);
}

void
OAIFoldersApi::getFolderAclCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QString json(worker->response);
    OAIBTAclInfo* output = static_cast<OAIBTAclInfo*>(create(json, QString("OAIBTAclInfo")));
    auto wrapper = new OAIQObjectWrapper<OAIBTAclInfo*> (output);
    wrapper->deleteLater();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit getFolderAclSignal(output);
    } else {
        emit getFolderAclSignalE(output, error_type, error_str);
        emit getFolderAclSignalEFull(worker, error_type, error_str);
    }
}

void
OAIFoldersApi::share(QString* fid, OAIBTShareParams& oaibt_share_params) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/api/folders/{fid}/share");

    QString fidPathParam("{"); fidPathParam.append("fid").append("}");
    fullPath.replace(fidPathParam, stringValue(fid));


    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "POST");


    
    QString output = oaibt_share_params.asJson();
    input.request_body.append(output);
    


    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIFoldersApi::shareCallback);

    worker->execute(&input);
}

void
OAIFoldersApi::shareCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QString json(worker->response);
    OAIBTAclInfo* output = static_cast<OAIBTAclInfo*>(create(json, QString("OAIBTAclInfo")));
    auto wrapper = new OAIQObjectWrapper<OAIBTAclInfo*> (output);
    wrapper->deleteLater();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit shareSignal(output);
    } else {
        emit shareSignalE(output, error_type, error_str);
        emit shareSignalEFull(worker, error_type, error_str);
    }
}

void
OAIFoldersApi::unShare(QString* fid, QString* eid, qint32 entry_type) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/api/folders/{fid}/share/{eid}");

    QString fidPathParam("{"); fidPathParam.append("fid").append("}");
    fullPath.replace(fidPathParam, stringValue(fid));
    QString eidPathParam("{"); eidPathParam.append("eid").append("}");
    fullPath.replace(eidPathParam, stringValue(eid));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("entryType"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(entry_type)));


    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "DELETE");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIFoldersApi::unShareCallback);

    worker->execute(&input);
}

void
OAIFoldersApi::unShareCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit unShareSignal();
    } else {
        emit unShareSignalE(error_type, error_str);
        emit unShareSignalEFull(worker, error_type, error_str);
    }
}


}
