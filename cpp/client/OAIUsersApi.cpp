/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * OpenAPI spec version: 1.111
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUsersApi.h"
#include "OAIHelpers.h"
#include "OAIModelFactory.h"
#include "OAIQObjectWrapper.h"

#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAIUsersApi::OAIUsersApi() {}

OAIUsersApi::~OAIUsersApi() {}

OAIUsersApi::OAIUsersApi(QString host, QString basePath) {
    this->host = host;
    this->basePath = basePath;
}

void
OAIUsersApi::getUserSettings(QString* uid, bool includematerials) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/api/users/{uid}/settings");

    QString uidPathParam("{"); uidPathParam.append("uid").append("}");
    fullPath.replace(uidPathParam, stringValue(uid));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("includematerials"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(includematerials)));


    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIUsersApi::getUserSettingsCallback);

    worker->execute(&input);
}

void
OAIUsersApi::getUserSettingsCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QString json(worker->response);
    OAIBTUserSettingsInfo* output = static_cast<OAIBTUserSettingsInfo*>(create(json, QString("OAIBTUserSettingsInfo")));
    auto wrapper = new OAIQObjectWrapper<OAIBTUserSettingsInfo*> (output);
    wrapper->deleteLater();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit getUserSettingsSignal(output);
    } else {
        emit getUserSettingsSignalE(output, error_type, error_str);
        emit getUserSettingsSignalEFull(worker, error_type, error_str);
    }
}

void
OAIUsersApi::getUserSettingsCurrentLoggedInUser(bool includematerials) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/api/users/settings");


    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("includematerials"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(includematerials)));


    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIUsersApi::getUserSettingsCurrentLoggedInUserCallback);

    worker->execute(&input);
}

void
OAIUsersApi::getUserSettingsCurrentLoggedInUserCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QString json(worker->response);
    OAIBTUserSettingsInfo* output = static_cast<OAIBTUserSettingsInfo*>(create(json, QString("OAIBTUserSettingsInfo")));
    auto wrapper = new OAIQObjectWrapper<OAIBTUserSettingsInfo*> (output);
    wrapper->deleteLater();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit getUserSettingsCurrentLoggedInUserSignal(output);
    } else {
        emit getUserSettingsCurrentLoggedInUserSignalE(output, error_type, error_str);
        emit getUserSettingsCurrentLoggedInUserSignalEFull(worker, error_type, error_str);
    }
}

void
OAIUsersApi::sessionInfo() {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/api/users/sessioninfo");



    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIUsersApi::sessionInfoCallback);

    worker->execute(&input);
}

void
OAIUsersApi::sessionInfoCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QString json(worker->response);
    OAIBTUserOAuth2SummaryInfo* output = static_cast<OAIBTUserOAuth2SummaryInfo*>(create(json, QString("OAIBTUserOAuth2SummaryInfo")));
    auto wrapper = new OAIQObjectWrapper<OAIBTUserOAuth2SummaryInfo*> (output);
    wrapper->deleteLater();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit sessionInfoSignal(output);
    } else {
        emit sessionInfoSignalE(output, error_type, error_str);
        emit sessionInfoSignalEFull(worker, error_type, error_str);
    }
}


}
