/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * OpenAPI spec version: 1.111
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIBTAssociativeDataInfo.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIBTAssociativeDataInfo::OAIBTAssociativeDataInfo(QString json) {
    init();
    this->fromJson(json);
}

OAIBTAssociativeDataInfo::OAIBTAssociativeDataInfo() {
    init();
}

OAIBTAssociativeDataInfo::~OAIBTAssociativeDataInfo() {
    this->cleanup();
}

void
OAIBTAssociativeDataInfo::init() {
    associative_data_id = new QString("");
    m_associative_data_id_isSet = false;
    data = new QList<OAIBTNameValuePair*>();
    m_data_isSet = false;
    document_id = new QString("");
    m_document_id_isSet = false;
    document_microversion = new QString("");
    m_document_microversion_isSet = false;
    element_id = new QString("");
    m_element_id_isSet = false;
    id_tag = new QString("");
    m_id_tag_isSet = false;
    microversion_id = new QString("");
    m_microversion_id_isSet = false;
    occurrence_id = new QString("");
    m_occurrence_id_isSet = false;
    type = new QString("");
    m_type_isSet = false;
    version_id = new QString("");
    m_version_id_isSet = false;
}

void
OAIBTAssociativeDataInfo::cleanup() {
    if(associative_data_id != nullptr) { 
        delete associative_data_id;
    }
    if(data != nullptr) { 
        auto arr = data;
        for(auto o: *arr) { 
            delete o;
        }
        delete data;
    }
    if(document_id != nullptr) { 
        delete document_id;
    }
    if(document_microversion != nullptr) { 
        delete document_microversion;
    }
    if(element_id != nullptr) { 
        delete element_id;
    }
    if(id_tag != nullptr) { 
        delete id_tag;
    }
    if(microversion_id != nullptr) { 
        delete microversion_id;
    }
    if(occurrence_id != nullptr) { 
        delete occurrence_id;
    }
    if(type != nullptr) { 
        delete type;
    }
    if(version_id != nullptr) { 
        delete version_id;
    }
}

OAIBTAssociativeDataInfo*
OAIBTAssociativeDataInfo::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIBTAssociativeDataInfo::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&associative_data_id, pJson["associativeDataId"], "QString", "QString");
    
    
    ::OpenAPI::setValue(&data, pJson["data"], "QList", "OAIBTNameValuePair");
    ::OpenAPI::setValue(&document_id, pJson["documentId"], "QString", "QString");
    
    ::OpenAPI::setValue(&document_microversion, pJson["documentMicroversion"], "QString", "QString");
    
    ::OpenAPI::setValue(&element_id, pJson["elementId"], "QString", "QString");
    
    ::OpenAPI::setValue(&id_tag, pJson["idTag"], "QString", "QString");
    
    ::OpenAPI::setValue(&microversion_id, pJson["microversionId"], "QString", "QString");
    
    ::OpenAPI::setValue(&occurrence_id, pJson["occurrenceId"], "QString", "QString");
    
    ::OpenAPI::setValue(&type, pJson["type"], "QString", "QString");
    
    ::OpenAPI::setValue(&version_id, pJson["versionId"], "QString", "QString");
    
}

QString
OAIBTAssociativeDataInfo::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIBTAssociativeDataInfo::asJsonObject() {
    QJsonObject obj;
    if(associative_data_id != nullptr && *associative_data_id != QString("")){
        toJsonValue(QString("associativeDataId"), associative_data_id, obj, QString("QString"));
    }
    if(data->size() > 0){
        toJsonArray((QList<void*>*)data, obj, "data", "OAIBTNameValuePair");
    }
    if(document_id != nullptr && *document_id != QString("")){
        toJsonValue(QString("documentId"), document_id, obj, QString("QString"));
    }
    if(document_microversion != nullptr && *document_microversion != QString("")){
        toJsonValue(QString("documentMicroversion"), document_microversion, obj, QString("QString"));
    }
    if(element_id != nullptr && *element_id != QString("")){
        toJsonValue(QString("elementId"), element_id, obj, QString("QString"));
    }
    if(id_tag != nullptr && *id_tag != QString("")){
        toJsonValue(QString("idTag"), id_tag, obj, QString("QString"));
    }
    if(microversion_id != nullptr && *microversion_id != QString("")){
        toJsonValue(QString("microversionId"), microversion_id, obj, QString("QString"));
    }
    if(occurrence_id != nullptr && *occurrence_id != QString("")){
        toJsonValue(QString("occurrenceId"), occurrence_id, obj, QString("QString"));
    }
    if(type != nullptr && *type != QString("")){
        toJsonValue(QString("type"), type, obj, QString("QString"));
    }
    if(version_id != nullptr && *version_id != QString("")){
        toJsonValue(QString("versionId"), version_id, obj, QString("QString"));
    }

    return obj;
}

QString*
OAIBTAssociativeDataInfo::getAssociativeDataId() {
    return associative_data_id;
}
void
OAIBTAssociativeDataInfo::setAssociativeDataId(QString* associative_data_id) {
    this->associative_data_id = associative_data_id;
    this->m_associative_data_id_isSet = true;
}

QList<OAIBTNameValuePair*>*
OAIBTAssociativeDataInfo::getData() {
    return data;
}
void
OAIBTAssociativeDataInfo::setData(QList<OAIBTNameValuePair*>* data) {
    this->data = data;
    this->m_data_isSet = true;
}

QString*
OAIBTAssociativeDataInfo::getDocumentId() {
    return document_id;
}
void
OAIBTAssociativeDataInfo::setDocumentId(QString* document_id) {
    this->document_id = document_id;
    this->m_document_id_isSet = true;
}

QString*
OAIBTAssociativeDataInfo::getDocumentMicroversion() {
    return document_microversion;
}
void
OAIBTAssociativeDataInfo::setDocumentMicroversion(QString* document_microversion) {
    this->document_microversion = document_microversion;
    this->m_document_microversion_isSet = true;
}

QString*
OAIBTAssociativeDataInfo::getElementId() {
    return element_id;
}
void
OAIBTAssociativeDataInfo::setElementId(QString* element_id) {
    this->element_id = element_id;
    this->m_element_id_isSet = true;
}

QString*
OAIBTAssociativeDataInfo::getIdTag() {
    return id_tag;
}
void
OAIBTAssociativeDataInfo::setIdTag(QString* id_tag) {
    this->id_tag = id_tag;
    this->m_id_tag_isSet = true;
}

QString*
OAIBTAssociativeDataInfo::getMicroversionId() {
    return microversion_id;
}
void
OAIBTAssociativeDataInfo::setMicroversionId(QString* microversion_id) {
    this->microversion_id = microversion_id;
    this->m_microversion_id_isSet = true;
}

QString*
OAIBTAssociativeDataInfo::getOccurrenceId() {
    return occurrence_id;
}
void
OAIBTAssociativeDataInfo::setOccurrenceId(QString* occurrence_id) {
    this->occurrence_id = occurrence_id;
    this->m_occurrence_id_isSet = true;
}

QString*
OAIBTAssociativeDataInfo::getType() {
    return type;
}
void
OAIBTAssociativeDataInfo::setType(QString* type) {
    this->type = type;
    this->m_type_isSet = true;
}

QString*
OAIBTAssociativeDataInfo::getVersionId() {
    return version_id;
}
void
OAIBTAssociativeDataInfo::setVersionId(QString* version_id) {
    this->version_id = version_id;
    this->m_version_id_isSet = true;
}


bool
OAIBTAssociativeDataInfo::isSet(){
    bool isObjectUpdated = false;
    do{
        if(associative_data_id != nullptr && *associative_data_id != QString("")){ isObjectUpdated = true; break;}
        if(data->size() > 0){ isObjectUpdated = true; break;}
        if(document_id != nullptr && *document_id != QString("")){ isObjectUpdated = true; break;}
        if(document_microversion != nullptr && *document_microversion != QString("")){ isObjectUpdated = true; break;}
        if(element_id != nullptr && *element_id != QString("")){ isObjectUpdated = true; break;}
        if(id_tag != nullptr && *id_tag != QString("")){ isObjectUpdated = true; break;}
        if(microversion_id != nullptr && *microversion_id != QString("")){ isObjectUpdated = true; break;}
        if(occurrence_id != nullptr && *occurrence_id != QString("")){ isObjectUpdated = true; break;}
        if(type != nullptr && *type != QString("")){ isObjectUpdated = true; break;}
        if(version_id != nullptr && *version_id != QString("")){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

