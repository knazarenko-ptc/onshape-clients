/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * OpenAPI spec version: 1.111
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIBTCompanyInfo.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIBTCompanyInfo::OAIBTCompanyInfo(QString json) {
    init();
    this->fromJson(json);
}

OAIBTCompanyInfo::OAIBTCompanyInfo() {
    init();
}

OAIBTCompanyInfo::~OAIBTCompanyInfo() {
    this->cleanup();
}

void
OAIBTCompanyInfo::init() {
    address = new OAIBTAddressInfo();
    m_address_isSet = false;
    admin = false;
    m_admin_isSet = false;
    description = new QString("");
    m_description_isSet = false;
    domain_prefix = new QString("");
    m_domain_prefix_isSet = false;
    enterprise_base_url = new QString("");
    m_enterprise_base_url_isSet = false;
    href = new QString("");
    m_href_isSet = false;
    id = new QString("");
    m_id_isSet = false;
    image = new QString("");
    m_image_isSet = false;
    name = new QString("");
    m_name_isSet = false;
    no_public_documents = false;
    m_no_public_documents_isSet = false;
    owner_id = new QString("");
    m_owner_id_isSet = false;
    purchase = new OAIBTPurchaseInfo();
    m_purchase_isSet = false;
    secondary_domain_prefixes = new QList<QString*>();
    m_secondary_domain_prefixes_isSet = false;
    state = 0;
    m_state_isSet = false;
    type = 0;
    m_type_isSet = false;
    view_ref = new QString("");
    m_view_ref_isSet = false;
}

void
OAIBTCompanyInfo::cleanup() {
    if(address != nullptr) { 
        delete address;
    }

    if(description != nullptr) { 
        delete description;
    }
    if(domain_prefix != nullptr) { 
        delete domain_prefix;
    }
    if(enterprise_base_url != nullptr) { 
        delete enterprise_base_url;
    }
    if(href != nullptr) { 
        delete href;
    }
    if(id != nullptr) { 
        delete id;
    }
    if(image != nullptr) { 
        delete image;
    }
    if(name != nullptr) { 
        delete name;
    }

    if(owner_id != nullptr) { 
        delete owner_id;
    }
    if(purchase != nullptr) { 
        delete purchase;
    }
    if(secondary_domain_prefixes != nullptr) { 
        auto arr = secondary_domain_prefixes;
        for(auto o: *arr) { 
            delete o;
        }
        delete secondary_domain_prefixes;
    }


    if(view_ref != nullptr) { 
        delete view_ref;
    }
}

OAIBTCompanyInfo*
OAIBTCompanyInfo::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIBTCompanyInfo::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&address, pJson["address"], "OAIBTAddressInfo", "OAIBTAddressInfo");
    
    ::OpenAPI::setValue(&admin, pJson["admin"], "bool", "");
    
    ::OpenAPI::setValue(&description, pJson["description"], "QString", "QString");
    
    ::OpenAPI::setValue(&domain_prefix, pJson["domainPrefix"], "QString", "QString");
    
    ::OpenAPI::setValue(&enterprise_base_url, pJson["enterpriseBaseUrl"], "QString", "QString");
    
    ::OpenAPI::setValue(&href, pJson["href"], "QString", "QString");
    
    ::OpenAPI::setValue(&id, pJson["id"], "QString", "QString");
    
    ::OpenAPI::setValue(&image, pJson["image"], "QString", "QString");
    
    ::OpenAPI::setValue(&name, pJson["name"], "QString", "QString");
    
    ::OpenAPI::setValue(&no_public_documents, pJson["noPublicDocuments"], "bool", "");
    
    ::OpenAPI::setValue(&owner_id, pJson["ownerId"], "QString", "QString");
    
    ::OpenAPI::setValue(&purchase, pJson["purchase"], "OAIBTPurchaseInfo", "OAIBTPurchaseInfo");
    
    
    ::OpenAPI::setValue(&secondary_domain_prefixes, pJson["secondaryDomainPrefixes"], "QList", "QString");
    ::OpenAPI::setValue(&state, pJson["state"], "qint32", "");
    
    ::OpenAPI::setValue(&type, pJson["type"], "qint32", "");
    
    ::OpenAPI::setValue(&view_ref, pJson["viewRef"], "QString", "QString");
    
}

QString
OAIBTCompanyInfo::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIBTCompanyInfo::asJsonObject() {
    QJsonObject obj;
    if((address != nullptr) && (address->isSet())){
        toJsonValue(QString("address"), address, obj, QString("OAIBTAddressInfo"));
    }
    if(m_admin_isSet){
        obj.insert("admin", QJsonValue(admin));
    }
    if(description != nullptr && *description != QString("")){
        toJsonValue(QString("description"), description, obj, QString("QString"));
    }
    if(domain_prefix != nullptr && *domain_prefix != QString("")){
        toJsonValue(QString("domainPrefix"), domain_prefix, obj, QString("QString"));
    }
    if(enterprise_base_url != nullptr && *enterprise_base_url != QString("")){
        toJsonValue(QString("enterpriseBaseUrl"), enterprise_base_url, obj, QString("QString"));
    }
    if(href != nullptr && *href != QString("")){
        toJsonValue(QString("href"), href, obj, QString("QString"));
    }
    if(id != nullptr && *id != QString("")){
        toJsonValue(QString("id"), id, obj, QString("QString"));
    }
    if(image != nullptr && *image != QString("")){
        toJsonValue(QString("image"), image, obj, QString("QString"));
    }
    if(name != nullptr && *name != QString("")){
        toJsonValue(QString("name"), name, obj, QString("QString"));
    }
    if(m_no_public_documents_isSet){
        obj.insert("noPublicDocuments", QJsonValue(no_public_documents));
    }
    if(owner_id != nullptr && *owner_id != QString("")){
        toJsonValue(QString("ownerId"), owner_id, obj, QString("QString"));
    }
    if((purchase != nullptr) && (purchase->isSet())){
        toJsonValue(QString("purchase"), purchase, obj, QString("OAIBTPurchaseInfo"));
    }
    if(secondary_domain_prefixes->size() > 0){
        toJsonArray((QList<void*>*)secondary_domain_prefixes, obj, "secondaryDomainPrefixes", "QString");
    }
    if(m_state_isSet){
        obj.insert("state", QJsonValue(state));
    }
    if(m_type_isSet){
        obj.insert("type", QJsonValue(type));
    }
    if(view_ref != nullptr && *view_ref != QString("")){
        toJsonValue(QString("viewRef"), view_ref, obj, QString("QString"));
    }

    return obj;
}

OAIBTAddressInfo*
OAIBTCompanyInfo::getAddress() {
    return address;
}
void
OAIBTCompanyInfo::setAddress(OAIBTAddressInfo* address) {
    this->address = address;
    this->m_address_isSet = true;
}

bool
OAIBTCompanyInfo::isAdmin() {
    return admin;
}
void
OAIBTCompanyInfo::setAdmin(bool admin) {
    this->admin = admin;
    this->m_admin_isSet = true;
}

QString*
OAIBTCompanyInfo::getDescription() {
    return description;
}
void
OAIBTCompanyInfo::setDescription(QString* description) {
    this->description = description;
    this->m_description_isSet = true;
}

QString*
OAIBTCompanyInfo::getDomainPrefix() {
    return domain_prefix;
}
void
OAIBTCompanyInfo::setDomainPrefix(QString* domain_prefix) {
    this->domain_prefix = domain_prefix;
    this->m_domain_prefix_isSet = true;
}

QString*
OAIBTCompanyInfo::getEnterpriseBaseUrl() {
    return enterprise_base_url;
}
void
OAIBTCompanyInfo::setEnterpriseBaseUrl(QString* enterprise_base_url) {
    this->enterprise_base_url = enterprise_base_url;
    this->m_enterprise_base_url_isSet = true;
}

QString*
OAIBTCompanyInfo::getHref() {
    return href;
}
void
OAIBTCompanyInfo::setHref(QString* href) {
    this->href = href;
    this->m_href_isSet = true;
}

QString*
OAIBTCompanyInfo::getId() {
    return id;
}
void
OAIBTCompanyInfo::setId(QString* id) {
    this->id = id;
    this->m_id_isSet = true;
}

QString*
OAIBTCompanyInfo::getImage() {
    return image;
}
void
OAIBTCompanyInfo::setImage(QString* image) {
    this->image = image;
    this->m_image_isSet = true;
}

QString*
OAIBTCompanyInfo::getName() {
    return name;
}
void
OAIBTCompanyInfo::setName(QString* name) {
    this->name = name;
    this->m_name_isSet = true;
}

bool
OAIBTCompanyInfo::isNoPublicDocuments() {
    return no_public_documents;
}
void
OAIBTCompanyInfo::setNoPublicDocuments(bool no_public_documents) {
    this->no_public_documents = no_public_documents;
    this->m_no_public_documents_isSet = true;
}

QString*
OAIBTCompanyInfo::getOwnerId() {
    return owner_id;
}
void
OAIBTCompanyInfo::setOwnerId(QString* owner_id) {
    this->owner_id = owner_id;
    this->m_owner_id_isSet = true;
}

OAIBTPurchaseInfo*
OAIBTCompanyInfo::getPurchase() {
    return purchase;
}
void
OAIBTCompanyInfo::setPurchase(OAIBTPurchaseInfo* purchase) {
    this->purchase = purchase;
    this->m_purchase_isSet = true;
}

QList<QString*>*
OAIBTCompanyInfo::getSecondaryDomainPrefixes() {
    return secondary_domain_prefixes;
}
void
OAIBTCompanyInfo::setSecondaryDomainPrefixes(QList<QString*>* secondary_domain_prefixes) {
    this->secondary_domain_prefixes = secondary_domain_prefixes;
    this->m_secondary_domain_prefixes_isSet = true;
}

qint32
OAIBTCompanyInfo::getState() {
    return state;
}
void
OAIBTCompanyInfo::setState(qint32 state) {
    this->state = state;
    this->m_state_isSet = true;
}

qint32
OAIBTCompanyInfo::getType() {
    return type;
}
void
OAIBTCompanyInfo::setType(qint32 type) {
    this->type = type;
    this->m_type_isSet = true;
}

QString*
OAIBTCompanyInfo::getViewRef() {
    return view_ref;
}
void
OAIBTCompanyInfo::setViewRef(QString* view_ref) {
    this->view_ref = view_ref;
    this->m_view_ref_isSet = true;
}


bool
OAIBTCompanyInfo::isSet(){
    bool isObjectUpdated = false;
    do{
        if(address != nullptr && address->isSet()){ isObjectUpdated = true; break;}
        if(m_admin_isSet){ isObjectUpdated = true; break;}
        if(description != nullptr && *description != QString("")){ isObjectUpdated = true; break;}
        if(domain_prefix != nullptr && *domain_prefix != QString("")){ isObjectUpdated = true; break;}
        if(enterprise_base_url != nullptr && *enterprise_base_url != QString("")){ isObjectUpdated = true; break;}
        if(href != nullptr && *href != QString("")){ isObjectUpdated = true; break;}
        if(id != nullptr && *id != QString("")){ isObjectUpdated = true; break;}
        if(image != nullptr && *image != QString("")){ isObjectUpdated = true; break;}
        if(name != nullptr && *name != QString("")){ isObjectUpdated = true; break;}
        if(m_no_public_documents_isSet){ isObjectUpdated = true; break;}
        if(owner_id != nullptr && *owner_id != QString("")){ isObjectUpdated = true; break;}
        if(purchase != nullptr && purchase->isSet()){ isObjectUpdated = true; break;}
        if(secondary_domain_prefixes->size() > 0){ isObjectUpdated = true; break;}
        if(m_state_isSet){ isObjectUpdated = true; break;}
        if(m_type_isSet){ isObjectUpdated = true; break;}
        if(view_ref != nullptr && *view_ref != QString("")){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

