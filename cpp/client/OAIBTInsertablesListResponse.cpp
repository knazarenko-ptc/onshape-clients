/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * OpenAPI spec version: 1.111
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIBTInsertablesListResponse.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIBTInsertablesListResponse::OAIBTInsertablesListResponse(QString json) {
    init();
    this->fromJson(json);
}

OAIBTInsertablesListResponse::OAIBTInsertablesListResponse() {
    init();
}

OAIBTInsertablesListResponse::~OAIBTInsertablesListResponse() {
    this->cleanup();
}

void
OAIBTInsertablesListResponse::init() {
    can_save_version = false;
    m_can_save_version_isSet = false;
    changes_since_version_save = 0;
    m_changes_since_version_save_isSet = false;
    has_multiple_versions = false;
    m_has_multiple_versions_isSet = false;
    href = new QString("");
    m_href_isSet = false;
    items = new QList<OAIBTInsertableInfo*>();
    m_items_isSet = false;
    next = new QString("");
    m_next_isSet = false;
    previous = new QString("");
    m_previous_isSet = false;
}

void
OAIBTInsertablesListResponse::cleanup() {



    if(href != nullptr) { 
        delete href;
    }
    if(items != nullptr) { 
        auto arr = items;
        for(auto o: *arr) { 
            delete o;
        }
        delete items;
    }
    if(next != nullptr) { 
        delete next;
    }
    if(previous != nullptr) { 
        delete previous;
    }
}

OAIBTInsertablesListResponse*
OAIBTInsertablesListResponse::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIBTInsertablesListResponse::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&can_save_version, pJson["canSaveVersion"], "bool", "");
    
    ::OpenAPI::setValue(&changes_since_version_save, pJson["changesSinceVersionSave"], "qint32", "");
    
    ::OpenAPI::setValue(&has_multiple_versions, pJson["hasMultipleVersions"], "bool", "");
    
    ::OpenAPI::setValue(&href, pJson["href"], "QString", "QString");
    
    
    ::OpenAPI::setValue(&items, pJson["items"], "QList", "OAIBTInsertableInfo");
    ::OpenAPI::setValue(&next, pJson["next"], "QString", "QString");
    
    ::OpenAPI::setValue(&previous, pJson["previous"], "QString", "QString");
    
}

QString
OAIBTInsertablesListResponse::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIBTInsertablesListResponse::asJsonObject() {
    QJsonObject obj;
    if(m_can_save_version_isSet){
        obj.insert("canSaveVersion", QJsonValue(can_save_version));
    }
    if(m_changes_since_version_save_isSet){
        obj.insert("changesSinceVersionSave", QJsonValue(changes_since_version_save));
    }
    if(m_has_multiple_versions_isSet){
        obj.insert("hasMultipleVersions", QJsonValue(has_multiple_versions));
    }
    if(href != nullptr && *href != QString("")){
        toJsonValue(QString("href"), href, obj, QString("QString"));
    }
    if(items->size() > 0){
        toJsonArray((QList<void*>*)items, obj, "items", "OAIBTInsertableInfo");
    }
    if(next != nullptr && *next != QString("")){
        toJsonValue(QString("next"), next, obj, QString("QString"));
    }
    if(previous != nullptr && *previous != QString("")){
        toJsonValue(QString("previous"), previous, obj, QString("QString"));
    }

    return obj;
}

bool
OAIBTInsertablesListResponse::isCanSaveVersion() {
    return can_save_version;
}
void
OAIBTInsertablesListResponse::setCanSaveVersion(bool can_save_version) {
    this->can_save_version = can_save_version;
    this->m_can_save_version_isSet = true;
}

qint32
OAIBTInsertablesListResponse::getChangesSinceVersionSave() {
    return changes_since_version_save;
}
void
OAIBTInsertablesListResponse::setChangesSinceVersionSave(qint32 changes_since_version_save) {
    this->changes_since_version_save = changes_since_version_save;
    this->m_changes_since_version_save_isSet = true;
}

bool
OAIBTInsertablesListResponse::isHasMultipleVersions() {
    return has_multiple_versions;
}
void
OAIBTInsertablesListResponse::setHasMultipleVersions(bool has_multiple_versions) {
    this->has_multiple_versions = has_multiple_versions;
    this->m_has_multiple_versions_isSet = true;
}

QString*
OAIBTInsertablesListResponse::getHref() {
    return href;
}
void
OAIBTInsertablesListResponse::setHref(QString* href) {
    this->href = href;
    this->m_href_isSet = true;
}

QList<OAIBTInsertableInfo*>*
OAIBTInsertablesListResponse::getItems() {
    return items;
}
void
OAIBTInsertablesListResponse::setItems(QList<OAIBTInsertableInfo*>* items) {
    this->items = items;
    this->m_items_isSet = true;
}

QString*
OAIBTInsertablesListResponse::getNext() {
    return next;
}
void
OAIBTInsertablesListResponse::setNext(QString* next) {
    this->next = next;
    this->m_next_isSet = true;
}

QString*
OAIBTInsertablesListResponse::getPrevious() {
    return previous;
}
void
OAIBTInsertablesListResponse::setPrevious(QString* previous) {
    this->previous = previous;
    this->m_previous_isSet = true;
}


bool
OAIBTInsertablesListResponse::isSet(){
    bool isObjectUpdated = false;
    do{
        if(m_can_save_version_isSet){ isObjectUpdated = true; break;}
        if(m_changes_since_version_save_isSet){ isObjectUpdated = true; break;}
        if(m_has_multiple_versions_isSet){ isObjectUpdated = true; break;}
        if(href != nullptr && *href != QString("")){ isObjectUpdated = true; break;}
        if(items->size() > 0){ isObjectUpdated = true; break;}
        if(next != nullptr && *next != QString("")){ isObjectUpdated = true; break;}
        if(previous != nullptr && *previous != QString("")){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

