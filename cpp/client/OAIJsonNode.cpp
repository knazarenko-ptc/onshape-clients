/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * OpenAPI spec version: 1.111
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIJsonNode.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIJsonNode::OAIJsonNode(QString json) {
    init();
    this->fromJson(json);
}

OAIJsonNode::OAIJsonNode() {
    init();
}

OAIJsonNode::~OAIJsonNode() {
    this->cleanup();
}

void
OAIJsonNode::init() {
    array = false;
    m_array_isSet = false;
    big_decimal = false;
    m_big_decimal_isSet = false;
    big_integer = false;
    m_big_integer_isSet = false;
    binary = false;
    m_binary_isSet = false;
    boolean = false;
    m_boolean_isSet = false;
    container_node = false;
    m_container_node_isSet = false;
    _double = false;
    m__double_isSet = false;
    empty = false;
    m_empty_isSet = false;
    _float = false;
    m__float_isSet = false;
    floating_point_number = false;
    m_floating_point_number_isSet = false;
    _int = false;
    m__int_isSet = false;
    integral_number = false;
    m_integral_number_isSet = false;
    _long = false;
    m__long_isSet = false;
    missing_node = false;
    m_missing_node_isSet = false;
    node_type = new QString("");
    m_node_type_isSet = false;
    null = false;
    m_null_isSet = false;
    number = false;
    m_number_isSet = false;
    object = false;
    m_object_isSet = false;
    pojo = false;
    m_pojo_isSet = false;
    _short = false;
    m__short_isSet = false;
    textual = false;
    m_textual_isSet = false;
    value_node = false;
    m_value_node_isSet = false;
}

void
OAIJsonNode::cleanup() {














    if(node_type != nullptr) { 
        delete node_type;
    }







}

OAIJsonNode*
OAIJsonNode::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIJsonNode::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&array, pJson["array"], "bool", "");
    
    ::OpenAPI::setValue(&big_decimal, pJson["bigDecimal"], "bool", "");
    
    ::OpenAPI::setValue(&big_integer, pJson["bigInteger"], "bool", "");
    
    ::OpenAPI::setValue(&binary, pJson["binary"], "bool", "");
    
    ::OpenAPI::setValue(&boolean, pJson["boolean"], "bool", "");
    
    ::OpenAPI::setValue(&container_node, pJson["containerNode"], "bool", "");
    
    ::OpenAPI::setValue(&_double, pJson["double"], "bool", "");
    
    ::OpenAPI::setValue(&empty, pJson["empty"], "bool", "");
    
    ::OpenAPI::setValue(&_float, pJson["float"], "bool", "");
    
    ::OpenAPI::setValue(&floating_point_number, pJson["floatingPointNumber"], "bool", "");
    
    ::OpenAPI::setValue(&_int, pJson["int"], "bool", "");
    
    ::OpenAPI::setValue(&integral_number, pJson["integralNumber"], "bool", "");
    
    ::OpenAPI::setValue(&_long, pJson["long"], "bool", "");
    
    ::OpenAPI::setValue(&missing_node, pJson["missingNode"], "bool", "");
    
    ::OpenAPI::setValue(&node_type, pJson["nodeType"], "QString", "QString");
    
    ::OpenAPI::setValue(&null, pJson["null"], "bool", "");
    
    ::OpenAPI::setValue(&number, pJson["number"], "bool", "");
    
    ::OpenAPI::setValue(&object, pJson["object"], "bool", "");
    
    ::OpenAPI::setValue(&pojo, pJson["pojo"], "bool", "");
    
    ::OpenAPI::setValue(&_short, pJson["short"], "bool", "");
    
    ::OpenAPI::setValue(&textual, pJson["textual"], "bool", "");
    
    ::OpenAPI::setValue(&value_node, pJson["valueNode"], "bool", "");
    
}

QString
OAIJsonNode::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIJsonNode::asJsonObject() {
    QJsonObject obj;
    if(m_array_isSet){
        obj.insert("array", QJsonValue(array));
    }
    if(m_big_decimal_isSet){
        obj.insert("bigDecimal", QJsonValue(big_decimal));
    }
    if(m_big_integer_isSet){
        obj.insert("bigInteger", QJsonValue(big_integer));
    }
    if(m_binary_isSet){
        obj.insert("binary", QJsonValue(binary));
    }
    if(m_boolean_isSet){
        obj.insert("boolean", QJsonValue(boolean));
    }
    if(m_container_node_isSet){
        obj.insert("containerNode", QJsonValue(container_node));
    }
    if(m__double_isSet){
        obj.insert("double", QJsonValue(_double));
    }
    if(m_empty_isSet){
        obj.insert("empty", QJsonValue(empty));
    }
    if(m__float_isSet){
        obj.insert("float", QJsonValue(_float));
    }
    if(m_floating_point_number_isSet){
        obj.insert("floatingPointNumber", QJsonValue(floating_point_number));
    }
    if(m__int_isSet){
        obj.insert("int", QJsonValue(_int));
    }
    if(m_integral_number_isSet){
        obj.insert("integralNumber", QJsonValue(integral_number));
    }
    if(m__long_isSet){
        obj.insert("long", QJsonValue(_long));
    }
    if(m_missing_node_isSet){
        obj.insert("missingNode", QJsonValue(missing_node));
    }
    if(node_type != nullptr && *node_type != QString("")){
        toJsonValue(QString("nodeType"), node_type, obj, QString("QString"));
    }
    if(m_null_isSet){
        obj.insert("null", QJsonValue(null));
    }
    if(m_number_isSet){
        obj.insert("number", QJsonValue(number));
    }
    if(m_object_isSet){
        obj.insert("object", QJsonValue(object));
    }
    if(m_pojo_isSet){
        obj.insert("pojo", QJsonValue(pojo));
    }
    if(m__short_isSet){
        obj.insert("short", QJsonValue(_short));
    }
    if(m_textual_isSet){
        obj.insert("textual", QJsonValue(textual));
    }
    if(m_value_node_isSet){
        obj.insert("valueNode", QJsonValue(value_node));
    }

    return obj;
}

bool
OAIJsonNode::isArray() {
    return array;
}
void
OAIJsonNode::setArray(bool array) {
    this->array = array;
    this->m_array_isSet = true;
}

bool
OAIJsonNode::isBigDecimal() {
    return big_decimal;
}
void
OAIJsonNode::setBigDecimal(bool big_decimal) {
    this->big_decimal = big_decimal;
    this->m_big_decimal_isSet = true;
}

bool
OAIJsonNode::isBigInteger() {
    return big_integer;
}
void
OAIJsonNode::setBigInteger(bool big_integer) {
    this->big_integer = big_integer;
    this->m_big_integer_isSet = true;
}

bool
OAIJsonNode::isBinary() {
    return binary;
}
void
OAIJsonNode::setBinary(bool binary) {
    this->binary = binary;
    this->m_binary_isSet = true;
}

bool
OAIJsonNode::isBoolean() {
    return boolean;
}
void
OAIJsonNode::setBoolean(bool boolean) {
    this->boolean = boolean;
    this->m_boolean_isSet = true;
}

bool
OAIJsonNode::isContainerNode() {
    return container_node;
}
void
OAIJsonNode::setContainerNode(bool container_node) {
    this->container_node = container_node;
    this->m_container_node_isSet = true;
}

bool
OAIJsonNode::isDouble() {
    return _double;
}
void
OAIJsonNode::setDouble(bool _double) {
    this->_double = _double;
    this->m__double_isSet = true;
}

bool
OAIJsonNode::isEmpty() {
    return empty;
}
void
OAIJsonNode::setEmpty(bool empty) {
    this->empty = empty;
    this->m_empty_isSet = true;
}

bool
OAIJsonNode::isFloat() {
    return _float;
}
void
OAIJsonNode::setFloat(bool _float) {
    this->_float = _float;
    this->m__float_isSet = true;
}

bool
OAIJsonNode::isFloatingPointNumber() {
    return floating_point_number;
}
void
OAIJsonNode::setFloatingPointNumber(bool floating_point_number) {
    this->floating_point_number = floating_point_number;
    this->m_floating_point_number_isSet = true;
}

bool
OAIJsonNode::isInt() {
    return _int;
}
void
OAIJsonNode::setInt(bool _int) {
    this->_int = _int;
    this->m__int_isSet = true;
}

bool
OAIJsonNode::isIntegralNumber() {
    return integral_number;
}
void
OAIJsonNode::setIntegralNumber(bool integral_number) {
    this->integral_number = integral_number;
    this->m_integral_number_isSet = true;
}

bool
OAIJsonNode::isLong() {
    return _long;
}
void
OAIJsonNode::setLong(bool _long) {
    this->_long = _long;
    this->m__long_isSet = true;
}

bool
OAIJsonNode::isMissingNode() {
    return missing_node;
}
void
OAIJsonNode::setMissingNode(bool missing_node) {
    this->missing_node = missing_node;
    this->m_missing_node_isSet = true;
}

QString*
OAIJsonNode::getNodeType() {
    return node_type;
}
void
OAIJsonNode::setNodeType(QString* node_type) {
    this->node_type = node_type;
    this->m_node_type_isSet = true;
}

bool
OAIJsonNode::isNull() {
    return null;
}
void
OAIJsonNode::setNull(bool null) {
    this->null = null;
    this->m_null_isSet = true;
}

bool
OAIJsonNode::isNumber() {
    return number;
}
void
OAIJsonNode::setNumber(bool number) {
    this->number = number;
    this->m_number_isSet = true;
}

bool
OAIJsonNode::isObject() {
    return object;
}
void
OAIJsonNode::setObject(bool object) {
    this->object = object;
    this->m_object_isSet = true;
}

bool
OAIJsonNode::isPojo() {
    return pojo;
}
void
OAIJsonNode::setPojo(bool pojo) {
    this->pojo = pojo;
    this->m_pojo_isSet = true;
}

bool
OAIJsonNode::isShort() {
    return _short;
}
void
OAIJsonNode::setShort(bool _short) {
    this->_short = _short;
    this->m__short_isSet = true;
}

bool
OAIJsonNode::isTextual() {
    return textual;
}
void
OAIJsonNode::setTextual(bool textual) {
    this->textual = textual;
    this->m_textual_isSet = true;
}

bool
OAIJsonNode::isValueNode() {
    return value_node;
}
void
OAIJsonNode::setValueNode(bool value_node) {
    this->value_node = value_node;
    this->m_value_node_isSet = true;
}


bool
OAIJsonNode::isSet(){
    bool isObjectUpdated = false;
    do{
        if(m_array_isSet){ isObjectUpdated = true; break;}
        if(m_big_decimal_isSet){ isObjectUpdated = true; break;}
        if(m_big_integer_isSet){ isObjectUpdated = true; break;}
        if(m_binary_isSet){ isObjectUpdated = true; break;}
        if(m_boolean_isSet){ isObjectUpdated = true; break;}
        if(m_container_node_isSet){ isObjectUpdated = true; break;}
        if(m__double_isSet){ isObjectUpdated = true; break;}
        if(m_empty_isSet){ isObjectUpdated = true; break;}
        if(m__float_isSet){ isObjectUpdated = true; break;}
        if(m_floating_point_number_isSet){ isObjectUpdated = true; break;}
        if(m__int_isSet){ isObjectUpdated = true; break;}
        if(m_integral_number_isSet){ isObjectUpdated = true; break;}
        if(m__long_isSet){ isObjectUpdated = true; break;}
        if(m_missing_node_isSet){ isObjectUpdated = true; break;}
        if(node_type != nullptr && *node_type != QString("")){ isObjectUpdated = true; break;}
        if(m_null_isSet){ isObjectUpdated = true; break;}
        if(m_number_isSet){ isObjectUpdated = true; break;}
        if(m_object_isSet){ isObjectUpdated = true; break;}
        if(m_pojo_isSet){ isObjectUpdated = true; break;}
        if(m__short_isSet){ isObjectUpdated = true; break;}
        if(m_textual_isSet){ isObjectUpdated = true; break;}
        if(m_value_node_isSet){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

