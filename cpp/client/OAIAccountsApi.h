/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * OpenAPI spec version: 1.111
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef _OAI_OAIAccountsApi_H_
#define _OAI_OAIAccountsApi_H_

#include "OAIHttpRequest.h"

#include "OAIBTListResponseBTPurchaseInfo.h"
#include "OAIBTPurchaseInfo.h"
#include "OAIBTPurchaseUserParams.h"
#include <QString>

#include <QObject>

namespace OpenAPI {

class OAIAccountsApi: public QObject {
    Q_OBJECT

public:
    OAIAccountsApi();
    OAIAccountsApi(QString host, QString basePath);
    ~OAIAccountsApi();

    QString host;
    QString basePath;
    QMap<QString, QString> defaultHeaders;

    void cancelPurchaseNew(QString* aid, QString* pid, bool cancel_immediately);
    void consumePurchase(QString* pid, OAIBTPurchaseUserParams& oaibt_purchase_user_params);
    void getPlanPurchases(QString* plan_id, qint32 offset, qint32 limit);
    void getPurchases(bool all, bool own_purchase_only);
    
private:
    void cancelPurchaseNewCallback (OAIHttpRequestWorker * worker);
    void consumePurchaseCallback (OAIHttpRequestWorker * worker);
    void getPlanPurchasesCallback (OAIHttpRequestWorker * worker);
    void getPurchasesCallback (OAIHttpRequestWorker * worker);
    
signals:
    void cancelPurchaseNewSignal();
    void consumePurchaseSignal(OAIBTPurchaseInfo* summary);
    void getPlanPurchasesSignal(OAIBTListResponseBTPurchaseInfo* summary);
    void getPurchasesSignal(QList<OAIBTPurchaseInfo*>* summary);
    
    void cancelPurchaseNewSignalE(QNetworkReply::NetworkError error_type, QString& error_str);
    void consumePurchaseSignalE(OAIBTPurchaseInfo* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void getPlanPurchasesSignalE(OAIBTListResponseBTPurchaseInfo* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void getPurchasesSignalE(QList<OAIBTPurchaseInfo*>* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    
    void cancelPurchaseNewSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void consumePurchaseSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void getPlanPurchasesSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void getPurchasesSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    
};

}
#endif
