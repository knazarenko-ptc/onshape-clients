/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * OpenAPI spec version: 1.111
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef _OAI_OAIRevisionsApi_H_
#define _OAI_OAIRevisionsApi_H_

#include "OAIHttpRequest.h"

#include "OAIBTListResponseBTRevisionInfo.h"
#include "OAIBTRevisionInfo.h"
#include <QString>

#include <QObject>

namespace OpenAPI {

class OAIRevisionsApi: public QObject {
    Q_OBJECT

public:
    OAIRevisionsApi();
    OAIRevisionsApi(QString host, QString basePath);
    ~OAIRevisionsApi();

    QString host;
    QString basePath;
    QMap<QString, QString> defaultHeaders;

    void enumerateRevisions(QString* cid, qint32 element_type, qint32 limit, qint32 offset, bool latest_only, qint64 after);
    void getLatestInDocumentOrCompany(QString* cd, QString* cdid, QString* pnum, QString* et);
    void getRevisionHistoryInCompany(QString* cid, QString* pnum, QString* element_type, bool fill_approvers, bool fill_export_permission);
    
private:
    void enumerateRevisionsCallback (OAIHttpRequestWorker * worker);
    void getLatestInDocumentOrCompanyCallback (OAIHttpRequestWorker * worker);
    void getRevisionHistoryInCompanyCallback (OAIHttpRequestWorker * worker);
    
signals:
    void enumerateRevisionsSignal(OAIBTListResponseBTRevisionInfo* summary);
    void getLatestInDocumentOrCompanySignal(OAIBTRevisionInfo* summary);
    void getRevisionHistoryInCompanySignal(OAIBTListResponseBTRevisionInfo* summary);
    
    void enumerateRevisionsSignalE(OAIBTListResponseBTRevisionInfo* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void getLatestInDocumentOrCompanySignalE(OAIBTRevisionInfo* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void getRevisionHistoryInCompanySignalE(OAIBTListResponseBTRevisionInfo* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    
    void enumerateRevisionsSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void getLatestInDocumentOrCompanySignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void getRevisionHistoryInCompanySignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    
};

}
#endif
