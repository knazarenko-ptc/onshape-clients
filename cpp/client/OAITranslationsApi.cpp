/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * OpenAPI spec version: 1.111
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITranslationsApi.h"
#include "OAIHelpers.h"
#include "OAIModelFactory.h"
#include "OAIQObjectWrapper.h"

#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAITranslationsApi::OAITranslationsApi() {}

OAITranslationsApi::~OAITranslationsApi() {}

OAITranslationsApi::OAITranslationsApi(QString host, QString basePath) {
    this->host = host;
    this->basePath = basePath;
}

void
OAITranslationsApi::createTranslation(QString* did, QString* wid) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/api/translations/d/{did}/w/{wid}");

    QString didPathParam("{"); didPathParam.append("did").append("}");
    fullPath.replace(didPathParam, stringValue(did));
    QString widPathParam("{"); widPathParam.append("wid").append("}");
    fullPath.replace(widPathParam, stringValue(wid));


    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "POST");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAITranslationsApi::createTranslationCallback);

    worker->execute(&input);
}

void
OAITranslationsApi::createTranslationCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QString json(worker->response);
    OAIBTTranslationRequestInfo* output = static_cast<OAIBTTranslationRequestInfo*>(create(json, QString("OAIBTTranslationRequestInfo")));
    auto wrapper = new OAIQObjectWrapper<OAIBTTranslationRequestInfo*> (output);
    wrapper->deleteLater();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit createTranslationSignal(output);
    } else {
        emit createTranslationSignalE(output, error_type, error_str);
        emit createTranslationSignalEFull(worker, error_type, error_str);
    }
}

void
OAITranslationsApi::deleteTranslation(QString* tid) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/api/translations/{tid}");

    QString tidPathParam("{"); tidPathParam.append("tid").append("}");
    fullPath.replace(tidPathParam, stringValue(tid));


    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "DELETE");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAITranslationsApi::deleteTranslationCallback);

    worker->execute(&input);
}

void
OAITranslationsApi::deleteTranslationCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit deleteTranslationSignal();
    } else {
        emit deleteTranslationSignalE(error_type, error_str);
        emit deleteTranslationSignalEFull(worker, error_type, error_str);
    }
}

void
OAITranslationsApi::getAllTranslatorFormats() {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/api/translations/translationformats");



    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAITranslationsApi::getAllTranslatorFormatsCallback);

    worker->execute(&input);
}

void
OAITranslationsApi::getAllTranslatorFormatsCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QList<OAIBTModelFormatFullInfo*>* output = new QList<OAIBTModelFormatFullInfo*>();
    QString json(worker->response);
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    auto wrapper = new OAIQObjectWrapper<QList<OAIBTModelFormatFullInfo*>*> (output);
    wrapper->deleteLater();
    foreach(QJsonValue obj, jsonArray) {
        OAIBTModelFormatFullInfo* o = new OAIBTModelFormatFullInfo();
        QJsonObject jv = obj.toObject();
        QJsonObject * ptr = (QJsonObject*)&jv;
        o->fromJsonObject(*ptr);
        auto objwrapper = new OAIQObjectWrapper<OAIBTModelFormatFullInfo*> (o);
        objwrapper->deleteLater();
        output->append(o);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit getAllTranslatorFormatsSignal(output);
    } else {
        emit getAllTranslatorFormatsSignalE(output, error_type, error_str);
        emit getAllTranslatorFormatsSignalEFull(worker, error_type, error_str);
    }
}

void
OAITranslationsApi::getDocumentTranslations(QString* did, qint32 offset, qint32 limit) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/api/translations/d/{did}");

    QString didPathParam("{"); didPathParam.append("did").append("}");
    fullPath.replace(didPathParam, stringValue(did));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("offset"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(offset)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("limit"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(limit)));


    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAITranslationsApi::getDocumentTranslationsCallback);

    worker->execute(&input);
}

void
OAITranslationsApi::getDocumentTranslationsCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QString json(worker->response);
    OAIBTListResponseBTTranslationRequestInfo* output = static_cast<OAIBTListResponseBTTranslationRequestInfo*>(create(json, QString("OAIBTListResponseBTTranslationRequestInfo")));
    auto wrapper = new OAIQObjectWrapper<OAIBTListResponseBTTranslationRequestInfo*> (output);
    wrapper->deleteLater();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit getDocumentTranslationsSignal(output);
    } else {
        emit getDocumentTranslationsSignalE(output, error_type, error_str);
        emit getDocumentTranslationsSignalEFull(worker, error_type, error_str);
    }
}

void
OAITranslationsApi::getTranslation(QString* tid) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/api/translations/{tid}");

    QString tidPathParam("{"); tidPathParam.append("tid").append("}");
    fullPath.replace(tidPathParam, stringValue(tid));


    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAITranslationsApi::getTranslationCallback);

    worker->execute(&input);
}

void
OAITranslationsApi::getTranslationCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QString json(worker->response);
    OAIBTTranslationRequestInfo* output = static_cast<OAIBTTranslationRequestInfo*>(create(json, QString("OAIBTTranslationRequestInfo")));
    auto wrapper = new OAIQObjectWrapper<OAIBTTranslationRequestInfo*> (output);
    wrapper->deleteLater();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit getTranslationSignal(output);
    } else {
        emit getTranslationSignalE(output, error_type, error_str);
        emit getTranslationSignalEFull(worker, error_type, error_str);
    }
}


}
