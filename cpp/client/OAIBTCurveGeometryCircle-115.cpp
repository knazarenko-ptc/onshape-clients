/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * OpenAPI spec version: 1.111
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIBTCurveGeometryCircle-115.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIBTCurveGeometryCircle-115::OAIBTCurveGeometryCircle-115(QString json) {
    init();
    this->fromJson(json);
}

OAIBTCurveGeometryCircle-115::OAIBTCurveGeometryCircle-115() {
    init();
}

OAIBTCurveGeometryCircle-115::~OAIBTCurveGeometryCircle-115() {
    this->cleanup();
}

void
OAIBTCurveGeometryCircle-115::init() {
    bt_type = new QString("");
    m_bt_type_isSet = false;
    radius = 0.0;
    m_radius_isSet = false;
    xcenter = 0.0;
    m_xcenter_isSet = false;
    ycenter = 0.0;
    m_ycenter_isSet = false;
    xdir = 0.0;
    m_xdir_isSet = false;
    ydir = 0.0;
    m_ydir_isSet = false;
    clockwise = false;
    m_clockwise_isSet = false;
}

void
OAIBTCurveGeometryCircle-115::cleanup() {
    if(bt_type != nullptr) { 
        delete bt_type;
    }






}

OAIBTCurveGeometryCircle-115*
OAIBTCurveGeometryCircle-115::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIBTCurveGeometryCircle-115::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&bt_type, pJson["btType"], "QString", "QString");
    
    ::OpenAPI::setValue(&radius, pJson["radius"], "double", "");
    
    ::OpenAPI::setValue(&xcenter, pJson["xcenter"], "double", "");
    
    ::OpenAPI::setValue(&ycenter, pJson["ycenter"], "double", "");
    
    ::OpenAPI::setValue(&xdir, pJson["xdir"], "double", "");
    
    ::OpenAPI::setValue(&ydir, pJson["ydir"], "double", "");
    
    ::OpenAPI::setValue(&clockwise, pJson["clockwise"], "bool", "");
    
}

QString
OAIBTCurveGeometryCircle-115::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIBTCurveGeometryCircle-115::asJsonObject() {
    QJsonObject obj;
    if(bt_type != nullptr && *bt_type != QString("")){
        toJsonValue(QString("btType"), bt_type, obj, QString("QString"));
    }
    if(m_radius_isSet){
        obj.insert("radius", QJsonValue(radius));
    }
    if(m_xcenter_isSet){
        obj.insert("xcenter", QJsonValue(xcenter));
    }
    if(m_ycenter_isSet){
        obj.insert("ycenter", QJsonValue(ycenter));
    }
    if(m_xdir_isSet){
        obj.insert("xdir", QJsonValue(xdir));
    }
    if(m_ydir_isSet){
        obj.insert("ydir", QJsonValue(ydir));
    }
    if(m_clockwise_isSet){
        obj.insert("clockwise", QJsonValue(clockwise));
    }

    return obj;
}

QString*
OAIBTCurveGeometryCircle-115::getBtType() {
    return bt_type;
}
void
OAIBTCurveGeometryCircle-115::setBtType(QString* bt_type) {
    this->bt_type = bt_type;
    this->m_bt_type_isSet = true;
}

double
OAIBTCurveGeometryCircle-115::getRadius() {
    return radius;
}
void
OAIBTCurveGeometryCircle-115::setRadius(double radius) {
    this->radius = radius;
    this->m_radius_isSet = true;
}

double
OAIBTCurveGeometryCircle-115::getXcenter() {
    return xcenter;
}
void
OAIBTCurveGeometryCircle-115::setXcenter(double xcenter) {
    this->xcenter = xcenter;
    this->m_xcenter_isSet = true;
}

double
OAIBTCurveGeometryCircle-115::getYcenter() {
    return ycenter;
}
void
OAIBTCurveGeometryCircle-115::setYcenter(double ycenter) {
    this->ycenter = ycenter;
    this->m_ycenter_isSet = true;
}

double
OAIBTCurveGeometryCircle-115::getXdir() {
    return xdir;
}
void
OAIBTCurveGeometryCircle-115::setXdir(double xdir) {
    this->xdir = xdir;
    this->m_xdir_isSet = true;
}

double
OAIBTCurveGeometryCircle-115::getYdir() {
    return ydir;
}
void
OAIBTCurveGeometryCircle-115::setYdir(double ydir) {
    this->ydir = ydir;
    this->m_ydir_isSet = true;
}

bool
OAIBTCurveGeometryCircle-115::isClockwise() {
    return clockwise;
}
void
OAIBTCurveGeometryCircle-115::setClockwise(bool clockwise) {
    this->clockwise = clockwise;
    this->m_clockwise_isSet = true;
}


bool
OAIBTCurveGeometryCircle-115::isSet(){
    bool isObjectUpdated = false;
    do{
        if(bt_type != nullptr && *bt_type != QString("")){ isObjectUpdated = true; break;}
        if(m_radius_isSet){ isObjectUpdated = true; break;}
        if(m_xcenter_isSet){ isObjectUpdated = true; break;}
        if(m_ycenter_isSet){ isObjectUpdated = true; break;}
        if(m_xdir_isSet){ isObjectUpdated = true; break;}
        if(m_ydir_isSet){ isObjectUpdated = true; break;}
        if(m_clockwise_isSet){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

