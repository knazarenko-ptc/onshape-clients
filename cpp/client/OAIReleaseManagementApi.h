/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * OpenAPI spec version: 1.111
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef _OAI_OAIReleaseManagementApi_H_
#define _OAI_OAIReleaseManagementApi_H_

#include "OAIHttpRequest.h"

#include "OAIBTActiveWorkflowInfo.h"
#include "OAIBTReleasePackageInfo.h"
#include "OAIBTReleasePackageParams.h"
#include "OAIBTUpdateReleasePackageParams.h"
#include <QString>

#include <QObject>

namespace OpenAPI {

class OAIReleaseManagementApi: public QObject {
    Q_OBJECT

public:
    OAIReleaseManagementApi();
    OAIReleaseManagementApi(QString host, QString basePath);
    ~OAIReleaseManagementApi();

    QString host;
    QString basePath;
    QMap<QString, QString> defaultHeaders;

    void createObsoletionPackage(QString* wfid, QString* revision_id);
    void createReleasePackage(QString* wfid, OAIBTReleasePackageParams& oaibt_release_package_params);
    void getCompanyReleaseWorkflow(QString* document_id);
    void getReleasePackage(QString* rpid, bool detailed);
    void updateReleasePackage(QString* rpid, OAIBTUpdateReleasePackageParams& oaibt_update_release_package_params, QString* action, QString* wfaction);
    
private:
    void createObsoletionPackageCallback (OAIHttpRequestWorker * worker);
    void createReleasePackageCallback (OAIHttpRequestWorker * worker);
    void getCompanyReleaseWorkflowCallback (OAIHttpRequestWorker * worker);
    void getReleasePackageCallback (OAIHttpRequestWorker * worker);
    void updateReleasePackageCallback (OAIHttpRequestWorker * worker);
    
signals:
    void createObsoletionPackageSignal();
    void createReleasePackageSignal();
    void getCompanyReleaseWorkflowSignal(OAIBTActiveWorkflowInfo* summary);
    void getReleasePackageSignal(OAIBTReleasePackageInfo* summary);
    void updateReleasePackageSignal(OAIBTReleasePackageInfo* summary);
    
    void createObsoletionPackageSignalE(QNetworkReply::NetworkError error_type, QString& error_str);
    void createReleasePackageSignalE(QNetworkReply::NetworkError error_type, QString& error_str);
    void getCompanyReleaseWorkflowSignalE(OAIBTActiveWorkflowInfo* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void getReleasePackageSignalE(OAIBTReleasePackageInfo* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void updateReleasePackageSignalE(OAIBTReleasePackageInfo* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    
    void createObsoletionPackageSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void createReleasePackageSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void getCompanyReleaseWorkflowSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void getReleasePackageSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void updateReleasePackageSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    
};

}
#endif
