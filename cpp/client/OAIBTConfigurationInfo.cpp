/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * OpenAPI spec version: 1.111
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIBTConfigurationInfo.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIBTConfigurationInfo::OAIBTConfigurationInfo(QString json) {
    init();
    this->fromJson(json);
}

OAIBTConfigurationInfo::OAIBTConfigurationInfo() {
    init();
}

OAIBTConfigurationInfo::~OAIBTConfigurationInfo() {
    this->cleanup();
}

void
OAIBTConfigurationInfo::init() {
    is_standard_content = false;
    m_is_standard_content_isSet = false;
    parameters = new QList<OAIConfigurationInfoEntry*>();
    m_parameters_isSet = false;
}

void
OAIBTConfigurationInfo::cleanup() {

    if(parameters != nullptr) { 
        auto arr = parameters;
        for(auto o: *arr) { 
            delete o;
        }
        delete parameters;
    }
}

OAIBTConfigurationInfo*
OAIBTConfigurationInfo::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIBTConfigurationInfo::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&is_standard_content, pJson["isStandardContent"], "bool", "");
    
    
    ::OpenAPI::setValue(&parameters, pJson["parameters"], "QList", "OAIConfigurationInfoEntry");
}

QString
OAIBTConfigurationInfo::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIBTConfigurationInfo::asJsonObject() {
    QJsonObject obj;
    if(m_is_standard_content_isSet){
        obj.insert("isStandardContent", QJsonValue(is_standard_content));
    }
    if(parameters->size() > 0){
        toJsonArray((QList<void*>*)parameters, obj, "parameters", "OAIConfigurationInfoEntry");
    }

    return obj;
}

bool
OAIBTConfigurationInfo::isIsStandardContent() {
    return is_standard_content;
}
void
OAIBTConfigurationInfo::setIsStandardContent(bool is_standard_content) {
    this->is_standard_content = is_standard_content;
    this->m_is_standard_content_isSet = true;
}

QList<OAIConfigurationInfoEntry*>*
OAIBTConfigurationInfo::getParameters() {
    return parameters;
}
void
OAIBTConfigurationInfo::setParameters(QList<OAIConfigurationInfoEntry*>* parameters) {
    this->parameters = parameters;
    this->m_parameters_isSet = true;
}


bool
OAIBTConfigurationInfo::isSet(){
    bool isObjectUpdated = false;
    do{
        if(m_is_standard_content_isSet){ isObjectUpdated = true; break;}
        if(parameters->size() > 0){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

