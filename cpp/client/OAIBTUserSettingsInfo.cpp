/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * OpenAPI spec version: 1.111
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIBTUserSettingsInfo.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIBTUserSettingsInfo::OAIBTUserSettingsInfo(QString json) {
    init();
    this->fromJson(json);
}

OAIBTUserSettingsInfo::OAIBTUserSettingsInfo() {
    init();
}

OAIBTUserSettingsInfo::~OAIBTUserSettingsInfo() {
    this->cleanup();
}

void
OAIBTUserSettingsInfo::init() {
    common_units = new OAIBTCommonUnitsInfo();
    m_common_units_isSet = false;
    custom_colors = new QList<QString*>();
    m_custom_colors_isSet = false;
    default_units = new OAIBTDefaultUnitsInfo();
    m_default_units_isSet = false;
    drawing_background_id = 0;
    m_drawing_background_id_isSet = false;
    enforce_application_acl = false;
    m_enforce_application_acl_isSet = false;
    export_drawing_options = new QString("");
    m_export_drawing_options_isSet = false;
    export_solid_options = new QString("");
    m_export_solid_options_isSet = false;
    id = new QString("");
    m_id_isSet = false;
    import_options = new QString("");
    m_import_options_isSet = false;
    locale = new QString("");
    m_locale_isSet = false;
    material_library_settings = new OAIBTMaterialLibrarySettingsInfo();
    m_material_library_settings_isSet = false;
    mini_toolbar_settings = new QString("");
    m_mini_toolbar_settings_isSet = false;
    mouse_actions = new QString("");
    m_mouse_actions_isSet = false;
    reverse_scroll_wheel_zoom_direction = false;
    m_reverse_scroll_wheel_zoom_direction_isSet = false;
    startup_page = 0;
    m_startup_page_isSet = false;
    substitute_approvers = new QList<OAIBTSubstituteApproverInfo*>();
    m_substitute_approvers_isSet = false;
    units_display_precision = new OAIBTUnitsDisplayPrecision();
    m_units_display_precision_isSet = false;
    units_maximum_display_precision = new OAIBTUnitsMaximumDisplayPrecisionInfo();
    m_units_maximum_display_precision_isSet = false;
    use24_hour_time = false;
    m_use24_hour_time_isSet = false;
    view_manipulation_mouse_key_mapping = new OAIBTViewManipulationMouseKeyMappingInfo();
    m_view_manipulation_mouse_key_mapping_isSet = false;
    view_mapping_id = 0;
    m_view_mapping_id_isSet = false;
}

void
OAIBTUserSettingsInfo::cleanup() {
    if(common_units != nullptr) { 
        delete common_units;
    }
    if(custom_colors != nullptr) { 
        auto arr = custom_colors;
        for(auto o: *arr) { 
            delete o;
        }
        delete custom_colors;
    }
    if(default_units != nullptr) { 
        delete default_units;
    }


    if(export_drawing_options != nullptr) { 
        delete export_drawing_options;
    }
    if(export_solid_options != nullptr) { 
        delete export_solid_options;
    }
    if(id != nullptr) { 
        delete id;
    }
    if(import_options != nullptr) { 
        delete import_options;
    }
    if(locale != nullptr) { 
        delete locale;
    }
    if(material_library_settings != nullptr) { 
        delete material_library_settings;
    }
    if(mini_toolbar_settings != nullptr) { 
        delete mini_toolbar_settings;
    }
    if(mouse_actions != nullptr) { 
        delete mouse_actions;
    }


    if(substitute_approvers != nullptr) { 
        auto arr = substitute_approvers;
        for(auto o: *arr) { 
            delete o;
        }
        delete substitute_approvers;
    }
    if(units_display_precision != nullptr) { 
        delete units_display_precision;
    }
    if(units_maximum_display_precision != nullptr) { 
        delete units_maximum_display_precision;
    }

    if(view_manipulation_mouse_key_mapping != nullptr) { 
        delete view_manipulation_mouse_key_mapping;
    }

}

OAIBTUserSettingsInfo*
OAIBTUserSettingsInfo::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIBTUserSettingsInfo::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&common_units, pJson["commonUnits"], "OAIBTCommonUnitsInfo", "OAIBTCommonUnitsInfo");
    
    
    ::OpenAPI::setValue(&custom_colors, pJson["customColors"], "QList", "QString");
    ::OpenAPI::setValue(&default_units, pJson["defaultUnits"], "OAIBTDefaultUnitsInfo", "OAIBTDefaultUnitsInfo");
    
    ::OpenAPI::setValue(&drawing_background_id, pJson["drawingBackgroundId"], "qint32", "");
    
    ::OpenAPI::setValue(&enforce_application_acl, pJson["enforceApplicationAcl"], "bool", "");
    
    ::OpenAPI::setValue(&export_drawing_options, pJson["exportDrawingOptions"], "QString", "QString");
    
    ::OpenAPI::setValue(&export_solid_options, pJson["exportSolidOptions"], "QString", "QString");
    
    ::OpenAPI::setValue(&id, pJson["id"], "QString", "QString");
    
    ::OpenAPI::setValue(&import_options, pJson["importOptions"], "QString", "QString");
    
    ::OpenAPI::setValue(&locale, pJson["locale"], "QString", "QString");
    
    ::OpenAPI::setValue(&material_library_settings, pJson["materialLibrarySettings"], "OAIBTMaterialLibrarySettingsInfo", "OAIBTMaterialLibrarySettingsInfo");
    
    ::OpenAPI::setValue(&mini_toolbar_settings, pJson["miniToolbarSettings"], "QString", "QString");
    
    ::OpenAPI::setValue(&mouse_actions, pJson["mouseActions"], "QString", "QString");
    
    ::OpenAPI::setValue(&reverse_scroll_wheel_zoom_direction, pJson["reverseScrollWheelZoomDirection"], "bool", "");
    
    ::OpenAPI::setValue(&startup_page, pJson["startupPage"], "qint32", "");
    
    
    ::OpenAPI::setValue(&substitute_approvers, pJson["substituteApprovers"], "QList", "OAIBTSubstituteApproverInfo");
    ::OpenAPI::setValue(&units_display_precision, pJson["unitsDisplayPrecision"], "OAIBTUnitsDisplayPrecision", "OAIBTUnitsDisplayPrecision");
    
    ::OpenAPI::setValue(&units_maximum_display_precision, pJson["unitsMaximumDisplayPrecision"], "OAIBTUnitsMaximumDisplayPrecisionInfo", "OAIBTUnitsMaximumDisplayPrecisionInfo");
    
    ::OpenAPI::setValue(&use24_hour_time, pJson["use24HourTime"], "bool", "");
    
    ::OpenAPI::setValue(&view_manipulation_mouse_key_mapping, pJson["viewManipulationMouseKeyMapping"], "OAIBTViewManipulationMouseKeyMappingInfo", "OAIBTViewManipulationMouseKeyMappingInfo");
    
    ::OpenAPI::setValue(&view_mapping_id, pJson["viewMappingId"], "qint32", "");
    
}

QString
OAIBTUserSettingsInfo::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIBTUserSettingsInfo::asJsonObject() {
    QJsonObject obj;
    if((common_units != nullptr) && (common_units->isSet())){
        toJsonValue(QString("commonUnits"), common_units, obj, QString("OAIBTCommonUnitsInfo"));
    }
    if(custom_colors->size() > 0){
        toJsonArray((QList<void*>*)custom_colors, obj, "customColors", "QString");
    }
    if((default_units != nullptr) && (default_units->isSet())){
        toJsonValue(QString("defaultUnits"), default_units, obj, QString("OAIBTDefaultUnitsInfo"));
    }
    if(m_drawing_background_id_isSet){
        obj.insert("drawingBackgroundId", QJsonValue(drawing_background_id));
    }
    if(m_enforce_application_acl_isSet){
        obj.insert("enforceApplicationAcl", QJsonValue(enforce_application_acl));
    }
    if(export_drawing_options != nullptr && *export_drawing_options != QString("")){
        toJsonValue(QString("exportDrawingOptions"), export_drawing_options, obj, QString("QString"));
    }
    if(export_solid_options != nullptr && *export_solid_options != QString("")){
        toJsonValue(QString("exportSolidOptions"), export_solid_options, obj, QString("QString"));
    }
    if(id != nullptr && *id != QString("")){
        toJsonValue(QString("id"), id, obj, QString("QString"));
    }
    if(import_options != nullptr && *import_options != QString("")){
        toJsonValue(QString("importOptions"), import_options, obj, QString("QString"));
    }
    if(locale != nullptr && *locale != QString("")){
        toJsonValue(QString("locale"), locale, obj, QString("QString"));
    }
    if((material_library_settings != nullptr) && (material_library_settings->isSet())){
        toJsonValue(QString("materialLibrarySettings"), material_library_settings, obj, QString("OAIBTMaterialLibrarySettingsInfo"));
    }
    if(mini_toolbar_settings != nullptr && *mini_toolbar_settings != QString("")){
        toJsonValue(QString("miniToolbarSettings"), mini_toolbar_settings, obj, QString("QString"));
    }
    if(mouse_actions != nullptr && *mouse_actions != QString("")){
        toJsonValue(QString("mouseActions"), mouse_actions, obj, QString("QString"));
    }
    if(m_reverse_scroll_wheel_zoom_direction_isSet){
        obj.insert("reverseScrollWheelZoomDirection", QJsonValue(reverse_scroll_wheel_zoom_direction));
    }
    if(m_startup_page_isSet){
        obj.insert("startupPage", QJsonValue(startup_page));
    }
    if(substitute_approvers->size() > 0){
        toJsonArray((QList<void*>*)substitute_approvers, obj, "substituteApprovers", "OAIBTSubstituteApproverInfo");
    }
    if((units_display_precision != nullptr) && (units_display_precision->isSet())){
        toJsonValue(QString("unitsDisplayPrecision"), units_display_precision, obj, QString("OAIBTUnitsDisplayPrecision"));
    }
    if((units_maximum_display_precision != nullptr) && (units_maximum_display_precision->isSet())){
        toJsonValue(QString("unitsMaximumDisplayPrecision"), units_maximum_display_precision, obj, QString("OAIBTUnitsMaximumDisplayPrecisionInfo"));
    }
    if(m_use24_hour_time_isSet){
        obj.insert("use24HourTime", QJsonValue(use24_hour_time));
    }
    if((view_manipulation_mouse_key_mapping != nullptr) && (view_manipulation_mouse_key_mapping->isSet())){
        toJsonValue(QString("viewManipulationMouseKeyMapping"), view_manipulation_mouse_key_mapping, obj, QString("OAIBTViewManipulationMouseKeyMappingInfo"));
    }
    if(m_view_mapping_id_isSet){
        obj.insert("viewMappingId", QJsonValue(view_mapping_id));
    }

    return obj;
}

OAIBTCommonUnitsInfo*
OAIBTUserSettingsInfo::getCommonUnits() {
    return common_units;
}
void
OAIBTUserSettingsInfo::setCommonUnits(OAIBTCommonUnitsInfo* common_units) {
    this->common_units = common_units;
    this->m_common_units_isSet = true;
}

QList<QString*>*
OAIBTUserSettingsInfo::getCustomColors() {
    return custom_colors;
}
void
OAIBTUserSettingsInfo::setCustomColors(QList<QString*>* custom_colors) {
    this->custom_colors = custom_colors;
    this->m_custom_colors_isSet = true;
}

OAIBTDefaultUnitsInfo*
OAIBTUserSettingsInfo::getDefaultUnits() {
    return default_units;
}
void
OAIBTUserSettingsInfo::setDefaultUnits(OAIBTDefaultUnitsInfo* default_units) {
    this->default_units = default_units;
    this->m_default_units_isSet = true;
}

qint32
OAIBTUserSettingsInfo::getDrawingBackgroundId() {
    return drawing_background_id;
}
void
OAIBTUserSettingsInfo::setDrawingBackgroundId(qint32 drawing_background_id) {
    this->drawing_background_id = drawing_background_id;
    this->m_drawing_background_id_isSet = true;
}

bool
OAIBTUserSettingsInfo::isEnforceApplicationAcl() {
    return enforce_application_acl;
}
void
OAIBTUserSettingsInfo::setEnforceApplicationAcl(bool enforce_application_acl) {
    this->enforce_application_acl = enforce_application_acl;
    this->m_enforce_application_acl_isSet = true;
}

QString*
OAIBTUserSettingsInfo::getExportDrawingOptions() {
    return export_drawing_options;
}
void
OAIBTUserSettingsInfo::setExportDrawingOptions(QString* export_drawing_options) {
    this->export_drawing_options = export_drawing_options;
    this->m_export_drawing_options_isSet = true;
}

QString*
OAIBTUserSettingsInfo::getExportSolidOptions() {
    return export_solid_options;
}
void
OAIBTUserSettingsInfo::setExportSolidOptions(QString* export_solid_options) {
    this->export_solid_options = export_solid_options;
    this->m_export_solid_options_isSet = true;
}

QString*
OAIBTUserSettingsInfo::getId() {
    return id;
}
void
OAIBTUserSettingsInfo::setId(QString* id) {
    this->id = id;
    this->m_id_isSet = true;
}

QString*
OAIBTUserSettingsInfo::getImportOptions() {
    return import_options;
}
void
OAIBTUserSettingsInfo::setImportOptions(QString* import_options) {
    this->import_options = import_options;
    this->m_import_options_isSet = true;
}

QString*
OAIBTUserSettingsInfo::getLocale() {
    return locale;
}
void
OAIBTUserSettingsInfo::setLocale(QString* locale) {
    this->locale = locale;
    this->m_locale_isSet = true;
}

OAIBTMaterialLibrarySettingsInfo*
OAIBTUserSettingsInfo::getMaterialLibrarySettings() {
    return material_library_settings;
}
void
OAIBTUserSettingsInfo::setMaterialLibrarySettings(OAIBTMaterialLibrarySettingsInfo* material_library_settings) {
    this->material_library_settings = material_library_settings;
    this->m_material_library_settings_isSet = true;
}

QString*
OAIBTUserSettingsInfo::getMiniToolbarSettings() {
    return mini_toolbar_settings;
}
void
OAIBTUserSettingsInfo::setMiniToolbarSettings(QString* mini_toolbar_settings) {
    this->mini_toolbar_settings = mini_toolbar_settings;
    this->m_mini_toolbar_settings_isSet = true;
}

QString*
OAIBTUserSettingsInfo::getMouseActions() {
    return mouse_actions;
}
void
OAIBTUserSettingsInfo::setMouseActions(QString* mouse_actions) {
    this->mouse_actions = mouse_actions;
    this->m_mouse_actions_isSet = true;
}

bool
OAIBTUserSettingsInfo::isReverseScrollWheelZoomDirection() {
    return reverse_scroll_wheel_zoom_direction;
}
void
OAIBTUserSettingsInfo::setReverseScrollWheelZoomDirection(bool reverse_scroll_wheel_zoom_direction) {
    this->reverse_scroll_wheel_zoom_direction = reverse_scroll_wheel_zoom_direction;
    this->m_reverse_scroll_wheel_zoom_direction_isSet = true;
}

qint32
OAIBTUserSettingsInfo::getStartupPage() {
    return startup_page;
}
void
OAIBTUserSettingsInfo::setStartupPage(qint32 startup_page) {
    this->startup_page = startup_page;
    this->m_startup_page_isSet = true;
}

QList<OAIBTSubstituteApproverInfo*>*
OAIBTUserSettingsInfo::getSubstituteApprovers() {
    return substitute_approvers;
}
void
OAIBTUserSettingsInfo::setSubstituteApprovers(QList<OAIBTSubstituteApproverInfo*>* substitute_approvers) {
    this->substitute_approvers = substitute_approvers;
    this->m_substitute_approvers_isSet = true;
}

OAIBTUnitsDisplayPrecision*
OAIBTUserSettingsInfo::getUnitsDisplayPrecision() {
    return units_display_precision;
}
void
OAIBTUserSettingsInfo::setUnitsDisplayPrecision(OAIBTUnitsDisplayPrecision* units_display_precision) {
    this->units_display_precision = units_display_precision;
    this->m_units_display_precision_isSet = true;
}

OAIBTUnitsMaximumDisplayPrecisionInfo*
OAIBTUserSettingsInfo::getUnitsMaximumDisplayPrecision() {
    return units_maximum_display_precision;
}
void
OAIBTUserSettingsInfo::setUnitsMaximumDisplayPrecision(OAIBTUnitsMaximumDisplayPrecisionInfo* units_maximum_display_precision) {
    this->units_maximum_display_precision = units_maximum_display_precision;
    this->m_units_maximum_display_precision_isSet = true;
}

bool
OAIBTUserSettingsInfo::isUse24HourTime() {
    return use24_hour_time;
}
void
OAIBTUserSettingsInfo::setUse24HourTime(bool use24_hour_time) {
    this->use24_hour_time = use24_hour_time;
    this->m_use24_hour_time_isSet = true;
}

OAIBTViewManipulationMouseKeyMappingInfo*
OAIBTUserSettingsInfo::getViewManipulationMouseKeyMapping() {
    return view_manipulation_mouse_key_mapping;
}
void
OAIBTUserSettingsInfo::setViewManipulationMouseKeyMapping(OAIBTViewManipulationMouseKeyMappingInfo* view_manipulation_mouse_key_mapping) {
    this->view_manipulation_mouse_key_mapping = view_manipulation_mouse_key_mapping;
    this->m_view_manipulation_mouse_key_mapping_isSet = true;
}

qint32
OAIBTUserSettingsInfo::getViewMappingId() {
    return view_mapping_id;
}
void
OAIBTUserSettingsInfo::setViewMappingId(qint32 view_mapping_id) {
    this->view_mapping_id = view_mapping_id;
    this->m_view_mapping_id_isSet = true;
}


bool
OAIBTUserSettingsInfo::isSet(){
    bool isObjectUpdated = false;
    do{
        if(common_units != nullptr && common_units->isSet()){ isObjectUpdated = true; break;}
        if(custom_colors->size() > 0){ isObjectUpdated = true; break;}
        if(default_units != nullptr && default_units->isSet()){ isObjectUpdated = true; break;}
        if(m_drawing_background_id_isSet){ isObjectUpdated = true; break;}
        if(m_enforce_application_acl_isSet){ isObjectUpdated = true; break;}
        if(export_drawing_options != nullptr && *export_drawing_options != QString("")){ isObjectUpdated = true; break;}
        if(export_solid_options != nullptr && *export_solid_options != QString("")){ isObjectUpdated = true; break;}
        if(id != nullptr && *id != QString("")){ isObjectUpdated = true; break;}
        if(import_options != nullptr && *import_options != QString("")){ isObjectUpdated = true; break;}
        if(locale != nullptr && *locale != QString("")){ isObjectUpdated = true; break;}
        if(material_library_settings != nullptr && material_library_settings->isSet()){ isObjectUpdated = true; break;}
        if(mini_toolbar_settings != nullptr && *mini_toolbar_settings != QString("")){ isObjectUpdated = true; break;}
        if(mouse_actions != nullptr && *mouse_actions != QString("")){ isObjectUpdated = true; break;}
        if(m_reverse_scroll_wheel_zoom_direction_isSet){ isObjectUpdated = true; break;}
        if(m_startup_page_isSet){ isObjectUpdated = true; break;}
        if(substitute_approvers->size() > 0){ isObjectUpdated = true; break;}
        if(units_display_precision != nullptr && units_display_precision->isSet()){ isObjectUpdated = true; break;}
        if(units_maximum_display_precision != nullptr && units_maximum_display_precision->isSet()){ isObjectUpdated = true; break;}
        if(m_use24_hour_time_isSet){ isObjectUpdated = true; break;}
        if(view_manipulation_mouse_key_mapping != nullptr && view_manipulation_mouse_key_mapping->isSet()){ isObjectUpdated = true; break;}
        if(m_view_mapping_id_isSet){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

