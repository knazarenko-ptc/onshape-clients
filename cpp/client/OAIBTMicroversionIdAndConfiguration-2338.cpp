/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * OpenAPI spec version: 1.111
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIBTMicroversionIdAndConfiguration-2338.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIBTMicroversionIdAndConfiguration-2338::OAIBTMicroversionIdAndConfiguration-2338(QString json) {
    init();
    this->fromJson(json);
}

OAIBTMicroversionIdAndConfiguration-2338::OAIBTMicroversionIdAndConfiguration-2338() {
    init();
}

OAIBTMicroversionIdAndConfiguration-2338::~OAIBTMicroversionIdAndConfiguration-2338() {
    this->cleanup();
}

void
OAIBTMicroversionIdAndConfiguration-2338::init() {
    bt_type = new QString("");
    m_bt_type_isSet = false;
    cache_key = new QString("");
    m_cache_key_isSet = false;
    configuration_parameter_id_to_value = new QMap<QString, OAIBTFSValue-1888*>();
    m_configuration_parameter_id_to_value_isSet = false;
    deleted = false;
    m_deleted_isSet = false;
    description = new QString("");
    m_description_isSet = false;
    microversion = new OAIBTMicroversionId-366();
    m_microversion_isSet = false;
}

void
OAIBTMicroversionIdAndConfiguration-2338::cleanup() {
    if(bt_type != nullptr) { 
        delete bt_type;
    }
    if(cache_key != nullptr) { 
        delete cache_key;
    }
    if(configuration_parameter_id_to_value != nullptr) { 
        auto arr = configuration_parameter_id_to_value;
        for(auto o: *arr) { 
            delete o;
        }
        delete configuration_parameter_id_to_value;
    }

    if(description != nullptr) { 
        delete description;
    }
    if(microversion != nullptr) { 
        delete microversion;
    }
}

OAIBTMicroversionIdAndConfiguration-2338*
OAIBTMicroversionIdAndConfiguration-2338::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIBTMicroversionIdAndConfiguration-2338::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&bt_type, pJson["btType"], "QString", "QString");
    
    ::OpenAPI::setValue(&cache_key, pJson["cacheKey"], "QString", "QString");
    
    
    ::OpenAPI::setValue(&configuration_parameter_id_to_value, pJson["configurationParameterIdToValue"], "QMap", "OAIBTFSValue-1888");
    ::OpenAPI::setValue(&deleted, pJson["deleted"], "bool", "");
    
    ::OpenAPI::setValue(&description, pJson["description"], "QString", "QString");
    
    ::OpenAPI::setValue(&microversion, pJson["microversion"], "OAIBTMicroversionId-366", "OAIBTMicroversionId-366");
    
}

QString
OAIBTMicroversionIdAndConfiguration-2338::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIBTMicroversionIdAndConfiguration-2338::asJsonObject() {
    QJsonObject obj;
    if(bt_type != nullptr && *bt_type != QString("")){
        toJsonValue(QString("btType"), bt_type, obj, QString("QString"));
    }
    if(cache_key != nullptr && *cache_key != QString("")){
        toJsonValue(QString("cacheKey"), cache_key, obj, QString("QString"));
    }
    if(configuration_parameter_id_to_value->size() > 0){
        toJsonMap((QMap<QString, void*>*) configuration_parameter_id_to_value, obj, "configurationParameterIdToValue", "OAIBTFSValue-1888");
    }
    if(m_deleted_isSet){
        obj.insert("deleted", QJsonValue(deleted));
    }
    if(description != nullptr && *description != QString("")){
        toJsonValue(QString("description"), description, obj, QString("QString"));
    }
    if((microversion != nullptr) && (microversion->isSet())){
        toJsonValue(QString("microversion"), microversion, obj, QString("OAIBTMicroversionId-366"));
    }

    return obj;
}

QString*
OAIBTMicroversionIdAndConfiguration-2338::getBtType() {
    return bt_type;
}
void
OAIBTMicroversionIdAndConfiguration-2338::setBtType(QString* bt_type) {
    this->bt_type = bt_type;
    this->m_bt_type_isSet = true;
}

QString*
OAIBTMicroversionIdAndConfiguration-2338::getCacheKey() {
    return cache_key;
}
void
OAIBTMicroversionIdAndConfiguration-2338::setCacheKey(QString* cache_key) {
    this->cache_key = cache_key;
    this->m_cache_key_isSet = true;
}

QMap<QString, OAIBTFSValue-1888*>*
OAIBTMicroversionIdAndConfiguration-2338::getConfigurationParameterIdToValue() {
    return configuration_parameter_id_to_value;
}
void
OAIBTMicroversionIdAndConfiguration-2338::setConfigurationParameterIdToValue(QMap<QString, OAIBTFSValue-1888*>* configuration_parameter_id_to_value) {
    this->configuration_parameter_id_to_value = configuration_parameter_id_to_value;
    this->m_configuration_parameter_id_to_value_isSet = true;
}

bool
OAIBTMicroversionIdAndConfiguration-2338::isDeleted() {
    return deleted;
}
void
OAIBTMicroversionIdAndConfiguration-2338::setDeleted(bool deleted) {
    this->deleted = deleted;
    this->m_deleted_isSet = true;
}

QString*
OAIBTMicroversionIdAndConfiguration-2338::getDescription() {
    return description;
}
void
OAIBTMicroversionIdAndConfiguration-2338::setDescription(QString* description) {
    this->description = description;
    this->m_description_isSet = true;
}

OAIBTMicroversionId-366*
OAIBTMicroversionIdAndConfiguration-2338::getMicroversion() {
    return microversion;
}
void
OAIBTMicroversionIdAndConfiguration-2338::setMicroversion(OAIBTMicroversionId-366* microversion) {
    this->microversion = microversion;
    this->m_microversion_isSet = true;
}


bool
OAIBTMicroversionIdAndConfiguration-2338::isSet(){
    bool isObjectUpdated = false;
    do{
        if(bt_type != nullptr && *bt_type != QString("")){ isObjectUpdated = true; break;}
        if(cache_key != nullptr && *cache_key != QString("")){ isObjectUpdated = true; break;}
        if(configuration_parameter_id_to_value->size() > 0){ isObjectUpdated = true; break;}
        if(m_deleted_isSet){ isObjectUpdated = true; break;}
        if(description != nullptr && *description != QString("")){ isObjectUpdated = true; break;}
        if(microversion != nullptr && microversion->isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

