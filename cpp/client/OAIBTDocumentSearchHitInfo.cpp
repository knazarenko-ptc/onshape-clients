/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * OpenAPI spec version: 1.111
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIBTDocumentSearchHitInfo.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIBTDocumentSearchHitInfo::OAIBTDocumentSearchHitInfo(QString json) {
    init();
    this->fromJson(json);
}

OAIBTDocumentSearchHitInfo::OAIBTDocumentSearchHitInfo() {
    init();
}

OAIBTDocumentSearchHitInfo::~OAIBTDocumentSearchHitInfo() {
    this->cleanup();
}

void
OAIBTDocumentSearchHitInfo::init() {
    document_id = new QString("");
    m_document_id_isSet = false;
    element_name = new QString("");
    m_element_name_isSet = false;
    highlighted_fields = new QMap<QString, QList<QString*>*>();
    m_highlighted_fields_isSet = false;
    name = new QString("");
    m_name_isSet = false;
    source_map = new QMap<QString, OAIObject*>();
    m_source_map_isSet = false;
    type = new QString("");
    m_type_isSet = false;
    version_or_workspace_name = new QString("");
    m_version_or_workspace_name_isSet = false;
}

void
OAIBTDocumentSearchHitInfo::cleanup() {
    if(document_id != nullptr) { 
        delete document_id;
    }
    if(element_name != nullptr) { 
        delete element_name;
    }
    if(highlighted_fields != nullptr) { 
        auto arr = highlighted_fields;
        for(auto o: *arr) { 
            for(auto o1: *o) {
                delete o1;
            }
            delete o;
        }
        delete highlighted_fields;
    }
    if(name != nullptr) { 
        delete name;
    }
    if(source_map != nullptr) { 
        auto arr = source_map;
        for(auto o: *arr) { 
            delete o;
        }
        delete source_map;
    }
    if(type != nullptr) { 
        delete type;
    }
    if(version_or_workspace_name != nullptr) { 
        delete version_or_workspace_name;
    }
}

OAIBTDocumentSearchHitInfo*
OAIBTDocumentSearchHitInfo::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIBTDocumentSearchHitInfo::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&document_id, pJson["documentId"], "QString", "QString");
    
    ::OpenAPI::setValue(&element_name, pJson["elementName"], "QString", "QString");
    
    
    
    if(pJson["highlightedFields"].isObject()){
        auto varmap = pJson["highlightedFields"].toObject().toVariantMap();
        if(varmap.count() > 0){
            for(auto val : varmap.keys()){
                auto highlighted_fields_item = new QList<QString*>();
                
    		    auto jsonval = QJsonValue::fromVariant(varmap.value(val));
    		    ::OpenAPI::setValue((QMap<QString, void *>*)&highlighted_fields_item, jsonval, "QList", "QString");

                highlighted_fields->insert(highlighted_fields->end(), val, highlighted_fields_item);
            }
        }
    }
    ::OpenAPI::setValue(&name, pJson["name"], "QString", "QString");
    
    
    ::OpenAPI::setValue(&source_map, pJson["sourceMap"], "QMap", "OAIObject");
    ::OpenAPI::setValue(&type, pJson["type"], "QString", "QString");
    
    ::OpenAPI::setValue(&version_or_workspace_name, pJson["versionOrWorkspaceName"], "QString", "QString");
    
}

QString
OAIBTDocumentSearchHitInfo::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIBTDocumentSearchHitInfo::asJsonObject() {
    QJsonObject obj;
    if(document_id != nullptr && *document_id != QString("")){
        toJsonValue(QString("documentId"), document_id, obj, QString("QString"));
    }
    if(element_name != nullptr && *element_name != QString("")){
        toJsonValue(QString("elementName"), element_name, obj, QString("QString"));
    }
    if(highlighted_fields->size() > 0){
        
        QJsonObject mapobj;
        for(auto itemkey : highlighted_fields->keys()){
            QJsonObject jobj;
            toJsonArray((QList<void*>*)highlighted_fields->value(itemkey), jobj, itemkey, "QString");
            mapobj.insert(itemkey, jobj);
        }
        obj.insert("highlightedFields", mapobj);
    }
    if(name != nullptr && *name != QString("")){
        toJsonValue(QString("name"), name, obj, QString("QString"));
    }
    if(source_map->size() > 0){
        toJsonMap((QMap<QString, void*>*) source_map, obj, "sourceMap", "OAIObject");
    }
    if(type != nullptr && *type != QString("")){
        toJsonValue(QString("type"), type, obj, QString("QString"));
    }
    if(version_or_workspace_name != nullptr && *version_or_workspace_name != QString("")){
        toJsonValue(QString("versionOrWorkspaceName"), version_or_workspace_name, obj, QString("QString"));
    }

    return obj;
}

QString*
OAIBTDocumentSearchHitInfo::getDocumentId() {
    return document_id;
}
void
OAIBTDocumentSearchHitInfo::setDocumentId(QString* document_id) {
    this->document_id = document_id;
    this->m_document_id_isSet = true;
}

QString*
OAIBTDocumentSearchHitInfo::getElementName() {
    return element_name;
}
void
OAIBTDocumentSearchHitInfo::setElementName(QString* element_name) {
    this->element_name = element_name;
    this->m_element_name_isSet = true;
}

QMap<QString, QList<QString*>*>*
OAIBTDocumentSearchHitInfo::getHighlightedFields() {
    return highlighted_fields;
}
void
OAIBTDocumentSearchHitInfo::setHighlightedFields(QMap<QString, QList<QString*>*>* highlighted_fields) {
    this->highlighted_fields = highlighted_fields;
    this->m_highlighted_fields_isSet = true;
}

QString*
OAIBTDocumentSearchHitInfo::getName() {
    return name;
}
void
OAIBTDocumentSearchHitInfo::setName(QString* name) {
    this->name = name;
    this->m_name_isSet = true;
}

QMap<QString, OAIObject*>*
OAIBTDocumentSearchHitInfo::getSourceMap() {
    return source_map;
}
void
OAIBTDocumentSearchHitInfo::setSourceMap(QMap<QString, OAIObject*>* source_map) {
    this->source_map = source_map;
    this->m_source_map_isSet = true;
}

QString*
OAIBTDocumentSearchHitInfo::getType() {
    return type;
}
void
OAIBTDocumentSearchHitInfo::setType(QString* type) {
    this->type = type;
    this->m_type_isSet = true;
}

QString*
OAIBTDocumentSearchHitInfo::getVersionOrWorkspaceName() {
    return version_or_workspace_name;
}
void
OAIBTDocumentSearchHitInfo::setVersionOrWorkspaceName(QString* version_or_workspace_name) {
    this->version_or_workspace_name = version_or_workspace_name;
    this->m_version_or_workspace_name_isSet = true;
}


bool
OAIBTDocumentSearchHitInfo::isSet(){
    bool isObjectUpdated = false;
    do{
        if(document_id != nullptr && *document_id != QString("")){ isObjectUpdated = true; break;}
        if(element_name != nullptr && *element_name != QString("")){ isObjectUpdated = true; break;}
        if(highlighted_fields->size() > 0){ isObjectUpdated = true; break;}
        if(name != nullptr && *name != QString("")){ isObjectUpdated = true; break;}
        if(source_map->size() > 0){ isObjectUpdated = true; break;}
        if(type != nullptr && *type != QString("")){ isObjectUpdated = true; break;}
        if(version_or_workspace_name != nullptr && *version_or_workspace_name != QString("")){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

