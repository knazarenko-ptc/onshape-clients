/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * OpenAPI spec version: 1.111
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIBTAssemblyFeatureDataInfo.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIBTAssemblyFeatureDataInfo::OAIBTAssemblyFeatureDataInfo(QString json) {
    init();
    this->fromJson(json);
}

OAIBTAssemblyFeatureDataInfo::OAIBTAssemblyFeatureDataInfo() {
    init();
}

OAIBTAssemblyFeatureDataInfo::~OAIBTAssemblyFeatureDataInfo() {
    this->cleanup();
}

void
OAIBTAssemblyFeatureDataInfo::init() {
    mate_type = new QString("");
    m_mate_type_isSet = false;
    mated_entities = new QList<OAIBTAssemblyMatedEntity*>();
    m_mated_entities_isSet = false;
    name = new QString("");
    m_name_isSet = false;
}

void
OAIBTAssemblyFeatureDataInfo::cleanup() {
    if(mate_type != nullptr) { 
        delete mate_type;
    }
    if(mated_entities != nullptr) { 
        auto arr = mated_entities;
        for(auto o: *arr) { 
            delete o;
        }
        delete mated_entities;
    }
    if(name != nullptr) { 
        delete name;
    }
}

OAIBTAssemblyFeatureDataInfo*
OAIBTAssemblyFeatureDataInfo::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIBTAssemblyFeatureDataInfo::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&mate_type, pJson["mateType"], "QString", "QString");
    
    
    ::OpenAPI::setValue(&mated_entities, pJson["matedEntities"], "QList", "OAIBTAssemblyMatedEntity");
    ::OpenAPI::setValue(&name, pJson["name"], "QString", "QString");
    
}

QString
OAIBTAssemblyFeatureDataInfo::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIBTAssemblyFeatureDataInfo::asJsonObject() {
    QJsonObject obj;
    if(mate_type != nullptr && *mate_type != QString("")){
        toJsonValue(QString("mateType"), mate_type, obj, QString("QString"));
    }
    if(mated_entities->size() > 0){
        toJsonArray((QList<void*>*)mated_entities, obj, "matedEntities", "OAIBTAssemblyMatedEntity");
    }
    if(name != nullptr && *name != QString("")){
        toJsonValue(QString("name"), name, obj, QString("QString"));
    }

    return obj;
}

QString*
OAIBTAssemblyFeatureDataInfo::getMateType() {
    return mate_type;
}
void
OAIBTAssemblyFeatureDataInfo::setMateType(QString* mate_type) {
    this->mate_type = mate_type;
    this->m_mate_type_isSet = true;
}

QList<OAIBTAssemblyMatedEntity*>*
OAIBTAssemblyFeatureDataInfo::getMatedEntities() {
    return mated_entities;
}
void
OAIBTAssemblyFeatureDataInfo::setMatedEntities(QList<OAIBTAssemblyMatedEntity*>* mated_entities) {
    this->mated_entities = mated_entities;
    this->m_mated_entities_isSet = true;
}

QString*
OAIBTAssemblyFeatureDataInfo::getName() {
    return name;
}
void
OAIBTAssemblyFeatureDataInfo::setName(QString* name) {
    this->name = name;
    this->m_name_isSet = true;
}


bool
OAIBTAssemblyFeatureDataInfo::isSet(){
    bool isObjectUpdated = false;
    do{
        if(mate_type != nullptr && *mate_type != QString("")){ isObjectUpdated = true; break;}
        if(mated_entities->size() > 0){ isObjectUpdated = true; break;}
        if(name != nullptr && *name != QString("")){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

