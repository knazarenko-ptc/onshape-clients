/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * OpenAPI spec version: 1.111
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIBTCommentInfo.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIBTCommentInfo::OAIBTCommentInfo(QString json) {
    init();
    this->fromJson(json);
}

OAIBTCommentInfo::OAIBTCommentInfo() {
    init();
}

OAIBTCommentInfo::~OAIBTCommentInfo() {
    this->cleanup();
}

void
OAIBTCommentInfo::init() {
    assembly_features = new QList<QString*>();
    m_assembly_features_isSet = false;
    assigned_at = NULL;
    m_assigned_at_isSet = false;
    assignee = new OAIBTUserSummaryInfo();
    m_assignee_isSet = false;
    attachment = new OAIBTCommentAttachmentInfo();
    m_attachment_isSet = false;
    can_delete = false;
    m_can_delete_isSet = false;
    can_resolve_or_reopen = false;
    m_can_resolve_or_reopen_isSet = false;
    created_at = NULL;
    m_created_at_isSet = false;
    document_id = new QString("");
    m_document_id_isSet = false;
    element_feature = new QString("");
    m_element_feature_isSet = false;
    element_id = new QString("");
    m_element_id_isSet = false;
    element_occurrences = new QList<QString*>();
    m_element_occurrences_isSet = false;
    element_query = new QString("");
    m_element_query_isSet = false;
    href = new QString("");
    m_href_isSet = false;
    id = new QString("");
    m_id_isSet = false;
    message = new QString("");
    m_message_isSet = false;
    name = new QString("");
    m_name_isSet = false;
    parent_id = new QString("");
    m_parent_id_isSet = false;
    release_package_id = new QString("");
    m_release_package_id_isSet = false;
    reopened_at = NULL;
    m_reopened_at_isSet = false;
    reopened_by = new OAIBTUserSummaryInfo();
    m_reopened_by_isSet = false;
    reply_count = 0L;
    m_reply_count_isSet = false;
    resolved_at = NULL;
    m_resolved_at_isSet = false;
    resolved_by = new OAIBTUserSummaryInfo();
    m_resolved_by_isSet = false;
    state = 0;
    m_state_isSet = false;
    thumbnail = new OAIBTCommentAttachmentInfo();
    m_thumbnail_isSet = false;
    top_level = false;
    m_top_level_isSet = false;
    user = new OAIBTUserSummaryInfo();
    m_user_isSet = false;
    version_id = new QString("");
    m_version_id_isSet = false;
    view_data = new OAIBTViewDataInfo();
    m_view_data_isSet = false;
    view_ref = new QString("");
    m_view_ref_isSet = false;
    workspace_id = new QString("");
    m_workspace_id_isSet = false;
}

void
OAIBTCommentInfo::cleanup() {
    if(assembly_features != nullptr) { 
        auto arr = assembly_features;
        for(auto o: *arr) { 
            delete o;
        }
        delete assembly_features;
    }
    if(assigned_at != nullptr) { 
        delete assigned_at;
    }
    if(assignee != nullptr) { 
        delete assignee;
    }
    if(attachment != nullptr) { 
        delete attachment;
    }


    if(created_at != nullptr) { 
        delete created_at;
    }
    if(document_id != nullptr) { 
        delete document_id;
    }
    if(element_feature != nullptr) { 
        delete element_feature;
    }
    if(element_id != nullptr) { 
        delete element_id;
    }
    if(element_occurrences != nullptr) { 
        auto arr = element_occurrences;
        for(auto o: *arr) { 
            delete o;
        }
        delete element_occurrences;
    }
    if(element_query != nullptr) { 
        delete element_query;
    }
    if(href != nullptr) { 
        delete href;
    }
    if(id != nullptr) { 
        delete id;
    }
    if(message != nullptr) { 
        delete message;
    }
    if(name != nullptr) { 
        delete name;
    }
    if(parent_id != nullptr) { 
        delete parent_id;
    }
    if(release_package_id != nullptr) { 
        delete release_package_id;
    }
    if(reopened_at != nullptr) { 
        delete reopened_at;
    }
    if(reopened_by != nullptr) { 
        delete reopened_by;
    }

    if(resolved_at != nullptr) { 
        delete resolved_at;
    }
    if(resolved_by != nullptr) { 
        delete resolved_by;
    }

    if(thumbnail != nullptr) { 
        delete thumbnail;
    }

    if(user != nullptr) { 
        delete user;
    }
    if(version_id != nullptr) { 
        delete version_id;
    }
    if(view_data != nullptr) { 
        delete view_data;
    }
    if(view_ref != nullptr) { 
        delete view_ref;
    }
    if(workspace_id != nullptr) { 
        delete workspace_id;
    }
}

OAIBTCommentInfo*
OAIBTCommentInfo::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIBTCommentInfo::fromJsonObject(QJsonObject pJson) {
    
    ::OpenAPI::setValue(&assembly_features, pJson["assemblyFeatures"], "QList", "QString");
    ::OpenAPI::setValue(&assigned_at, pJson["assignedAt"], "QDateTime", "QDateTime");
    
    ::OpenAPI::setValue(&assignee, pJson["assignee"], "OAIBTUserSummaryInfo", "OAIBTUserSummaryInfo");
    
    ::OpenAPI::setValue(&attachment, pJson["attachment"], "OAIBTCommentAttachmentInfo", "OAIBTCommentAttachmentInfo");
    
    ::OpenAPI::setValue(&can_delete, pJson["canDelete"], "bool", "");
    
    ::OpenAPI::setValue(&can_resolve_or_reopen, pJson["canResolveOrReopen"], "bool", "");
    
    ::OpenAPI::setValue(&created_at, pJson["createdAt"], "QDateTime", "QDateTime");
    
    ::OpenAPI::setValue(&document_id, pJson["documentId"], "QString", "QString");
    
    ::OpenAPI::setValue(&element_feature, pJson["elementFeature"], "QString", "QString");
    
    ::OpenAPI::setValue(&element_id, pJson["elementId"], "QString", "QString");
    
    
    ::OpenAPI::setValue(&element_occurrences, pJson["elementOccurrences"], "QList", "QString");
    ::OpenAPI::setValue(&element_query, pJson["elementQuery"], "QString", "QString");
    
    ::OpenAPI::setValue(&href, pJson["href"], "QString", "QString");
    
    ::OpenAPI::setValue(&id, pJson["id"], "QString", "QString");
    
    ::OpenAPI::setValue(&message, pJson["message"], "QString", "QString");
    
    ::OpenAPI::setValue(&name, pJson["name"], "QString", "QString");
    
    ::OpenAPI::setValue(&parent_id, pJson["parentId"], "QString", "QString");
    
    ::OpenAPI::setValue(&release_package_id, pJson["releasePackageId"], "QString", "QString");
    
    ::OpenAPI::setValue(&reopened_at, pJson["reopenedAt"], "QDateTime", "QDateTime");
    
    ::OpenAPI::setValue(&reopened_by, pJson["reopenedBy"], "OAIBTUserSummaryInfo", "OAIBTUserSummaryInfo");
    
    ::OpenAPI::setValue(&reply_count, pJson["replyCount"], "qint64", "");
    
    ::OpenAPI::setValue(&resolved_at, pJson["resolvedAt"], "QDateTime", "QDateTime");
    
    ::OpenAPI::setValue(&resolved_by, pJson["resolvedBy"], "OAIBTUserSummaryInfo", "OAIBTUserSummaryInfo");
    
    ::OpenAPI::setValue(&state, pJson["state"], "qint32", "");
    
    ::OpenAPI::setValue(&thumbnail, pJson["thumbnail"], "OAIBTCommentAttachmentInfo", "OAIBTCommentAttachmentInfo");
    
    ::OpenAPI::setValue(&top_level, pJson["topLevel"], "bool", "");
    
    ::OpenAPI::setValue(&user, pJson["user"], "OAIBTUserSummaryInfo", "OAIBTUserSummaryInfo");
    
    ::OpenAPI::setValue(&version_id, pJson["versionId"], "QString", "QString");
    
    ::OpenAPI::setValue(&view_data, pJson["viewData"], "OAIBTViewDataInfo", "OAIBTViewDataInfo");
    
    ::OpenAPI::setValue(&view_ref, pJson["viewRef"], "QString", "QString");
    
    ::OpenAPI::setValue(&workspace_id, pJson["workspaceId"], "QString", "QString");
    
}

QString
OAIBTCommentInfo::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIBTCommentInfo::asJsonObject() {
    QJsonObject obj;
    if(assembly_features->size() > 0){
        toJsonArray((QList<void*>*)assembly_features, obj, "assemblyFeatures", "QString");
    }
    if(assigned_at != nullptr) { 
        toJsonValue(QString("assignedAt"), assigned_at, obj, QString("QDateTime"));
    }
    if((assignee != nullptr) && (assignee->isSet())){
        toJsonValue(QString("assignee"), assignee, obj, QString("OAIBTUserSummaryInfo"));
    }
    if((attachment != nullptr) && (attachment->isSet())){
        toJsonValue(QString("attachment"), attachment, obj, QString("OAIBTCommentAttachmentInfo"));
    }
    if(m_can_delete_isSet){
        obj.insert("canDelete", QJsonValue(can_delete));
    }
    if(m_can_resolve_or_reopen_isSet){
        obj.insert("canResolveOrReopen", QJsonValue(can_resolve_or_reopen));
    }
    if(created_at != nullptr) { 
        toJsonValue(QString("createdAt"), created_at, obj, QString("QDateTime"));
    }
    if(document_id != nullptr && *document_id != QString("")){
        toJsonValue(QString("documentId"), document_id, obj, QString("QString"));
    }
    if(element_feature != nullptr && *element_feature != QString("")){
        toJsonValue(QString("elementFeature"), element_feature, obj, QString("QString"));
    }
    if(element_id != nullptr && *element_id != QString("")){
        toJsonValue(QString("elementId"), element_id, obj, QString("QString"));
    }
    if(element_occurrences->size() > 0){
        toJsonArray((QList<void*>*)element_occurrences, obj, "elementOccurrences", "QString");
    }
    if(element_query != nullptr && *element_query != QString("")){
        toJsonValue(QString("elementQuery"), element_query, obj, QString("QString"));
    }
    if(href != nullptr && *href != QString("")){
        toJsonValue(QString("href"), href, obj, QString("QString"));
    }
    if(id != nullptr && *id != QString("")){
        toJsonValue(QString("id"), id, obj, QString("QString"));
    }
    if(message != nullptr && *message != QString("")){
        toJsonValue(QString("message"), message, obj, QString("QString"));
    }
    if(name != nullptr && *name != QString("")){
        toJsonValue(QString("name"), name, obj, QString("QString"));
    }
    if(parent_id != nullptr && *parent_id != QString("")){
        toJsonValue(QString("parentId"), parent_id, obj, QString("QString"));
    }
    if(release_package_id != nullptr && *release_package_id != QString("")){
        toJsonValue(QString("releasePackageId"), release_package_id, obj, QString("QString"));
    }
    if(reopened_at != nullptr) { 
        toJsonValue(QString("reopenedAt"), reopened_at, obj, QString("QDateTime"));
    }
    if((reopened_by != nullptr) && (reopened_by->isSet())){
        toJsonValue(QString("reopenedBy"), reopened_by, obj, QString("OAIBTUserSummaryInfo"));
    }
    if(m_reply_count_isSet){
        obj.insert("replyCount", QJsonValue(reply_count));
    }
    if(resolved_at != nullptr) { 
        toJsonValue(QString("resolvedAt"), resolved_at, obj, QString("QDateTime"));
    }
    if((resolved_by != nullptr) && (resolved_by->isSet())){
        toJsonValue(QString("resolvedBy"), resolved_by, obj, QString("OAIBTUserSummaryInfo"));
    }
    if(m_state_isSet){
        obj.insert("state", QJsonValue(state));
    }
    if((thumbnail != nullptr) && (thumbnail->isSet())){
        toJsonValue(QString("thumbnail"), thumbnail, obj, QString("OAIBTCommentAttachmentInfo"));
    }
    if(m_top_level_isSet){
        obj.insert("topLevel", QJsonValue(top_level));
    }
    if((user != nullptr) && (user->isSet())){
        toJsonValue(QString("user"), user, obj, QString("OAIBTUserSummaryInfo"));
    }
    if(version_id != nullptr && *version_id != QString("")){
        toJsonValue(QString("versionId"), version_id, obj, QString("QString"));
    }
    if((view_data != nullptr) && (view_data->isSet())){
        toJsonValue(QString("viewData"), view_data, obj, QString("OAIBTViewDataInfo"));
    }
    if(view_ref != nullptr && *view_ref != QString("")){
        toJsonValue(QString("viewRef"), view_ref, obj, QString("QString"));
    }
    if(workspace_id != nullptr && *workspace_id != QString("")){
        toJsonValue(QString("workspaceId"), workspace_id, obj, QString("QString"));
    }

    return obj;
}

QList<QString*>*
OAIBTCommentInfo::getAssemblyFeatures() {
    return assembly_features;
}
void
OAIBTCommentInfo::setAssemblyFeatures(QList<QString*>* assembly_features) {
    this->assembly_features = assembly_features;
    this->m_assembly_features_isSet = true;
}

QDateTime*
OAIBTCommentInfo::getAssignedAt() {
    return assigned_at;
}
void
OAIBTCommentInfo::setAssignedAt(QDateTime* assigned_at) {
    this->assigned_at = assigned_at;
    this->m_assigned_at_isSet = true;
}

OAIBTUserSummaryInfo*
OAIBTCommentInfo::getAssignee() {
    return assignee;
}
void
OAIBTCommentInfo::setAssignee(OAIBTUserSummaryInfo* assignee) {
    this->assignee = assignee;
    this->m_assignee_isSet = true;
}

OAIBTCommentAttachmentInfo*
OAIBTCommentInfo::getAttachment() {
    return attachment;
}
void
OAIBTCommentInfo::setAttachment(OAIBTCommentAttachmentInfo* attachment) {
    this->attachment = attachment;
    this->m_attachment_isSet = true;
}

bool
OAIBTCommentInfo::isCanDelete() {
    return can_delete;
}
void
OAIBTCommentInfo::setCanDelete(bool can_delete) {
    this->can_delete = can_delete;
    this->m_can_delete_isSet = true;
}

bool
OAIBTCommentInfo::isCanResolveOrReopen() {
    return can_resolve_or_reopen;
}
void
OAIBTCommentInfo::setCanResolveOrReopen(bool can_resolve_or_reopen) {
    this->can_resolve_or_reopen = can_resolve_or_reopen;
    this->m_can_resolve_or_reopen_isSet = true;
}

QDateTime*
OAIBTCommentInfo::getCreatedAt() {
    return created_at;
}
void
OAIBTCommentInfo::setCreatedAt(QDateTime* created_at) {
    this->created_at = created_at;
    this->m_created_at_isSet = true;
}

QString*
OAIBTCommentInfo::getDocumentId() {
    return document_id;
}
void
OAIBTCommentInfo::setDocumentId(QString* document_id) {
    this->document_id = document_id;
    this->m_document_id_isSet = true;
}

QString*
OAIBTCommentInfo::getElementFeature() {
    return element_feature;
}
void
OAIBTCommentInfo::setElementFeature(QString* element_feature) {
    this->element_feature = element_feature;
    this->m_element_feature_isSet = true;
}

QString*
OAIBTCommentInfo::getElementId() {
    return element_id;
}
void
OAIBTCommentInfo::setElementId(QString* element_id) {
    this->element_id = element_id;
    this->m_element_id_isSet = true;
}

QList<QString*>*
OAIBTCommentInfo::getElementOccurrences() {
    return element_occurrences;
}
void
OAIBTCommentInfo::setElementOccurrences(QList<QString*>* element_occurrences) {
    this->element_occurrences = element_occurrences;
    this->m_element_occurrences_isSet = true;
}

QString*
OAIBTCommentInfo::getElementQuery() {
    return element_query;
}
void
OAIBTCommentInfo::setElementQuery(QString* element_query) {
    this->element_query = element_query;
    this->m_element_query_isSet = true;
}

QString*
OAIBTCommentInfo::getHref() {
    return href;
}
void
OAIBTCommentInfo::setHref(QString* href) {
    this->href = href;
    this->m_href_isSet = true;
}

QString*
OAIBTCommentInfo::getId() {
    return id;
}
void
OAIBTCommentInfo::setId(QString* id) {
    this->id = id;
    this->m_id_isSet = true;
}

QString*
OAIBTCommentInfo::getMessage() {
    return message;
}
void
OAIBTCommentInfo::setMessage(QString* message) {
    this->message = message;
    this->m_message_isSet = true;
}

QString*
OAIBTCommentInfo::getName() {
    return name;
}
void
OAIBTCommentInfo::setName(QString* name) {
    this->name = name;
    this->m_name_isSet = true;
}

QString*
OAIBTCommentInfo::getParentId() {
    return parent_id;
}
void
OAIBTCommentInfo::setParentId(QString* parent_id) {
    this->parent_id = parent_id;
    this->m_parent_id_isSet = true;
}

QString*
OAIBTCommentInfo::getReleasePackageId() {
    return release_package_id;
}
void
OAIBTCommentInfo::setReleasePackageId(QString* release_package_id) {
    this->release_package_id = release_package_id;
    this->m_release_package_id_isSet = true;
}

QDateTime*
OAIBTCommentInfo::getReopenedAt() {
    return reopened_at;
}
void
OAIBTCommentInfo::setReopenedAt(QDateTime* reopened_at) {
    this->reopened_at = reopened_at;
    this->m_reopened_at_isSet = true;
}

OAIBTUserSummaryInfo*
OAIBTCommentInfo::getReopenedBy() {
    return reopened_by;
}
void
OAIBTCommentInfo::setReopenedBy(OAIBTUserSummaryInfo* reopened_by) {
    this->reopened_by = reopened_by;
    this->m_reopened_by_isSet = true;
}

qint64
OAIBTCommentInfo::getReplyCount() {
    return reply_count;
}
void
OAIBTCommentInfo::setReplyCount(qint64 reply_count) {
    this->reply_count = reply_count;
    this->m_reply_count_isSet = true;
}

QDateTime*
OAIBTCommentInfo::getResolvedAt() {
    return resolved_at;
}
void
OAIBTCommentInfo::setResolvedAt(QDateTime* resolved_at) {
    this->resolved_at = resolved_at;
    this->m_resolved_at_isSet = true;
}

OAIBTUserSummaryInfo*
OAIBTCommentInfo::getResolvedBy() {
    return resolved_by;
}
void
OAIBTCommentInfo::setResolvedBy(OAIBTUserSummaryInfo* resolved_by) {
    this->resolved_by = resolved_by;
    this->m_resolved_by_isSet = true;
}

qint32
OAIBTCommentInfo::getState() {
    return state;
}
void
OAIBTCommentInfo::setState(qint32 state) {
    this->state = state;
    this->m_state_isSet = true;
}

OAIBTCommentAttachmentInfo*
OAIBTCommentInfo::getThumbnail() {
    return thumbnail;
}
void
OAIBTCommentInfo::setThumbnail(OAIBTCommentAttachmentInfo* thumbnail) {
    this->thumbnail = thumbnail;
    this->m_thumbnail_isSet = true;
}

bool
OAIBTCommentInfo::isTopLevel() {
    return top_level;
}
void
OAIBTCommentInfo::setTopLevel(bool top_level) {
    this->top_level = top_level;
    this->m_top_level_isSet = true;
}

OAIBTUserSummaryInfo*
OAIBTCommentInfo::getUser() {
    return user;
}
void
OAIBTCommentInfo::setUser(OAIBTUserSummaryInfo* user) {
    this->user = user;
    this->m_user_isSet = true;
}

QString*
OAIBTCommentInfo::getVersionId() {
    return version_id;
}
void
OAIBTCommentInfo::setVersionId(QString* version_id) {
    this->version_id = version_id;
    this->m_version_id_isSet = true;
}

OAIBTViewDataInfo*
OAIBTCommentInfo::getViewData() {
    return view_data;
}
void
OAIBTCommentInfo::setViewData(OAIBTViewDataInfo* view_data) {
    this->view_data = view_data;
    this->m_view_data_isSet = true;
}

QString*
OAIBTCommentInfo::getViewRef() {
    return view_ref;
}
void
OAIBTCommentInfo::setViewRef(QString* view_ref) {
    this->view_ref = view_ref;
    this->m_view_ref_isSet = true;
}

QString*
OAIBTCommentInfo::getWorkspaceId() {
    return workspace_id;
}
void
OAIBTCommentInfo::setWorkspaceId(QString* workspace_id) {
    this->workspace_id = workspace_id;
    this->m_workspace_id_isSet = true;
}


bool
OAIBTCommentInfo::isSet(){
    bool isObjectUpdated = false;
    do{
        if(assembly_features->size() > 0){ isObjectUpdated = true; break;}
        if(assignee != nullptr && assignee->isSet()){ isObjectUpdated = true; break;}
        if(attachment != nullptr && attachment->isSet()){ isObjectUpdated = true; break;}
        if(m_can_delete_isSet){ isObjectUpdated = true; break;}
        if(m_can_resolve_or_reopen_isSet){ isObjectUpdated = true; break;}
        if(document_id != nullptr && *document_id != QString("")){ isObjectUpdated = true; break;}
        if(element_feature != nullptr && *element_feature != QString("")){ isObjectUpdated = true; break;}
        if(element_id != nullptr && *element_id != QString("")){ isObjectUpdated = true; break;}
        if(element_occurrences->size() > 0){ isObjectUpdated = true; break;}
        if(element_query != nullptr && *element_query != QString("")){ isObjectUpdated = true; break;}
        if(href != nullptr && *href != QString("")){ isObjectUpdated = true; break;}
        if(id != nullptr && *id != QString("")){ isObjectUpdated = true; break;}
        if(message != nullptr && *message != QString("")){ isObjectUpdated = true; break;}
        if(name != nullptr && *name != QString("")){ isObjectUpdated = true; break;}
        if(parent_id != nullptr && *parent_id != QString("")){ isObjectUpdated = true; break;}
        if(release_package_id != nullptr && *release_package_id != QString("")){ isObjectUpdated = true; break;}
        if(reopened_by != nullptr && reopened_by->isSet()){ isObjectUpdated = true; break;}
        if(m_reply_count_isSet){ isObjectUpdated = true; break;}
        if(resolved_by != nullptr && resolved_by->isSet()){ isObjectUpdated = true; break;}
        if(m_state_isSet){ isObjectUpdated = true; break;}
        if(thumbnail != nullptr && thumbnail->isSet()){ isObjectUpdated = true; break;}
        if(m_top_level_isSet){ isObjectUpdated = true; break;}
        if(user != nullptr && user->isSet()){ isObjectUpdated = true; break;}
        if(version_id != nullptr && *version_id != QString("")){ isObjectUpdated = true; break;}
        if(view_data != nullptr && view_data->isSet()){ isObjectUpdated = true; break;}
        if(view_ref != nullptr && *view_ref != QString("")){ isObjectUpdated = true; break;}
        if(workspace_id != nullptr && *workspace_id != QString("")){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

