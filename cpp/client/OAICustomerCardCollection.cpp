/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * OpenAPI spec version: 1.111
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAICustomerCardCollection.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAICustomerCardCollection::OAICustomerCardCollection(QString json) {
    init();
    this->fromJson(json);
}

OAICustomerCardCollection::OAICustomerCardCollection() {
    init();
}

OAICustomerCardCollection::~OAICustomerCardCollection() {
    this->cleanup();
}

void
OAICustomerCardCollection::init() {
    count = 0;
    m_count_isSet = false;
    data = new QList<OAICard*>();
    m_data_isSet = false;
    has_more = false;
    m_has_more_isSet = false;
    request_options = new OAIRequestOptions();
    m_request_options_isSet = false;
    request_params = new QMap<QString, OAIObject*>();
    m_request_params_isSet = false;
    total_count = 0;
    m_total_count_isSet = false;
    url = new QString("");
    m_url_isSet = false;
}

void
OAICustomerCardCollection::cleanup() {

    if(data != nullptr) { 
        auto arr = data;
        for(auto o: *arr) { 
            delete o;
        }
        delete data;
    }

    if(request_options != nullptr) { 
        delete request_options;
    }
    if(request_params != nullptr) { 
        auto arr = request_params;
        for(auto o: *arr) { 
            delete o;
        }
        delete request_params;
    }

    if(url != nullptr) { 
        delete url;
    }
}

OAICustomerCardCollection*
OAICustomerCardCollection::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAICustomerCardCollection::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&count, pJson["count"], "qint32", "");
    
    
    ::OpenAPI::setValue(&data, pJson["data"], "QList", "OAICard");
    ::OpenAPI::setValue(&has_more, pJson["hasMore"], "bool", "");
    
    ::OpenAPI::setValue(&request_options, pJson["requestOptions"], "OAIRequestOptions", "OAIRequestOptions");
    
    
    ::OpenAPI::setValue(&request_params, pJson["requestParams"], "QMap", "OAIObject");
    ::OpenAPI::setValue(&total_count, pJson["totalCount"], "qint32", "");
    
    ::OpenAPI::setValue(&url, pJson["url"], "QString", "QString");
    
}

QString
OAICustomerCardCollection::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAICustomerCardCollection::asJsonObject() {
    QJsonObject obj;
    if(m_count_isSet){
        obj.insert("count", QJsonValue(count));
    }
    if(data->size() > 0){
        toJsonArray((QList<void*>*)data, obj, "data", "OAICard");
    }
    if(m_has_more_isSet){
        obj.insert("hasMore", QJsonValue(has_more));
    }
    if((request_options != nullptr) && (request_options->isSet())){
        toJsonValue(QString("requestOptions"), request_options, obj, QString("OAIRequestOptions"));
    }
    if(request_params->size() > 0){
        toJsonMap((QMap<QString, void*>*) request_params, obj, "requestParams", "OAIObject");
    }
    if(m_total_count_isSet){
        obj.insert("totalCount", QJsonValue(total_count));
    }
    if(url != nullptr && *url != QString("")){
        toJsonValue(QString("url"), url, obj, QString("QString"));
    }

    return obj;
}

qint32
OAICustomerCardCollection::getCount() {
    return count;
}
void
OAICustomerCardCollection::setCount(qint32 count) {
    this->count = count;
    this->m_count_isSet = true;
}

QList<OAICard*>*
OAICustomerCardCollection::getData() {
    return data;
}
void
OAICustomerCardCollection::setData(QList<OAICard*>* data) {
    this->data = data;
    this->m_data_isSet = true;
}

bool
OAICustomerCardCollection::isHasMore() {
    return has_more;
}
void
OAICustomerCardCollection::setHasMore(bool has_more) {
    this->has_more = has_more;
    this->m_has_more_isSet = true;
}

OAIRequestOptions*
OAICustomerCardCollection::getRequestOptions() {
    return request_options;
}
void
OAICustomerCardCollection::setRequestOptions(OAIRequestOptions* request_options) {
    this->request_options = request_options;
    this->m_request_options_isSet = true;
}

QMap<QString, OAIObject*>*
OAICustomerCardCollection::getRequestParams() {
    return request_params;
}
void
OAICustomerCardCollection::setRequestParams(QMap<QString, OAIObject*>* request_params) {
    this->request_params = request_params;
    this->m_request_params_isSet = true;
}

qint32
OAICustomerCardCollection::getTotalCount() {
    return total_count;
}
void
OAICustomerCardCollection::setTotalCount(qint32 total_count) {
    this->total_count = total_count;
    this->m_total_count_isSet = true;
}

QString*
OAICustomerCardCollection::getUrl() {
    return url;
}
void
OAICustomerCardCollection::setUrl(QString* url) {
    this->url = url;
    this->m_url_isSet = true;
}


bool
OAICustomerCardCollection::isSet(){
    bool isObjectUpdated = false;
    do{
        if(m_count_isSet){ isObjectUpdated = true; break;}
        if(data->size() > 0){ isObjectUpdated = true; break;}
        if(m_has_more_isSet){ isObjectUpdated = true; break;}
        if(request_options != nullptr && request_options->isSet()){ isObjectUpdated = true; break;}
        if(request_params->size() > 0){ isObjectUpdated = true; break;}
        if(m_total_count_isSet){ isObjectUpdated = true; break;}
        if(url != nullptr && *url != QString("")){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

