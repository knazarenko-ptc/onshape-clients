/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * OpenAPI spec version: 1.111
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIOAuthFlow.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIOAuthFlow::OAIOAuthFlow(QString json) {
    init();
    this->fromJson(json);
}

OAIOAuthFlow::OAIOAuthFlow() {
    init();
}

OAIOAuthFlow::~OAIOAuthFlow() {
    this->cleanup();
}

void
OAIOAuthFlow::init() {
    authorization_url = new QString("");
    m_authorization_url_isSet = false;
    extensions = new QMap<QString, OAIObject*>();
    m_extensions_isSet = false;
    refresh_url = new QString("");
    m_refresh_url_isSet = false;
    scopes = new OAIOAuthFlow_scopes();
    m_scopes_isSet = false;
    token_url = new QString("");
    m_token_url_isSet = false;
}

void
OAIOAuthFlow::cleanup() {
    if(authorization_url != nullptr) { 
        delete authorization_url;
    }
    if(extensions != nullptr) { 
        auto arr = extensions;
        for(auto o: *arr) { 
            delete o;
        }
        delete extensions;
    }
    if(refresh_url != nullptr) { 
        delete refresh_url;
    }
    if(scopes != nullptr) { 
        delete scopes;
    }
    if(token_url != nullptr) { 
        delete token_url;
    }
}

OAIOAuthFlow*
OAIOAuthFlow::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIOAuthFlow::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&authorization_url, pJson["authorizationUrl"], "QString", "QString");
    
    
    ::OpenAPI::setValue(&extensions, pJson["extensions"], "QMap", "OAIObject");
    ::OpenAPI::setValue(&refresh_url, pJson["refreshUrl"], "QString", "QString");
    
    ::OpenAPI::setValue(&scopes, pJson["scopes"], "OAIOAuthFlow_scopes", "OAIOAuthFlow_scopes");
    
    ::OpenAPI::setValue(&token_url, pJson["tokenUrl"], "QString", "QString");
    
}

QString
OAIOAuthFlow::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIOAuthFlow::asJsonObject() {
    QJsonObject obj;
    if(authorization_url != nullptr && *authorization_url != QString("")){
        toJsonValue(QString("authorizationUrl"), authorization_url, obj, QString("QString"));
    }
    if(extensions->size() > 0){
        toJsonMap((QMap<QString, void*>*) extensions, obj, "extensions", "OAIObject");
    }
    if(refresh_url != nullptr && *refresh_url != QString("")){
        toJsonValue(QString("refreshUrl"), refresh_url, obj, QString("QString"));
    }
    if((scopes != nullptr) && (scopes->isSet())){
        toJsonValue(QString("scopes"), scopes, obj, QString("OAIOAuthFlow_scopes"));
    }
    if(token_url != nullptr && *token_url != QString("")){
        toJsonValue(QString("tokenUrl"), token_url, obj, QString("QString"));
    }

    return obj;
}

QString*
OAIOAuthFlow::getAuthorizationUrl() {
    return authorization_url;
}
void
OAIOAuthFlow::setAuthorizationUrl(QString* authorization_url) {
    this->authorization_url = authorization_url;
    this->m_authorization_url_isSet = true;
}

QMap<QString, OAIObject*>*
OAIOAuthFlow::getExtensions() {
    return extensions;
}
void
OAIOAuthFlow::setExtensions(QMap<QString, OAIObject*>* extensions) {
    this->extensions = extensions;
    this->m_extensions_isSet = true;
}

QString*
OAIOAuthFlow::getRefreshUrl() {
    return refresh_url;
}
void
OAIOAuthFlow::setRefreshUrl(QString* refresh_url) {
    this->refresh_url = refresh_url;
    this->m_refresh_url_isSet = true;
}

OAIOAuthFlow_scopes*
OAIOAuthFlow::getScopes() {
    return scopes;
}
void
OAIOAuthFlow::setScopes(OAIOAuthFlow_scopes* scopes) {
    this->scopes = scopes;
    this->m_scopes_isSet = true;
}

QString*
OAIOAuthFlow::getTokenUrl() {
    return token_url;
}
void
OAIOAuthFlow::setTokenUrl(QString* token_url) {
    this->token_url = token_url;
    this->m_token_url_isSet = true;
}


bool
OAIOAuthFlow::isSet(){
    bool isObjectUpdated = false;
    do{
        if(authorization_url != nullptr && *authorization_url != QString("")){ isObjectUpdated = true; break;}
        if(extensions->size() > 0){ isObjectUpdated = true; break;}
        if(refresh_url != nullptr && *refresh_url != QString("")){ isObjectUpdated = true; break;}
        if(scopes != nullptr && scopes->isSet()){ isObjectUpdated = true; break;}
        if(token_url != nullptr && *token_url != QString("")){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

