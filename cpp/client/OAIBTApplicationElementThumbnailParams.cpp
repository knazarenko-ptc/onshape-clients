/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * OpenAPI spec version: 1.111
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIBTApplicationElementThumbnailParams.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIBTApplicationElementThumbnailParams::OAIBTApplicationElementThumbnailParams(QString json) {
    init();
    this->fromJson(json);
}

OAIBTApplicationElementThumbnailParams::OAIBTApplicationElementThumbnailParams() {
    init();
}

OAIBTApplicationElementThumbnailParams::~OAIBTApplicationElementThumbnailParams() {
    this->cleanup();
}

void
OAIBTApplicationElementThumbnailParams::init() {
    base64_encoded_image = new QString("");
    m_base64_encoded_image_isSet = false;
    description = new QString("");
    m_description_isSet = false;
    image_height = 0;
    m_image_height_isSet = false;
    image_width = 0;
    m_image_width_isSet = false;
    is_primary = false;
    m_is_primary_isSet = false;
    unique_id = new QString("");
    m_unique_id_isSet = false;
}

void
OAIBTApplicationElementThumbnailParams::cleanup() {
    if(base64_encoded_image != nullptr) { 
        delete base64_encoded_image;
    }
    if(description != nullptr) { 
        delete description;
    }



    if(unique_id != nullptr) { 
        delete unique_id;
    }
}

OAIBTApplicationElementThumbnailParams*
OAIBTApplicationElementThumbnailParams::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIBTApplicationElementThumbnailParams::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&base64_encoded_image, pJson["base64EncodedImage"], "QString", "QString");
    
    ::OpenAPI::setValue(&description, pJson["description"], "QString", "QString");
    
    ::OpenAPI::setValue(&image_height, pJson["imageHeight"], "qint32", "");
    
    ::OpenAPI::setValue(&image_width, pJson["imageWidth"], "qint32", "");
    
    ::OpenAPI::setValue(&is_primary, pJson["isPrimary"], "bool", "");
    
    ::OpenAPI::setValue(&unique_id, pJson["uniqueId"], "QString", "QString");
    
}

QString
OAIBTApplicationElementThumbnailParams::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIBTApplicationElementThumbnailParams::asJsonObject() {
    QJsonObject obj;
    if(base64_encoded_image != nullptr && *base64_encoded_image != QString("")){
        toJsonValue(QString("base64EncodedImage"), base64_encoded_image, obj, QString("QString"));
    }
    if(description != nullptr && *description != QString("")){
        toJsonValue(QString("description"), description, obj, QString("QString"));
    }
    if(m_image_height_isSet){
        obj.insert("imageHeight", QJsonValue(image_height));
    }
    if(m_image_width_isSet){
        obj.insert("imageWidth", QJsonValue(image_width));
    }
    if(m_is_primary_isSet){
        obj.insert("isPrimary", QJsonValue(is_primary));
    }
    if(unique_id != nullptr && *unique_id != QString("")){
        toJsonValue(QString("uniqueId"), unique_id, obj, QString("QString"));
    }

    return obj;
}

QString*
OAIBTApplicationElementThumbnailParams::getBase64EncodedImage() {
    return base64_encoded_image;
}
void
OAIBTApplicationElementThumbnailParams::setBase64EncodedImage(QString* base64_encoded_image) {
    this->base64_encoded_image = base64_encoded_image;
    this->m_base64_encoded_image_isSet = true;
}

QString*
OAIBTApplicationElementThumbnailParams::getDescription() {
    return description;
}
void
OAIBTApplicationElementThumbnailParams::setDescription(QString* description) {
    this->description = description;
    this->m_description_isSet = true;
}

qint32
OAIBTApplicationElementThumbnailParams::getImageHeight() {
    return image_height;
}
void
OAIBTApplicationElementThumbnailParams::setImageHeight(qint32 image_height) {
    this->image_height = image_height;
    this->m_image_height_isSet = true;
}

qint32
OAIBTApplicationElementThumbnailParams::getImageWidth() {
    return image_width;
}
void
OAIBTApplicationElementThumbnailParams::setImageWidth(qint32 image_width) {
    this->image_width = image_width;
    this->m_image_width_isSet = true;
}

bool
OAIBTApplicationElementThumbnailParams::isIsPrimary() {
    return is_primary;
}
void
OAIBTApplicationElementThumbnailParams::setIsPrimary(bool is_primary) {
    this->is_primary = is_primary;
    this->m_is_primary_isSet = true;
}

QString*
OAIBTApplicationElementThumbnailParams::getUniqueId() {
    return unique_id;
}
void
OAIBTApplicationElementThumbnailParams::setUniqueId(QString* unique_id) {
    this->unique_id = unique_id;
    this->m_unique_id_isSet = true;
}


bool
OAIBTApplicationElementThumbnailParams::isSet(){
    bool isObjectUpdated = false;
    do{
        if(base64_encoded_image != nullptr && *base64_encoded_image != QString("")){ isObjectUpdated = true; break;}
        if(description != nullptr && *description != QString("")){ isObjectUpdated = true; break;}
        if(m_image_height_isSet){ isObjectUpdated = true; break;}
        if(m_image_width_isSet){ isObjectUpdated = true; break;}
        if(m_is_primary_isSet){ isObjectUpdated = true; break;}
        if(unique_id != nullptr && *unique_id != QString("")){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

