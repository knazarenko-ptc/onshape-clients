/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * OpenAPI spec version: 1.111
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIBTAssemblyMatedEntity.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIBTAssemblyMatedEntity::OAIBTAssemblyMatedEntity(QString json) {
    init();
    this->fromJson(json);
}

OAIBTAssemblyMatedEntity::OAIBTAssemblyMatedEntity() {
    init();
}

OAIBTAssemblyMatedEntity::~OAIBTAssemblyMatedEntity() {
    this->cleanup();
}

void
OAIBTAssemblyMatedEntity::init() {
    mate_cs = new OAIBTMateConnectorCSInfo();
    m_mate_cs_isSet = false;
    mated_occurrence = new QList<QString*>();
    m_mated_occurrence_isSet = false;
}

void
OAIBTAssemblyMatedEntity::cleanup() {
    if(mate_cs != nullptr) { 
        delete mate_cs;
    }
    if(mated_occurrence != nullptr) { 
        auto arr = mated_occurrence;
        for(auto o: *arr) { 
            delete o;
        }
        delete mated_occurrence;
    }
}

OAIBTAssemblyMatedEntity*
OAIBTAssemblyMatedEntity::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIBTAssemblyMatedEntity::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&mate_cs, pJson["mateCS"], "OAIBTMateConnectorCSInfo", "OAIBTMateConnectorCSInfo");
    
    
    ::OpenAPI::setValue(&mated_occurrence, pJson["matedOccurrence"], "QList", "QString");
}

QString
OAIBTAssemblyMatedEntity::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIBTAssemblyMatedEntity::asJsonObject() {
    QJsonObject obj;
    if((mate_cs != nullptr) && (mate_cs->isSet())){
        toJsonValue(QString("mateCS"), mate_cs, obj, QString("OAIBTMateConnectorCSInfo"));
    }
    if(mated_occurrence->size() > 0){
        toJsonArray((QList<void*>*)mated_occurrence, obj, "matedOccurrence", "QString");
    }

    return obj;
}

OAIBTMateConnectorCSInfo*
OAIBTAssemblyMatedEntity::getMateCs() {
    return mate_cs;
}
void
OAIBTAssemblyMatedEntity::setMateCs(OAIBTMateConnectorCSInfo* mate_cs) {
    this->mate_cs = mate_cs;
    this->m_mate_cs_isSet = true;
}

QList<QString*>*
OAIBTAssemblyMatedEntity::getMatedOccurrence() {
    return mated_occurrence;
}
void
OAIBTAssemblyMatedEntity::setMatedOccurrence(QList<QString*>* mated_occurrence) {
    this->mated_occurrence = mated_occurrence;
    this->m_mated_occurrence_isSet = true;
}


bool
OAIBTAssemblyMatedEntity::isSet(){
    bool isObjectUpdated = false;
    do{
        if(mate_cs != nullptr && mate_cs->isSet()){ isObjectUpdated = true; break;}
        if(mated_occurrence->size() > 0){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

