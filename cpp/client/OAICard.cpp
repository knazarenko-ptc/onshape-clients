/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * OpenAPI spec version: 1.111
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAICard.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAICard::OAICard(QString json) {
    init();
    this->fromJson(json);
}

OAICard::OAICard() {
    init();
}

OAICard::~OAICard() {
    this->cleanup();
}

void
OAICard::init() {
    account = new QString("");
    m_account_isSet = false;
    address_city = new QString("");
    m_address_city_isSet = false;
    address_country = new QString("");
    m_address_country_isSet = false;
    address_line1 = new QString("");
    m_address_line1_isSet = false;
    address_line1_check = new QString("");
    m_address_line1_check_isSet = false;
    address_line2 = new QString("");
    m_address_line2_isSet = false;
    address_state = new QString("");
    m_address_state_isSet = false;
    address_zip = new QString("");
    m_address_zip_isSet = false;
    address_zip_check = new QString("");
    m_address_zip_check_isSet = false;
    available_payout_methods = new QList<QString*>();
    m_available_payout_methods_isSet = false;
    brand = new QString("");
    m_brand_isSet = false;
    country = new QString("");
    m_country_isSet = false;
    currency = new QString("");
    m_currency_isSet = false;
    customer = new QString("");
    m_customer_isSet = false;
    cvc_check = new QString("");
    m_cvc_check_isSet = false;
    default_for_currency = false;
    m_default_for_currency_isSet = false;
    description = new QString("");
    m_description_isSet = false;
    dynamic_last4 = new QString("");
    m_dynamic_last4_isSet = false;
    exp_month = 0;
    m_exp_month_isSet = false;
    exp_year = 0;
    m_exp_year_isSet = false;
    fingerprint = new QString("");
    m_fingerprint_isSet = false;
    funding = new QString("");
    m_funding_isSet = false;
    id = new QString("");
    m_id_isSet = false;
    iin = new QString("");
    m_iin_isSet = false;
    instance_url = new QString("");
    m_instance_url_isSet = false;
    issuer = new QString("");
    m_issuer_isSet = false;
    last4 = new QString("");
    m_last4_isSet = false;
    metadata = new QMap<QString, QString*>();
    m_metadata_isSet = false;
    name = new QString("");
    m_name_isSet = false;
    object = new QString("");
    m_object_isSet = false;
    recipient = new QString("");
    m_recipient_isSet = false;
    status = new QString("");
    m_status_isSet = false;
    three_d_secure = new OAIThreeDSecure();
    m_three_d_secure_isSet = false;
    tokenization_method = new QString("");
    m_tokenization_method_isSet = false;
    type = new QString("");
    m_type_isSet = false;
}

void
OAICard::cleanup() {
    if(account != nullptr) { 
        delete account;
    }
    if(address_city != nullptr) { 
        delete address_city;
    }
    if(address_country != nullptr) { 
        delete address_country;
    }
    if(address_line1 != nullptr) { 
        delete address_line1;
    }
    if(address_line1_check != nullptr) { 
        delete address_line1_check;
    }
    if(address_line2 != nullptr) { 
        delete address_line2;
    }
    if(address_state != nullptr) { 
        delete address_state;
    }
    if(address_zip != nullptr) { 
        delete address_zip;
    }
    if(address_zip_check != nullptr) { 
        delete address_zip_check;
    }
    if(available_payout_methods != nullptr) { 
        auto arr = available_payout_methods;
        for(auto o: *arr) { 
            delete o;
        }
        delete available_payout_methods;
    }
    if(brand != nullptr) { 
        delete brand;
    }
    if(country != nullptr) { 
        delete country;
    }
    if(currency != nullptr) { 
        delete currency;
    }
    if(customer != nullptr) { 
        delete customer;
    }
    if(cvc_check != nullptr) { 
        delete cvc_check;
    }

    if(description != nullptr) { 
        delete description;
    }
    if(dynamic_last4 != nullptr) { 
        delete dynamic_last4;
    }


    if(fingerprint != nullptr) { 
        delete fingerprint;
    }
    if(funding != nullptr) { 
        delete funding;
    }
    if(id != nullptr) { 
        delete id;
    }
    if(iin != nullptr) { 
        delete iin;
    }
    if(instance_url != nullptr) { 
        delete instance_url;
    }
    if(issuer != nullptr) { 
        delete issuer;
    }
    if(last4 != nullptr) { 
        delete last4;
    }
    if(metadata != nullptr) { 
        auto arr = metadata;
        for(auto o: *arr) { 
            delete o;
        }
        delete metadata;
    }
    if(name != nullptr) { 
        delete name;
    }
    if(object != nullptr) { 
        delete object;
    }
    if(recipient != nullptr) { 
        delete recipient;
    }
    if(status != nullptr) { 
        delete status;
    }
    if(three_d_secure != nullptr) { 
        delete three_d_secure;
    }
    if(tokenization_method != nullptr) { 
        delete tokenization_method;
    }
    if(type != nullptr) { 
        delete type;
    }
}

OAICard*
OAICard::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAICard::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&account, pJson["account"], "QString", "QString");
    
    ::OpenAPI::setValue(&address_city, pJson["addressCity"], "QString", "QString");
    
    ::OpenAPI::setValue(&address_country, pJson["addressCountry"], "QString", "QString");
    
    ::OpenAPI::setValue(&address_line1, pJson["addressLine1"], "QString", "QString");
    
    ::OpenAPI::setValue(&address_line1_check, pJson["addressLine1Check"], "QString", "QString");
    
    ::OpenAPI::setValue(&address_line2, pJson["addressLine2"], "QString", "QString");
    
    ::OpenAPI::setValue(&address_state, pJson["addressState"], "QString", "QString");
    
    ::OpenAPI::setValue(&address_zip, pJson["addressZip"], "QString", "QString");
    
    ::OpenAPI::setValue(&address_zip_check, pJson["addressZipCheck"], "QString", "QString");
    
    
    ::OpenAPI::setValue(&available_payout_methods, pJson["availablePayoutMethods"], "QList", "QString");
    ::OpenAPI::setValue(&brand, pJson["brand"], "QString", "QString");
    
    ::OpenAPI::setValue(&country, pJson["country"], "QString", "QString");
    
    ::OpenAPI::setValue(&currency, pJson["currency"], "QString", "QString");
    
    ::OpenAPI::setValue(&customer, pJson["customer"], "QString", "QString");
    
    ::OpenAPI::setValue(&cvc_check, pJson["cvcCheck"], "QString", "QString");
    
    ::OpenAPI::setValue(&default_for_currency, pJson["defaultForCurrency"], "bool", "");
    
    ::OpenAPI::setValue(&description, pJson["description"], "QString", "QString");
    
    ::OpenAPI::setValue(&dynamic_last4, pJson["dynamicLast4"], "QString", "QString");
    
    ::OpenAPI::setValue(&exp_month, pJson["expMonth"], "qint32", "");
    
    ::OpenAPI::setValue(&exp_year, pJson["expYear"], "qint32", "");
    
    ::OpenAPI::setValue(&fingerprint, pJson["fingerprint"], "QString", "QString");
    
    ::OpenAPI::setValue(&funding, pJson["funding"], "QString", "QString");
    
    ::OpenAPI::setValue(&id, pJson["id"], "QString", "QString");
    
    ::OpenAPI::setValue(&iin, pJson["iin"], "QString", "QString");
    
    ::OpenAPI::setValue(&instance_url, pJson["instanceURL"], "QString", "QString");
    
    ::OpenAPI::setValue(&issuer, pJson["issuer"], "QString", "QString");
    
    ::OpenAPI::setValue(&last4, pJson["last4"], "QString", "QString");
    
    
    ::OpenAPI::setValue(&metadata, pJson["metadata"], "QMap", "QString");
    ::OpenAPI::setValue(&name, pJson["name"], "QString", "QString");
    
    ::OpenAPI::setValue(&object, pJson["object"], "QString", "QString");
    
    ::OpenAPI::setValue(&recipient, pJson["recipient"], "QString", "QString");
    
    ::OpenAPI::setValue(&status, pJson["status"], "QString", "QString");
    
    ::OpenAPI::setValue(&three_d_secure, pJson["threeDSecure"], "OAIThreeDSecure", "OAIThreeDSecure");
    
    ::OpenAPI::setValue(&tokenization_method, pJson["tokenizationMethod"], "QString", "QString");
    
    ::OpenAPI::setValue(&type, pJson["type"], "QString", "QString");
    
}

QString
OAICard::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAICard::asJsonObject() {
    QJsonObject obj;
    if(account != nullptr && *account != QString("")){
        toJsonValue(QString("account"), account, obj, QString("QString"));
    }
    if(address_city != nullptr && *address_city != QString("")){
        toJsonValue(QString("addressCity"), address_city, obj, QString("QString"));
    }
    if(address_country != nullptr && *address_country != QString("")){
        toJsonValue(QString("addressCountry"), address_country, obj, QString("QString"));
    }
    if(address_line1 != nullptr && *address_line1 != QString("")){
        toJsonValue(QString("addressLine1"), address_line1, obj, QString("QString"));
    }
    if(address_line1_check != nullptr && *address_line1_check != QString("")){
        toJsonValue(QString("addressLine1Check"), address_line1_check, obj, QString("QString"));
    }
    if(address_line2 != nullptr && *address_line2 != QString("")){
        toJsonValue(QString("addressLine2"), address_line2, obj, QString("QString"));
    }
    if(address_state != nullptr && *address_state != QString("")){
        toJsonValue(QString("addressState"), address_state, obj, QString("QString"));
    }
    if(address_zip != nullptr && *address_zip != QString("")){
        toJsonValue(QString("addressZip"), address_zip, obj, QString("QString"));
    }
    if(address_zip_check != nullptr && *address_zip_check != QString("")){
        toJsonValue(QString("addressZipCheck"), address_zip_check, obj, QString("QString"));
    }
    if(available_payout_methods->size() > 0){
        toJsonArray((QList<void*>*)available_payout_methods, obj, "availablePayoutMethods", "QString");
    }
    if(brand != nullptr && *brand != QString("")){
        toJsonValue(QString("brand"), brand, obj, QString("QString"));
    }
    if(country != nullptr && *country != QString("")){
        toJsonValue(QString("country"), country, obj, QString("QString"));
    }
    if(currency != nullptr && *currency != QString("")){
        toJsonValue(QString("currency"), currency, obj, QString("QString"));
    }
    if(customer != nullptr && *customer != QString("")){
        toJsonValue(QString("customer"), customer, obj, QString("QString"));
    }
    if(cvc_check != nullptr && *cvc_check != QString("")){
        toJsonValue(QString("cvcCheck"), cvc_check, obj, QString("QString"));
    }
    if(m_default_for_currency_isSet){
        obj.insert("defaultForCurrency", QJsonValue(default_for_currency));
    }
    if(description != nullptr && *description != QString("")){
        toJsonValue(QString("description"), description, obj, QString("QString"));
    }
    if(dynamic_last4 != nullptr && *dynamic_last4 != QString("")){
        toJsonValue(QString("dynamicLast4"), dynamic_last4, obj, QString("QString"));
    }
    if(m_exp_month_isSet){
        obj.insert("expMonth", QJsonValue(exp_month));
    }
    if(m_exp_year_isSet){
        obj.insert("expYear", QJsonValue(exp_year));
    }
    if(fingerprint != nullptr && *fingerprint != QString("")){
        toJsonValue(QString("fingerprint"), fingerprint, obj, QString("QString"));
    }
    if(funding != nullptr && *funding != QString("")){
        toJsonValue(QString("funding"), funding, obj, QString("QString"));
    }
    if(id != nullptr && *id != QString("")){
        toJsonValue(QString("id"), id, obj, QString("QString"));
    }
    if(iin != nullptr && *iin != QString("")){
        toJsonValue(QString("iin"), iin, obj, QString("QString"));
    }
    if(instance_url != nullptr && *instance_url != QString("")){
        toJsonValue(QString("instanceURL"), instance_url, obj, QString("QString"));
    }
    if(issuer != nullptr && *issuer != QString("")){
        toJsonValue(QString("issuer"), issuer, obj, QString("QString"));
    }
    if(last4 != nullptr && *last4 != QString("")){
        toJsonValue(QString("last4"), last4, obj, QString("QString"));
    }
    if(metadata->size() > 0){
        toJsonMap((QMap<QString, void*>*) metadata, obj, "metadata", "QString");
    }
    if(name != nullptr && *name != QString("")){
        toJsonValue(QString("name"), name, obj, QString("QString"));
    }
    if(object != nullptr && *object != QString("")){
        toJsonValue(QString("object"), object, obj, QString("QString"));
    }
    if(recipient != nullptr && *recipient != QString("")){
        toJsonValue(QString("recipient"), recipient, obj, QString("QString"));
    }
    if(status != nullptr && *status != QString("")){
        toJsonValue(QString("status"), status, obj, QString("QString"));
    }
    if((three_d_secure != nullptr) && (three_d_secure->isSet())){
        toJsonValue(QString("threeDSecure"), three_d_secure, obj, QString("OAIThreeDSecure"));
    }
    if(tokenization_method != nullptr && *tokenization_method != QString("")){
        toJsonValue(QString("tokenizationMethod"), tokenization_method, obj, QString("QString"));
    }
    if(type != nullptr && *type != QString("")){
        toJsonValue(QString("type"), type, obj, QString("QString"));
    }

    return obj;
}

QString*
OAICard::getAccount() {
    return account;
}
void
OAICard::setAccount(QString* account) {
    this->account = account;
    this->m_account_isSet = true;
}

QString*
OAICard::getAddressCity() {
    return address_city;
}
void
OAICard::setAddressCity(QString* address_city) {
    this->address_city = address_city;
    this->m_address_city_isSet = true;
}

QString*
OAICard::getAddressCountry() {
    return address_country;
}
void
OAICard::setAddressCountry(QString* address_country) {
    this->address_country = address_country;
    this->m_address_country_isSet = true;
}

QString*
OAICard::getAddressLine1() {
    return address_line1;
}
void
OAICard::setAddressLine1(QString* address_line1) {
    this->address_line1 = address_line1;
    this->m_address_line1_isSet = true;
}

QString*
OAICard::getAddressLine1Check() {
    return address_line1_check;
}
void
OAICard::setAddressLine1Check(QString* address_line1_check) {
    this->address_line1_check = address_line1_check;
    this->m_address_line1_check_isSet = true;
}

QString*
OAICard::getAddressLine2() {
    return address_line2;
}
void
OAICard::setAddressLine2(QString* address_line2) {
    this->address_line2 = address_line2;
    this->m_address_line2_isSet = true;
}

QString*
OAICard::getAddressState() {
    return address_state;
}
void
OAICard::setAddressState(QString* address_state) {
    this->address_state = address_state;
    this->m_address_state_isSet = true;
}

QString*
OAICard::getAddressZip() {
    return address_zip;
}
void
OAICard::setAddressZip(QString* address_zip) {
    this->address_zip = address_zip;
    this->m_address_zip_isSet = true;
}

QString*
OAICard::getAddressZipCheck() {
    return address_zip_check;
}
void
OAICard::setAddressZipCheck(QString* address_zip_check) {
    this->address_zip_check = address_zip_check;
    this->m_address_zip_check_isSet = true;
}

QList<QString*>*
OAICard::getAvailablePayoutMethods() {
    return available_payout_methods;
}
void
OAICard::setAvailablePayoutMethods(QList<QString*>* available_payout_methods) {
    this->available_payout_methods = available_payout_methods;
    this->m_available_payout_methods_isSet = true;
}

QString*
OAICard::getBrand() {
    return brand;
}
void
OAICard::setBrand(QString* brand) {
    this->brand = brand;
    this->m_brand_isSet = true;
}

QString*
OAICard::getCountry() {
    return country;
}
void
OAICard::setCountry(QString* country) {
    this->country = country;
    this->m_country_isSet = true;
}

QString*
OAICard::getCurrency() {
    return currency;
}
void
OAICard::setCurrency(QString* currency) {
    this->currency = currency;
    this->m_currency_isSet = true;
}

QString*
OAICard::getCustomer() {
    return customer;
}
void
OAICard::setCustomer(QString* customer) {
    this->customer = customer;
    this->m_customer_isSet = true;
}

QString*
OAICard::getCvcCheck() {
    return cvc_check;
}
void
OAICard::setCvcCheck(QString* cvc_check) {
    this->cvc_check = cvc_check;
    this->m_cvc_check_isSet = true;
}

bool
OAICard::isDefaultForCurrency() {
    return default_for_currency;
}
void
OAICard::setDefaultForCurrency(bool default_for_currency) {
    this->default_for_currency = default_for_currency;
    this->m_default_for_currency_isSet = true;
}

QString*
OAICard::getDescription() {
    return description;
}
void
OAICard::setDescription(QString* description) {
    this->description = description;
    this->m_description_isSet = true;
}

QString*
OAICard::getDynamicLast4() {
    return dynamic_last4;
}
void
OAICard::setDynamicLast4(QString* dynamic_last4) {
    this->dynamic_last4 = dynamic_last4;
    this->m_dynamic_last4_isSet = true;
}

qint32
OAICard::getExpMonth() {
    return exp_month;
}
void
OAICard::setExpMonth(qint32 exp_month) {
    this->exp_month = exp_month;
    this->m_exp_month_isSet = true;
}

qint32
OAICard::getExpYear() {
    return exp_year;
}
void
OAICard::setExpYear(qint32 exp_year) {
    this->exp_year = exp_year;
    this->m_exp_year_isSet = true;
}

QString*
OAICard::getFingerprint() {
    return fingerprint;
}
void
OAICard::setFingerprint(QString* fingerprint) {
    this->fingerprint = fingerprint;
    this->m_fingerprint_isSet = true;
}

QString*
OAICard::getFunding() {
    return funding;
}
void
OAICard::setFunding(QString* funding) {
    this->funding = funding;
    this->m_funding_isSet = true;
}

QString*
OAICard::getId() {
    return id;
}
void
OAICard::setId(QString* id) {
    this->id = id;
    this->m_id_isSet = true;
}

QString*
OAICard::getIin() {
    return iin;
}
void
OAICard::setIin(QString* iin) {
    this->iin = iin;
    this->m_iin_isSet = true;
}

QString*
OAICard::getInstanceUrl() {
    return instance_url;
}
void
OAICard::setInstanceUrl(QString* instance_url) {
    this->instance_url = instance_url;
    this->m_instance_url_isSet = true;
}

QString*
OAICard::getIssuer() {
    return issuer;
}
void
OAICard::setIssuer(QString* issuer) {
    this->issuer = issuer;
    this->m_issuer_isSet = true;
}

QString*
OAICard::getLast4() {
    return last4;
}
void
OAICard::setLast4(QString* last4) {
    this->last4 = last4;
    this->m_last4_isSet = true;
}

QMap<QString, QString*>*
OAICard::getMetadata() {
    return metadata;
}
void
OAICard::setMetadata(QMap<QString, QString*>* metadata) {
    this->metadata = metadata;
    this->m_metadata_isSet = true;
}

QString*
OAICard::getName() {
    return name;
}
void
OAICard::setName(QString* name) {
    this->name = name;
    this->m_name_isSet = true;
}

QString*
OAICard::getObject() {
    return object;
}
void
OAICard::setObject(QString* object) {
    this->object = object;
    this->m_object_isSet = true;
}

QString*
OAICard::getRecipient() {
    return recipient;
}
void
OAICard::setRecipient(QString* recipient) {
    this->recipient = recipient;
    this->m_recipient_isSet = true;
}

QString*
OAICard::getStatus() {
    return status;
}
void
OAICard::setStatus(QString* status) {
    this->status = status;
    this->m_status_isSet = true;
}

OAIThreeDSecure*
OAICard::getThreeDSecure() {
    return three_d_secure;
}
void
OAICard::setThreeDSecure(OAIThreeDSecure* three_d_secure) {
    this->three_d_secure = three_d_secure;
    this->m_three_d_secure_isSet = true;
}

QString*
OAICard::getTokenizationMethod() {
    return tokenization_method;
}
void
OAICard::setTokenizationMethod(QString* tokenization_method) {
    this->tokenization_method = tokenization_method;
    this->m_tokenization_method_isSet = true;
}

QString*
OAICard::getType() {
    return type;
}
void
OAICard::setType(QString* type) {
    this->type = type;
    this->m_type_isSet = true;
}


bool
OAICard::isSet(){
    bool isObjectUpdated = false;
    do{
        if(account != nullptr && *account != QString("")){ isObjectUpdated = true; break;}
        if(address_city != nullptr && *address_city != QString("")){ isObjectUpdated = true; break;}
        if(address_country != nullptr && *address_country != QString("")){ isObjectUpdated = true; break;}
        if(address_line1 != nullptr && *address_line1 != QString("")){ isObjectUpdated = true; break;}
        if(address_line1_check != nullptr && *address_line1_check != QString("")){ isObjectUpdated = true; break;}
        if(address_line2 != nullptr && *address_line2 != QString("")){ isObjectUpdated = true; break;}
        if(address_state != nullptr && *address_state != QString("")){ isObjectUpdated = true; break;}
        if(address_zip != nullptr && *address_zip != QString("")){ isObjectUpdated = true; break;}
        if(address_zip_check != nullptr && *address_zip_check != QString("")){ isObjectUpdated = true; break;}
        if(available_payout_methods->size() > 0){ isObjectUpdated = true; break;}
        if(brand != nullptr && *brand != QString("")){ isObjectUpdated = true; break;}
        if(country != nullptr && *country != QString("")){ isObjectUpdated = true; break;}
        if(currency != nullptr && *currency != QString("")){ isObjectUpdated = true; break;}
        if(customer != nullptr && *customer != QString("")){ isObjectUpdated = true; break;}
        if(cvc_check != nullptr && *cvc_check != QString("")){ isObjectUpdated = true; break;}
        if(m_default_for_currency_isSet){ isObjectUpdated = true; break;}
        if(description != nullptr && *description != QString("")){ isObjectUpdated = true; break;}
        if(dynamic_last4 != nullptr && *dynamic_last4 != QString("")){ isObjectUpdated = true; break;}
        if(m_exp_month_isSet){ isObjectUpdated = true; break;}
        if(m_exp_year_isSet){ isObjectUpdated = true; break;}
        if(fingerprint != nullptr && *fingerprint != QString("")){ isObjectUpdated = true; break;}
        if(funding != nullptr && *funding != QString("")){ isObjectUpdated = true; break;}
        if(id != nullptr && *id != QString("")){ isObjectUpdated = true; break;}
        if(iin != nullptr && *iin != QString("")){ isObjectUpdated = true; break;}
        if(instance_url != nullptr && *instance_url != QString("")){ isObjectUpdated = true; break;}
        if(issuer != nullptr && *issuer != QString("")){ isObjectUpdated = true; break;}
        if(last4 != nullptr && *last4 != QString("")){ isObjectUpdated = true; break;}
        if(metadata->size() > 0){ isObjectUpdated = true; break;}
        if(name != nullptr && *name != QString("")){ isObjectUpdated = true; break;}
        if(object != nullptr && *object != QString("")){ isObjectUpdated = true; break;}
        if(recipient != nullptr && *recipient != QString("")){ isObjectUpdated = true; break;}
        if(status != nullptr && *status != QString("")){ isObjectUpdated = true; break;}
        if(three_d_secure != nullptr && three_d_secure->isSet()){ isObjectUpdated = true; break;}
        if(tokenization_method != nullptr && *tokenization_method != QString("")){ isObjectUpdated = true; break;}
        if(type != nullptr && *type != QString("")){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

