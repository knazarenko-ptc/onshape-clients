/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * OpenAPI spec version: 1.111
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIBTActiveWorkflowInfo.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIBTActiveWorkflowInfo::OAIBTActiveWorkflowInfo(QString json) {
    init();
    this->fromJson(json);
}

OAIBTActiveWorkflowInfo::OAIBTActiveWorkflowInfo() {
    init();
}

OAIBTActiveWorkflowInfo::~OAIBTActiveWorkflowInfo() {
    this->cleanup();
}

void
OAIBTActiveWorkflowInfo::init() {
    can_create_releases = false;
    m_can_create_releases_isSet = false;
    can_current_user_create_releases = false;
    m_can_current_user_create_releases_isSet = false;
    company_id = new QString("");
    m_company_id_isSet = false;
    document_id = new QString("");
    m_document_id_isSet = false;
    drawing_can_duplicate_part_number = false;
    m_drawing_can_duplicate_part_number_isSet = false;
    enabled_active_multiple_workflows = false;
    m_enabled_active_multiple_workflows_isSet = false;
    obsoletion_workflow = new OAIBTPublishedWorkflowInfo();
    m_obsoletion_workflow_isSet = false;
    obsoletion_workflow_id = new QString("");
    m_obsoletion_workflow_id_isSet = false;
    pickable_workflows = new QList<OAIBTPublishedWorkflowInfo*>();
    m_pickable_workflows_isSet = false;
    release_workflow = new OAIBTPublishedWorkflowInfo();
    m_release_workflow_isSet = false;
    release_workflow_id = new QString("");
    m_release_workflow_id_isSet = false;
    using_auto_part_numbering = false;
    m_using_auto_part_numbering_isSet = false;
    using_auto_part_numbering_scheme = false;
    m_using_auto_part_numbering_scheme_isSet = false;
    using_managed_workflow = false;
    m_using_managed_workflow_isSet = false;
}

void
OAIBTActiveWorkflowInfo::cleanup() {


    if(company_id != nullptr) { 
        delete company_id;
    }
    if(document_id != nullptr) { 
        delete document_id;
    }


    if(obsoletion_workflow != nullptr) { 
        delete obsoletion_workflow;
    }
    if(obsoletion_workflow_id != nullptr) { 
        delete obsoletion_workflow_id;
    }
    if(pickable_workflows != nullptr) { 
        auto arr = pickable_workflows;
        for(auto o: *arr) { 
            delete o;
        }
        delete pickable_workflows;
    }
    if(release_workflow != nullptr) { 
        delete release_workflow;
    }
    if(release_workflow_id != nullptr) { 
        delete release_workflow_id;
    }



}

OAIBTActiveWorkflowInfo*
OAIBTActiveWorkflowInfo::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIBTActiveWorkflowInfo::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&can_create_releases, pJson["canCreateReleases"], "bool", "");
    
    ::OpenAPI::setValue(&can_current_user_create_releases, pJson["canCurrentUserCreateReleases"], "bool", "");
    
    ::OpenAPI::setValue(&company_id, pJson["companyId"], "QString", "QString");
    
    ::OpenAPI::setValue(&document_id, pJson["documentId"], "QString", "QString");
    
    ::OpenAPI::setValue(&drawing_can_duplicate_part_number, pJson["drawingCanDuplicatePartNumber"], "bool", "");
    
    ::OpenAPI::setValue(&enabled_active_multiple_workflows, pJson["enabledActiveMultipleWorkflows"], "bool", "");
    
    ::OpenAPI::setValue(&obsoletion_workflow, pJson["obsoletionWorkflow"], "OAIBTPublishedWorkflowInfo", "OAIBTPublishedWorkflowInfo");
    
    ::OpenAPI::setValue(&obsoletion_workflow_id, pJson["obsoletionWorkflowId"], "QString", "QString");
    
    
    ::OpenAPI::setValue(&pickable_workflows, pJson["pickableWorkflows"], "QList", "OAIBTPublishedWorkflowInfo");
    ::OpenAPI::setValue(&release_workflow, pJson["releaseWorkflow"], "OAIBTPublishedWorkflowInfo", "OAIBTPublishedWorkflowInfo");
    
    ::OpenAPI::setValue(&release_workflow_id, pJson["releaseWorkflowId"], "QString", "QString");
    
    ::OpenAPI::setValue(&using_auto_part_numbering, pJson["usingAutoPartNumbering"], "bool", "");
    
    ::OpenAPI::setValue(&using_auto_part_numbering_scheme, pJson["usingAutoPartNumberingScheme"], "bool", "");
    
    ::OpenAPI::setValue(&using_managed_workflow, pJson["usingManagedWorkflow"], "bool", "");
    
}

QString
OAIBTActiveWorkflowInfo::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIBTActiveWorkflowInfo::asJsonObject() {
    QJsonObject obj;
    if(m_can_create_releases_isSet){
        obj.insert("canCreateReleases", QJsonValue(can_create_releases));
    }
    if(m_can_current_user_create_releases_isSet){
        obj.insert("canCurrentUserCreateReleases", QJsonValue(can_current_user_create_releases));
    }
    if(company_id != nullptr && *company_id != QString("")){
        toJsonValue(QString("companyId"), company_id, obj, QString("QString"));
    }
    if(document_id != nullptr && *document_id != QString("")){
        toJsonValue(QString("documentId"), document_id, obj, QString("QString"));
    }
    if(m_drawing_can_duplicate_part_number_isSet){
        obj.insert("drawingCanDuplicatePartNumber", QJsonValue(drawing_can_duplicate_part_number));
    }
    if(m_enabled_active_multiple_workflows_isSet){
        obj.insert("enabledActiveMultipleWorkflows", QJsonValue(enabled_active_multiple_workflows));
    }
    if((obsoletion_workflow != nullptr) && (obsoletion_workflow->isSet())){
        toJsonValue(QString("obsoletionWorkflow"), obsoletion_workflow, obj, QString("OAIBTPublishedWorkflowInfo"));
    }
    if(obsoletion_workflow_id != nullptr && *obsoletion_workflow_id != QString("")){
        toJsonValue(QString("obsoletionWorkflowId"), obsoletion_workflow_id, obj, QString("QString"));
    }
    if(pickable_workflows->size() > 0){
        toJsonArray((QList<void*>*)pickable_workflows, obj, "pickableWorkflows", "OAIBTPublishedWorkflowInfo");
    }
    if((release_workflow != nullptr) && (release_workflow->isSet())){
        toJsonValue(QString("releaseWorkflow"), release_workflow, obj, QString("OAIBTPublishedWorkflowInfo"));
    }
    if(release_workflow_id != nullptr && *release_workflow_id != QString("")){
        toJsonValue(QString("releaseWorkflowId"), release_workflow_id, obj, QString("QString"));
    }
    if(m_using_auto_part_numbering_isSet){
        obj.insert("usingAutoPartNumbering", QJsonValue(using_auto_part_numbering));
    }
    if(m_using_auto_part_numbering_scheme_isSet){
        obj.insert("usingAutoPartNumberingScheme", QJsonValue(using_auto_part_numbering_scheme));
    }
    if(m_using_managed_workflow_isSet){
        obj.insert("usingManagedWorkflow", QJsonValue(using_managed_workflow));
    }

    return obj;
}

bool
OAIBTActiveWorkflowInfo::isCanCreateReleases() {
    return can_create_releases;
}
void
OAIBTActiveWorkflowInfo::setCanCreateReleases(bool can_create_releases) {
    this->can_create_releases = can_create_releases;
    this->m_can_create_releases_isSet = true;
}

bool
OAIBTActiveWorkflowInfo::isCanCurrentUserCreateReleases() {
    return can_current_user_create_releases;
}
void
OAIBTActiveWorkflowInfo::setCanCurrentUserCreateReleases(bool can_current_user_create_releases) {
    this->can_current_user_create_releases = can_current_user_create_releases;
    this->m_can_current_user_create_releases_isSet = true;
}

QString*
OAIBTActiveWorkflowInfo::getCompanyId() {
    return company_id;
}
void
OAIBTActiveWorkflowInfo::setCompanyId(QString* company_id) {
    this->company_id = company_id;
    this->m_company_id_isSet = true;
}

QString*
OAIBTActiveWorkflowInfo::getDocumentId() {
    return document_id;
}
void
OAIBTActiveWorkflowInfo::setDocumentId(QString* document_id) {
    this->document_id = document_id;
    this->m_document_id_isSet = true;
}

bool
OAIBTActiveWorkflowInfo::isDrawingCanDuplicatePartNumber() {
    return drawing_can_duplicate_part_number;
}
void
OAIBTActiveWorkflowInfo::setDrawingCanDuplicatePartNumber(bool drawing_can_duplicate_part_number) {
    this->drawing_can_duplicate_part_number = drawing_can_duplicate_part_number;
    this->m_drawing_can_duplicate_part_number_isSet = true;
}

bool
OAIBTActiveWorkflowInfo::isEnabledActiveMultipleWorkflows() {
    return enabled_active_multiple_workflows;
}
void
OAIBTActiveWorkflowInfo::setEnabledActiveMultipleWorkflows(bool enabled_active_multiple_workflows) {
    this->enabled_active_multiple_workflows = enabled_active_multiple_workflows;
    this->m_enabled_active_multiple_workflows_isSet = true;
}

OAIBTPublishedWorkflowInfo*
OAIBTActiveWorkflowInfo::getObsoletionWorkflow() {
    return obsoletion_workflow;
}
void
OAIBTActiveWorkflowInfo::setObsoletionWorkflow(OAIBTPublishedWorkflowInfo* obsoletion_workflow) {
    this->obsoletion_workflow = obsoletion_workflow;
    this->m_obsoletion_workflow_isSet = true;
}

QString*
OAIBTActiveWorkflowInfo::getObsoletionWorkflowId() {
    return obsoletion_workflow_id;
}
void
OAIBTActiveWorkflowInfo::setObsoletionWorkflowId(QString* obsoletion_workflow_id) {
    this->obsoletion_workflow_id = obsoletion_workflow_id;
    this->m_obsoletion_workflow_id_isSet = true;
}

QList<OAIBTPublishedWorkflowInfo*>*
OAIBTActiveWorkflowInfo::getPickableWorkflows() {
    return pickable_workflows;
}
void
OAIBTActiveWorkflowInfo::setPickableWorkflows(QList<OAIBTPublishedWorkflowInfo*>* pickable_workflows) {
    this->pickable_workflows = pickable_workflows;
    this->m_pickable_workflows_isSet = true;
}

OAIBTPublishedWorkflowInfo*
OAIBTActiveWorkflowInfo::getReleaseWorkflow() {
    return release_workflow;
}
void
OAIBTActiveWorkflowInfo::setReleaseWorkflow(OAIBTPublishedWorkflowInfo* release_workflow) {
    this->release_workflow = release_workflow;
    this->m_release_workflow_isSet = true;
}

QString*
OAIBTActiveWorkflowInfo::getReleaseWorkflowId() {
    return release_workflow_id;
}
void
OAIBTActiveWorkflowInfo::setReleaseWorkflowId(QString* release_workflow_id) {
    this->release_workflow_id = release_workflow_id;
    this->m_release_workflow_id_isSet = true;
}

bool
OAIBTActiveWorkflowInfo::isUsingAutoPartNumbering() {
    return using_auto_part_numbering;
}
void
OAIBTActiveWorkflowInfo::setUsingAutoPartNumbering(bool using_auto_part_numbering) {
    this->using_auto_part_numbering = using_auto_part_numbering;
    this->m_using_auto_part_numbering_isSet = true;
}

bool
OAIBTActiveWorkflowInfo::isUsingAutoPartNumberingScheme() {
    return using_auto_part_numbering_scheme;
}
void
OAIBTActiveWorkflowInfo::setUsingAutoPartNumberingScheme(bool using_auto_part_numbering_scheme) {
    this->using_auto_part_numbering_scheme = using_auto_part_numbering_scheme;
    this->m_using_auto_part_numbering_scheme_isSet = true;
}

bool
OAIBTActiveWorkflowInfo::isUsingManagedWorkflow() {
    return using_managed_workflow;
}
void
OAIBTActiveWorkflowInfo::setUsingManagedWorkflow(bool using_managed_workflow) {
    this->using_managed_workflow = using_managed_workflow;
    this->m_using_managed_workflow_isSet = true;
}


bool
OAIBTActiveWorkflowInfo::isSet(){
    bool isObjectUpdated = false;
    do{
        if(m_can_create_releases_isSet){ isObjectUpdated = true; break;}
        if(m_can_current_user_create_releases_isSet){ isObjectUpdated = true; break;}
        if(company_id != nullptr && *company_id != QString("")){ isObjectUpdated = true; break;}
        if(document_id != nullptr && *document_id != QString("")){ isObjectUpdated = true; break;}
        if(m_drawing_can_duplicate_part_number_isSet){ isObjectUpdated = true; break;}
        if(m_enabled_active_multiple_workflows_isSet){ isObjectUpdated = true; break;}
        if(obsoletion_workflow != nullptr && obsoletion_workflow->isSet()){ isObjectUpdated = true; break;}
        if(obsoletion_workflow_id != nullptr && *obsoletion_workflow_id != QString("")){ isObjectUpdated = true; break;}
        if(pickable_workflows->size() > 0){ isObjectUpdated = true; break;}
        if(release_workflow != nullptr && release_workflow->isSet()){ isObjectUpdated = true; break;}
        if(release_workflow_id != nullptr && *release_workflow_id != QString("")){ isObjectUpdated = true; break;}
        if(m_using_auto_part_numbering_isSet){ isObjectUpdated = true; break;}
        if(m_using_auto_part_numbering_scheme_isSet){ isObjectUpdated = true; break;}
        if(m_using_managed_workflow_isSet){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

