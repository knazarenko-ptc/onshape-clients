/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * OpenAPI spec version: 1.111
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIBTIdTranslationParams.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIBTIdTranslationParams::OAIBTIdTranslationParams(QString json) {
    init();
    this->fromJson(json);
}

OAIBTIdTranslationParams::OAIBTIdTranslationParams() {
    init();
}

OAIBTIdTranslationParams::~OAIBTIdTranslationParams() {
    this->cleanup();
}

void
OAIBTIdTranslationParams::init() {
    ids = new QList<QString*>();
    m_ids_isSet = false;
    link_document_id = new QString("");
    m_link_document_id_isSet = false;
    source_configuration = new QString("");
    m_source_configuration_isSet = false;
    source_document_microversion = new QString("");
    m_source_document_microversion_isSet = false;
    target_configuration = new QString("");
    m_target_configuration_isSet = false;
}

void
OAIBTIdTranslationParams::cleanup() {
    if(ids != nullptr) { 
        auto arr = ids;
        for(auto o: *arr) { 
            delete o;
        }
        delete ids;
    }
    if(link_document_id != nullptr) { 
        delete link_document_id;
    }
    if(source_configuration != nullptr) { 
        delete source_configuration;
    }
    if(source_document_microversion != nullptr) { 
        delete source_document_microversion;
    }
    if(target_configuration != nullptr) { 
        delete target_configuration;
    }
}

OAIBTIdTranslationParams*
OAIBTIdTranslationParams::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIBTIdTranslationParams::fromJsonObject(QJsonObject pJson) {
    
    ::OpenAPI::setValue(&ids, pJson["ids"], "QList", "QString");
    ::OpenAPI::setValue(&link_document_id, pJson["linkDocumentId"], "QString", "QString");
    
    ::OpenAPI::setValue(&source_configuration, pJson["sourceConfiguration"], "QString", "QString");
    
    ::OpenAPI::setValue(&source_document_microversion, pJson["sourceDocumentMicroversion"], "QString", "QString");
    
    ::OpenAPI::setValue(&target_configuration, pJson["targetConfiguration"], "QString", "QString");
    
}

QString
OAIBTIdTranslationParams::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIBTIdTranslationParams::asJsonObject() {
    QJsonObject obj;
    if(ids->size() > 0){
        toJsonArray((QList<void*>*)ids, obj, "ids", "QString");
    }
    if(link_document_id != nullptr && *link_document_id != QString("")){
        toJsonValue(QString("linkDocumentId"), link_document_id, obj, QString("QString"));
    }
    if(source_configuration != nullptr && *source_configuration != QString("")){
        toJsonValue(QString("sourceConfiguration"), source_configuration, obj, QString("QString"));
    }
    if(source_document_microversion != nullptr && *source_document_microversion != QString("")){
        toJsonValue(QString("sourceDocumentMicroversion"), source_document_microversion, obj, QString("QString"));
    }
    if(target_configuration != nullptr && *target_configuration != QString("")){
        toJsonValue(QString("targetConfiguration"), target_configuration, obj, QString("QString"));
    }

    return obj;
}

QList<QString*>*
OAIBTIdTranslationParams::getIds() {
    return ids;
}
void
OAIBTIdTranslationParams::setIds(QList<QString*>* ids) {
    this->ids = ids;
    this->m_ids_isSet = true;
}

QString*
OAIBTIdTranslationParams::getLinkDocumentId() {
    return link_document_id;
}
void
OAIBTIdTranslationParams::setLinkDocumentId(QString* link_document_id) {
    this->link_document_id = link_document_id;
    this->m_link_document_id_isSet = true;
}

QString*
OAIBTIdTranslationParams::getSourceConfiguration() {
    return source_configuration;
}
void
OAIBTIdTranslationParams::setSourceConfiguration(QString* source_configuration) {
    this->source_configuration = source_configuration;
    this->m_source_configuration_isSet = true;
}

QString*
OAIBTIdTranslationParams::getSourceDocumentMicroversion() {
    return source_document_microversion;
}
void
OAIBTIdTranslationParams::setSourceDocumentMicroversion(QString* source_document_microversion) {
    this->source_document_microversion = source_document_microversion;
    this->m_source_document_microversion_isSet = true;
}

QString*
OAIBTIdTranslationParams::getTargetConfiguration() {
    return target_configuration;
}
void
OAIBTIdTranslationParams::setTargetConfiguration(QString* target_configuration) {
    this->target_configuration = target_configuration;
    this->m_target_configuration_isSet = true;
}


bool
OAIBTIdTranslationParams::isSet(){
    bool isObjectUpdated = false;
    do{
        if(ids->size() > 0){ isObjectUpdated = true; break;}
        if(link_document_id != nullptr && *link_document_id != QString("")){ isObjectUpdated = true; break;}
        if(source_configuration != nullptr && *source_configuration != QString("")){ isObjectUpdated = true; break;}
        if(source_document_microversion != nullptr && *source_document_microversion != QString("")){ isObjectUpdated = true; break;}
        if(target_configuration != nullptr && *target_configuration != QString("")){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

