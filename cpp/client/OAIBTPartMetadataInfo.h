/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * OpenAPI spec version: 1.111
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIBTPartMetadataInfo.h
 *
 * 
 */

#ifndef OAIBTPartMetadataInfo_H_
#define OAIBTPartMetadataInfo_H_

#include <QJsonObject>


#include "OAIBTCustomPropertyDefinitionInfo.h"
#include "OAIBTPartAppearanceInfo.h"
#include "OAIBTPartMaterialInfo.h"
#include "OAIBTThumbnailInfo.h"
#include <QList>
#include <QMap>
#include <QString>

#include "OAIObject.h"

namespace OpenAPI {

class OAIBTPartMetadataInfo: public OAIObject {
public:
    OAIBTPartMetadataInfo();
    OAIBTPartMetadataInfo(QString json);
    ~OAIBTPartMetadataInfo();
    void init();
    void cleanup();

    QString asJson () override;
    QJsonObject asJsonObject() override;
    void fromJsonObject(QJsonObject json) override;
    OAIBTPartMetadataInfo* fromJson(QString jsonString) override;

    OAIBTPartAppearanceInfo* getAppearance();
    void setAppearance(OAIBTPartAppearanceInfo* appearance);

    QString* getBodyType();
    void setBodyType(QString* body_type);

    QString* getConfigurationId();
    void setConfigurationId(QString* configuration_id);

    QMap<QString, QString*>* getCustomProperties();
    void setCustomProperties(QMap<QString, QString*>* custom_properties);

    QMap<QString, OAIBTCustomPropertyDefinitionInfo*>* getCustomPropertyDefinitions();
    void setCustomPropertyDefinitions(QMap<QString, OAIBTCustomPropertyDefinitionInfo*>* custom_property_definitions);

    QString* getDescription();
    void setDescription(QString* description);

    QString* getElementId();
    void setElementId(QString* element_id);

    QString* getHref();
    void setHref(QString* href);

    QString* getId();
    void setId(QString* id);

    bool isIsFlattenedBody();
    void setIsFlattenedBody(bool is_flattened_body);

    bool isIsHidden();
    void setIsHidden(bool is_hidden);

    bool isIsMesh();
    void setIsMesh(bool is_mesh);

    OAIBTPartMaterialInfo* getMaterial();
    void setMaterial(OAIBTPartMaterialInfo* material);

    QString* getMicroversionId();
    void setMicroversionId(QString* microversion_id);

    QString* getName();
    void setName(QString* name);

    qint32 getOrdinal();
    void setOrdinal(qint32 ordinal);

    QString* getPartId();
    void setPartId(QString* part_id);

    QString* getPartNumber();
    void setPartNumber(QString* part_number);

    QString* getPartQuery();
    void setPartQuery(QString* part_query);

    QString* getProductLine();
    void setProductLine(QString* product_line);

    QString* getProject();
    void setProject(QString* project);

    QMap<QString, qint32>* getPropertySourceTypes();
    void setPropertySourceTypes(QMap<QString, qint32>* property_source_types);

    QList<QString*>* getReferencingConfiguredPartNodeIds();
    void setReferencingConfiguredPartNodeIds(QList<QString*>* referencing_configured_part_node_ids);

    QString* getRevision();
    void setRevision(QString* revision);

    QString* getState();
    void setState(QString* state);

    QString* getThumbnailConfigurationId();
    void setThumbnailConfigurationId(QString* thumbnail_configuration_id);

    OAIBTThumbnailInfo* getThumbnailInfo();
    void setThumbnailInfo(OAIBTThumbnailInfo* thumbnail_info);

    QString* getTitle1();
    void setTitle1(QString* title1);

    QString* getTitle2();
    void setTitle2(QString* title2);

    QString* getTitle3();
    void setTitle3(QString* title3);

    QString* getUnflattenedPartId();
    void setUnflattenedPartId(QString* unflattened_part_id);

    QString* getVendor();
    void setVendor(QString* vendor);


    virtual bool isSet() override;

private:
    OAIBTPartAppearanceInfo* appearance;
    bool m_appearance_isSet;

    QString* body_type;
    bool m_body_type_isSet;

    QString* configuration_id;
    bool m_configuration_id_isSet;

    QMap<QString, QString*>* custom_properties;
    bool m_custom_properties_isSet;

    QMap<QString, OAIBTCustomPropertyDefinitionInfo*>* custom_property_definitions;
    bool m_custom_property_definitions_isSet;

    QString* description;
    bool m_description_isSet;

    QString* element_id;
    bool m_element_id_isSet;

    QString* href;
    bool m_href_isSet;

    QString* id;
    bool m_id_isSet;

    bool is_flattened_body;
    bool m_is_flattened_body_isSet;

    bool is_hidden;
    bool m_is_hidden_isSet;

    bool is_mesh;
    bool m_is_mesh_isSet;

    OAIBTPartMaterialInfo* material;
    bool m_material_isSet;

    QString* microversion_id;
    bool m_microversion_id_isSet;

    QString* name;
    bool m_name_isSet;

    qint32 ordinal;
    bool m_ordinal_isSet;

    QString* part_id;
    bool m_part_id_isSet;

    QString* part_number;
    bool m_part_number_isSet;

    QString* part_query;
    bool m_part_query_isSet;

    QString* product_line;
    bool m_product_line_isSet;

    QString* project;
    bool m_project_isSet;

    QMap<QString, qint32>* property_source_types;
    bool m_property_source_types_isSet;

    QList<QString*>* referencing_configured_part_node_ids;
    bool m_referencing_configured_part_node_ids_isSet;

    QString* revision;
    bool m_revision_isSet;

    QString* state;
    bool m_state_isSet;

    QString* thumbnail_configuration_id;
    bool m_thumbnail_configuration_id_isSet;

    OAIBTThumbnailInfo* thumbnail_info;
    bool m_thumbnail_info_isSet;

    QString* title1;
    bool m_title1_isSet;

    QString* title2;
    bool m_title2_isSet;

    QString* title3;
    bool m_title3_isSet;

    QString* unflattened_part_id;
    bool m_unflattened_part_id_isSet;

    QString* vendor;
    bool m_vendor_isSet;

};

}

#endif /* OAIBTPartMetadataInfo_H_ */
