/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * OpenAPI spec version: 1.111
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef _OAI_OAIElementsApi_H_
#define _OAI_OAIElementsApi_H_

#include "OAIHttpRequest.h"

#include "OAIBTConfigurationInfo.h"
#include "OAIBTConfigurationParams.h"
#include "OAIBTCopyElementParams.h"
#include "OAIBTDocumentElementInfo.h"
#include "OAIBTEncodedConfigurationInfo.h"
#include "OAIBTModelFormatInfo.h"
#include "OAIBTUpdateReferenceParams.h"
#include <QString>

#include <QObject>

namespace OpenAPI {

class OAIElementsApi: public QObject {
    Q_OBJECT

public:
    OAIElementsApi();
    OAIElementsApi(QString host, QString basePath);
    ~OAIElementsApi();

    QString host;
    QString basePath;
    QMap<QString, QString> defaultHeaders;

    void copyElementFromSourceDocument(QString* did, QString* wid, OAIBTCopyElementParams& oaibt_copy_element_params);
    void decodeConfiguration(QString* did, QString* wvm, QString* wvmid, QString* eid, QString* cid, QString* link_document_id, bool include_display, bool configuration_is_id);
    void deleteElement(QString* did, QString* wid, QString* eid);
    void encodeConfigurationMap(QString* did, QString* eid, OAIBTConfigurationParams& oaibt_configuration_params, QString* version_id, QString* link_document_id);
    void getConfiguration(QString* did, QString* wvm, QString* wvmid, QString* eid);
    void getElementTranslatorFormatsByVersionOrWorkspace(QString* did, QString* wv, QString* wvid, QString* eid, bool check_content, QString* configuration);
    void updateConfiguration(QString* did, QString* wvm, QString* wvmid, QString* eid, QString*& body);
    void updateReferences(QString* did, QString* wid, QString* eid, OAIBTUpdateReferenceParams& oaibt_update_reference_params);
    
private:
    void copyElementFromSourceDocumentCallback (OAIHttpRequestWorker * worker);
    void decodeConfigurationCallback (OAIHttpRequestWorker * worker);
    void deleteElementCallback (OAIHttpRequestWorker * worker);
    void encodeConfigurationMapCallback (OAIHttpRequestWorker * worker);
    void getConfigurationCallback (OAIHttpRequestWorker * worker);
    void getElementTranslatorFormatsByVersionOrWorkspaceCallback (OAIHttpRequestWorker * worker);
    void updateConfigurationCallback (OAIHttpRequestWorker * worker);
    void updateReferencesCallback (OAIHttpRequestWorker * worker);
    
signals:
    void copyElementFromSourceDocumentSignal(OAIBTDocumentElementInfo* summary);
    void decodeConfigurationSignal(OAIBTConfigurationInfo* summary);
    void deleteElementSignal();
    void encodeConfigurationMapSignal(OAIBTEncodedConfigurationInfo* summary);
    void getConfigurationSignal(OAIBTConfigurationInfo* summary);
    void getElementTranslatorFormatsByVersionOrWorkspaceSignal(QList<OAIBTModelFormatInfo*>* summary);
    void updateConfigurationSignal(OAIBTConfigurationInfo* summary);
    void updateReferencesSignal();
    
    void copyElementFromSourceDocumentSignalE(OAIBTDocumentElementInfo* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void decodeConfigurationSignalE(OAIBTConfigurationInfo* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void deleteElementSignalE(QNetworkReply::NetworkError error_type, QString& error_str);
    void encodeConfigurationMapSignalE(OAIBTEncodedConfigurationInfo* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void getConfigurationSignalE(OAIBTConfigurationInfo* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void getElementTranslatorFormatsByVersionOrWorkspaceSignalE(QList<OAIBTModelFormatInfo*>* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void updateConfigurationSignalE(OAIBTConfigurationInfo* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void updateReferencesSignalE(QNetworkReply::NetworkError error_type, QString& error_str);
    
    void copyElementFromSourceDocumentSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void decodeConfigurationSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void deleteElementSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void encodeConfigurationMapSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void getConfigurationSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void getElementTranslatorFormatsByVersionOrWorkspaceSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void updateConfigurationSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void updateReferencesSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    
};

}
#endif
