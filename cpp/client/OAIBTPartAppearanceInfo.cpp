/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * OpenAPI spec version: 1.111
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIBTPartAppearanceInfo.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIBTPartAppearanceInfo::OAIBTPartAppearanceInfo(QString json) {
    init();
    this->fromJson(json);
}

OAIBTPartAppearanceInfo::OAIBTPartAppearanceInfo() {
    init();
}

OAIBTPartAppearanceInfo::~OAIBTPartAppearanceInfo() {
    this->cleanup();
}

void
OAIBTPartAppearanceInfo::init() {
    color = new OAIBTColorInfo();
    m_color_isSet = false;
    is_generated = false;
    m_is_generated_isSet = false;
    opacity = 0;
    m_opacity_isSet = false;
}

void
OAIBTPartAppearanceInfo::cleanup() {
    if(color != nullptr) { 
        delete color;
    }


}

OAIBTPartAppearanceInfo*
OAIBTPartAppearanceInfo::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIBTPartAppearanceInfo::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&color, pJson["color"], "OAIBTColorInfo", "OAIBTColorInfo");
    
    ::OpenAPI::setValue(&is_generated, pJson["isGenerated"], "bool", "");
    
    ::OpenAPI::setValue(&opacity, pJson["opacity"], "qint32", "");
    
}

QString
OAIBTPartAppearanceInfo::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIBTPartAppearanceInfo::asJsonObject() {
    QJsonObject obj;
    if((color != nullptr) && (color->isSet())){
        toJsonValue(QString("color"), color, obj, QString("OAIBTColorInfo"));
    }
    if(m_is_generated_isSet){
        obj.insert("isGenerated", QJsonValue(is_generated));
    }
    if(m_opacity_isSet){
        obj.insert("opacity", QJsonValue(opacity));
    }

    return obj;
}

OAIBTColorInfo*
OAIBTPartAppearanceInfo::getColor() {
    return color;
}
void
OAIBTPartAppearanceInfo::setColor(OAIBTColorInfo* color) {
    this->color = color;
    this->m_color_isSet = true;
}

bool
OAIBTPartAppearanceInfo::isIsGenerated() {
    return is_generated;
}
void
OAIBTPartAppearanceInfo::setIsGenerated(bool is_generated) {
    this->is_generated = is_generated;
    this->m_is_generated_isSet = true;
}

qint32
OAIBTPartAppearanceInfo::getOpacity() {
    return opacity;
}
void
OAIBTPartAppearanceInfo::setOpacity(qint32 opacity) {
    this->opacity = opacity;
    this->m_opacity_isSet = true;
}


bool
OAIBTPartAppearanceInfo::isSet(){
    bool isObjectUpdated = false;
    do{
        if(color != nullptr && color->isSet()){ isObjectUpdated = true; break;}
        if(m_is_generated_isSet){ isObjectUpdated = true; break;}
        if(m_opacity_isSet){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

