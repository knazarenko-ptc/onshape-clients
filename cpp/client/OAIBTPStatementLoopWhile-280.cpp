/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * OpenAPI spec version: 1.111
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIBTPStatementLoopWhile-280.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIBTPStatementLoopWhile-280::OAIBTPStatementLoopWhile-280(QString json) {
    init();
    this->fromJson(json);
}

OAIBTPStatementLoopWhile-280::OAIBTPStatementLoopWhile-280() {
    init();
}

OAIBTPStatementLoopWhile-280::~OAIBTPStatementLoopWhile-280() {
    this->cleanup();
}

void
OAIBTPStatementLoopWhile-280::init() {
    atomic = false;
    m_atomic_isSet = false;
    bt_type = new QString("");
    m_bt_type_isSet = false;
    documentation_type = new QString("");
    m_documentation_type_isSet = false;
    end_source_location = 0;
    m_end_source_location_isSet = false;
    node_id = new QString("");
    m_node_id_isSet = false;
    short_descriptor = new QString("");
    m_short_descriptor_isSet = false;
    space_after = new OAIBTPSpace-10();
    m_space_after_isSet = false;
    space_before = new OAIBTPSpace-10();
    m_space_before_isSet = false;
    space_default = false;
    m_space_default_isSet = false;
    start_source_location = 0;
    m_start_source_location_isSet = false;
    annotation = new OAIBTPAnnotation-231();
    m_annotation_isSet = false;
    body = new OAIBTPStatement-269();
    m_body_isSet = false;
    space_after_loop_type = new OAIBTPSpace-10();
    m_space_after_loop_type_isSet = false;
    condition = new OAIBTPExpression-9();
    m_condition_isSet = false;
}

void
OAIBTPStatementLoopWhile-280::cleanup() {

    if(bt_type != nullptr) { 
        delete bt_type;
    }
    if(documentation_type != nullptr) { 
        delete documentation_type;
    }

    if(node_id != nullptr) { 
        delete node_id;
    }
    if(short_descriptor != nullptr) { 
        delete short_descriptor;
    }
    if(space_after != nullptr) { 
        delete space_after;
    }
    if(space_before != nullptr) { 
        delete space_before;
    }


    if(annotation != nullptr) { 
        delete annotation;
    }
    if(body != nullptr) { 
        delete body;
    }
    if(space_after_loop_type != nullptr) { 
        delete space_after_loop_type;
    }
    if(condition != nullptr) { 
        delete condition;
    }
}

OAIBTPStatementLoopWhile-280*
OAIBTPStatementLoopWhile-280::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIBTPStatementLoopWhile-280::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&atomic, pJson["atomic"], "bool", "");
    
    ::OpenAPI::setValue(&bt_type, pJson["btType"], "QString", "QString");
    
    ::OpenAPI::setValue(&documentation_type, pJson["documentationType"], "QString", "QString");
    
    ::OpenAPI::setValue(&end_source_location, pJson["endSourceLocation"], "qint32", "");
    
    ::OpenAPI::setValue(&node_id, pJson["nodeId"], "QString", "QString");
    
    ::OpenAPI::setValue(&short_descriptor, pJson["shortDescriptor"], "QString", "QString");
    
    ::OpenAPI::setValue(&space_after, pJson["spaceAfter"], "OAIBTPSpace-10", "OAIBTPSpace-10");
    
    ::OpenAPI::setValue(&space_before, pJson["spaceBefore"], "OAIBTPSpace-10", "OAIBTPSpace-10");
    
    ::OpenAPI::setValue(&space_default, pJson["spaceDefault"], "bool", "");
    
    ::OpenAPI::setValue(&start_source_location, pJson["startSourceLocation"], "qint32", "");
    
    ::OpenAPI::setValue(&annotation, pJson["annotation"], "OAIBTPAnnotation-231", "OAIBTPAnnotation-231");
    
    ::OpenAPI::setValue(&body, pJson["body"], "OAIBTPStatement-269", "OAIBTPStatement-269");
    
    ::OpenAPI::setValue(&space_after_loop_type, pJson["spaceAfterLoopType"], "OAIBTPSpace-10", "OAIBTPSpace-10");
    
    ::OpenAPI::setValue(&condition, pJson["condition"], "OAIBTPExpression-9", "OAIBTPExpression-9");
    
}

QString
OAIBTPStatementLoopWhile-280::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIBTPStatementLoopWhile-280::asJsonObject() {
    QJsonObject obj;
    if(m_atomic_isSet){
        obj.insert("atomic", QJsonValue(atomic));
    }
    if(bt_type != nullptr && *bt_type != QString("")){
        toJsonValue(QString("btType"), bt_type, obj, QString("QString"));
    }
    if(documentation_type != nullptr && *documentation_type != QString("")){
        toJsonValue(QString("documentationType"), documentation_type, obj, QString("QString"));
    }
    if(m_end_source_location_isSet){
        obj.insert("endSourceLocation", QJsonValue(end_source_location));
    }
    if(node_id != nullptr && *node_id != QString("")){
        toJsonValue(QString("nodeId"), node_id, obj, QString("QString"));
    }
    if(short_descriptor != nullptr && *short_descriptor != QString("")){
        toJsonValue(QString("shortDescriptor"), short_descriptor, obj, QString("QString"));
    }
    if((space_after != nullptr) && (space_after->isSet())){
        toJsonValue(QString("spaceAfter"), space_after, obj, QString("OAIBTPSpace-10"));
    }
    if((space_before != nullptr) && (space_before->isSet())){
        toJsonValue(QString("spaceBefore"), space_before, obj, QString("OAIBTPSpace-10"));
    }
    if(m_space_default_isSet){
        obj.insert("spaceDefault", QJsonValue(space_default));
    }
    if(m_start_source_location_isSet){
        obj.insert("startSourceLocation", QJsonValue(start_source_location));
    }
    if((annotation != nullptr) && (annotation->isSet())){
        toJsonValue(QString("annotation"), annotation, obj, QString("OAIBTPAnnotation-231"));
    }
    if((body != nullptr) && (body->isSet())){
        toJsonValue(QString("body"), body, obj, QString("OAIBTPStatement-269"));
    }
    if((space_after_loop_type != nullptr) && (space_after_loop_type->isSet())){
        toJsonValue(QString("spaceAfterLoopType"), space_after_loop_type, obj, QString("OAIBTPSpace-10"));
    }
    if((condition != nullptr) && (condition->isSet())){
        toJsonValue(QString("condition"), condition, obj, QString("OAIBTPExpression-9"));
    }

    return obj;
}

bool
OAIBTPStatementLoopWhile-280::isAtomic() {
    return atomic;
}
void
OAIBTPStatementLoopWhile-280::setAtomic(bool atomic) {
    this->atomic = atomic;
    this->m_atomic_isSet = true;
}

QString*
OAIBTPStatementLoopWhile-280::getBtType() {
    return bt_type;
}
void
OAIBTPStatementLoopWhile-280::setBtType(QString* bt_type) {
    this->bt_type = bt_type;
    this->m_bt_type_isSet = true;
}

QString*
OAIBTPStatementLoopWhile-280::getDocumentationType() {
    return documentation_type;
}
void
OAIBTPStatementLoopWhile-280::setDocumentationType(QString* documentation_type) {
    this->documentation_type = documentation_type;
    this->m_documentation_type_isSet = true;
}

qint32
OAIBTPStatementLoopWhile-280::getEndSourceLocation() {
    return end_source_location;
}
void
OAIBTPStatementLoopWhile-280::setEndSourceLocation(qint32 end_source_location) {
    this->end_source_location = end_source_location;
    this->m_end_source_location_isSet = true;
}

QString*
OAIBTPStatementLoopWhile-280::getNodeId() {
    return node_id;
}
void
OAIBTPStatementLoopWhile-280::setNodeId(QString* node_id) {
    this->node_id = node_id;
    this->m_node_id_isSet = true;
}

QString*
OAIBTPStatementLoopWhile-280::getShortDescriptor() {
    return short_descriptor;
}
void
OAIBTPStatementLoopWhile-280::setShortDescriptor(QString* short_descriptor) {
    this->short_descriptor = short_descriptor;
    this->m_short_descriptor_isSet = true;
}

OAIBTPSpace-10*
OAIBTPStatementLoopWhile-280::getSpaceAfter() {
    return space_after;
}
void
OAIBTPStatementLoopWhile-280::setSpaceAfter(OAIBTPSpace-10* space_after) {
    this->space_after = space_after;
    this->m_space_after_isSet = true;
}

OAIBTPSpace-10*
OAIBTPStatementLoopWhile-280::getSpaceBefore() {
    return space_before;
}
void
OAIBTPStatementLoopWhile-280::setSpaceBefore(OAIBTPSpace-10* space_before) {
    this->space_before = space_before;
    this->m_space_before_isSet = true;
}

bool
OAIBTPStatementLoopWhile-280::isSpaceDefault() {
    return space_default;
}
void
OAIBTPStatementLoopWhile-280::setSpaceDefault(bool space_default) {
    this->space_default = space_default;
    this->m_space_default_isSet = true;
}

qint32
OAIBTPStatementLoopWhile-280::getStartSourceLocation() {
    return start_source_location;
}
void
OAIBTPStatementLoopWhile-280::setStartSourceLocation(qint32 start_source_location) {
    this->start_source_location = start_source_location;
    this->m_start_source_location_isSet = true;
}

OAIBTPAnnotation-231*
OAIBTPStatementLoopWhile-280::getAnnotation() {
    return annotation;
}
void
OAIBTPStatementLoopWhile-280::setAnnotation(OAIBTPAnnotation-231* annotation) {
    this->annotation = annotation;
    this->m_annotation_isSet = true;
}

OAIBTPStatement-269*
OAIBTPStatementLoopWhile-280::getBody() {
    return body;
}
void
OAIBTPStatementLoopWhile-280::setBody(OAIBTPStatement-269* body) {
    this->body = body;
    this->m_body_isSet = true;
}

OAIBTPSpace-10*
OAIBTPStatementLoopWhile-280::getSpaceAfterLoopType() {
    return space_after_loop_type;
}
void
OAIBTPStatementLoopWhile-280::setSpaceAfterLoopType(OAIBTPSpace-10* space_after_loop_type) {
    this->space_after_loop_type = space_after_loop_type;
    this->m_space_after_loop_type_isSet = true;
}

OAIBTPExpression-9*
OAIBTPStatementLoopWhile-280::getCondition() {
    return condition;
}
void
OAIBTPStatementLoopWhile-280::setCondition(OAIBTPExpression-9* condition) {
    this->condition = condition;
    this->m_condition_isSet = true;
}


bool
OAIBTPStatementLoopWhile-280::isSet(){
    bool isObjectUpdated = false;
    do{
        if(m_atomic_isSet){ isObjectUpdated = true; break;}
        if(bt_type != nullptr && *bt_type != QString("")){ isObjectUpdated = true; break;}
        if(documentation_type != nullptr && *documentation_type != QString("")){ isObjectUpdated = true; break;}
        if(m_end_source_location_isSet){ isObjectUpdated = true; break;}
        if(node_id != nullptr && *node_id != QString("")){ isObjectUpdated = true; break;}
        if(short_descriptor != nullptr && *short_descriptor != QString("")){ isObjectUpdated = true; break;}
        if(space_after != nullptr && space_after->isSet()){ isObjectUpdated = true; break;}
        if(space_before != nullptr && space_before->isSet()){ isObjectUpdated = true; break;}
        if(m_space_default_isSet){ isObjectUpdated = true; break;}
        if(m_start_source_location_isSet){ isObjectUpdated = true; break;}
        if(annotation != nullptr && annotation->isSet()){ isObjectUpdated = true; break;}
        if(body != nullptr && body->isSet()){ isObjectUpdated = true; break;}
        if(space_after_loop_type != nullptr && space_after_loop_type->isSet()){ isObjectUpdated = true; break;}
        if(condition != nullptr && condition->isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

