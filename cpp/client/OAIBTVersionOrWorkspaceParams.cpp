/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * OpenAPI spec version: 1.111
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIBTVersionOrWorkspaceParams.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIBTVersionOrWorkspaceParams::OAIBTVersionOrWorkspaceParams(QString json) {
    init();
    this->fromJson(json);
}

OAIBTVersionOrWorkspaceParams::OAIBTVersionOrWorkspaceParams() {
    init();
}

OAIBTVersionOrWorkspaceParams::~OAIBTVersionOrWorkspaceParams() {
    this->cleanup();
}

void
OAIBTVersionOrWorkspaceParams::init() {
    client_interaction_mode = new QString("");
    m_client_interaction_mode_isSet = false;
    description = new QString("");
    m_description_isSet = false;
    document_id = new QString("");
    m_document_id_isSet = false;
    from_history = false;
    m_from_history_isSet = false;
    is_release = false;
    m_is_release_isSet = false;
    microversion_id = new QString("");
    m_microversion_id_isSet = false;
    name = new QString("");
    m_name_isSet = false;
    purpose = 0;
    m_purpose_isSet = false;
    read_only = false;
    m_read_only_isSet = false;
    version_id = new QString("");
    m_version_id_isSet = false;
    workspace_id = new QString("");
    m_workspace_id_isSet = false;
}

void
OAIBTVersionOrWorkspaceParams::cleanup() {
    if(client_interaction_mode != nullptr) { 
        delete client_interaction_mode;
    }
    if(description != nullptr) { 
        delete description;
    }
    if(document_id != nullptr) { 
        delete document_id;
    }


    if(microversion_id != nullptr) { 
        delete microversion_id;
    }
    if(name != nullptr) { 
        delete name;
    }


    if(version_id != nullptr) { 
        delete version_id;
    }
    if(workspace_id != nullptr) { 
        delete workspace_id;
    }
}

OAIBTVersionOrWorkspaceParams*
OAIBTVersionOrWorkspaceParams::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIBTVersionOrWorkspaceParams::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&client_interaction_mode, pJson["clientInteractionMode"], "QString", "QString");
    
    ::OpenAPI::setValue(&description, pJson["description"], "QString", "QString");
    
    ::OpenAPI::setValue(&document_id, pJson["documentId"], "QString", "QString");
    
    ::OpenAPI::setValue(&from_history, pJson["fromHistory"], "bool", "");
    
    ::OpenAPI::setValue(&is_release, pJson["isRelease"], "bool", "");
    
    ::OpenAPI::setValue(&microversion_id, pJson["microversionId"], "QString", "QString");
    
    ::OpenAPI::setValue(&name, pJson["name"], "QString", "QString");
    
    ::OpenAPI::setValue(&purpose, pJson["purpose"], "qint32", "");
    
    ::OpenAPI::setValue(&read_only, pJson["readOnly"], "bool", "");
    
    ::OpenAPI::setValue(&version_id, pJson["versionId"], "QString", "QString");
    
    ::OpenAPI::setValue(&workspace_id, pJson["workspaceId"], "QString", "QString");
    
}

QString
OAIBTVersionOrWorkspaceParams::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIBTVersionOrWorkspaceParams::asJsonObject() {
    QJsonObject obj;
    if(client_interaction_mode != nullptr && *client_interaction_mode != QString("")){
        toJsonValue(QString("clientInteractionMode"), client_interaction_mode, obj, QString("QString"));
    }
    if(description != nullptr && *description != QString("")){
        toJsonValue(QString("description"), description, obj, QString("QString"));
    }
    if(document_id != nullptr && *document_id != QString("")){
        toJsonValue(QString("documentId"), document_id, obj, QString("QString"));
    }
    if(m_from_history_isSet){
        obj.insert("fromHistory", QJsonValue(from_history));
    }
    if(m_is_release_isSet){
        obj.insert("isRelease", QJsonValue(is_release));
    }
    if(microversion_id != nullptr && *microversion_id != QString("")){
        toJsonValue(QString("microversionId"), microversion_id, obj, QString("QString"));
    }
    if(name != nullptr && *name != QString("")){
        toJsonValue(QString("name"), name, obj, QString("QString"));
    }
    if(m_purpose_isSet){
        obj.insert("purpose", QJsonValue(purpose));
    }
    if(m_read_only_isSet){
        obj.insert("readOnly", QJsonValue(read_only));
    }
    if(version_id != nullptr && *version_id != QString("")){
        toJsonValue(QString("versionId"), version_id, obj, QString("QString"));
    }
    if(workspace_id != nullptr && *workspace_id != QString("")){
        toJsonValue(QString("workspaceId"), workspace_id, obj, QString("QString"));
    }

    return obj;
}

QString*
OAIBTVersionOrWorkspaceParams::getClientInteractionMode() {
    return client_interaction_mode;
}
void
OAIBTVersionOrWorkspaceParams::setClientInteractionMode(QString* client_interaction_mode) {
    this->client_interaction_mode = client_interaction_mode;
    this->m_client_interaction_mode_isSet = true;
}

QString*
OAIBTVersionOrWorkspaceParams::getDescription() {
    return description;
}
void
OAIBTVersionOrWorkspaceParams::setDescription(QString* description) {
    this->description = description;
    this->m_description_isSet = true;
}

QString*
OAIBTVersionOrWorkspaceParams::getDocumentId() {
    return document_id;
}
void
OAIBTVersionOrWorkspaceParams::setDocumentId(QString* document_id) {
    this->document_id = document_id;
    this->m_document_id_isSet = true;
}

bool
OAIBTVersionOrWorkspaceParams::isFromHistory() {
    return from_history;
}
void
OAIBTVersionOrWorkspaceParams::setFromHistory(bool from_history) {
    this->from_history = from_history;
    this->m_from_history_isSet = true;
}

bool
OAIBTVersionOrWorkspaceParams::isIsRelease() {
    return is_release;
}
void
OAIBTVersionOrWorkspaceParams::setIsRelease(bool is_release) {
    this->is_release = is_release;
    this->m_is_release_isSet = true;
}

QString*
OAIBTVersionOrWorkspaceParams::getMicroversionId() {
    return microversion_id;
}
void
OAIBTVersionOrWorkspaceParams::setMicroversionId(QString* microversion_id) {
    this->microversion_id = microversion_id;
    this->m_microversion_id_isSet = true;
}

QString*
OAIBTVersionOrWorkspaceParams::getName() {
    return name;
}
void
OAIBTVersionOrWorkspaceParams::setName(QString* name) {
    this->name = name;
    this->m_name_isSet = true;
}

qint32
OAIBTVersionOrWorkspaceParams::getPurpose() {
    return purpose;
}
void
OAIBTVersionOrWorkspaceParams::setPurpose(qint32 purpose) {
    this->purpose = purpose;
    this->m_purpose_isSet = true;
}

bool
OAIBTVersionOrWorkspaceParams::isReadOnly() {
    return read_only;
}
void
OAIBTVersionOrWorkspaceParams::setReadOnly(bool read_only) {
    this->read_only = read_only;
    this->m_read_only_isSet = true;
}

QString*
OAIBTVersionOrWorkspaceParams::getVersionId() {
    return version_id;
}
void
OAIBTVersionOrWorkspaceParams::setVersionId(QString* version_id) {
    this->version_id = version_id;
    this->m_version_id_isSet = true;
}

QString*
OAIBTVersionOrWorkspaceParams::getWorkspaceId() {
    return workspace_id;
}
void
OAIBTVersionOrWorkspaceParams::setWorkspaceId(QString* workspace_id) {
    this->workspace_id = workspace_id;
    this->m_workspace_id_isSet = true;
}


bool
OAIBTVersionOrWorkspaceParams::isSet(){
    bool isObjectUpdated = false;
    do{
        if(client_interaction_mode != nullptr && *client_interaction_mode != QString("")){ isObjectUpdated = true; break;}
        if(description != nullptr && *description != QString("")){ isObjectUpdated = true; break;}
        if(document_id != nullptr && *document_id != QString("")){ isObjectUpdated = true; break;}
        if(m_from_history_isSet){ isObjectUpdated = true; break;}
        if(m_is_release_isSet){ isObjectUpdated = true; break;}
        if(microversion_id != nullptr && *microversion_id != QString("")){ isObjectUpdated = true; break;}
        if(name != nullptr && *name != QString("")){ isObjectUpdated = true; break;}
        if(m_purpose_isSet){ isObjectUpdated = true; break;}
        if(m_read_only_isSet){ isObjectUpdated = true; break;}
        if(version_id != nullptr && *version_id != QString("")){ isObjectUpdated = true; break;}
        if(workspace_id != nullptr && *workspace_id != QString("")){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

