/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * OpenAPI spec version: 1.111
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIProratedCharges.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIProratedCharges::OAIProratedCharges(QString json) {
    init();
    this->fromJson(json);
}

OAIProratedCharges::OAIProratedCharges() {
    init();
}

OAIProratedCharges::~OAIProratedCharges() {
    this->cleanup();
}

void
OAIProratedCharges::init() {
    amount = 0L;
    m_amount_isSet = false;
    date = NULL;
    m_date_isSet = false;
    description = new QString("");
    m_description_isSet = false;
}

void
OAIProratedCharges::cleanup() {

    if(date != nullptr) { 
        delete date;
    }
    if(description != nullptr) { 
        delete description;
    }
}

OAIProratedCharges*
OAIProratedCharges::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIProratedCharges::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&amount, pJson["amount"], "qint64", "");
    
    ::OpenAPI::setValue(&date, pJson["date"], "QDateTime", "QDateTime");
    
    ::OpenAPI::setValue(&description, pJson["description"], "QString", "QString");
    
}

QString
OAIProratedCharges::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIProratedCharges::asJsonObject() {
    QJsonObject obj;
    if(m_amount_isSet){
        obj.insert("amount", QJsonValue(amount));
    }
    if(date != nullptr) { 
        toJsonValue(QString("date"), date, obj, QString("QDateTime"));
    }
    if(description != nullptr && *description != QString("")){
        toJsonValue(QString("description"), description, obj, QString("QString"));
    }

    return obj;
}

qint64
OAIProratedCharges::getAmount() {
    return amount;
}
void
OAIProratedCharges::setAmount(qint64 amount) {
    this->amount = amount;
    this->m_amount_isSet = true;
}

QDateTime*
OAIProratedCharges::getDate() {
    return date;
}
void
OAIProratedCharges::setDate(QDateTime* date) {
    this->date = date;
    this->m_date_isSet = true;
}

QString*
OAIProratedCharges::getDescription() {
    return description;
}
void
OAIProratedCharges::setDescription(QString* description) {
    this->description = description;
    this->m_description_isSet = true;
}


bool
OAIProratedCharges::isSet(){
    bool isObjectUpdated = false;
    do{
        if(m_amount_isSet){ isObjectUpdated = true; break;}
        if(description != nullptr && *description != QString("")){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

