/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * OpenAPI spec version: 1.111
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIBTMParameterQueryWithOccurrenceList-67.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIBTMParameterQueryWithOccurrenceList-67::OAIBTMParameterQueryWithOccurrenceList-67(QString json) {
    init();
    this->fromJson(json);
}

OAIBTMParameterQueryWithOccurrenceList-67::OAIBTMParameterQueryWithOccurrenceList-67() {
    init();
}

OAIBTMParameterQueryWithOccurrenceList-67::~OAIBTMParameterQueryWithOccurrenceList-67() {
    this->cleanup();
}

void
OAIBTMParameterQueryWithOccurrenceList-67::init() {
    bt_type = new QString("");
    m_bt_type_isSet = false;
    import_microversion = new QString("");
    m_import_microversion_isSet = false;
    node_id = new QString("");
    m_node_id_isSet = false;
    parameter_id = new QString("");
    m_parameter_id_isSet = false;
    occurrences = new QList<OAIBTOccurrence-74*>();
    m_occurrences_isSet = false;
    queries = new QList<OAIBTMIndividualQueryWithOccurrenceBase-904*>();
    m_queries_isSet = false;
}

void
OAIBTMParameterQueryWithOccurrenceList-67::cleanup() {
    if(bt_type != nullptr) { 
        delete bt_type;
    }
    if(import_microversion != nullptr) { 
        delete import_microversion;
    }
    if(node_id != nullptr) { 
        delete node_id;
    }
    if(parameter_id != nullptr) { 
        delete parameter_id;
    }
    if(occurrences != nullptr) { 
        auto arr = occurrences;
        for(auto o: *arr) { 
            delete o;
        }
        delete occurrences;
    }
    if(queries != nullptr) { 
        auto arr = queries;
        for(auto o: *arr) { 
            delete o;
        }
        delete queries;
    }
}

OAIBTMParameterQueryWithOccurrenceList-67*
OAIBTMParameterQueryWithOccurrenceList-67::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIBTMParameterQueryWithOccurrenceList-67::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&bt_type, pJson["btType"], "QString", "QString");
    
    ::OpenAPI::setValue(&import_microversion, pJson["importMicroversion"], "QString", "QString");
    
    ::OpenAPI::setValue(&node_id, pJson["nodeId"], "QString", "QString");
    
    ::OpenAPI::setValue(&parameter_id, pJson["parameterId"], "QString", "QString");
    
    
    ::OpenAPI::setValue(&occurrences, pJson["occurrences"], "QList", "OAIBTOccurrence-74");
    
    ::OpenAPI::setValue(&queries, pJson["queries"], "QList", "OAIBTMIndividualQueryWithOccurrenceBase-904");
}

QString
OAIBTMParameterQueryWithOccurrenceList-67::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIBTMParameterQueryWithOccurrenceList-67::asJsonObject() {
    QJsonObject obj;
    if(bt_type != nullptr && *bt_type != QString("")){
        toJsonValue(QString("btType"), bt_type, obj, QString("QString"));
    }
    if(import_microversion != nullptr && *import_microversion != QString("")){
        toJsonValue(QString("importMicroversion"), import_microversion, obj, QString("QString"));
    }
    if(node_id != nullptr && *node_id != QString("")){
        toJsonValue(QString("nodeId"), node_id, obj, QString("QString"));
    }
    if(parameter_id != nullptr && *parameter_id != QString("")){
        toJsonValue(QString("parameterId"), parameter_id, obj, QString("QString"));
    }
    if(occurrences->size() > 0){
        toJsonArray((QList<void*>*)occurrences, obj, "occurrences", "OAIBTOccurrence-74");
    }
    if(queries->size() > 0){
        toJsonArray((QList<void*>*)queries, obj, "queries", "OAIBTMIndividualQueryWithOccurrenceBase-904");
    }

    return obj;
}

QString*
OAIBTMParameterQueryWithOccurrenceList-67::getBtType() {
    return bt_type;
}
void
OAIBTMParameterQueryWithOccurrenceList-67::setBtType(QString* bt_type) {
    this->bt_type = bt_type;
    this->m_bt_type_isSet = true;
}

QString*
OAIBTMParameterQueryWithOccurrenceList-67::getImportMicroversion() {
    return import_microversion;
}
void
OAIBTMParameterQueryWithOccurrenceList-67::setImportMicroversion(QString* import_microversion) {
    this->import_microversion = import_microversion;
    this->m_import_microversion_isSet = true;
}

QString*
OAIBTMParameterQueryWithOccurrenceList-67::getNodeId() {
    return node_id;
}
void
OAIBTMParameterQueryWithOccurrenceList-67::setNodeId(QString* node_id) {
    this->node_id = node_id;
    this->m_node_id_isSet = true;
}

QString*
OAIBTMParameterQueryWithOccurrenceList-67::getParameterId() {
    return parameter_id;
}
void
OAIBTMParameterQueryWithOccurrenceList-67::setParameterId(QString* parameter_id) {
    this->parameter_id = parameter_id;
    this->m_parameter_id_isSet = true;
}

QList<OAIBTOccurrence-74*>*
OAIBTMParameterQueryWithOccurrenceList-67::getOccurrences() {
    return occurrences;
}
void
OAIBTMParameterQueryWithOccurrenceList-67::setOccurrences(QList<OAIBTOccurrence-74*>* occurrences) {
    this->occurrences = occurrences;
    this->m_occurrences_isSet = true;
}

QList<OAIBTMIndividualQueryWithOccurrenceBase-904*>*
OAIBTMParameterQueryWithOccurrenceList-67::getQueries() {
    return queries;
}
void
OAIBTMParameterQueryWithOccurrenceList-67::setQueries(QList<OAIBTMIndividualQueryWithOccurrenceBase-904*>* queries) {
    this->queries = queries;
    this->m_queries_isSet = true;
}


bool
OAIBTMParameterQueryWithOccurrenceList-67::isSet(){
    bool isObjectUpdated = false;
    do{
        if(bt_type != nullptr && *bt_type != QString("")){ isObjectUpdated = true; break;}
        if(import_microversion != nullptr && *import_microversion != QString("")){ isObjectUpdated = true; break;}
        if(node_id != nullptr && *node_id != QString("")){ isObjectUpdated = true; break;}
        if(parameter_id != nullptr && *parameter_id != QString("")){ isObjectUpdated = true; break;}
        if(occurrences->size() > 0){ isObjectUpdated = true; break;}
        if(queries->size() > 0){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

