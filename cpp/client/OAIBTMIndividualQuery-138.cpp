/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * OpenAPI spec version: 1.111
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIBTMIndividualQuery-138.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIBTMIndividualQuery-138::OAIBTMIndividualQuery-138(QString json) {
    init();
    this->fromJson(json);
}

OAIBTMIndividualQuery-138::OAIBTMIndividualQuery-138() {
    init();
}

OAIBTMIndividualQuery-138::~OAIBTMIndividualQuery-138() {
    this->cleanup();
}

void
OAIBTMIndividualQuery-138::init() {
    bt_type = new QString("");
    m_bt_type_isSet = false;
    deterministic_id_list = new OAIBTMIndividualQueryBase-139();
    m_deterministic_id_list_isSet = false;
    deterministic_ids = new QList<QString*>();
    m_deterministic_ids_isSet = false;
    import_microversion = new QString("");
    m_import_microversion_isSet = false;
    node_id = new QString("");
    m_node_id_isSet = false;
    query = new OAIBTMIndividualQueryBase-139();
    m_query_isSet = false;
    query_string = new QString("");
    m_query_string_isSet = false;
    persistent_query = new OAIBTPStatement-269();
    m_persistent_query_isSet = false;
    variable_name = new OAIBTMIndividualQuery-138();
    m_variable_name_isSet = false;
    query_statement = new OAIBTPStatement-269();
    m_query_statement_isSet = false;
}

void
OAIBTMIndividualQuery-138::cleanup() {
    if(bt_type != nullptr) { 
        delete bt_type;
    }
    if(deterministic_id_list != nullptr) { 
        delete deterministic_id_list;
    }
    if(deterministic_ids != nullptr) { 
        auto arr = deterministic_ids;
        for(auto o: *arr) { 
            delete o;
        }
        delete deterministic_ids;
    }
    if(import_microversion != nullptr) { 
        delete import_microversion;
    }
    if(node_id != nullptr) { 
        delete node_id;
    }
    if(query != nullptr) { 
        delete query;
    }
    if(query_string != nullptr) { 
        delete query_string;
    }
    if(persistent_query != nullptr) { 
        delete persistent_query;
    }
    if(variable_name != nullptr) { 
        delete variable_name;
    }
    if(query_statement != nullptr) { 
        delete query_statement;
    }
}

OAIBTMIndividualQuery-138*
OAIBTMIndividualQuery-138::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIBTMIndividualQuery-138::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&bt_type, pJson["btType"], "QString", "QString");
    
    ::OpenAPI::setValue(&deterministic_id_list, pJson["deterministicIdList"], "OAIBTMIndividualQueryBase-139", "OAIBTMIndividualQueryBase-139");
    
    
    ::OpenAPI::setValue(&deterministic_ids, pJson["deterministicIds"], "QList", "QString");
    ::OpenAPI::setValue(&import_microversion, pJson["importMicroversion"], "QString", "QString");
    
    ::OpenAPI::setValue(&node_id, pJson["nodeId"], "QString", "QString");
    
    ::OpenAPI::setValue(&query, pJson["query"], "OAIBTMIndividualQueryBase-139", "OAIBTMIndividualQueryBase-139");
    
    ::OpenAPI::setValue(&query_string, pJson["queryString"], "QString", "QString");
    
    ::OpenAPI::setValue(&persistent_query, pJson["persistentQuery"], "OAIBTPStatement-269", "OAIBTPStatement-269");
    
    ::OpenAPI::setValue(&variable_name, pJson["variableName"], "OAIBTMIndividualQuery-138", "OAIBTMIndividualQuery-138");
    
    ::OpenAPI::setValue(&query_statement, pJson["queryStatement"], "OAIBTPStatement-269", "OAIBTPStatement-269");
    
}

QString
OAIBTMIndividualQuery-138::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIBTMIndividualQuery-138::asJsonObject() {
    QJsonObject obj;
    if(bt_type != nullptr && *bt_type != QString("")){
        toJsonValue(QString("btType"), bt_type, obj, QString("QString"));
    }
    if((deterministic_id_list != nullptr) && (deterministic_id_list->isSet())){
        toJsonValue(QString("deterministicIdList"), deterministic_id_list, obj, QString("OAIBTMIndividualQueryBase-139"));
    }
    if(deterministic_ids->size() > 0){
        toJsonArray((QList<void*>*)deterministic_ids, obj, "deterministicIds", "QString");
    }
    if(import_microversion != nullptr && *import_microversion != QString("")){
        toJsonValue(QString("importMicroversion"), import_microversion, obj, QString("QString"));
    }
    if(node_id != nullptr && *node_id != QString("")){
        toJsonValue(QString("nodeId"), node_id, obj, QString("QString"));
    }
    if((query != nullptr) && (query->isSet())){
        toJsonValue(QString("query"), query, obj, QString("OAIBTMIndividualQueryBase-139"));
    }
    if(query_string != nullptr && *query_string != QString("")){
        toJsonValue(QString("queryString"), query_string, obj, QString("QString"));
    }
    if((persistent_query != nullptr) && (persistent_query->isSet())){
        toJsonValue(QString("persistentQuery"), persistent_query, obj, QString("OAIBTPStatement-269"));
    }
    if((variable_name != nullptr) && (variable_name->isSet())){
        toJsonValue(QString("variableName"), variable_name, obj, QString("OAIBTMIndividualQuery-138"));
    }
    if((query_statement != nullptr) && (query_statement->isSet())){
        toJsonValue(QString("queryStatement"), query_statement, obj, QString("OAIBTPStatement-269"));
    }

    return obj;
}

QString*
OAIBTMIndividualQuery-138::getBtType() {
    return bt_type;
}
void
OAIBTMIndividualQuery-138::setBtType(QString* bt_type) {
    this->bt_type = bt_type;
    this->m_bt_type_isSet = true;
}

OAIBTMIndividualQueryBase-139*
OAIBTMIndividualQuery-138::getDeterministicIdList() {
    return deterministic_id_list;
}
void
OAIBTMIndividualQuery-138::setDeterministicIdList(OAIBTMIndividualQueryBase-139* deterministic_id_list) {
    this->deterministic_id_list = deterministic_id_list;
    this->m_deterministic_id_list_isSet = true;
}

QList<QString*>*
OAIBTMIndividualQuery-138::getDeterministicIds() {
    return deterministic_ids;
}
void
OAIBTMIndividualQuery-138::setDeterministicIds(QList<QString*>* deterministic_ids) {
    this->deterministic_ids = deterministic_ids;
    this->m_deterministic_ids_isSet = true;
}

QString*
OAIBTMIndividualQuery-138::getImportMicroversion() {
    return import_microversion;
}
void
OAIBTMIndividualQuery-138::setImportMicroversion(QString* import_microversion) {
    this->import_microversion = import_microversion;
    this->m_import_microversion_isSet = true;
}

QString*
OAIBTMIndividualQuery-138::getNodeId() {
    return node_id;
}
void
OAIBTMIndividualQuery-138::setNodeId(QString* node_id) {
    this->node_id = node_id;
    this->m_node_id_isSet = true;
}

OAIBTMIndividualQueryBase-139*
OAIBTMIndividualQuery-138::getQuery() {
    return query;
}
void
OAIBTMIndividualQuery-138::setQuery(OAIBTMIndividualQueryBase-139* query) {
    this->query = query;
    this->m_query_isSet = true;
}

QString*
OAIBTMIndividualQuery-138::getQueryString() {
    return query_string;
}
void
OAIBTMIndividualQuery-138::setQueryString(QString* query_string) {
    this->query_string = query_string;
    this->m_query_string_isSet = true;
}

OAIBTPStatement-269*
OAIBTMIndividualQuery-138::getPersistentQuery() {
    return persistent_query;
}
void
OAIBTMIndividualQuery-138::setPersistentQuery(OAIBTPStatement-269* persistent_query) {
    this->persistent_query = persistent_query;
    this->m_persistent_query_isSet = true;
}

OAIBTMIndividualQuery-138*
OAIBTMIndividualQuery-138::getVariableName() {
    return variable_name;
}
void
OAIBTMIndividualQuery-138::setVariableName(OAIBTMIndividualQuery-138* variable_name) {
    this->variable_name = variable_name;
    this->m_variable_name_isSet = true;
}

OAIBTPStatement-269*
OAIBTMIndividualQuery-138::getQueryStatement() {
    return query_statement;
}
void
OAIBTMIndividualQuery-138::setQueryStatement(OAIBTPStatement-269* query_statement) {
    this->query_statement = query_statement;
    this->m_query_statement_isSet = true;
}


bool
OAIBTMIndividualQuery-138::isSet(){
    bool isObjectUpdated = false;
    do{
        if(bt_type != nullptr && *bt_type != QString("")){ isObjectUpdated = true; break;}
        if(deterministic_id_list != nullptr && deterministic_id_list->isSet()){ isObjectUpdated = true; break;}
        if(deterministic_ids->size() > 0){ isObjectUpdated = true; break;}
        if(import_microversion != nullptr && *import_microversion != QString("")){ isObjectUpdated = true; break;}
        if(node_id != nullptr && *node_id != QString("")){ isObjectUpdated = true; break;}
        if(query != nullptr && query->isSet()){ isObjectUpdated = true; break;}
        if(query_string != nullptr && *query_string != QString("")){ isObjectUpdated = true; break;}
        if(persistent_query != nullptr && persistent_query->isSet()){ isObjectUpdated = true; break;}
        if(variable_name != nullptr && variable_name->isSet()){ isObjectUpdated = true; break;}
        if(query_statement != nullptr && query_statement->isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

