/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * OpenAPI spec version: 1.111
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIBTVector3d-389.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIBTVector3d-389::OAIBTVector3d-389(QString json) {
    init();
    this->fromJson(json);
}

OAIBTVector3d-389::OAIBTVector3d-389() {
    init();
}

OAIBTVector3d-389::~OAIBTVector3d-389() {
    this->cleanup();
}

void
OAIBTVector3d-389::init() {
    bt_type = new QString("");
    m_bt_type_isSet = false;
    x = 0.0;
    m_x_isSet = false;
    y = 0.0;
    m_y_isSet = false;
    z = 0.0;
    m_z_isSet = false;
}

void
OAIBTVector3d-389::cleanup() {
    if(bt_type != nullptr) { 
        delete bt_type;
    }



}

OAIBTVector3d-389*
OAIBTVector3d-389::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIBTVector3d-389::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&bt_type, pJson["btType"], "QString", "QString");
    
    ::OpenAPI::setValue(&x, pJson["x"], "double", "");
    
    ::OpenAPI::setValue(&y, pJson["y"], "double", "");
    
    ::OpenAPI::setValue(&z, pJson["z"], "double", "");
    
}

QString
OAIBTVector3d-389::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIBTVector3d-389::asJsonObject() {
    QJsonObject obj;
    if(bt_type != nullptr && *bt_type != QString("")){
        toJsonValue(QString("btType"), bt_type, obj, QString("QString"));
    }
    if(m_x_isSet){
        obj.insert("x", QJsonValue(x));
    }
    if(m_y_isSet){
        obj.insert("y", QJsonValue(y));
    }
    if(m_z_isSet){
        obj.insert("z", QJsonValue(z));
    }

    return obj;
}

QString*
OAIBTVector3d-389::getBtType() {
    return bt_type;
}
void
OAIBTVector3d-389::setBtType(QString* bt_type) {
    this->bt_type = bt_type;
    this->m_bt_type_isSet = true;
}

double
OAIBTVector3d-389::getX() {
    return x;
}
void
OAIBTVector3d-389::setX(double x) {
    this->x = x;
    this->m_x_isSet = true;
}

double
OAIBTVector3d-389::getY() {
    return y;
}
void
OAIBTVector3d-389::setY(double y) {
    this->y = y;
    this->m_y_isSet = true;
}

double
OAIBTVector3d-389::getZ() {
    return z;
}
void
OAIBTVector3d-389::setZ(double z) {
    this->z = z;
    this->m_z_isSet = true;
}


bool
OAIBTVector3d-389::isSet(){
    bool isObjectUpdated = false;
    do{
        if(bt_type != nullptr && *bt_type != QString("")){ isObjectUpdated = true; break;}
        if(m_x_isSet){ isObjectUpdated = true; break;}
        if(m_y_isSet){ isObjectUpdated = true; break;}
        if(m_z_isSet){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

