/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * OpenAPI spec version: 1.111
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIBTPublishedWorkflowInfo.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIBTPublishedWorkflowInfo::OAIBTPublishedWorkflowInfo(QString json) {
    init();
    this->fromJson(json);
}

OAIBTPublishedWorkflowInfo::OAIBTPublishedWorkflowInfo() {
    init();
}

OAIBTPublishedWorkflowInfo::~OAIBTPublishedWorkflowInfo() {
    this->cleanup();
}

void
OAIBTPublishedWorkflowInfo::init() {
    active_state = 0;
    m_active_state_isSet = false;
    company_id = new QString("");
    m_company_id_isSet = false;
    description = new QString("");
    m_description_isSet = false;
    document_id = new QString("");
    m_document_id_isSet = false;
    element_id = new QString("");
    m_element_id_isSet = false;
    id = new QString("");
    m_id_isSet = false;
    image_src = new QString("");
    m_image_src_isSet = false;
    is_obsoletion = false;
    m_is_obsoletion_isSet = false;
    is_pickable = false;
    m_is_pickable_isSet = false;
    json = new QString("");
    m_json_isSet = false;
    name = new QString("");
    m_name_isSet = false;
    object_type = 0;
    m_object_type_isSet = false;
    owner_type = 0;
    m_owner_type_isSet = false;
    version_id = new QString("");
    m_version_id_isSet = false;
}

void
OAIBTPublishedWorkflowInfo::cleanup() {

    if(company_id != nullptr) { 
        delete company_id;
    }
    if(description != nullptr) { 
        delete description;
    }
    if(document_id != nullptr) { 
        delete document_id;
    }
    if(element_id != nullptr) { 
        delete element_id;
    }
    if(id != nullptr) { 
        delete id;
    }
    if(image_src != nullptr) { 
        delete image_src;
    }


    if(json != nullptr) { 
        delete json;
    }
    if(name != nullptr) { 
        delete name;
    }


    if(version_id != nullptr) { 
        delete version_id;
    }
}

OAIBTPublishedWorkflowInfo*
OAIBTPublishedWorkflowInfo::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIBTPublishedWorkflowInfo::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&active_state, pJson["activeState"], "qint32", "");
    
    ::OpenAPI::setValue(&company_id, pJson["companyId"], "QString", "QString");
    
    ::OpenAPI::setValue(&description, pJson["description"], "QString", "QString");
    
    ::OpenAPI::setValue(&document_id, pJson["documentId"], "QString", "QString");
    
    ::OpenAPI::setValue(&element_id, pJson["elementId"], "QString", "QString");
    
    ::OpenAPI::setValue(&id, pJson["id"], "QString", "QString");
    
    ::OpenAPI::setValue(&image_src, pJson["imageSrc"], "QString", "QString");
    
    ::OpenAPI::setValue(&is_obsoletion, pJson["isObsoletion"], "bool", "");
    
    ::OpenAPI::setValue(&is_pickable, pJson["isPickable"], "bool", "");
    
    ::OpenAPI::setValue(&json, pJson["json"], "QString", "QString");
    
    ::OpenAPI::setValue(&name, pJson["name"], "QString", "QString");
    
    ::OpenAPI::setValue(&object_type, pJson["objectType"], "qint32", "");
    
    ::OpenAPI::setValue(&owner_type, pJson["ownerType"], "qint32", "");
    
    ::OpenAPI::setValue(&version_id, pJson["versionId"], "QString", "QString");
    
}

QString
OAIBTPublishedWorkflowInfo::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIBTPublishedWorkflowInfo::asJsonObject() {
    QJsonObject obj;
    if(m_active_state_isSet){
        obj.insert("activeState", QJsonValue(active_state));
    }
    if(company_id != nullptr && *company_id != QString("")){
        toJsonValue(QString("companyId"), company_id, obj, QString("QString"));
    }
    if(description != nullptr && *description != QString("")){
        toJsonValue(QString("description"), description, obj, QString("QString"));
    }
    if(document_id != nullptr && *document_id != QString("")){
        toJsonValue(QString("documentId"), document_id, obj, QString("QString"));
    }
    if(element_id != nullptr && *element_id != QString("")){
        toJsonValue(QString("elementId"), element_id, obj, QString("QString"));
    }
    if(id != nullptr && *id != QString("")){
        toJsonValue(QString("id"), id, obj, QString("QString"));
    }
    if(image_src != nullptr && *image_src != QString("")){
        toJsonValue(QString("imageSrc"), image_src, obj, QString("QString"));
    }
    if(m_is_obsoletion_isSet){
        obj.insert("isObsoletion", QJsonValue(is_obsoletion));
    }
    if(m_is_pickable_isSet){
        obj.insert("isPickable", QJsonValue(is_pickable));
    }
    if(json != nullptr && *json != QString("")){
        toJsonValue(QString("json"), json, obj, QString("QString"));
    }
    if(name != nullptr && *name != QString("")){
        toJsonValue(QString("name"), name, obj, QString("QString"));
    }
    if(m_object_type_isSet){
        obj.insert("objectType", QJsonValue(object_type));
    }
    if(m_owner_type_isSet){
        obj.insert("ownerType", QJsonValue(owner_type));
    }
    if(version_id != nullptr && *version_id != QString("")){
        toJsonValue(QString("versionId"), version_id, obj, QString("QString"));
    }

    return obj;
}

qint32
OAIBTPublishedWorkflowInfo::getActiveState() {
    return active_state;
}
void
OAIBTPublishedWorkflowInfo::setActiveState(qint32 active_state) {
    this->active_state = active_state;
    this->m_active_state_isSet = true;
}

QString*
OAIBTPublishedWorkflowInfo::getCompanyId() {
    return company_id;
}
void
OAIBTPublishedWorkflowInfo::setCompanyId(QString* company_id) {
    this->company_id = company_id;
    this->m_company_id_isSet = true;
}

QString*
OAIBTPublishedWorkflowInfo::getDescription() {
    return description;
}
void
OAIBTPublishedWorkflowInfo::setDescription(QString* description) {
    this->description = description;
    this->m_description_isSet = true;
}

QString*
OAIBTPublishedWorkflowInfo::getDocumentId() {
    return document_id;
}
void
OAIBTPublishedWorkflowInfo::setDocumentId(QString* document_id) {
    this->document_id = document_id;
    this->m_document_id_isSet = true;
}

QString*
OAIBTPublishedWorkflowInfo::getElementId() {
    return element_id;
}
void
OAIBTPublishedWorkflowInfo::setElementId(QString* element_id) {
    this->element_id = element_id;
    this->m_element_id_isSet = true;
}

QString*
OAIBTPublishedWorkflowInfo::getId() {
    return id;
}
void
OAIBTPublishedWorkflowInfo::setId(QString* id) {
    this->id = id;
    this->m_id_isSet = true;
}

QString*
OAIBTPublishedWorkflowInfo::getImageSrc() {
    return image_src;
}
void
OAIBTPublishedWorkflowInfo::setImageSrc(QString* image_src) {
    this->image_src = image_src;
    this->m_image_src_isSet = true;
}

bool
OAIBTPublishedWorkflowInfo::isIsObsoletion() {
    return is_obsoletion;
}
void
OAIBTPublishedWorkflowInfo::setIsObsoletion(bool is_obsoletion) {
    this->is_obsoletion = is_obsoletion;
    this->m_is_obsoletion_isSet = true;
}

bool
OAIBTPublishedWorkflowInfo::isIsPickable() {
    return is_pickable;
}
void
OAIBTPublishedWorkflowInfo::setIsPickable(bool is_pickable) {
    this->is_pickable = is_pickable;
    this->m_is_pickable_isSet = true;
}

QString*
OAIBTPublishedWorkflowInfo::getJson() {
    return json;
}
void
OAIBTPublishedWorkflowInfo::setJson(QString* json) {
    this->json = json;
    this->m_json_isSet = true;
}

QString*
OAIBTPublishedWorkflowInfo::getName() {
    return name;
}
void
OAIBTPublishedWorkflowInfo::setName(QString* name) {
    this->name = name;
    this->m_name_isSet = true;
}

qint32
OAIBTPublishedWorkflowInfo::getObjectType() {
    return object_type;
}
void
OAIBTPublishedWorkflowInfo::setObjectType(qint32 object_type) {
    this->object_type = object_type;
    this->m_object_type_isSet = true;
}

qint32
OAIBTPublishedWorkflowInfo::getOwnerType() {
    return owner_type;
}
void
OAIBTPublishedWorkflowInfo::setOwnerType(qint32 owner_type) {
    this->owner_type = owner_type;
    this->m_owner_type_isSet = true;
}

QString*
OAIBTPublishedWorkflowInfo::getVersionId() {
    return version_id;
}
void
OAIBTPublishedWorkflowInfo::setVersionId(QString* version_id) {
    this->version_id = version_id;
    this->m_version_id_isSet = true;
}


bool
OAIBTPublishedWorkflowInfo::isSet(){
    bool isObjectUpdated = false;
    do{
        if(m_active_state_isSet){ isObjectUpdated = true; break;}
        if(company_id != nullptr && *company_id != QString("")){ isObjectUpdated = true; break;}
        if(description != nullptr && *description != QString("")){ isObjectUpdated = true; break;}
        if(document_id != nullptr && *document_id != QString("")){ isObjectUpdated = true; break;}
        if(element_id != nullptr && *element_id != QString("")){ isObjectUpdated = true; break;}
        if(id != nullptr && *id != QString("")){ isObjectUpdated = true; break;}
        if(image_src != nullptr && *image_src != QString("")){ isObjectUpdated = true; break;}
        if(m_is_obsoletion_isSet){ isObjectUpdated = true; break;}
        if(m_is_pickable_isSet){ isObjectUpdated = true; break;}
        if(json != nullptr && *json != QString("")){ isObjectUpdated = true; break;}
        if(name != nullptr && *name != QString("")){ isObjectUpdated = true; break;}
        if(m_object_type_isSet){ isObjectUpdated = true; break;}
        if(m_owner_type_isSet){ isObjectUpdated = true; break;}
        if(version_id != nullptr && *version_id != QString("")){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

