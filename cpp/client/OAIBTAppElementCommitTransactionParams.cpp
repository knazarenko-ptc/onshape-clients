/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * OpenAPI spec version: 1.111
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIBTAppElementCommitTransactionParams.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIBTAppElementCommitTransactionParams::OAIBTAppElementCommitTransactionParams(QString json) {
    init();
    this->fromJson(json);
}

OAIBTAppElementCommitTransactionParams::OAIBTAppElementCommitTransactionParams() {
    init();
}

OAIBTAppElementCommitTransactionParams::~OAIBTAppElementCommitTransactionParams() {
    this->cleanup();
}

void
OAIBTAppElementCommitTransactionParams::init() {
    description = new QString("");
    m_description_isSet = false;
    return_error = false;
    m_return_error_isSet = false;
    transaction_id = new QString("");
    m_transaction_id_isSet = false;
}

void
OAIBTAppElementCommitTransactionParams::cleanup() {
    if(description != nullptr) { 
        delete description;
    }

    if(transaction_id != nullptr) { 
        delete transaction_id;
    }
}

OAIBTAppElementCommitTransactionParams*
OAIBTAppElementCommitTransactionParams::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIBTAppElementCommitTransactionParams::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&description, pJson["description"], "QString", "QString");
    
    ::OpenAPI::setValue(&return_error, pJson["returnError"], "bool", "");
    
    ::OpenAPI::setValue(&transaction_id, pJson["transactionId"], "QString", "QString");
    
}

QString
OAIBTAppElementCommitTransactionParams::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIBTAppElementCommitTransactionParams::asJsonObject() {
    QJsonObject obj;
    if(description != nullptr && *description != QString("")){
        toJsonValue(QString("description"), description, obj, QString("QString"));
    }
    if(m_return_error_isSet){
        obj.insert("returnError", QJsonValue(return_error));
    }
    if(transaction_id != nullptr && *transaction_id != QString("")){
        toJsonValue(QString("transactionId"), transaction_id, obj, QString("QString"));
    }

    return obj;
}

QString*
OAIBTAppElementCommitTransactionParams::getDescription() {
    return description;
}
void
OAIBTAppElementCommitTransactionParams::setDescription(QString* description) {
    this->description = description;
    this->m_description_isSet = true;
}

bool
OAIBTAppElementCommitTransactionParams::isReturnError() {
    return return_error;
}
void
OAIBTAppElementCommitTransactionParams::setReturnError(bool return_error) {
    this->return_error = return_error;
    this->m_return_error_isSet = true;
}

QString*
OAIBTAppElementCommitTransactionParams::getTransactionId() {
    return transaction_id;
}
void
OAIBTAppElementCommitTransactionParams::setTransactionId(QString* transaction_id) {
    this->transaction_id = transaction_id;
    this->m_transaction_id_isSet = true;
}


bool
OAIBTAppElementCommitTransactionParams::isSet(){
    bool isObjectUpdated = false;
    do{
        if(description != nullptr && *description != QString("")){ isObjectUpdated = true; break;}
        if(m_return_error_isSet){ isObjectUpdated = true; break;}
        if(transaction_id != nullptr && *transaction_id != QString("")){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

