/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * OpenAPI spec version: 1.111
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIBTAclInfo.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIBTAclInfo::OAIBTAclInfo(QString json) {
    init();
    this->fromJson(json);
}

OAIBTAclInfo::OAIBTAclInfo() {
    init();
}

OAIBTAclInfo::~OAIBTAclInfo() {
    this->cleanup();
}

void
OAIBTAclInfo::init() {
    admin = false;
    m_admin_isSet = false;
    entries = new QList<OAIBTAclEntryInfo*>();
    m_entries_isSet = false;
    href = new QString("");
    m_href_isSet = false;
    id = new QString("");
    m_id_isSet = false;
    inherited_acls = new QList<OAIBTInheritedAclInfo*>();
    m_inherited_acls_isSet = false;
    name = new QString("");
    m_name_isSet = false;
    object_id = new QString("");
    m_object_id_isSet = false;
    object_type = 0L;
    m_object_type_isSet = false;
    owner = new OAIBTOwnerInfo();
    m_owner_isSet = false;
    _public = false;
    m__public_isSet = false;
    shared_with_support = false;
    m_shared_with_support_isSet = false;
    view_ref = new QString("");
    m_view_ref_isSet = false;
    visibility = new QString("");
    m_visibility_isSet = false;
}

void
OAIBTAclInfo::cleanup() {

    if(entries != nullptr) { 
        auto arr = entries;
        for(auto o: *arr) { 
            delete o;
        }
        delete entries;
    }
    if(href != nullptr) { 
        delete href;
    }
    if(id != nullptr) { 
        delete id;
    }
    if(inherited_acls != nullptr) { 
        auto arr = inherited_acls;
        for(auto o: *arr) { 
            delete o;
        }
        delete inherited_acls;
    }
    if(name != nullptr) { 
        delete name;
    }
    if(object_id != nullptr) { 
        delete object_id;
    }

    if(owner != nullptr) { 
        delete owner;
    }


    if(view_ref != nullptr) { 
        delete view_ref;
    }
    if(visibility != nullptr) { 
        delete visibility;
    }
}

OAIBTAclInfo*
OAIBTAclInfo::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIBTAclInfo::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&admin, pJson["admin"], "bool", "");
    
    
    ::OpenAPI::setValue(&entries, pJson["entries"], "QList", "OAIBTAclEntryInfo");
    ::OpenAPI::setValue(&href, pJson["href"], "QString", "QString");
    
    ::OpenAPI::setValue(&id, pJson["id"], "QString", "QString");
    
    
    ::OpenAPI::setValue(&inherited_acls, pJson["inheritedAcls"], "QList", "OAIBTInheritedAclInfo");
    ::OpenAPI::setValue(&name, pJson["name"], "QString", "QString");
    
    ::OpenAPI::setValue(&object_id, pJson["objectId"], "QString", "QString");
    
    ::OpenAPI::setValue(&object_type, pJson["objectType"], "qint64", "");
    
    ::OpenAPI::setValue(&owner, pJson["owner"], "OAIBTOwnerInfo", "OAIBTOwnerInfo");
    
    ::OpenAPI::setValue(&_public, pJson["public"], "bool", "");
    
    ::OpenAPI::setValue(&shared_with_support, pJson["sharedWithSupport"], "bool", "");
    
    ::OpenAPI::setValue(&view_ref, pJson["viewRef"], "QString", "QString");
    
    ::OpenAPI::setValue(&visibility, pJson["visibility"], "QString", "QString");
    
}

QString
OAIBTAclInfo::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIBTAclInfo::asJsonObject() {
    QJsonObject obj;
    if(m_admin_isSet){
        obj.insert("admin", QJsonValue(admin));
    }
    if(entries->size() > 0){
        toJsonArray((QList<void*>*)entries, obj, "entries", "OAIBTAclEntryInfo");
    }
    if(href != nullptr && *href != QString("")){
        toJsonValue(QString("href"), href, obj, QString("QString"));
    }
    if(id != nullptr && *id != QString("")){
        toJsonValue(QString("id"), id, obj, QString("QString"));
    }
    if(inherited_acls->size() > 0){
        toJsonArray((QList<void*>*)inherited_acls, obj, "inheritedAcls", "OAIBTInheritedAclInfo");
    }
    if(name != nullptr && *name != QString("")){
        toJsonValue(QString("name"), name, obj, QString("QString"));
    }
    if(object_id != nullptr && *object_id != QString("")){
        toJsonValue(QString("objectId"), object_id, obj, QString("QString"));
    }
    if(m_object_type_isSet){
        obj.insert("objectType", QJsonValue(object_type));
    }
    if((owner != nullptr) && (owner->isSet())){
        toJsonValue(QString("owner"), owner, obj, QString("OAIBTOwnerInfo"));
    }
    if(m__public_isSet){
        obj.insert("public", QJsonValue(_public));
    }
    if(m_shared_with_support_isSet){
        obj.insert("sharedWithSupport", QJsonValue(shared_with_support));
    }
    if(view_ref != nullptr && *view_ref != QString("")){
        toJsonValue(QString("viewRef"), view_ref, obj, QString("QString"));
    }
    if(visibility != nullptr && *visibility != QString("")){
        toJsonValue(QString("visibility"), visibility, obj, QString("QString"));
    }

    return obj;
}

bool
OAIBTAclInfo::isAdmin() {
    return admin;
}
void
OAIBTAclInfo::setAdmin(bool admin) {
    this->admin = admin;
    this->m_admin_isSet = true;
}

QList<OAIBTAclEntryInfo*>*
OAIBTAclInfo::getEntries() {
    return entries;
}
void
OAIBTAclInfo::setEntries(QList<OAIBTAclEntryInfo*>* entries) {
    this->entries = entries;
    this->m_entries_isSet = true;
}

QString*
OAIBTAclInfo::getHref() {
    return href;
}
void
OAIBTAclInfo::setHref(QString* href) {
    this->href = href;
    this->m_href_isSet = true;
}

QString*
OAIBTAclInfo::getId() {
    return id;
}
void
OAIBTAclInfo::setId(QString* id) {
    this->id = id;
    this->m_id_isSet = true;
}

QList<OAIBTInheritedAclInfo*>*
OAIBTAclInfo::getInheritedAcls() {
    return inherited_acls;
}
void
OAIBTAclInfo::setInheritedAcls(QList<OAIBTInheritedAclInfo*>* inherited_acls) {
    this->inherited_acls = inherited_acls;
    this->m_inherited_acls_isSet = true;
}

QString*
OAIBTAclInfo::getName() {
    return name;
}
void
OAIBTAclInfo::setName(QString* name) {
    this->name = name;
    this->m_name_isSet = true;
}

QString*
OAIBTAclInfo::getObjectId() {
    return object_id;
}
void
OAIBTAclInfo::setObjectId(QString* object_id) {
    this->object_id = object_id;
    this->m_object_id_isSet = true;
}

qint64
OAIBTAclInfo::getObjectType() {
    return object_type;
}
void
OAIBTAclInfo::setObjectType(qint64 object_type) {
    this->object_type = object_type;
    this->m_object_type_isSet = true;
}

OAIBTOwnerInfo*
OAIBTAclInfo::getOwner() {
    return owner;
}
void
OAIBTAclInfo::setOwner(OAIBTOwnerInfo* owner) {
    this->owner = owner;
    this->m_owner_isSet = true;
}

bool
OAIBTAclInfo::isPublic() {
    return _public;
}
void
OAIBTAclInfo::setPublic(bool _public) {
    this->_public = _public;
    this->m__public_isSet = true;
}

bool
OAIBTAclInfo::isSharedWithSupport() {
    return shared_with_support;
}
void
OAIBTAclInfo::setSharedWithSupport(bool shared_with_support) {
    this->shared_with_support = shared_with_support;
    this->m_shared_with_support_isSet = true;
}

QString*
OAIBTAclInfo::getViewRef() {
    return view_ref;
}
void
OAIBTAclInfo::setViewRef(QString* view_ref) {
    this->view_ref = view_ref;
    this->m_view_ref_isSet = true;
}

QString*
OAIBTAclInfo::getVisibility() {
    return visibility;
}
void
OAIBTAclInfo::setVisibility(QString* visibility) {
    this->visibility = visibility;
    this->m_visibility_isSet = true;
}


bool
OAIBTAclInfo::isSet(){
    bool isObjectUpdated = false;
    do{
        if(m_admin_isSet){ isObjectUpdated = true; break;}
        if(entries->size() > 0){ isObjectUpdated = true; break;}
        if(href != nullptr && *href != QString("")){ isObjectUpdated = true; break;}
        if(id != nullptr && *id != QString("")){ isObjectUpdated = true; break;}
        if(inherited_acls->size() > 0){ isObjectUpdated = true; break;}
        if(name != nullptr && *name != QString("")){ isObjectUpdated = true; break;}
        if(object_id != nullptr && *object_id != QString("")){ isObjectUpdated = true; break;}
        if(m_object_type_isSet){ isObjectUpdated = true; break;}
        if(owner != nullptr && owner->isSet()){ isObjectUpdated = true; break;}
        if(m__public_isSet){ isObjectUpdated = true; break;}
        if(m_shared_with_support_isSet){ isObjectUpdated = true; break;}
        if(view_ref != nullptr && *view_ref != QString("")){ isObjectUpdated = true; break;}
        if(visibility != nullptr && *visibility != QString("")){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

