/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * OpenAPI spec version: 1.111
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIBTPTopLevelImport-285.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIBTPTopLevelImport-285::OAIBTPTopLevelImport-285(QString json) {
    init();
    this->fromJson(json);
}

OAIBTPTopLevelImport-285::OAIBTPTopLevelImport-285() {
    init();
}

OAIBTPTopLevelImport-285::~OAIBTPTopLevelImport-285() {
    this->cleanup();
}

void
OAIBTPTopLevelImport-285::init() {
    atomic = false;
    m_atomic_isSet = false;
    bt_type = new QString("");
    m_bt_type_isSet = false;
    documentation_type = new QString("");
    m_documentation_type_isSet = false;
    end_source_location = 0;
    m_end_source_location_isSet = false;
    node_id = new QString("");
    m_node_id_isSet = false;
    short_descriptor = new QString("");
    m_short_descriptor_isSet = false;
    space_after = new OAIBTPSpace-10();
    m_space_after_isSet = false;
    space_before = new OAIBTPSpace-10();
    m_space_before_isSet = false;
    space_default = false;
    m_space_default_isSet = false;
    start_source_location = 0;
    m_start_source_location_isSet = false;
    deprecated = false;
    m_deprecated_isSet = false;
    symbol_name = new OAIBTPIdentifier-8();
    m_symbol_name_isSet = false;
    arguments_to_document = new QList<OAIBTPArgumentDeclaration-232*>();
    m_arguments_to_document_isSet = false;
    deprecated_explanation = new QString("");
    m_deprecated_explanation_isSet = false;
    for_export = false;
    m_for_export_isSet = false;
    space_after_export = new OAIBTPSpace-10();
    m_space_after_export_isSet = false;
    annotation = new OAIBTPAnnotation-231();
    m_annotation_isSet = false;
    import_microversion = new QString("");
    m_import_microversion_isSet = false;
    namespace_string = new QString("");
    m_namespace_string_isSet = false;
    combined_namespace_path_and_version = new QString("");
    m_combined_namespace_path_and_version_isSet = false;
    module_id = new OAIBTPModuleId-235();
    m_module_id_isSet = false;
    space_before_import = new OAIBTPSpace-10();
    m_space_before_import_isSet = false;
    _namespace = new QList<OAIBTPIdentifier-8*>();
    m__namespace_isSet = false;
}

void
OAIBTPTopLevelImport-285::cleanup() {

    if(bt_type != nullptr) { 
        delete bt_type;
    }
    if(documentation_type != nullptr) { 
        delete documentation_type;
    }

    if(node_id != nullptr) { 
        delete node_id;
    }
    if(short_descriptor != nullptr) { 
        delete short_descriptor;
    }
    if(space_after != nullptr) { 
        delete space_after;
    }
    if(space_before != nullptr) { 
        delete space_before;
    }



    if(symbol_name != nullptr) { 
        delete symbol_name;
    }
    if(arguments_to_document != nullptr) { 
        auto arr = arguments_to_document;
        for(auto o: *arr) { 
            delete o;
        }
        delete arguments_to_document;
    }
    if(deprecated_explanation != nullptr) { 
        delete deprecated_explanation;
    }

    if(space_after_export != nullptr) { 
        delete space_after_export;
    }
    if(annotation != nullptr) { 
        delete annotation;
    }
    if(import_microversion != nullptr) { 
        delete import_microversion;
    }
    if(namespace_string != nullptr) { 
        delete namespace_string;
    }
    if(combined_namespace_path_and_version != nullptr) { 
        delete combined_namespace_path_and_version;
    }
    if(module_id != nullptr) { 
        delete module_id;
    }
    if(space_before_import != nullptr) { 
        delete space_before_import;
    }
    if(_namespace != nullptr) { 
        auto arr = _namespace;
        for(auto o: *arr) { 
            delete o;
        }
        delete _namespace;
    }
}

OAIBTPTopLevelImport-285*
OAIBTPTopLevelImport-285::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIBTPTopLevelImport-285::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&atomic, pJson["atomic"], "bool", "");
    
    ::OpenAPI::setValue(&bt_type, pJson["btType"], "QString", "QString");
    
    ::OpenAPI::setValue(&documentation_type, pJson["documentationType"], "QString", "QString");
    
    ::OpenAPI::setValue(&end_source_location, pJson["endSourceLocation"], "qint32", "");
    
    ::OpenAPI::setValue(&node_id, pJson["nodeId"], "QString", "QString");
    
    ::OpenAPI::setValue(&short_descriptor, pJson["shortDescriptor"], "QString", "QString");
    
    ::OpenAPI::setValue(&space_after, pJson["spaceAfter"], "OAIBTPSpace-10", "OAIBTPSpace-10");
    
    ::OpenAPI::setValue(&space_before, pJson["spaceBefore"], "OAIBTPSpace-10", "OAIBTPSpace-10");
    
    ::OpenAPI::setValue(&space_default, pJson["spaceDefault"], "bool", "");
    
    ::OpenAPI::setValue(&start_source_location, pJson["startSourceLocation"], "qint32", "");
    
    ::OpenAPI::setValue(&deprecated, pJson["deprecated"], "bool", "");
    
    ::OpenAPI::setValue(&symbol_name, pJson["symbolName"], "OAIBTPIdentifier-8", "OAIBTPIdentifier-8");
    
    
    ::OpenAPI::setValue(&arguments_to_document, pJson["argumentsToDocument"], "QList", "OAIBTPArgumentDeclaration-232");
    ::OpenAPI::setValue(&deprecated_explanation, pJson["deprecatedExplanation"], "QString", "QString");
    
    ::OpenAPI::setValue(&for_export, pJson["forExport"], "bool", "");
    
    ::OpenAPI::setValue(&space_after_export, pJson["spaceAfterExport"], "OAIBTPSpace-10", "OAIBTPSpace-10");
    
    ::OpenAPI::setValue(&annotation, pJson["annotation"], "OAIBTPAnnotation-231", "OAIBTPAnnotation-231");
    
    ::OpenAPI::setValue(&import_microversion, pJson["importMicroversion"], "QString", "QString");
    
    ::OpenAPI::setValue(&namespace_string, pJson["namespaceString"], "QString", "QString");
    
    ::OpenAPI::setValue(&combined_namespace_path_and_version, pJson["combinedNamespacePathAndVersion"], "QString", "QString");
    
    ::OpenAPI::setValue(&module_id, pJson["moduleId"], "OAIBTPModuleId-235", "OAIBTPModuleId-235");
    
    ::OpenAPI::setValue(&space_before_import, pJson["spaceBeforeImport"], "OAIBTPSpace-10", "OAIBTPSpace-10");
    
    
    ::OpenAPI::setValue(&_namespace, pJson["namespace"], "QList", "OAIBTPIdentifier-8");
}

QString
OAIBTPTopLevelImport-285::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIBTPTopLevelImport-285::asJsonObject() {
    QJsonObject obj;
    if(m_atomic_isSet){
        obj.insert("atomic", QJsonValue(atomic));
    }
    if(bt_type != nullptr && *bt_type != QString("")){
        toJsonValue(QString("btType"), bt_type, obj, QString("QString"));
    }
    if(documentation_type != nullptr && *documentation_type != QString("")){
        toJsonValue(QString("documentationType"), documentation_type, obj, QString("QString"));
    }
    if(m_end_source_location_isSet){
        obj.insert("endSourceLocation", QJsonValue(end_source_location));
    }
    if(node_id != nullptr && *node_id != QString("")){
        toJsonValue(QString("nodeId"), node_id, obj, QString("QString"));
    }
    if(short_descriptor != nullptr && *short_descriptor != QString("")){
        toJsonValue(QString("shortDescriptor"), short_descriptor, obj, QString("QString"));
    }
    if((space_after != nullptr) && (space_after->isSet())){
        toJsonValue(QString("spaceAfter"), space_after, obj, QString("OAIBTPSpace-10"));
    }
    if((space_before != nullptr) && (space_before->isSet())){
        toJsonValue(QString("spaceBefore"), space_before, obj, QString("OAIBTPSpace-10"));
    }
    if(m_space_default_isSet){
        obj.insert("spaceDefault", QJsonValue(space_default));
    }
    if(m_start_source_location_isSet){
        obj.insert("startSourceLocation", QJsonValue(start_source_location));
    }
    if(m_deprecated_isSet){
        obj.insert("deprecated", QJsonValue(deprecated));
    }
    if((symbol_name != nullptr) && (symbol_name->isSet())){
        toJsonValue(QString("symbolName"), symbol_name, obj, QString("OAIBTPIdentifier-8"));
    }
    if(arguments_to_document->size() > 0){
        toJsonArray((QList<void*>*)arguments_to_document, obj, "argumentsToDocument", "OAIBTPArgumentDeclaration-232");
    }
    if(deprecated_explanation != nullptr && *deprecated_explanation != QString("")){
        toJsonValue(QString("deprecatedExplanation"), deprecated_explanation, obj, QString("QString"));
    }
    if(m_for_export_isSet){
        obj.insert("forExport", QJsonValue(for_export));
    }
    if((space_after_export != nullptr) && (space_after_export->isSet())){
        toJsonValue(QString("spaceAfterExport"), space_after_export, obj, QString("OAIBTPSpace-10"));
    }
    if((annotation != nullptr) && (annotation->isSet())){
        toJsonValue(QString("annotation"), annotation, obj, QString("OAIBTPAnnotation-231"));
    }
    if(import_microversion != nullptr && *import_microversion != QString("")){
        toJsonValue(QString("importMicroversion"), import_microversion, obj, QString("QString"));
    }
    if(namespace_string != nullptr && *namespace_string != QString("")){
        toJsonValue(QString("namespaceString"), namespace_string, obj, QString("QString"));
    }
    if(combined_namespace_path_and_version != nullptr && *combined_namespace_path_and_version != QString("")){
        toJsonValue(QString("combinedNamespacePathAndVersion"), combined_namespace_path_and_version, obj, QString("QString"));
    }
    if((module_id != nullptr) && (module_id->isSet())){
        toJsonValue(QString("moduleId"), module_id, obj, QString("OAIBTPModuleId-235"));
    }
    if((space_before_import != nullptr) && (space_before_import->isSet())){
        toJsonValue(QString("spaceBeforeImport"), space_before_import, obj, QString("OAIBTPSpace-10"));
    }
    if(_namespace->size() > 0){
        toJsonArray((QList<void*>*)_namespace, obj, "namespace", "OAIBTPIdentifier-8");
    }

    return obj;
}

bool
OAIBTPTopLevelImport-285::isAtomic() {
    return atomic;
}
void
OAIBTPTopLevelImport-285::setAtomic(bool atomic) {
    this->atomic = atomic;
    this->m_atomic_isSet = true;
}

QString*
OAIBTPTopLevelImport-285::getBtType() {
    return bt_type;
}
void
OAIBTPTopLevelImport-285::setBtType(QString* bt_type) {
    this->bt_type = bt_type;
    this->m_bt_type_isSet = true;
}

QString*
OAIBTPTopLevelImport-285::getDocumentationType() {
    return documentation_type;
}
void
OAIBTPTopLevelImport-285::setDocumentationType(QString* documentation_type) {
    this->documentation_type = documentation_type;
    this->m_documentation_type_isSet = true;
}

qint32
OAIBTPTopLevelImport-285::getEndSourceLocation() {
    return end_source_location;
}
void
OAIBTPTopLevelImport-285::setEndSourceLocation(qint32 end_source_location) {
    this->end_source_location = end_source_location;
    this->m_end_source_location_isSet = true;
}

QString*
OAIBTPTopLevelImport-285::getNodeId() {
    return node_id;
}
void
OAIBTPTopLevelImport-285::setNodeId(QString* node_id) {
    this->node_id = node_id;
    this->m_node_id_isSet = true;
}

QString*
OAIBTPTopLevelImport-285::getShortDescriptor() {
    return short_descriptor;
}
void
OAIBTPTopLevelImport-285::setShortDescriptor(QString* short_descriptor) {
    this->short_descriptor = short_descriptor;
    this->m_short_descriptor_isSet = true;
}

OAIBTPSpace-10*
OAIBTPTopLevelImport-285::getSpaceAfter() {
    return space_after;
}
void
OAIBTPTopLevelImport-285::setSpaceAfter(OAIBTPSpace-10* space_after) {
    this->space_after = space_after;
    this->m_space_after_isSet = true;
}

OAIBTPSpace-10*
OAIBTPTopLevelImport-285::getSpaceBefore() {
    return space_before;
}
void
OAIBTPTopLevelImport-285::setSpaceBefore(OAIBTPSpace-10* space_before) {
    this->space_before = space_before;
    this->m_space_before_isSet = true;
}

bool
OAIBTPTopLevelImport-285::isSpaceDefault() {
    return space_default;
}
void
OAIBTPTopLevelImport-285::setSpaceDefault(bool space_default) {
    this->space_default = space_default;
    this->m_space_default_isSet = true;
}

qint32
OAIBTPTopLevelImport-285::getStartSourceLocation() {
    return start_source_location;
}
void
OAIBTPTopLevelImport-285::setStartSourceLocation(qint32 start_source_location) {
    this->start_source_location = start_source_location;
    this->m_start_source_location_isSet = true;
}

bool
OAIBTPTopLevelImport-285::isDeprecated() {
    return deprecated;
}
void
OAIBTPTopLevelImport-285::setDeprecated(bool deprecated) {
    this->deprecated = deprecated;
    this->m_deprecated_isSet = true;
}

OAIBTPIdentifier-8*
OAIBTPTopLevelImport-285::getSymbolName() {
    return symbol_name;
}
void
OAIBTPTopLevelImport-285::setSymbolName(OAIBTPIdentifier-8* symbol_name) {
    this->symbol_name = symbol_name;
    this->m_symbol_name_isSet = true;
}

QList<OAIBTPArgumentDeclaration-232*>*
OAIBTPTopLevelImport-285::getArgumentsToDocument() {
    return arguments_to_document;
}
void
OAIBTPTopLevelImport-285::setArgumentsToDocument(QList<OAIBTPArgumentDeclaration-232*>* arguments_to_document) {
    this->arguments_to_document = arguments_to_document;
    this->m_arguments_to_document_isSet = true;
}

QString*
OAIBTPTopLevelImport-285::getDeprecatedExplanation() {
    return deprecated_explanation;
}
void
OAIBTPTopLevelImport-285::setDeprecatedExplanation(QString* deprecated_explanation) {
    this->deprecated_explanation = deprecated_explanation;
    this->m_deprecated_explanation_isSet = true;
}

bool
OAIBTPTopLevelImport-285::isForExport() {
    return for_export;
}
void
OAIBTPTopLevelImport-285::setForExport(bool for_export) {
    this->for_export = for_export;
    this->m_for_export_isSet = true;
}

OAIBTPSpace-10*
OAIBTPTopLevelImport-285::getSpaceAfterExport() {
    return space_after_export;
}
void
OAIBTPTopLevelImport-285::setSpaceAfterExport(OAIBTPSpace-10* space_after_export) {
    this->space_after_export = space_after_export;
    this->m_space_after_export_isSet = true;
}

OAIBTPAnnotation-231*
OAIBTPTopLevelImport-285::getAnnotation() {
    return annotation;
}
void
OAIBTPTopLevelImport-285::setAnnotation(OAIBTPAnnotation-231* annotation) {
    this->annotation = annotation;
    this->m_annotation_isSet = true;
}

QString*
OAIBTPTopLevelImport-285::getImportMicroversion() {
    return import_microversion;
}
void
OAIBTPTopLevelImport-285::setImportMicroversion(QString* import_microversion) {
    this->import_microversion = import_microversion;
    this->m_import_microversion_isSet = true;
}

QString*
OAIBTPTopLevelImport-285::getNamespaceString() {
    return namespace_string;
}
void
OAIBTPTopLevelImport-285::setNamespaceString(QString* namespace_string) {
    this->namespace_string = namespace_string;
    this->m_namespace_string_isSet = true;
}

QString*
OAIBTPTopLevelImport-285::getCombinedNamespacePathAndVersion() {
    return combined_namespace_path_and_version;
}
void
OAIBTPTopLevelImport-285::setCombinedNamespacePathAndVersion(QString* combined_namespace_path_and_version) {
    this->combined_namespace_path_and_version = combined_namespace_path_and_version;
    this->m_combined_namespace_path_and_version_isSet = true;
}

OAIBTPModuleId-235*
OAIBTPTopLevelImport-285::getModuleId() {
    return module_id;
}
void
OAIBTPTopLevelImport-285::setModuleId(OAIBTPModuleId-235* module_id) {
    this->module_id = module_id;
    this->m_module_id_isSet = true;
}

OAIBTPSpace-10*
OAIBTPTopLevelImport-285::getSpaceBeforeImport() {
    return space_before_import;
}
void
OAIBTPTopLevelImport-285::setSpaceBeforeImport(OAIBTPSpace-10* space_before_import) {
    this->space_before_import = space_before_import;
    this->m_space_before_import_isSet = true;
}

QList<OAIBTPIdentifier-8*>*
OAIBTPTopLevelImport-285::getNamespace() {
    return _namespace;
}
void
OAIBTPTopLevelImport-285::setNamespace(QList<OAIBTPIdentifier-8*>* _namespace) {
    this->_namespace = _namespace;
    this->m__namespace_isSet = true;
}


bool
OAIBTPTopLevelImport-285::isSet(){
    bool isObjectUpdated = false;
    do{
        if(m_atomic_isSet){ isObjectUpdated = true; break;}
        if(bt_type != nullptr && *bt_type != QString("")){ isObjectUpdated = true; break;}
        if(documentation_type != nullptr && *documentation_type != QString("")){ isObjectUpdated = true; break;}
        if(m_end_source_location_isSet){ isObjectUpdated = true; break;}
        if(node_id != nullptr && *node_id != QString("")){ isObjectUpdated = true; break;}
        if(short_descriptor != nullptr && *short_descriptor != QString("")){ isObjectUpdated = true; break;}
        if(space_after != nullptr && space_after->isSet()){ isObjectUpdated = true; break;}
        if(space_before != nullptr && space_before->isSet()){ isObjectUpdated = true; break;}
        if(m_space_default_isSet){ isObjectUpdated = true; break;}
        if(m_start_source_location_isSet){ isObjectUpdated = true; break;}
        if(m_deprecated_isSet){ isObjectUpdated = true; break;}
        if(symbol_name != nullptr && symbol_name->isSet()){ isObjectUpdated = true; break;}
        if(arguments_to_document->size() > 0){ isObjectUpdated = true; break;}
        if(deprecated_explanation != nullptr && *deprecated_explanation != QString("")){ isObjectUpdated = true; break;}
        if(m_for_export_isSet){ isObjectUpdated = true; break;}
        if(space_after_export != nullptr && space_after_export->isSet()){ isObjectUpdated = true; break;}
        if(annotation != nullptr && annotation->isSet()){ isObjectUpdated = true; break;}
        if(import_microversion != nullptr && *import_microversion != QString("")){ isObjectUpdated = true; break;}
        if(namespace_string != nullptr && *namespace_string != QString("")){ isObjectUpdated = true; break;}
        if(combined_namespace_path_and_version != nullptr && *combined_namespace_path_and_version != QString("")){ isObjectUpdated = true; break;}
        if(module_id != nullptr && module_id->isSet()){ isObjectUpdated = true; break;}
        if(space_before_import != nullptr && space_before_import->isSet()){ isObjectUpdated = true; break;}
        if(_namespace->size() > 0){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

