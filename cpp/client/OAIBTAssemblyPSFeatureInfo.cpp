/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * OpenAPI spec version: 1.111
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIBTAssemblyPSFeatureInfo.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIBTAssemblyPSFeatureInfo::OAIBTAssemblyPSFeatureInfo(QString json) {
    init();
    this->fromJson(json);
}

OAIBTAssemblyPSFeatureInfo::OAIBTAssemblyPSFeatureInfo() {
    init();
}

OAIBTAssemblyPSFeatureInfo::~OAIBTAssemblyPSFeatureInfo() {
    this->cleanup();
}

void
OAIBTAssemblyPSFeatureInfo::init() {
    configuration = new QString("");
    m_configuration_isSet = false;
    document_id = new QString("");
    m_document_id_isSet = false;
    document_microversion = new QString("");
    m_document_microversion_isSet = false;
    document_version = new QString("");
    m_document_version_isSet = false;
    element_id = new QString("");
    m_element_id_isSet = false;
    feature_id = new QString("");
    m_feature_id_isSet = false;
    feature_type = new QString("");
    m_feature_type_isSet = false;
    full_configuration = new QString("");
    m_full_configuration_isSet = false;
    revision = new QString("");
    m_revision_isSet = false;
}

void
OAIBTAssemblyPSFeatureInfo::cleanup() {
    if(configuration != nullptr) { 
        delete configuration;
    }
    if(document_id != nullptr) { 
        delete document_id;
    }
    if(document_microversion != nullptr) { 
        delete document_microversion;
    }
    if(document_version != nullptr) { 
        delete document_version;
    }
    if(element_id != nullptr) { 
        delete element_id;
    }
    if(feature_id != nullptr) { 
        delete feature_id;
    }
    if(feature_type != nullptr) { 
        delete feature_type;
    }
    if(full_configuration != nullptr) { 
        delete full_configuration;
    }
    if(revision != nullptr) { 
        delete revision;
    }
}

OAIBTAssemblyPSFeatureInfo*
OAIBTAssemblyPSFeatureInfo::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIBTAssemblyPSFeatureInfo::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&configuration, pJson["configuration"], "QString", "QString");
    
    ::OpenAPI::setValue(&document_id, pJson["documentId"], "QString", "QString");
    
    ::OpenAPI::setValue(&document_microversion, pJson["documentMicroversion"], "QString", "QString");
    
    ::OpenAPI::setValue(&document_version, pJson["documentVersion"], "QString", "QString");
    
    ::OpenAPI::setValue(&element_id, pJson["elementId"], "QString", "QString");
    
    ::OpenAPI::setValue(&feature_id, pJson["featureId"], "QString", "QString");
    
    ::OpenAPI::setValue(&feature_type, pJson["featureType"], "QString", "QString");
    
    ::OpenAPI::setValue(&full_configuration, pJson["fullConfiguration"], "QString", "QString");
    
    ::OpenAPI::setValue(&revision, pJson["revision"], "QString", "QString");
    
}

QString
OAIBTAssemblyPSFeatureInfo::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIBTAssemblyPSFeatureInfo::asJsonObject() {
    QJsonObject obj;
    if(configuration != nullptr && *configuration != QString("")){
        toJsonValue(QString("configuration"), configuration, obj, QString("QString"));
    }
    if(document_id != nullptr && *document_id != QString("")){
        toJsonValue(QString("documentId"), document_id, obj, QString("QString"));
    }
    if(document_microversion != nullptr && *document_microversion != QString("")){
        toJsonValue(QString("documentMicroversion"), document_microversion, obj, QString("QString"));
    }
    if(document_version != nullptr && *document_version != QString("")){
        toJsonValue(QString("documentVersion"), document_version, obj, QString("QString"));
    }
    if(element_id != nullptr && *element_id != QString("")){
        toJsonValue(QString("elementId"), element_id, obj, QString("QString"));
    }
    if(feature_id != nullptr && *feature_id != QString("")){
        toJsonValue(QString("featureId"), feature_id, obj, QString("QString"));
    }
    if(feature_type != nullptr && *feature_type != QString("")){
        toJsonValue(QString("featureType"), feature_type, obj, QString("QString"));
    }
    if(full_configuration != nullptr && *full_configuration != QString("")){
        toJsonValue(QString("fullConfiguration"), full_configuration, obj, QString("QString"));
    }
    if(revision != nullptr && *revision != QString("")){
        toJsonValue(QString("revision"), revision, obj, QString("QString"));
    }

    return obj;
}

QString*
OAIBTAssemblyPSFeatureInfo::getConfiguration() {
    return configuration;
}
void
OAIBTAssemblyPSFeatureInfo::setConfiguration(QString* configuration) {
    this->configuration = configuration;
    this->m_configuration_isSet = true;
}

QString*
OAIBTAssemblyPSFeatureInfo::getDocumentId() {
    return document_id;
}
void
OAIBTAssemblyPSFeatureInfo::setDocumentId(QString* document_id) {
    this->document_id = document_id;
    this->m_document_id_isSet = true;
}

QString*
OAIBTAssemblyPSFeatureInfo::getDocumentMicroversion() {
    return document_microversion;
}
void
OAIBTAssemblyPSFeatureInfo::setDocumentMicroversion(QString* document_microversion) {
    this->document_microversion = document_microversion;
    this->m_document_microversion_isSet = true;
}

QString*
OAIBTAssemblyPSFeatureInfo::getDocumentVersion() {
    return document_version;
}
void
OAIBTAssemblyPSFeatureInfo::setDocumentVersion(QString* document_version) {
    this->document_version = document_version;
    this->m_document_version_isSet = true;
}

QString*
OAIBTAssemblyPSFeatureInfo::getElementId() {
    return element_id;
}
void
OAIBTAssemblyPSFeatureInfo::setElementId(QString* element_id) {
    this->element_id = element_id;
    this->m_element_id_isSet = true;
}

QString*
OAIBTAssemblyPSFeatureInfo::getFeatureId() {
    return feature_id;
}
void
OAIBTAssemblyPSFeatureInfo::setFeatureId(QString* feature_id) {
    this->feature_id = feature_id;
    this->m_feature_id_isSet = true;
}

QString*
OAIBTAssemblyPSFeatureInfo::getFeatureType() {
    return feature_type;
}
void
OAIBTAssemblyPSFeatureInfo::setFeatureType(QString* feature_type) {
    this->feature_type = feature_type;
    this->m_feature_type_isSet = true;
}

QString*
OAIBTAssemblyPSFeatureInfo::getFullConfiguration() {
    return full_configuration;
}
void
OAIBTAssemblyPSFeatureInfo::setFullConfiguration(QString* full_configuration) {
    this->full_configuration = full_configuration;
    this->m_full_configuration_isSet = true;
}

QString*
OAIBTAssemblyPSFeatureInfo::getRevision() {
    return revision;
}
void
OAIBTAssemblyPSFeatureInfo::setRevision(QString* revision) {
    this->revision = revision;
    this->m_revision_isSet = true;
}


bool
OAIBTAssemblyPSFeatureInfo::isSet(){
    bool isObjectUpdated = false;
    do{
        if(configuration != nullptr && *configuration != QString("")){ isObjectUpdated = true; break;}
        if(document_id != nullptr && *document_id != QString("")){ isObjectUpdated = true; break;}
        if(document_microversion != nullptr && *document_microversion != QString("")){ isObjectUpdated = true; break;}
        if(document_version != nullptr && *document_version != QString("")){ isObjectUpdated = true; break;}
        if(element_id != nullptr && *element_id != QString("")){ isObjectUpdated = true; break;}
        if(feature_id != nullptr && *feature_id != QString("")){ isObjectUpdated = true; break;}
        if(feature_type != nullptr && *feature_type != QString("")){ isObjectUpdated = true; break;}
        if(full_configuration != nullptr && *full_configuration != QString("")){ isObjectUpdated = true; break;}
        if(revision != nullptr && *revision != QString("")){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

