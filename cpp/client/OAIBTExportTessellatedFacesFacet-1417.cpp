/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * OpenAPI spec version: 1.111
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIBTExportTessellatedFacesFacet-1417.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIBTExportTessellatedFacesFacet-1417::OAIBTExportTessellatedFacesFacet-1417(QString json) {
    init();
    this->fromJson(json);
}

OAIBTExportTessellatedFacesFacet-1417::OAIBTExportTessellatedFacesFacet-1417() {
    init();
}

OAIBTExportTessellatedFacesFacet-1417::~OAIBTExportTessellatedFacesFacet-1417() {
    this->cleanup();
}

void
OAIBTExportTessellatedFacesFacet-1417::init() {
    bt_type = new QString("");
    m_bt_type_isSet = false;
    indices = new QList<qint32>();
    m_indices_isSet = false;
    normal = new OAIBTVector3d-389();
    m_normal_isSet = false;
    normals = new QList<OAIBTVector3d-389*>();
    m_normals_isSet = false;
    texture_coordinates = new QList<OAIBTVector2d-1812*>();
    m_texture_coordinates_isSet = false;
    vertices = new QList<OAIBTVector3d-389*>();
    m_vertices_isSet = false;
}

void
OAIBTExportTessellatedFacesFacet-1417::cleanup() {
    if(bt_type != nullptr) { 
        delete bt_type;
    }

    if(indices != nullptr) { 
        delete indices;
    }
    if(normal != nullptr) { 
        delete normal;
    }
    if(normals != nullptr) { 
        auto arr = normals;
        for(auto o: *arr) { 
            delete o;
        }
        delete normals;
    }
    if(texture_coordinates != nullptr) { 
        auto arr = texture_coordinates;
        for(auto o: *arr) { 
            delete o;
        }
        delete texture_coordinates;
    }
    if(vertices != nullptr) { 
        auto arr = vertices;
        for(auto o: *arr) { 
            delete o;
        }
        delete vertices;
    }
}

OAIBTExportTessellatedFacesFacet-1417*
OAIBTExportTessellatedFacesFacet-1417::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIBTExportTessellatedFacesFacet-1417::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&bt_type, pJson["btType"], "QString", "QString");
    
    
    ::OpenAPI::setValue(&indices, pJson["indices"], "QList", "qint32");
    ::OpenAPI::setValue(&normal, pJson["normal"], "OAIBTVector3d-389", "OAIBTVector3d-389");
    
    
    ::OpenAPI::setValue(&normals, pJson["normals"], "QList", "OAIBTVector3d-389");
    
    ::OpenAPI::setValue(&texture_coordinates, pJson["textureCoordinates"], "QList", "OAIBTVector2d-1812");
    
    ::OpenAPI::setValue(&vertices, pJson["vertices"], "QList", "OAIBTVector3d-389");
}

QString
OAIBTExportTessellatedFacesFacet-1417::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIBTExportTessellatedFacesFacet-1417::asJsonObject() {
    QJsonObject obj;
    if(bt_type != nullptr && *bt_type != QString("")){
        toJsonValue(QString("btType"), bt_type, obj, QString("QString"));
    }
    if(indices->size() > 0){
        toJsonArray((QList<void*>*)indices, obj, "indices", "");
    }
    if((normal != nullptr) && (normal->isSet())){
        toJsonValue(QString("normal"), normal, obj, QString("OAIBTVector3d-389"));
    }
    if(normals->size() > 0){
        toJsonArray((QList<void*>*)normals, obj, "normals", "OAIBTVector3d-389");
    }
    if(texture_coordinates->size() > 0){
        toJsonArray((QList<void*>*)texture_coordinates, obj, "textureCoordinates", "OAIBTVector2d-1812");
    }
    if(vertices->size() > 0){
        toJsonArray((QList<void*>*)vertices, obj, "vertices", "OAIBTVector3d-389");
    }

    return obj;
}

QString*
OAIBTExportTessellatedFacesFacet-1417::getBtType() {
    return bt_type;
}
void
OAIBTExportTessellatedFacesFacet-1417::setBtType(QString* bt_type) {
    this->bt_type = bt_type;
    this->m_bt_type_isSet = true;
}

QList<qint32>*
OAIBTExportTessellatedFacesFacet-1417::getIndices() {
    return indices;
}
void
OAIBTExportTessellatedFacesFacet-1417::setIndices(QList<qint32>* indices) {
    this->indices = indices;
    this->m_indices_isSet = true;
}

OAIBTVector3d-389*
OAIBTExportTessellatedFacesFacet-1417::getNormal() {
    return normal;
}
void
OAIBTExportTessellatedFacesFacet-1417::setNormal(OAIBTVector3d-389* normal) {
    this->normal = normal;
    this->m_normal_isSet = true;
}

QList<OAIBTVector3d-389*>*
OAIBTExportTessellatedFacesFacet-1417::getNormals() {
    return normals;
}
void
OAIBTExportTessellatedFacesFacet-1417::setNormals(QList<OAIBTVector3d-389*>* normals) {
    this->normals = normals;
    this->m_normals_isSet = true;
}

QList<OAIBTVector2d-1812*>*
OAIBTExportTessellatedFacesFacet-1417::getTextureCoordinates() {
    return texture_coordinates;
}
void
OAIBTExportTessellatedFacesFacet-1417::setTextureCoordinates(QList<OAIBTVector2d-1812*>* texture_coordinates) {
    this->texture_coordinates = texture_coordinates;
    this->m_texture_coordinates_isSet = true;
}

QList<OAIBTVector3d-389*>*
OAIBTExportTessellatedFacesFacet-1417::getVertices() {
    return vertices;
}
void
OAIBTExportTessellatedFacesFacet-1417::setVertices(QList<OAIBTVector3d-389*>* vertices) {
    this->vertices = vertices;
    this->m_vertices_isSet = true;
}


bool
OAIBTExportTessellatedFacesFacet-1417::isSet(){
    bool isObjectUpdated = false;
    do{
        if(bt_type != nullptr && *bt_type != QString("")){ isObjectUpdated = true; break;}
        if(m_indices_isSet){ isObjectUpdated = true; break;}
        if(indices->size() > 0){ isObjectUpdated = true; break;}
        if(normal != nullptr && normal->isSet()){ isObjectUpdated = true; break;}
        if(normals->size() > 0){ isObjectUpdated = true; break;}
        if(texture_coordinates->size() > 0){ isObjectUpdated = true; break;}
        if(vertices->size() > 0){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

