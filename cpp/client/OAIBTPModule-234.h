/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * OpenAPI spec version: 1.111
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIBTPModule-234.h
 *
 * 
 */

#ifndef OAIBTPModule-234_H_
#define OAIBTPModule-234_H_

#include <QJsonObject>


#include "OAIBTCacheDataPath-191.h"
#include "OAIBTImport.h"
#include "OAIBTMicroversionId-366.h"
#include "OAIBTPLiteralNumber-258.h"
#include "OAIBTPNode-7.h"
#include "OAIBTPSpace-10.h"
#include "OAIBTPTopLevelImport-285.h"
#include "OAIBTPTopLevelNode-286.h"
#include <QList>
#include <QMap>
#include <QString>

#include "OAIObject.h"

namespace OpenAPI {

class OAIBTPModule-234: public OAIObject {
public:
    OAIBTPModule-234();
    OAIBTPModule-234(QString json);
    ~OAIBTPModule-234();
    void init();
    void cleanup();

    QString asJson () override;
    QJsonObject asJsonObject() override;
    void fromJsonObject(QJsonObject json) override;
    OAIBTPModule-234* fromJson(QString jsonString) override;

    bool isAtomic();
    void setAtomic(bool atomic);

    QString* getBtType();
    void setBtType(QString* bt_type);

    QString* getDocumentationType();
    void setDocumentationType(QString* documentation_type);

    qint32 getEndSourceLocation();
    void setEndSourceLocation(qint32 end_source_location);

    QString* getNodeId();
    void setNodeId(QString* node_id);

    QString* getShortDescriptor();
    void setShortDescriptor(QString* short_descriptor);

    OAIBTPSpace-10* getSpaceAfter();
    void setSpaceAfter(OAIBTPSpace-10* space_after);

    OAIBTPSpace-10* getSpaceBefore();
    void setSpaceBefore(OAIBTPSpace-10* space_before);

    bool isSpaceDefault();
    void setSpaceDefault(bool space_default);

    qint32 getStartSourceLocation();
    void setStartSourceLocation(qint32 start_source_location);

    bool isIsInternalModule();
    void setIsInternalModule(bool is_internal_module);

    QList<OAIBTPTopLevelImport-285*>* getImports();
    void setImports(QList<OAIBTPTopLevelImport-285*>* imports);

    QMap<QString, QList<OAIBTImport*>*>* getDeepImports();
    void setDeepImports(QMap<QString, QList<OAIBTImport*>*>* deep_imports);

    qint32 getVersionNumber();
    void setVersionNumber(qint32 version_number);

    QMap<QString, OAIBTMicroversionId-366*>* getPathMap();
    void setPathMap(QMap<QString, OAIBTMicroversionId-366*>* path_map);

    OAIBTPLiteralNumber-258* getVersion();
    void setVersion(OAIBTPLiteralNumber-258* version);

    QList<OAIBTPTopLevelNode-286*>* getTopLevel();
    void setTopLevel(QList<OAIBTPTopLevelNode-286*>* top_level);

    OAIBTCacheDataPath-191* getPathToCache();
    void setPathToCache(OAIBTCacheDataPath-191* path_to_cache);

    bool isIsBlob();
    void setIsBlob(bool is_blob);

    bool isMayHaveImplicitImports();
    void setMayHaveImplicitImports(bool may_have_implicit_imports);


    virtual bool isSet() override;

private:
    bool atomic;
    bool m_atomic_isSet;

    QString* bt_type;
    bool m_bt_type_isSet;

    QString* documentation_type;
    bool m_documentation_type_isSet;

    qint32 end_source_location;
    bool m_end_source_location_isSet;

    QString* node_id;
    bool m_node_id_isSet;

    QString* short_descriptor;
    bool m_short_descriptor_isSet;

    OAIBTPSpace-10* space_after;
    bool m_space_after_isSet;

    OAIBTPSpace-10* space_before;
    bool m_space_before_isSet;

    bool space_default;
    bool m_space_default_isSet;

    qint32 start_source_location;
    bool m_start_source_location_isSet;

    bool is_internal_module;
    bool m_is_internal_module_isSet;

    QList<OAIBTPTopLevelImport-285*>* imports;
    bool m_imports_isSet;

    QMap<QString, QList<OAIBTImport*>*>* deep_imports;
    bool m_deep_imports_isSet;

    qint32 version_number;
    bool m_version_number_isSet;

    QMap<QString, OAIBTMicroversionId-366*>* path_map;
    bool m_path_map_isSet;

    OAIBTPLiteralNumber-258* version;
    bool m_version_isSet;

    QList<OAIBTPTopLevelNode-286*>* top_level;
    bool m_top_level_isSet;

    OAIBTCacheDataPath-191* path_to_cache;
    bool m_path_to_cache_isSet;

    bool is_blob;
    bool m_is_blob_isSet;

    bool may_have_implicit_imports;
    bool m_may_have_implicit_imports_isSet;

};

}

#endif /* OAIBTPModule-234_H_ */
