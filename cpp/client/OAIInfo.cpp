/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * OpenAPI spec version: 1.111
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIInfo.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIInfo::OAIInfo(QString json) {
    init();
    this->fromJson(json);
}

OAIInfo::OAIInfo() {
    init();
}

OAIInfo::~OAIInfo() {
    this->cleanup();
}

void
OAIInfo::init() {
    contact = new OAIContact();
    m_contact_isSet = false;
    description = new QString("");
    m_description_isSet = false;
    extensions = new QMap<QString, OAIObject*>();
    m_extensions_isSet = false;
    license = new OAILicense();
    m_license_isSet = false;
    terms_of_service = new QString("");
    m_terms_of_service_isSet = false;
    title = new QString("");
    m_title_isSet = false;
    version = new QString("");
    m_version_isSet = false;
}

void
OAIInfo::cleanup() {
    if(contact != nullptr) { 
        delete contact;
    }
    if(description != nullptr) { 
        delete description;
    }
    if(extensions != nullptr) { 
        auto arr = extensions;
        for(auto o: *arr) { 
            delete o;
        }
        delete extensions;
    }
    if(license != nullptr) { 
        delete license;
    }
    if(terms_of_service != nullptr) { 
        delete terms_of_service;
    }
    if(title != nullptr) { 
        delete title;
    }
    if(version != nullptr) { 
        delete version;
    }
}

OAIInfo*
OAIInfo::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIInfo::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&contact, pJson["contact"], "OAIContact", "OAIContact");
    
    ::OpenAPI::setValue(&description, pJson["description"], "QString", "QString");
    
    
    ::OpenAPI::setValue(&extensions, pJson["extensions"], "QMap", "OAIObject");
    ::OpenAPI::setValue(&license, pJson["license"], "OAILicense", "OAILicense");
    
    ::OpenAPI::setValue(&terms_of_service, pJson["termsOfService"], "QString", "QString");
    
    ::OpenAPI::setValue(&title, pJson["title"], "QString", "QString");
    
    ::OpenAPI::setValue(&version, pJson["version"], "QString", "QString");
    
}

QString
OAIInfo::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIInfo::asJsonObject() {
    QJsonObject obj;
    if((contact != nullptr) && (contact->isSet())){
        toJsonValue(QString("contact"), contact, obj, QString("OAIContact"));
    }
    if(description != nullptr && *description != QString("")){
        toJsonValue(QString("description"), description, obj, QString("QString"));
    }
    if(extensions->size() > 0){
        toJsonMap((QMap<QString, void*>*) extensions, obj, "extensions", "OAIObject");
    }
    if((license != nullptr) && (license->isSet())){
        toJsonValue(QString("license"), license, obj, QString("OAILicense"));
    }
    if(terms_of_service != nullptr && *terms_of_service != QString("")){
        toJsonValue(QString("termsOfService"), terms_of_service, obj, QString("QString"));
    }
    if(title != nullptr && *title != QString("")){
        toJsonValue(QString("title"), title, obj, QString("QString"));
    }
    if(version != nullptr && *version != QString("")){
        toJsonValue(QString("version"), version, obj, QString("QString"));
    }

    return obj;
}

OAIContact*
OAIInfo::getContact() {
    return contact;
}
void
OAIInfo::setContact(OAIContact* contact) {
    this->contact = contact;
    this->m_contact_isSet = true;
}

QString*
OAIInfo::getDescription() {
    return description;
}
void
OAIInfo::setDescription(QString* description) {
    this->description = description;
    this->m_description_isSet = true;
}

QMap<QString, OAIObject*>*
OAIInfo::getExtensions() {
    return extensions;
}
void
OAIInfo::setExtensions(QMap<QString, OAIObject*>* extensions) {
    this->extensions = extensions;
    this->m_extensions_isSet = true;
}

OAILicense*
OAIInfo::getLicense() {
    return license;
}
void
OAIInfo::setLicense(OAILicense* license) {
    this->license = license;
    this->m_license_isSet = true;
}

QString*
OAIInfo::getTermsOfService() {
    return terms_of_service;
}
void
OAIInfo::setTermsOfService(QString* terms_of_service) {
    this->terms_of_service = terms_of_service;
    this->m_terms_of_service_isSet = true;
}

QString*
OAIInfo::getTitle() {
    return title;
}
void
OAIInfo::setTitle(QString* title) {
    this->title = title;
    this->m_title_isSet = true;
}

QString*
OAIInfo::getVersion() {
    return version;
}
void
OAIInfo::setVersion(QString* version) {
    this->version = version;
    this->m_version_isSet = true;
}


bool
OAIInfo::isSet(){
    bool isObjectUpdated = false;
    do{
        if(contact != nullptr && contact->isSet()){ isObjectUpdated = true; break;}
        if(description != nullptr && *description != QString("")){ isObjectUpdated = true; break;}
        if(extensions->size() > 0){ isObjectUpdated = true; break;}
        if(license != nullptr && license->isSet()){ isObjectUpdated = true; break;}
        if(terms_of_service != nullptr && *terms_of_service != QString("")){ isObjectUpdated = true; break;}
        if(title != nullptr && *title != QString("")){ isObjectUpdated = true; break;}
        if(version != nullptr && *version != QString("")){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

