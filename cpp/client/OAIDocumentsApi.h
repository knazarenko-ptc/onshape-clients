/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * OpenAPI spec version: 1.111
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef _OAI_OAIDocumentsApi_H_
#define _OAI_OAIDocumentsApi_H_

#include "OAIHttpRequest.h"

#include "OAIBTAclInfo.h"
#include "OAIBTCopyDocumentInfo.h"
#include "OAIBTCopyDocumentParams.h"
#include "OAIBTDocumentElementInfo.h"
#include "OAIBTDocumentInfo.h"
#include "OAIBTDocumentMergeInfo.h"
#include "OAIBTDocumentParams.h"
#include "OAIBTDocumentSearchParams.h"
#include "OAIBTExportModelParams.h"
#include "OAIBTGlobalTreeNodeListResponse.h"
#include "OAIBTInsertablesListResponse.h"
#include "OAIBTLinkToLatestDocumentInfo.h"
#include "OAIBTLinkToLatestDocumentParams.h"
#include "OAIBTMicroversionInfo.h"
#include "OAIBTMoveElementInfo.h"
#include "OAIBTMoveElementParams.h"
#include "OAIBTPermissionSet.h"
#include "OAIBTShareParams.h"
#include "OAIBTVersionInfo.h"
#include "OAIBTVersionOrWorkspaceInfo.h"
#include "OAIBTVersionOrWorkspaceParams.h"
#include "OAIBTWorkspaceInfo.h"
#include "OAIHttpRequest.h"
#include <QString>

#include <QObject>

namespace OpenAPI {

class OAIDocumentsApi: public QObject {
    Q_OBJECT

public:
    OAIDocumentsApi();
    OAIDocumentsApi(QString host, QString basePath);
    ~OAIDocumentsApi();

    QString host;
    QString basePath;
    QMap<QString, QString> defaultHeaders;

    void copyWorkspace(QString* did, QString* wid, OAIBTCopyDocumentParams& oaibt_copy_document_params);
    void createDocument(OAIBTDocumentParams& oaibt_document_params);
    void createVersion(QString* did, OAIBTVersionOrWorkspaceParams& oaibt_version_or_workspace_params);
    void createWorkspace(QString* did, OAIBTVersionOrWorkspaceParams& oaibt_version_or_workspace_params);
    void deleteDocument(QString* did, bool forever);
    void deleteWorkspace(QString* did, QString* wid);
    void downloadExternalData(QString* did, QString* fid, QString* if_none_match);
    void export2Json(QString* did, QString* wv, QString* wvid, QString* eid, OAIBTExportModelParams& oaibt_export_model_params);
    void getCurrentMicroversion(QString* did, QString* wv, QString* wvid);
    void getDocument(QString* did);
    void getDocumentAcl(QString* did);
    void getDocumentPermissionSet(QString* did);
    void getDocumentVersions(QString* did, qint32 offset, qint32 limit);
    void getDocumentWorkspaces(QString* did);
    void getDocuments(QString* q, qint32 filter, QString* owner, qint32 owner_type, QString* sort_column, QString* sort_order, qint32 offset, qint32 limit, QString* label, QString* project, QString* parent_id);
    void getElementsInDocument(QString* did, QString* wvm, QString* wvmid, QString* element_type, QString* element_id, bool with_thumbnails, QString* link_document_id);
    void getInsertables(QString* did, QString* wvm, QString* wvmid, QList<QString*>* beta_capability_ids, bool include_parts, bool include_surfaces, bool include_wires, bool include_sketches, bool include_reference_features, bool include_assemblies, bool include_features, bool include_feature_studios, bool include_part_studios, bool include_blobs, bool include_meshes, bool include_flattened_bodies, QString* allowed_blob_mime_types, qint32 max_feature_script_version, bool include_applications, QString* allowed_application_mime_types, bool include_composite_parts, bool include_fs_tables);
    void getVersion(QString* did, QString* vid, bool parents, QString* link_document_id);
    void mergeIntoWorkspace(QString* did, QString* wid, OAIBTVersionOrWorkspaceInfo& oaibt_version_or_workspace_info);
    void moveElementsToDocument(QString* did, QString* wid, OAIBTMoveElementParams& oaibt_move_element_params);
    void restoreFromHistory(QString* did, QString* wid, QString* vm, QString* vmid);
    void search(OAIBTDocumentSearchParams& oaibt_document_search_params);
    void shareDocument(QString* did, OAIBTShareParams& oaibt_share_params);
    void syncApplicationElements(QString* did, QString* wid, QList<QString*>* application_element_ids, QString* description);
    void unShareDocument(QString* did, QString* eid, qint32 entry_type);
    void updateDocumentAttributes(QString* did, OAIBTDocumentParams& oaibt_document_params);
    void updateExternalReferencesToLatestDocuments(QString* did, QString* wid, QString* eid, OAIBTLinkToLatestDocumentParams& oaibt_link_to_latest_document_params);
    
private:
    void copyWorkspaceCallback (OAIHttpRequestWorker * worker);
    void createDocumentCallback (OAIHttpRequestWorker * worker);
    void createVersionCallback (OAIHttpRequestWorker * worker);
    void createWorkspaceCallback (OAIHttpRequestWorker * worker);
    void deleteDocumentCallback (OAIHttpRequestWorker * worker);
    void deleteWorkspaceCallback (OAIHttpRequestWorker * worker);
    void downloadExternalDataCallback (OAIHttpRequestWorker * worker);
    void export2JsonCallback (OAIHttpRequestWorker * worker);
    void getCurrentMicroversionCallback (OAIHttpRequestWorker * worker);
    void getDocumentCallback (OAIHttpRequestWorker * worker);
    void getDocumentAclCallback (OAIHttpRequestWorker * worker);
    void getDocumentPermissionSetCallback (OAIHttpRequestWorker * worker);
    void getDocumentVersionsCallback (OAIHttpRequestWorker * worker);
    void getDocumentWorkspacesCallback (OAIHttpRequestWorker * worker);
    void getDocumentsCallback (OAIHttpRequestWorker * worker);
    void getElementsInDocumentCallback (OAIHttpRequestWorker * worker);
    void getInsertablesCallback (OAIHttpRequestWorker * worker);
    void getVersionCallback (OAIHttpRequestWorker * worker);
    void mergeIntoWorkspaceCallback (OAIHttpRequestWorker * worker);
    void moveElementsToDocumentCallback (OAIHttpRequestWorker * worker);
    void restoreFromHistoryCallback (OAIHttpRequestWorker * worker);
    void searchCallback (OAIHttpRequestWorker * worker);
    void shareDocumentCallback (OAIHttpRequestWorker * worker);
    void syncApplicationElementsCallback (OAIHttpRequestWorker * worker);
    void unShareDocumentCallback (OAIHttpRequestWorker * worker);
    void updateDocumentAttributesCallback (OAIHttpRequestWorker * worker);
    void updateExternalReferencesToLatestDocumentsCallback (OAIHttpRequestWorker * worker);
    
signals:
    void copyWorkspaceSignal(OAIBTCopyDocumentInfo* summary);
    void createDocumentSignal(OAIBTDocumentInfo* summary);
    void createVersionSignal(OAIBTVersionInfo* summary);
    void createWorkspaceSignal(OAIBTWorkspaceInfo* summary);
    void deleteDocumentSignal();
    void deleteWorkspaceSignal();
    void downloadExternalDataSignal(OAIHttpRequestInputFileElement* summary);
    void export2JsonSignal();
    void getCurrentMicroversionSignal(OAIBTMicroversionInfo* summary);
    void getDocumentSignal(OAIBTDocumentInfo* summary);
    void getDocumentAclSignal(OAIBTAclInfo* summary);
    void getDocumentPermissionSetSignal(OAIBTPermissionSet* summary);
    void getDocumentVersionsSignal(QList<OAIBTVersionInfo*>* summary);
    void getDocumentWorkspacesSignal(QList<OAIBTWorkspaceInfo*>* summary);
    void getDocumentsSignal(OAIBTGlobalTreeNodeListResponse* summary);
    void getElementsInDocumentSignal(QList<OAIBTDocumentElementInfo*>* summary);
    void getInsertablesSignal(OAIBTInsertablesListResponse* summary);
    void getVersionSignal(OAIBTVersionInfo* summary);
    void mergeIntoWorkspaceSignal(OAIBTDocumentMergeInfo* summary);
    void moveElementsToDocumentSignal(OAIBTMoveElementInfo* summary);
    void restoreFromHistorySignal();
    void searchSignal();
    void shareDocumentSignal(OAIBTAclInfo* summary);
    void syncApplicationElementsSignal();
    void unShareDocumentSignal();
    void updateDocumentAttributesSignal();
    void updateExternalReferencesToLatestDocumentsSignal(OAIBTLinkToLatestDocumentInfo* summary);
    
    void copyWorkspaceSignalE(OAIBTCopyDocumentInfo* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void createDocumentSignalE(OAIBTDocumentInfo* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void createVersionSignalE(OAIBTVersionInfo* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void createWorkspaceSignalE(OAIBTWorkspaceInfo* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void deleteDocumentSignalE(QNetworkReply::NetworkError error_type, QString& error_str);
    void deleteWorkspaceSignalE(QNetworkReply::NetworkError error_type, QString& error_str);
    void downloadExternalDataSignalE(OAIHttpRequestInputFileElement* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void export2JsonSignalE(QNetworkReply::NetworkError error_type, QString& error_str);
    void getCurrentMicroversionSignalE(OAIBTMicroversionInfo* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void getDocumentSignalE(OAIBTDocumentInfo* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void getDocumentAclSignalE(OAIBTAclInfo* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void getDocumentPermissionSetSignalE(OAIBTPermissionSet* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void getDocumentVersionsSignalE(QList<OAIBTVersionInfo*>* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void getDocumentWorkspacesSignalE(QList<OAIBTWorkspaceInfo*>* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void getDocumentsSignalE(OAIBTGlobalTreeNodeListResponse* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void getElementsInDocumentSignalE(QList<OAIBTDocumentElementInfo*>* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void getInsertablesSignalE(OAIBTInsertablesListResponse* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void getVersionSignalE(OAIBTVersionInfo* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void mergeIntoWorkspaceSignalE(OAIBTDocumentMergeInfo* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void moveElementsToDocumentSignalE(OAIBTMoveElementInfo* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void restoreFromHistorySignalE(QNetworkReply::NetworkError error_type, QString& error_str);
    void searchSignalE(QNetworkReply::NetworkError error_type, QString& error_str);
    void shareDocumentSignalE(OAIBTAclInfo* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void syncApplicationElementsSignalE(QNetworkReply::NetworkError error_type, QString& error_str);
    void unShareDocumentSignalE(QNetworkReply::NetworkError error_type, QString& error_str);
    void updateDocumentAttributesSignalE(QNetworkReply::NetworkError error_type, QString& error_str);
    void updateExternalReferencesToLatestDocumentsSignalE(OAIBTLinkToLatestDocumentInfo* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    
    void copyWorkspaceSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void createDocumentSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void createVersionSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void createWorkspaceSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void deleteDocumentSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void deleteWorkspaceSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void downloadExternalDataSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void export2JsonSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void getCurrentMicroversionSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void getDocumentSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void getDocumentAclSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void getDocumentPermissionSetSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void getDocumentVersionsSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void getDocumentWorkspacesSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void getDocumentsSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void getElementsInDocumentSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void getInsertablesSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void getVersionSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void mergeIntoWorkspaceSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void moveElementsToDocumentSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void restoreFromHistorySignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void searchSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void shareDocumentSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void syncApplicationElementsSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void unShareDocumentSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void updateDocumentAttributesSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void updateExternalReferencesToLatestDocumentsSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    
};

}
#endif
