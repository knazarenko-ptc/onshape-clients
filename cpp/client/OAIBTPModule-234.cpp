/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * OpenAPI spec version: 1.111
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIBTPModule-234.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIBTPModule-234::OAIBTPModule-234(QString json) {
    init();
    this->fromJson(json);
}

OAIBTPModule-234::OAIBTPModule-234() {
    init();
}

OAIBTPModule-234::~OAIBTPModule-234() {
    this->cleanup();
}

void
OAIBTPModule-234::init() {
    atomic = false;
    m_atomic_isSet = false;
    bt_type = new QString("");
    m_bt_type_isSet = false;
    documentation_type = new QString("");
    m_documentation_type_isSet = false;
    end_source_location = 0;
    m_end_source_location_isSet = false;
    node_id = new QString("");
    m_node_id_isSet = false;
    short_descriptor = new QString("");
    m_short_descriptor_isSet = false;
    space_after = new OAIBTPSpace-10();
    m_space_after_isSet = false;
    space_before = new OAIBTPSpace-10();
    m_space_before_isSet = false;
    space_default = false;
    m_space_default_isSet = false;
    start_source_location = 0;
    m_start_source_location_isSet = false;
    is_internal_module = false;
    m_is_internal_module_isSet = false;
    imports = new QList<OAIBTPTopLevelImport-285*>();
    m_imports_isSet = false;
    deep_imports = new QMap<QString, QList<OAIBTImport*>*>();
    m_deep_imports_isSet = false;
    version_number = 0;
    m_version_number_isSet = false;
    path_map = new QMap<QString, OAIBTMicroversionId-366*>();
    m_path_map_isSet = false;
    version = new OAIBTPLiteralNumber-258();
    m_version_isSet = false;
    top_level = new QList<OAIBTPTopLevelNode-286*>();
    m_top_level_isSet = false;
    path_to_cache = new OAIBTCacheDataPath-191();
    m_path_to_cache_isSet = false;
    is_blob = false;
    m_is_blob_isSet = false;
    may_have_implicit_imports = false;
    m_may_have_implicit_imports_isSet = false;
}

void
OAIBTPModule-234::cleanup() {

    if(bt_type != nullptr) { 
        delete bt_type;
    }
    if(documentation_type != nullptr) { 
        delete documentation_type;
    }

    if(node_id != nullptr) { 
        delete node_id;
    }
    if(short_descriptor != nullptr) { 
        delete short_descriptor;
    }
    if(space_after != nullptr) { 
        delete space_after;
    }
    if(space_before != nullptr) { 
        delete space_before;
    }



    if(imports != nullptr) { 
        auto arr = imports;
        for(auto o: *arr) { 
            delete o;
        }
        delete imports;
    }
    if(deep_imports != nullptr) { 
        auto arr = deep_imports;
        for(auto o: *arr) { 
            for(auto o1: *o) {
                delete o1;
            }
            delete o;
        }
        delete deep_imports;
    }

    if(path_map != nullptr) { 
        auto arr = path_map;
        for(auto o: *arr) { 
            delete o;
        }
        delete path_map;
    }
    if(version != nullptr) { 
        delete version;
    }
    if(top_level != nullptr) { 
        auto arr = top_level;
        for(auto o: *arr) { 
            delete o;
        }
        delete top_level;
    }
    if(path_to_cache != nullptr) { 
        delete path_to_cache;
    }


}

OAIBTPModule-234*
OAIBTPModule-234::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIBTPModule-234::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&atomic, pJson["atomic"], "bool", "");
    
    ::OpenAPI::setValue(&bt_type, pJson["btType"], "QString", "QString");
    
    ::OpenAPI::setValue(&documentation_type, pJson["documentationType"], "QString", "QString");
    
    ::OpenAPI::setValue(&end_source_location, pJson["endSourceLocation"], "qint32", "");
    
    ::OpenAPI::setValue(&node_id, pJson["nodeId"], "QString", "QString");
    
    ::OpenAPI::setValue(&short_descriptor, pJson["shortDescriptor"], "QString", "QString");
    
    ::OpenAPI::setValue(&space_after, pJson["spaceAfter"], "OAIBTPSpace-10", "OAIBTPSpace-10");
    
    ::OpenAPI::setValue(&space_before, pJson["spaceBefore"], "OAIBTPSpace-10", "OAIBTPSpace-10");
    
    ::OpenAPI::setValue(&space_default, pJson["spaceDefault"], "bool", "");
    
    ::OpenAPI::setValue(&start_source_location, pJson["startSourceLocation"], "qint32", "");
    
    ::OpenAPI::setValue(&is_internal_module, pJson["isInternalModule"], "bool", "");
    
    
    ::OpenAPI::setValue(&imports, pJson["imports"], "QList", "OAIBTPTopLevelImport-285");
    
    
    if(pJson["deepImports"].isObject()){
        auto varmap = pJson["deepImports"].toObject().toVariantMap();
        if(varmap.count() > 0){
            for(auto val : varmap.keys()){
                auto deep_imports_item = new QList<OAIBTImport*>();
                
    		    auto jsonval = QJsonValue::fromVariant(varmap.value(val));
    		    ::OpenAPI::setValue((QMap<QString, void *>*)&deep_imports_item, jsonval, "QList", "OAIBTImport");

                deep_imports->insert(deep_imports->end(), val, deep_imports_item);
            }
        }
    }
    ::OpenAPI::setValue(&version_number, pJson["versionNumber"], "qint32", "");
    
    
    ::OpenAPI::setValue(&path_map, pJson["pathMap"], "QMap", "OAIBTMicroversionId-366");
    ::OpenAPI::setValue(&version, pJson["version"], "OAIBTPLiteralNumber-258", "OAIBTPLiteralNumber-258");
    
    
    ::OpenAPI::setValue(&top_level, pJson["topLevel"], "QList", "OAIBTPTopLevelNode-286");
    ::OpenAPI::setValue(&path_to_cache, pJson["pathToCache"], "OAIBTCacheDataPath-191", "OAIBTCacheDataPath-191");
    
    ::OpenAPI::setValue(&is_blob, pJson["isBlob"], "bool", "");
    
    ::OpenAPI::setValue(&may_have_implicit_imports, pJson["mayHaveImplicitImports"], "bool", "");
    
}

QString
OAIBTPModule-234::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIBTPModule-234::asJsonObject() {
    QJsonObject obj;
    if(m_atomic_isSet){
        obj.insert("atomic", QJsonValue(atomic));
    }
    if(bt_type != nullptr && *bt_type != QString("")){
        toJsonValue(QString("btType"), bt_type, obj, QString("QString"));
    }
    if(documentation_type != nullptr && *documentation_type != QString("")){
        toJsonValue(QString("documentationType"), documentation_type, obj, QString("QString"));
    }
    if(m_end_source_location_isSet){
        obj.insert("endSourceLocation", QJsonValue(end_source_location));
    }
    if(node_id != nullptr && *node_id != QString("")){
        toJsonValue(QString("nodeId"), node_id, obj, QString("QString"));
    }
    if(short_descriptor != nullptr && *short_descriptor != QString("")){
        toJsonValue(QString("shortDescriptor"), short_descriptor, obj, QString("QString"));
    }
    if((space_after != nullptr) && (space_after->isSet())){
        toJsonValue(QString("spaceAfter"), space_after, obj, QString("OAIBTPSpace-10"));
    }
    if((space_before != nullptr) && (space_before->isSet())){
        toJsonValue(QString("spaceBefore"), space_before, obj, QString("OAIBTPSpace-10"));
    }
    if(m_space_default_isSet){
        obj.insert("spaceDefault", QJsonValue(space_default));
    }
    if(m_start_source_location_isSet){
        obj.insert("startSourceLocation", QJsonValue(start_source_location));
    }
    if(m_is_internal_module_isSet){
        obj.insert("isInternalModule", QJsonValue(is_internal_module));
    }
    if(imports->size() > 0){
        toJsonArray((QList<void*>*)imports, obj, "imports", "OAIBTPTopLevelImport-285");
    }
    if(deep_imports->size() > 0){
        
        QJsonObject mapobj;
        for(auto itemkey : deep_imports->keys()){
            QJsonObject jobj;
            toJsonArray((QList<void*>*)deep_imports->value(itemkey), jobj, itemkey, "OAIBTImport");
            mapobj.insert(itemkey, jobj);
        }
        obj.insert("deepImports", mapobj);
    }
    if(m_version_number_isSet){
        obj.insert("versionNumber", QJsonValue(version_number));
    }
    if(path_map->size() > 0){
        toJsonMap((QMap<QString, void*>*) path_map, obj, "pathMap", "OAIBTMicroversionId-366");
    }
    if((version != nullptr) && (version->isSet())){
        toJsonValue(QString("version"), version, obj, QString("OAIBTPLiteralNumber-258"));
    }
    if(top_level->size() > 0){
        toJsonArray((QList<void*>*)top_level, obj, "topLevel", "OAIBTPTopLevelNode-286");
    }
    if((path_to_cache != nullptr) && (path_to_cache->isSet())){
        toJsonValue(QString("pathToCache"), path_to_cache, obj, QString("OAIBTCacheDataPath-191"));
    }
    if(m_is_blob_isSet){
        obj.insert("isBlob", QJsonValue(is_blob));
    }
    if(m_may_have_implicit_imports_isSet){
        obj.insert("mayHaveImplicitImports", QJsonValue(may_have_implicit_imports));
    }

    return obj;
}

bool
OAIBTPModule-234::isAtomic() {
    return atomic;
}
void
OAIBTPModule-234::setAtomic(bool atomic) {
    this->atomic = atomic;
    this->m_atomic_isSet = true;
}

QString*
OAIBTPModule-234::getBtType() {
    return bt_type;
}
void
OAIBTPModule-234::setBtType(QString* bt_type) {
    this->bt_type = bt_type;
    this->m_bt_type_isSet = true;
}

QString*
OAIBTPModule-234::getDocumentationType() {
    return documentation_type;
}
void
OAIBTPModule-234::setDocumentationType(QString* documentation_type) {
    this->documentation_type = documentation_type;
    this->m_documentation_type_isSet = true;
}

qint32
OAIBTPModule-234::getEndSourceLocation() {
    return end_source_location;
}
void
OAIBTPModule-234::setEndSourceLocation(qint32 end_source_location) {
    this->end_source_location = end_source_location;
    this->m_end_source_location_isSet = true;
}

QString*
OAIBTPModule-234::getNodeId() {
    return node_id;
}
void
OAIBTPModule-234::setNodeId(QString* node_id) {
    this->node_id = node_id;
    this->m_node_id_isSet = true;
}

QString*
OAIBTPModule-234::getShortDescriptor() {
    return short_descriptor;
}
void
OAIBTPModule-234::setShortDescriptor(QString* short_descriptor) {
    this->short_descriptor = short_descriptor;
    this->m_short_descriptor_isSet = true;
}

OAIBTPSpace-10*
OAIBTPModule-234::getSpaceAfter() {
    return space_after;
}
void
OAIBTPModule-234::setSpaceAfter(OAIBTPSpace-10* space_after) {
    this->space_after = space_after;
    this->m_space_after_isSet = true;
}

OAIBTPSpace-10*
OAIBTPModule-234::getSpaceBefore() {
    return space_before;
}
void
OAIBTPModule-234::setSpaceBefore(OAIBTPSpace-10* space_before) {
    this->space_before = space_before;
    this->m_space_before_isSet = true;
}

bool
OAIBTPModule-234::isSpaceDefault() {
    return space_default;
}
void
OAIBTPModule-234::setSpaceDefault(bool space_default) {
    this->space_default = space_default;
    this->m_space_default_isSet = true;
}

qint32
OAIBTPModule-234::getStartSourceLocation() {
    return start_source_location;
}
void
OAIBTPModule-234::setStartSourceLocation(qint32 start_source_location) {
    this->start_source_location = start_source_location;
    this->m_start_source_location_isSet = true;
}

bool
OAIBTPModule-234::isIsInternalModule() {
    return is_internal_module;
}
void
OAIBTPModule-234::setIsInternalModule(bool is_internal_module) {
    this->is_internal_module = is_internal_module;
    this->m_is_internal_module_isSet = true;
}

QList<OAIBTPTopLevelImport-285*>*
OAIBTPModule-234::getImports() {
    return imports;
}
void
OAIBTPModule-234::setImports(QList<OAIBTPTopLevelImport-285*>* imports) {
    this->imports = imports;
    this->m_imports_isSet = true;
}

QMap<QString, QList<OAIBTImport*>*>*
OAIBTPModule-234::getDeepImports() {
    return deep_imports;
}
void
OAIBTPModule-234::setDeepImports(QMap<QString, QList<OAIBTImport*>*>* deep_imports) {
    this->deep_imports = deep_imports;
    this->m_deep_imports_isSet = true;
}

qint32
OAIBTPModule-234::getVersionNumber() {
    return version_number;
}
void
OAIBTPModule-234::setVersionNumber(qint32 version_number) {
    this->version_number = version_number;
    this->m_version_number_isSet = true;
}

QMap<QString, OAIBTMicroversionId-366*>*
OAIBTPModule-234::getPathMap() {
    return path_map;
}
void
OAIBTPModule-234::setPathMap(QMap<QString, OAIBTMicroversionId-366*>* path_map) {
    this->path_map = path_map;
    this->m_path_map_isSet = true;
}

OAIBTPLiteralNumber-258*
OAIBTPModule-234::getVersion() {
    return version;
}
void
OAIBTPModule-234::setVersion(OAIBTPLiteralNumber-258* version) {
    this->version = version;
    this->m_version_isSet = true;
}

QList<OAIBTPTopLevelNode-286*>*
OAIBTPModule-234::getTopLevel() {
    return top_level;
}
void
OAIBTPModule-234::setTopLevel(QList<OAIBTPTopLevelNode-286*>* top_level) {
    this->top_level = top_level;
    this->m_top_level_isSet = true;
}

OAIBTCacheDataPath-191*
OAIBTPModule-234::getPathToCache() {
    return path_to_cache;
}
void
OAIBTPModule-234::setPathToCache(OAIBTCacheDataPath-191* path_to_cache) {
    this->path_to_cache = path_to_cache;
    this->m_path_to_cache_isSet = true;
}

bool
OAIBTPModule-234::isIsBlob() {
    return is_blob;
}
void
OAIBTPModule-234::setIsBlob(bool is_blob) {
    this->is_blob = is_blob;
    this->m_is_blob_isSet = true;
}

bool
OAIBTPModule-234::isMayHaveImplicitImports() {
    return may_have_implicit_imports;
}
void
OAIBTPModule-234::setMayHaveImplicitImports(bool may_have_implicit_imports) {
    this->may_have_implicit_imports = may_have_implicit_imports;
    this->m_may_have_implicit_imports_isSet = true;
}


bool
OAIBTPModule-234::isSet(){
    bool isObjectUpdated = false;
    do{
        if(m_atomic_isSet){ isObjectUpdated = true; break;}
        if(bt_type != nullptr && *bt_type != QString("")){ isObjectUpdated = true; break;}
        if(documentation_type != nullptr && *documentation_type != QString("")){ isObjectUpdated = true; break;}
        if(m_end_source_location_isSet){ isObjectUpdated = true; break;}
        if(node_id != nullptr && *node_id != QString("")){ isObjectUpdated = true; break;}
        if(short_descriptor != nullptr && *short_descriptor != QString("")){ isObjectUpdated = true; break;}
        if(space_after != nullptr && space_after->isSet()){ isObjectUpdated = true; break;}
        if(space_before != nullptr && space_before->isSet()){ isObjectUpdated = true; break;}
        if(m_space_default_isSet){ isObjectUpdated = true; break;}
        if(m_start_source_location_isSet){ isObjectUpdated = true; break;}
        if(m_is_internal_module_isSet){ isObjectUpdated = true; break;}
        if(imports->size() > 0){ isObjectUpdated = true; break;}
        if(deep_imports->size() > 0){ isObjectUpdated = true; break;}
        if(m_version_number_isSet){ isObjectUpdated = true; break;}
        if(path_map->size() > 0){ isObjectUpdated = true; break;}
        if(version != nullptr && version->isSet()){ isObjectUpdated = true; break;}
        if(top_level->size() > 0){ isObjectUpdated = true; break;}
        if(path_to_cache != nullptr && path_to_cache->isSet()){ isObjectUpdated = true; break;}
        if(m_is_blob_isSet){ isObjectUpdated = true; break;}
        if(m_may_have_implicit_imports_isSet){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

