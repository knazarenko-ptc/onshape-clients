/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * OpenAPI spec version: 1.111
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIBTMetadataPropertyInfo.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIBTMetadataPropertyInfo::OAIBTMetadataPropertyInfo(QString json) {
    init();
    this->fromJson(json);
}

OAIBTMetadataPropertyInfo::OAIBTMetadataPropertyInfo() {
    init();
}

OAIBTMetadataPropertyInfo::~OAIBTMetadataPropertyInfo() {
    this->cleanup();
}

void
OAIBTMetadataPropertyInfo::init() {
    default_value = NULL;
    m_default_value_isSet = false;
    dirty = false;
    m_dirty_isSet = false;
    editable = false;
    m_editable_isSet = false;
    editable_in_ui = false;
    m_editable_in_ui_isSet = false;
    enum_values = new QList<OAIBTMetadataEnumValueInfo*>();
    m_enum_values_isSet = false;
    initial_value = NULL;
    m_initial_value_isSet = false;
    name = new QString("");
    m_name_isSet = false;
    property_id = new QString("");
    m_property_id_isSet = false;
    property_source = 0;
    m_property_source_isSet = false;
    required = false;
    m_required_isSet = false;
    schema_id = new QString("");
    m_schema_id_isSet = false;
    ui_hints = new OAIBTMetadataPropertyUiHintsInfo();
    m_ui_hints_isSet = false;
    validator = new OAIBTMetadataPropertyValidatorInfo();
    m_validator_isSet = false;
    value = NULL;
    m_value_isSet = false;
    value_type = new QString("");
    m_value_type_isSet = false;
}

void
OAIBTMetadataPropertyInfo::cleanup() {
    if(default_value != nullptr) { 
        delete default_value;
    }



    if(enum_values != nullptr) { 
        auto arr = enum_values;
        for(auto o: *arr) { 
            delete o;
        }
        delete enum_values;
    }
    if(initial_value != nullptr) { 
        delete initial_value;
    }
    if(name != nullptr) { 
        delete name;
    }
    if(property_id != nullptr) { 
        delete property_id;
    }


    if(schema_id != nullptr) { 
        delete schema_id;
    }
    if(ui_hints != nullptr) { 
        delete ui_hints;
    }
    if(validator != nullptr) { 
        delete validator;
    }
    if(value != nullptr) { 
        delete value;
    }
    if(value_type != nullptr) { 
        delete value_type;
    }
}

OAIBTMetadataPropertyInfo*
OAIBTMetadataPropertyInfo::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIBTMetadataPropertyInfo::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&default_value, pJson["defaultValue"], "OAIObject", "OAIObject");
    
    ::OpenAPI::setValue(&dirty, pJson["dirty"], "bool", "");
    
    ::OpenAPI::setValue(&editable, pJson["editable"], "bool", "");
    
    ::OpenAPI::setValue(&editable_in_ui, pJson["editableInUi"], "bool", "");
    
    
    ::OpenAPI::setValue(&enum_values, pJson["enumValues"], "QList", "OAIBTMetadataEnumValueInfo");
    ::OpenAPI::setValue(&initial_value, pJson["initialValue"], "OAIObject", "OAIObject");
    
    ::OpenAPI::setValue(&name, pJson["name"], "QString", "QString");
    
    ::OpenAPI::setValue(&property_id, pJson["propertyId"], "QString", "QString");
    
    ::OpenAPI::setValue(&property_source, pJson["propertySource"], "qint32", "");
    
    ::OpenAPI::setValue(&required, pJson["required"], "bool", "");
    
    ::OpenAPI::setValue(&schema_id, pJson["schemaId"], "QString", "QString");
    
    ::OpenAPI::setValue(&ui_hints, pJson["uiHints"], "OAIBTMetadataPropertyUiHintsInfo", "OAIBTMetadataPropertyUiHintsInfo");
    
    ::OpenAPI::setValue(&validator, pJson["validator"], "OAIBTMetadataPropertyValidatorInfo", "OAIBTMetadataPropertyValidatorInfo");
    
    ::OpenAPI::setValue(&value, pJson["value"], "OAIObject", "OAIObject");
    
    ::OpenAPI::setValue(&value_type, pJson["valueType"], "QString", "QString");
    
}

QString
OAIBTMetadataPropertyInfo::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIBTMetadataPropertyInfo::asJsonObject() {
    QJsonObject obj;
    if((default_value != nullptr) && (default_value->isSet())){
        toJsonValue(QString("defaultValue"), default_value, obj, QString("OAIObject"));
    }
    if(m_dirty_isSet){
        obj.insert("dirty", QJsonValue(dirty));
    }
    if(m_editable_isSet){
        obj.insert("editable", QJsonValue(editable));
    }
    if(m_editable_in_ui_isSet){
        obj.insert("editableInUi", QJsonValue(editable_in_ui));
    }
    if(enum_values->size() > 0){
        toJsonArray((QList<void*>*)enum_values, obj, "enumValues", "OAIBTMetadataEnumValueInfo");
    }
    if((initial_value != nullptr) && (initial_value->isSet())){
        toJsonValue(QString("initialValue"), initial_value, obj, QString("OAIObject"));
    }
    if(name != nullptr && *name != QString("")){
        toJsonValue(QString("name"), name, obj, QString("QString"));
    }
    if(property_id != nullptr && *property_id != QString("")){
        toJsonValue(QString("propertyId"), property_id, obj, QString("QString"));
    }
    if(m_property_source_isSet){
        obj.insert("propertySource", QJsonValue(property_source));
    }
    if(m_required_isSet){
        obj.insert("required", QJsonValue(required));
    }
    if(schema_id != nullptr && *schema_id != QString("")){
        toJsonValue(QString("schemaId"), schema_id, obj, QString("QString"));
    }
    if((ui_hints != nullptr) && (ui_hints->isSet())){
        toJsonValue(QString("uiHints"), ui_hints, obj, QString("OAIBTMetadataPropertyUiHintsInfo"));
    }
    if((validator != nullptr) && (validator->isSet())){
        toJsonValue(QString("validator"), validator, obj, QString("OAIBTMetadataPropertyValidatorInfo"));
    }
    if((value != nullptr) && (value->isSet())){
        toJsonValue(QString("value"), value, obj, QString("OAIObject"));
    }
    if(value_type != nullptr && *value_type != QString("")){
        toJsonValue(QString("valueType"), value_type, obj, QString("QString"));
    }

    return obj;
}

OAIObject*
OAIBTMetadataPropertyInfo::getDefaultValue() {
    return default_value;
}
void
OAIBTMetadataPropertyInfo::setDefaultValue(OAIObject* default_value) {
    this->default_value = default_value;
    this->m_default_value_isSet = true;
}

bool
OAIBTMetadataPropertyInfo::isDirty() {
    return dirty;
}
void
OAIBTMetadataPropertyInfo::setDirty(bool dirty) {
    this->dirty = dirty;
    this->m_dirty_isSet = true;
}

bool
OAIBTMetadataPropertyInfo::isEditable() {
    return editable;
}
void
OAIBTMetadataPropertyInfo::setEditable(bool editable) {
    this->editable = editable;
    this->m_editable_isSet = true;
}

bool
OAIBTMetadataPropertyInfo::isEditableInUi() {
    return editable_in_ui;
}
void
OAIBTMetadataPropertyInfo::setEditableInUi(bool editable_in_ui) {
    this->editable_in_ui = editable_in_ui;
    this->m_editable_in_ui_isSet = true;
}

QList<OAIBTMetadataEnumValueInfo*>*
OAIBTMetadataPropertyInfo::getEnumValues() {
    return enum_values;
}
void
OAIBTMetadataPropertyInfo::setEnumValues(QList<OAIBTMetadataEnumValueInfo*>* enum_values) {
    this->enum_values = enum_values;
    this->m_enum_values_isSet = true;
}

OAIObject*
OAIBTMetadataPropertyInfo::getInitialValue() {
    return initial_value;
}
void
OAIBTMetadataPropertyInfo::setInitialValue(OAIObject* initial_value) {
    this->initial_value = initial_value;
    this->m_initial_value_isSet = true;
}

QString*
OAIBTMetadataPropertyInfo::getName() {
    return name;
}
void
OAIBTMetadataPropertyInfo::setName(QString* name) {
    this->name = name;
    this->m_name_isSet = true;
}

QString*
OAIBTMetadataPropertyInfo::getPropertyId() {
    return property_id;
}
void
OAIBTMetadataPropertyInfo::setPropertyId(QString* property_id) {
    this->property_id = property_id;
    this->m_property_id_isSet = true;
}

qint32
OAIBTMetadataPropertyInfo::getPropertySource() {
    return property_source;
}
void
OAIBTMetadataPropertyInfo::setPropertySource(qint32 property_source) {
    this->property_source = property_source;
    this->m_property_source_isSet = true;
}

bool
OAIBTMetadataPropertyInfo::isRequired() {
    return required;
}
void
OAIBTMetadataPropertyInfo::setRequired(bool required) {
    this->required = required;
    this->m_required_isSet = true;
}

QString*
OAIBTMetadataPropertyInfo::getSchemaId() {
    return schema_id;
}
void
OAIBTMetadataPropertyInfo::setSchemaId(QString* schema_id) {
    this->schema_id = schema_id;
    this->m_schema_id_isSet = true;
}

OAIBTMetadataPropertyUiHintsInfo*
OAIBTMetadataPropertyInfo::getUiHints() {
    return ui_hints;
}
void
OAIBTMetadataPropertyInfo::setUiHints(OAIBTMetadataPropertyUiHintsInfo* ui_hints) {
    this->ui_hints = ui_hints;
    this->m_ui_hints_isSet = true;
}

OAIBTMetadataPropertyValidatorInfo*
OAIBTMetadataPropertyInfo::getValidator() {
    return validator;
}
void
OAIBTMetadataPropertyInfo::setValidator(OAIBTMetadataPropertyValidatorInfo* validator) {
    this->validator = validator;
    this->m_validator_isSet = true;
}

OAIObject*
OAIBTMetadataPropertyInfo::getValue() {
    return value;
}
void
OAIBTMetadataPropertyInfo::setValue(OAIObject* value) {
    this->value = value;
    this->m_value_isSet = true;
}

QString*
OAIBTMetadataPropertyInfo::getValueType() {
    return value_type;
}
void
OAIBTMetadataPropertyInfo::setValueType(QString* value_type) {
    this->value_type = value_type;
    this->m_value_type_isSet = true;
}


bool
OAIBTMetadataPropertyInfo::isSet(){
    bool isObjectUpdated = false;
    do{
        if(default_value != nullptr && default_value->isSet()){ isObjectUpdated = true; break;}
        if(m_dirty_isSet){ isObjectUpdated = true; break;}
        if(m_editable_isSet){ isObjectUpdated = true; break;}
        if(m_editable_in_ui_isSet){ isObjectUpdated = true; break;}
        if(enum_values->size() > 0){ isObjectUpdated = true; break;}
        if(initial_value != nullptr && initial_value->isSet()){ isObjectUpdated = true; break;}
        if(name != nullptr && *name != QString("")){ isObjectUpdated = true; break;}
        if(property_id != nullptr && *property_id != QString("")){ isObjectUpdated = true; break;}
        if(m_property_source_isSet){ isObjectUpdated = true; break;}
        if(m_required_isSet){ isObjectUpdated = true; break;}
        if(schema_id != nullptr && *schema_id != QString("")){ isObjectUpdated = true; break;}
        if(ui_hints != nullptr && ui_hints->isSet()){ isObjectUpdated = true; break;}
        if(validator != nullptr && validator->isSet()){ isObjectUpdated = true; break;}
        if(value != nullptr && value->isSet()){ isObjectUpdated = true; break;}
        if(value_type != nullptr && *value_type != QString("")){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

