/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * OpenAPI spec version: 1.111
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIBTMoveElementInfo.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIBTMoveElementInfo::OAIBTMoveElementInfo(QString json) {
    init();
    this->fromJson(json);
}

OAIBTMoveElementInfo::OAIBTMoveElementInfo() {
    init();
}

OAIBTMoveElementInfo::~OAIBTMoveElementInfo() {
    this->cleanup();
}

void
OAIBTMoveElementInfo::init() {
    element_original_to_new_map = new QMap<QString, QString*>();
    m_element_original_to_new_map_isSet = false;
    error_message = new QString("");
    m_error_message_isSet = false;
    is_new_document = false;
    m_is_new_document_isSet = false;
    new_document_id = new QString("");
    m_new_document_id_isSet = false;
    new_document_name = new QString("");
    m_new_document_name_isSet = false;
    new_document_version_id = new QString("");
    m_new_document_version_id_isSet = false;
    new_workspace_id = new QString("");
    m_new_workspace_id_isSet = false;
}

void
OAIBTMoveElementInfo::cleanup() {
    if(element_original_to_new_map != nullptr) { 
        auto arr = element_original_to_new_map;
        for(auto o: *arr) { 
            delete o;
        }
        delete element_original_to_new_map;
    }
    if(error_message != nullptr) { 
        delete error_message;
    }

    if(new_document_id != nullptr) { 
        delete new_document_id;
    }
    if(new_document_name != nullptr) { 
        delete new_document_name;
    }
    if(new_document_version_id != nullptr) { 
        delete new_document_version_id;
    }
    if(new_workspace_id != nullptr) { 
        delete new_workspace_id;
    }
}

OAIBTMoveElementInfo*
OAIBTMoveElementInfo::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIBTMoveElementInfo::fromJsonObject(QJsonObject pJson) {
    
    ::OpenAPI::setValue(&element_original_to_new_map, pJson["elementOriginalToNewMap"], "QMap", "QString");
    ::OpenAPI::setValue(&error_message, pJson["errorMessage"], "QString", "QString");
    
    ::OpenAPI::setValue(&is_new_document, pJson["isNewDocument"], "bool", "");
    
    ::OpenAPI::setValue(&new_document_id, pJson["newDocumentId"], "QString", "QString");
    
    ::OpenAPI::setValue(&new_document_name, pJson["newDocumentName"], "QString", "QString");
    
    ::OpenAPI::setValue(&new_document_version_id, pJson["newDocumentVersionId"], "QString", "QString");
    
    ::OpenAPI::setValue(&new_workspace_id, pJson["newWorkspaceId"], "QString", "QString");
    
}

QString
OAIBTMoveElementInfo::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIBTMoveElementInfo::asJsonObject() {
    QJsonObject obj;
    if(element_original_to_new_map->size() > 0){
        toJsonMap((QMap<QString, void*>*) element_original_to_new_map, obj, "elementOriginalToNewMap", "QString");
    }
    if(error_message != nullptr && *error_message != QString("")){
        toJsonValue(QString("errorMessage"), error_message, obj, QString("QString"));
    }
    if(m_is_new_document_isSet){
        obj.insert("isNewDocument", QJsonValue(is_new_document));
    }
    if(new_document_id != nullptr && *new_document_id != QString("")){
        toJsonValue(QString("newDocumentId"), new_document_id, obj, QString("QString"));
    }
    if(new_document_name != nullptr && *new_document_name != QString("")){
        toJsonValue(QString("newDocumentName"), new_document_name, obj, QString("QString"));
    }
    if(new_document_version_id != nullptr && *new_document_version_id != QString("")){
        toJsonValue(QString("newDocumentVersionId"), new_document_version_id, obj, QString("QString"));
    }
    if(new_workspace_id != nullptr && *new_workspace_id != QString("")){
        toJsonValue(QString("newWorkspaceId"), new_workspace_id, obj, QString("QString"));
    }

    return obj;
}

QMap<QString, QString*>*
OAIBTMoveElementInfo::getElementOriginalToNewMap() {
    return element_original_to_new_map;
}
void
OAIBTMoveElementInfo::setElementOriginalToNewMap(QMap<QString, QString*>* element_original_to_new_map) {
    this->element_original_to_new_map = element_original_to_new_map;
    this->m_element_original_to_new_map_isSet = true;
}

QString*
OAIBTMoveElementInfo::getErrorMessage() {
    return error_message;
}
void
OAIBTMoveElementInfo::setErrorMessage(QString* error_message) {
    this->error_message = error_message;
    this->m_error_message_isSet = true;
}

bool
OAIBTMoveElementInfo::isIsNewDocument() {
    return is_new_document;
}
void
OAIBTMoveElementInfo::setIsNewDocument(bool is_new_document) {
    this->is_new_document = is_new_document;
    this->m_is_new_document_isSet = true;
}

QString*
OAIBTMoveElementInfo::getNewDocumentId() {
    return new_document_id;
}
void
OAIBTMoveElementInfo::setNewDocumentId(QString* new_document_id) {
    this->new_document_id = new_document_id;
    this->m_new_document_id_isSet = true;
}

QString*
OAIBTMoveElementInfo::getNewDocumentName() {
    return new_document_name;
}
void
OAIBTMoveElementInfo::setNewDocumentName(QString* new_document_name) {
    this->new_document_name = new_document_name;
    this->m_new_document_name_isSet = true;
}

QString*
OAIBTMoveElementInfo::getNewDocumentVersionId() {
    return new_document_version_id;
}
void
OAIBTMoveElementInfo::setNewDocumentVersionId(QString* new_document_version_id) {
    this->new_document_version_id = new_document_version_id;
    this->m_new_document_version_id_isSet = true;
}

QString*
OAIBTMoveElementInfo::getNewWorkspaceId() {
    return new_workspace_id;
}
void
OAIBTMoveElementInfo::setNewWorkspaceId(QString* new_workspace_id) {
    this->new_workspace_id = new_workspace_id;
    this->m_new_workspace_id_isSet = true;
}


bool
OAIBTMoveElementInfo::isSet(){
    bool isObjectUpdated = false;
    do{
        if(element_original_to_new_map->size() > 0){ isObjectUpdated = true; break;}
        if(error_message != nullptr && *error_message != QString("")){ isObjectUpdated = true; break;}
        if(m_is_new_document_isSet){ isObjectUpdated = true; break;}
        if(new_document_id != nullptr && *new_document_id != QString("")){ isObjectUpdated = true; break;}
        if(new_document_name != nullptr && *new_document_name != QString("")){ isObjectUpdated = true; break;}
        if(new_document_version_id != nullptr && *new_document_version_id != QString("")){ isObjectUpdated = true; break;}
        if(new_workspace_id != nullptr && *new_workspace_id != QString("")){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

