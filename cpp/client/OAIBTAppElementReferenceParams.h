/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * OpenAPI spec version: 1.111
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIBTAppElementReferenceParams.h
 *
 * 
 */

#ifndef OAIBTAppElementReferenceParams_H_
#define OAIBTAppElementReferenceParams_H_

#include <QJsonObject>


#include <QList>
#include <QString>

#include "OAIObject.h"

namespace OpenAPI {

class OAIBTAppElementReferenceParams: public OAIObject {
public:
    OAIBTAppElementReferenceParams();
    OAIBTAppElementReferenceParams(QString json);
    ~OAIBTAppElementReferenceParams();
    void init();
    void cleanup();

    QString asJson () override;
    QJsonObject asJsonObject() override;
    void fromJsonObject(QJsonObject json) override;
    OAIBTAppElementReferenceParams* fromJson(QString jsonString) override;

    bool isHasDocumentMicroversions();
    void setHasDocumentMicroversions(bool has_document_microversions);

    QString* getIdTag();
    void setIdTag(QString* id_tag);

    QString* getIdTagMicroversionId();
    void setIdTagMicroversionId(QString* id_tag_microversion_id);

    bool isIsSketchOnly();
    void setIsSketchOnly(bool is_sketch_only);

    QString* getParentChangeId();
    void setParentChangeId(QString* parent_change_id);

    QString* getPartNumber();
    void setPartNumber(QString* part_number);

    bool isPureSketch();
    void setPureSketch(bool pure_sketch);

    qint32 getReferenceType();
    void setReferenceType(qint32 reference_type);

    bool isReturnError();
    void setReturnError(bool return_error);

    QString* getRevision();
    void setRevision(QString* revision);

    QList<QString*>* getSketchIds();
    void setSketchIds(QList<QString*>* sketch_ids);

    QString* getTargetConfiguration();
    void setTargetConfiguration(QString* target_configuration);

    QString* getTargetDocumentId();
    void setTargetDocumentId(QString* target_document_id);

    QString* getTargetElementId();
    void setTargetElementId(QString* target_element_id);

    QString* getTargetMicroversionId();
    void setTargetMicroversionId(QString* target_microversion_id);

    QString* getTargetVersionId();
    void setTargetVersionId(QString* target_version_id);

    bool isTrackNewVersions();
    void setTrackNewVersions(bool track_new_versions);

    QString* getTransactionId();
    void setTransactionId(QString* transaction_id);

    bool isUpdateSketchInfo();
    void setUpdateSketchInfo(bool update_sketch_info);


    virtual bool isSet() override;

private:
    bool has_document_microversions;
    bool m_has_document_microversions_isSet;

    QString* id_tag;
    bool m_id_tag_isSet;

    QString* id_tag_microversion_id;
    bool m_id_tag_microversion_id_isSet;

    bool is_sketch_only;
    bool m_is_sketch_only_isSet;

    QString* parent_change_id;
    bool m_parent_change_id_isSet;

    QString* part_number;
    bool m_part_number_isSet;

    bool pure_sketch;
    bool m_pure_sketch_isSet;

    qint32 reference_type;
    bool m_reference_type_isSet;

    bool return_error;
    bool m_return_error_isSet;

    QString* revision;
    bool m_revision_isSet;

    QList<QString*>* sketch_ids;
    bool m_sketch_ids_isSet;

    QString* target_configuration;
    bool m_target_configuration_isSet;

    QString* target_document_id;
    bool m_target_document_id_isSet;

    QString* target_element_id;
    bool m_target_element_id_isSet;

    QString* target_microversion_id;
    bool m_target_microversion_id_isSet;

    QString* target_version_id;
    bool m_target_version_id_isSet;

    bool track_new_versions;
    bool m_track_new_versions_isSet;

    QString* transaction_id;
    bool m_transaction_id_isSet;

    bool update_sketch_info;
    bool m_update_sketch_info_isSet;

};

}

#endif /* OAIBTAppElementReferenceParams_H_ */
