/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * OpenAPI spec version: 1.111
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIBTDocumentParams.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIBTDocumentParams::OAIBTDocumentParams(QString json) {
    init();
    this->fromJson(json);
}

OAIBTDocumentParams::OAIBTDocumentParams() {
    init();
}

OAIBTDocumentParams::~OAIBTDocumentParams() {
    this->cleanup();
}

void
OAIBTDocumentParams::init() {
    beta_capability_ids = new QList<QString*>();
    m_beta_capability_ids_isSet = false;
    description = new QString("");
    m_description_isSet = false;
    generate_unknown_messages = false;
    m_generate_unknown_messages_isSet = false;
    is_empty_content = false;
    m_is_empty_content_isSet = false;
    is_public = false;
    m_is_public_isSet = false;
    name = new QString("");
    m_name_isSet = false;
    not_revision_managed = false;
    m_not_revision_managed_isSet = false;
    owner_email = new QString("");
    m_owner_email_isSet = false;
    owner_id = new QString("");
    m_owner_id_isSet = false;
    owner_type = 0;
    m_owner_type_isSet = false;
    parent_id = new QString("");
    m_parent_id_isSet = false;
    project_id = new QString("");
    m_project_id_isSet = false;
    tags = new QList<QString*>();
    m_tags_isSet = false;
}

void
OAIBTDocumentParams::cleanup() {
    if(beta_capability_ids != nullptr) { 
        auto arr = beta_capability_ids;
        for(auto o: *arr) { 
            delete o;
        }
        delete beta_capability_ids;
    }
    if(description != nullptr) { 
        delete description;
    }



    if(name != nullptr) { 
        delete name;
    }

    if(owner_email != nullptr) { 
        delete owner_email;
    }
    if(owner_id != nullptr) { 
        delete owner_id;
    }

    if(parent_id != nullptr) { 
        delete parent_id;
    }
    if(project_id != nullptr) { 
        delete project_id;
    }
    if(tags != nullptr) { 
        auto arr = tags;
        for(auto o: *arr) { 
            delete o;
        }
        delete tags;
    }
}

OAIBTDocumentParams*
OAIBTDocumentParams::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIBTDocumentParams::fromJsonObject(QJsonObject pJson) {
    
    ::OpenAPI::setValue(&beta_capability_ids, pJson["betaCapabilityIds"], "QList", "QString");
    ::OpenAPI::setValue(&description, pJson["description"], "QString", "QString");
    
    ::OpenAPI::setValue(&generate_unknown_messages, pJson["generateUnknownMessages"], "bool", "");
    
    ::OpenAPI::setValue(&is_empty_content, pJson["isEmptyContent"], "bool", "");
    
    ::OpenAPI::setValue(&is_public, pJson["isPublic"], "bool", "");
    
    ::OpenAPI::setValue(&name, pJson["name"], "QString", "QString");
    
    ::OpenAPI::setValue(&not_revision_managed, pJson["notRevisionManaged"], "bool", "");
    
    ::OpenAPI::setValue(&owner_email, pJson["ownerEmail"], "QString", "QString");
    
    ::OpenAPI::setValue(&owner_id, pJson["ownerId"], "QString", "QString");
    
    ::OpenAPI::setValue(&owner_type, pJson["ownerType"], "qint32", "");
    
    ::OpenAPI::setValue(&parent_id, pJson["parentId"], "QString", "QString");
    
    ::OpenAPI::setValue(&project_id, pJson["projectId"], "QString", "QString");
    
    
    ::OpenAPI::setValue(&tags, pJson["tags"], "QList", "QString");
}

QString
OAIBTDocumentParams::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIBTDocumentParams::asJsonObject() {
    QJsonObject obj;
    if(beta_capability_ids->size() > 0){
        toJsonArray((QList<void*>*)beta_capability_ids, obj, "betaCapabilityIds", "QString");
    }
    if(description != nullptr && *description != QString("")){
        toJsonValue(QString("description"), description, obj, QString("QString"));
    }
    if(m_generate_unknown_messages_isSet){
        obj.insert("generateUnknownMessages", QJsonValue(generate_unknown_messages));
    }
    if(m_is_empty_content_isSet){
        obj.insert("isEmptyContent", QJsonValue(is_empty_content));
    }
    if(m_is_public_isSet){
        obj.insert("isPublic", QJsonValue(is_public));
    }
    if(name != nullptr && *name != QString("")){
        toJsonValue(QString("name"), name, obj, QString("QString"));
    }
    if(m_not_revision_managed_isSet){
        obj.insert("notRevisionManaged", QJsonValue(not_revision_managed));
    }
    if(owner_email != nullptr && *owner_email != QString("")){
        toJsonValue(QString("ownerEmail"), owner_email, obj, QString("QString"));
    }
    if(owner_id != nullptr && *owner_id != QString("")){
        toJsonValue(QString("ownerId"), owner_id, obj, QString("QString"));
    }
    if(m_owner_type_isSet){
        obj.insert("ownerType", QJsonValue(owner_type));
    }
    if(parent_id != nullptr && *parent_id != QString("")){
        toJsonValue(QString("parentId"), parent_id, obj, QString("QString"));
    }
    if(project_id != nullptr && *project_id != QString("")){
        toJsonValue(QString("projectId"), project_id, obj, QString("QString"));
    }
    if(tags->size() > 0){
        toJsonArray((QList<void*>*)tags, obj, "tags", "QString");
    }

    return obj;
}

QList<QString*>*
OAIBTDocumentParams::getBetaCapabilityIds() {
    return beta_capability_ids;
}
void
OAIBTDocumentParams::setBetaCapabilityIds(QList<QString*>* beta_capability_ids) {
    this->beta_capability_ids = beta_capability_ids;
    this->m_beta_capability_ids_isSet = true;
}

QString*
OAIBTDocumentParams::getDescription() {
    return description;
}
void
OAIBTDocumentParams::setDescription(QString* description) {
    this->description = description;
    this->m_description_isSet = true;
}

bool
OAIBTDocumentParams::isGenerateUnknownMessages() {
    return generate_unknown_messages;
}
void
OAIBTDocumentParams::setGenerateUnknownMessages(bool generate_unknown_messages) {
    this->generate_unknown_messages = generate_unknown_messages;
    this->m_generate_unknown_messages_isSet = true;
}

bool
OAIBTDocumentParams::isIsEmptyContent() {
    return is_empty_content;
}
void
OAIBTDocumentParams::setIsEmptyContent(bool is_empty_content) {
    this->is_empty_content = is_empty_content;
    this->m_is_empty_content_isSet = true;
}

bool
OAIBTDocumentParams::isIsPublic() {
    return is_public;
}
void
OAIBTDocumentParams::setIsPublic(bool is_public) {
    this->is_public = is_public;
    this->m_is_public_isSet = true;
}

QString*
OAIBTDocumentParams::getName() {
    return name;
}
void
OAIBTDocumentParams::setName(QString* name) {
    this->name = name;
    this->m_name_isSet = true;
}

bool
OAIBTDocumentParams::isNotRevisionManaged() {
    return not_revision_managed;
}
void
OAIBTDocumentParams::setNotRevisionManaged(bool not_revision_managed) {
    this->not_revision_managed = not_revision_managed;
    this->m_not_revision_managed_isSet = true;
}

QString*
OAIBTDocumentParams::getOwnerEmail() {
    return owner_email;
}
void
OAIBTDocumentParams::setOwnerEmail(QString* owner_email) {
    this->owner_email = owner_email;
    this->m_owner_email_isSet = true;
}

QString*
OAIBTDocumentParams::getOwnerId() {
    return owner_id;
}
void
OAIBTDocumentParams::setOwnerId(QString* owner_id) {
    this->owner_id = owner_id;
    this->m_owner_id_isSet = true;
}

qint32
OAIBTDocumentParams::getOwnerType() {
    return owner_type;
}
void
OAIBTDocumentParams::setOwnerType(qint32 owner_type) {
    this->owner_type = owner_type;
    this->m_owner_type_isSet = true;
}

QString*
OAIBTDocumentParams::getParentId() {
    return parent_id;
}
void
OAIBTDocumentParams::setParentId(QString* parent_id) {
    this->parent_id = parent_id;
    this->m_parent_id_isSet = true;
}

QString*
OAIBTDocumentParams::getProjectId() {
    return project_id;
}
void
OAIBTDocumentParams::setProjectId(QString* project_id) {
    this->project_id = project_id;
    this->m_project_id_isSet = true;
}

QList<QString*>*
OAIBTDocumentParams::getTags() {
    return tags;
}
void
OAIBTDocumentParams::setTags(QList<QString*>* tags) {
    this->tags = tags;
    this->m_tags_isSet = true;
}


bool
OAIBTDocumentParams::isSet(){
    bool isObjectUpdated = false;
    do{
        if(beta_capability_ids->size() > 0){ isObjectUpdated = true; break;}
        if(description != nullptr && *description != QString("")){ isObjectUpdated = true; break;}
        if(m_generate_unknown_messages_isSet){ isObjectUpdated = true; break;}
        if(m_is_empty_content_isSet){ isObjectUpdated = true; break;}
        if(m_is_public_isSet){ isObjectUpdated = true; break;}
        if(name != nullptr && *name != QString("")){ isObjectUpdated = true; break;}
        if(m_not_revision_managed_isSet){ isObjectUpdated = true; break;}
        if(owner_email != nullptr && *owner_email != QString("")){ isObjectUpdated = true; break;}
        if(owner_id != nullptr && *owner_id != QString("")){ isObjectUpdated = true; break;}
        if(m_owner_type_isSet){ isObjectUpdated = true; break;}
        if(parent_id != nullptr && *parent_id != QString("")){ isObjectUpdated = true; break;}
        if(project_id != nullptr && *project_id != QString("")){ isObjectUpdated = true; break;}
        if(tags->size() > 0){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

