/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * OpenAPI spec version: 1.111
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIBTAssemblyDefinitionInfo.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIBTAssemblyDefinitionInfo::OAIBTAssemblyDefinitionInfo(QString json) {
    init();
    this->fromJson(json);
}

OAIBTAssemblyDefinitionInfo::OAIBTAssemblyDefinitionInfo() {
    init();
}

OAIBTAssemblyDefinitionInfo::~OAIBTAssemblyDefinitionInfo() {
    this->cleanup();
}

void
OAIBTAssemblyDefinitionInfo::init() {
    part_studio_features = new QList<OAIBTAssemblyPSFeatureInfo*>();
    m_part_studio_features_isSet = false;
    parts = new QList<OAIBTAssemblyPartsInfo*>();
    m_parts_isSet = false;
    root_assembly = new OAIBTRootAssemblyInfo();
    m_root_assembly_isSet = false;
    sub_assemblies = new QList<OAIBTSubAssemblyInfo*>();
    m_sub_assemblies_isSet = false;
}

void
OAIBTAssemblyDefinitionInfo::cleanup() {
    if(part_studio_features != nullptr) { 
        auto arr = part_studio_features;
        for(auto o: *arr) { 
            delete o;
        }
        delete part_studio_features;
    }
    if(parts != nullptr) { 
        auto arr = parts;
        for(auto o: *arr) { 
            delete o;
        }
        delete parts;
    }
    if(root_assembly != nullptr) { 
        delete root_assembly;
    }
    if(sub_assemblies != nullptr) { 
        auto arr = sub_assemblies;
        for(auto o: *arr) { 
            delete o;
        }
        delete sub_assemblies;
    }
}

OAIBTAssemblyDefinitionInfo*
OAIBTAssemblyDefinitionInfo::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIBTAssemblyDefinitionInfo::fromJsonObject(QJsonObject pJson) {
    
    ::OpenAPI::setValue(&part_studio_features, pJson["partStudioFeatures"], "QList", "OAIBTAssemblyPSFeatureInfo");
    
    ::OpenAPI::setValue(&parts, pJson["parts"], "QList", "OAIBTAssemblyPartsInfo");
    ::OpenAPI::setValue(&root_assembly, pJson["rootAssembly"], "OAIBTRootAssemblyInfo", "OAIBTRootAssemblyInfo");
    
    
    ::OpenAPI::setValue(&sub_assemblies, pJson["subAssemblies"], "QList", "OAIBTSubAssemblyInfo");
}

QString
OAIBTAssemblyDefinitionInfo::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIBTAssemblyDefinitionInfo::asJsonObject() {
    QJsonObject obj;
    if(part_studio_features->size() > 0){
        toJsonArray((QList<void*>*)part_studio_features, obj, "partStudioFeatures", "OAIBTAssemblyPSFeatureInfo");
    }
    if(parts->size() > 0){
        toJsonArray((QList<void*>*)parts, obj, "parts", "OAIBTAssemblyPartsInfo");
    }
    if((root_assembly != nullptr) && (root_assembly->isSet())){
        toJsonValue(QString("rootAssembly"), root_assembly, obj, QString("OAIBTRootAssemblyInfo"));
    }
    if(sub_assemblies->size() > 0){
        toJsonArray((QList<void*>*)sub_assemblies, obj, "subAssemblies", "OAIBTSubAssemblyInfo");
    }

    return obj;
}

QList<OAIBTAssemblyPSFeatureInfo*>*
OAIBTAssemblyDefinitionInfo::getPartStudioFeatures() {
    return part_studio_features;
}
void
OAIBTAssemblyDefinitionInfo::setPartStudioFeatures(QList<OAIBTAssemblyPSFeatureInfo*>* part_studio_features) {
    this->part_studio_features = part_studio_features;
    this->m_part_studio_features_isSet = true;
}

QList<OAIBTAssemblyPartsInfo*>*
OAIBTAssemblyDefinitionInfo::getParts() {
    return parts;
}
void
OAIBTAssemblyDefinitionInfo::setParts(QList<OAIBTAssemblyPartsInfo*>* parts) {
    this->parts = parts;
    this->m_parts_isSet = true;
}

OAIBTRootAssemblyInfo*
OAIBTAssemblyDefinitionInfo::getRootAssembly() {
    return root_assembly;
}
void
OAIBTAssemblyDefinitionInfo::setRootAssembly(OAIBTRootAssemblyInfo* root_assembly) {
    this->root_assembly = root_assembly;
    this->m_root_assembly_isSet = true;
}

QList<OAIBTSubAssemblyInfo*>*
OAIBTAssemblyDefinitionInfo::getSubAssemblies() {
    return sub_assemblies;
}
void
OAIBTAssemblyDefinitionInfo::setSubAssemblies(QList<OAIBTSubAssemblyInfo*>* sub_assemblies) {
    this->sub_assemblies = sub_assemblies;
    this->m_sub_assemblies_isSet = true;
}


bool
OAIBTAssemblyDefinitionInfo::isSet(){
    bool isObjectUpdated = false;
    do{
        if(part_studio_features->size() > 0){ isObjectUpdated = true; break;}
        if(parts->size() > 0){ isObjectUpdated = true; break;}
        if(root_assembly != nullptr && root_assembly->isSet()){ isObjectUpdated = true; break;}
        if(sub_assemblies->size() > 0){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

