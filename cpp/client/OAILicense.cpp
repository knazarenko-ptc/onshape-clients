/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * OpenAPI spec version: 1.111
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAILicense.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAILicense::OAILicense(QString json) {
    init();
    this->fromJson(json);
}

OAILicense::OAILicense() {
    init();
}

OAILicense::~OAILicense() {
    this->cleanup();
}

void
OAILicense::init() {
    extensions = new QMap<QString, OAIObject*>();
    m_extensions_isSet = false;
    name = new QString("");
    m_name_isSet = false;
    url = new QString("");
    m_url_isSet = false;
}

void
OAILicense::cleanup() {
    if(extensions != nullptr) { 
        auto arr = extensions;
        for(auto o: *arr) { 
            delete o;
        }
        delete extensions;
    }
    if(name != nullptr) { 
        delete name;
    }
    if(url != nullptr) { 
        delete url;
    }
}

OAILicense*
OAILicense::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAILicense::fromJsonObject(QJsonObject pJson) {
    
    ::OpenAPI::setValue(&extensions, pJson["extensions"], "QMap", "OAIObject");
    ::OpenAPI::setValue(&name, pJson["name"], "QString", "QString");
    
    ::OpenAPI::setValue(&url, pJson["url"], "QString", "QString");
    
}

QString
OAILicense::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAILicense::asJsonObject() {
    QJsonObject obj;
    if(extensions->size() > 0){
        toJsonMap((QMap<QString, void*>*) extensions, obj, "extensions", "OAIObject");
    }
    if(name != nullptr && *name != QString("")){
        toJsonValue(QString("name"), name, obj, QString("QString"));
    }
    if(url != nullptr && *url != QString("")){
        toJsonValue(QString("url"), url, obj, QString("QString"));
    }

    return obj;
}

QMap<QString, OAIObject*>*
OAILicense::getExtensions() {
    return extensions;
}
void
OAILicense::setExtensions(QMap<QString, OAIObject*>* extensions) {
    this->extensions = extensions;
    this->m_extensions_isSet = true;
}

QString*
OAILicense::getName() {
    return name;
}
void
OAILicense::setName(QString* name) {
    this->name = name;
    this->m_name_isSet = true;
}

QString*
OAILicense::getUrl() {
    return url;
}
void
OAILicense::setUrl(QString* url) {
    this->url = url;
    this->m_url_isSet = true;
}


bool
OAILicense::isSet(){
    bool isObjectUpdated = false;
    do{
        if(extensions->size() > 0){ isObjectUpdated = true; break;}
        if(name != nullptr && *name != QString("")){ isObjectUpdated = true; break;}
        if(url != nullptr && *url != QString("")){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

