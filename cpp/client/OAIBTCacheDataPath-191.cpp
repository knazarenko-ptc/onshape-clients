/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * OpenAPI spec version: 1.111
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIBTCacheDataPath-191.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIBTCacheDataPath-191::OAIBTCacheDataPath-191(QString json) {
    init();
    this->fromJson(json);
}

OAIBTCacheDataPath-191::OAIBTCacheDataPath-191() {
    init();
}

OAIBTCacheDataPath-191::~OAIBTCacheDataPath-191() {
    this->cleanup();
}

void
OAIBTCacheDataPath-191::init() {
    bt_type = new QString("");
    m_bt_type_isSet = false;
    document_id = new QString("");
    m_document_id_isSet = false;
    element_id = new QString("");
    m_element_id_isSet = false;
    expire_secs = new QString("");
    m_expire_secs_isSet = false;
    full_file_path = new QString("");
    m_full_file_path_isSet = false;
    is_persisted = false;
    m_is_persisted_isSet = false;
    key = new QString("");
    m_key_isSet = false;
    url_path = new QString("");
    m_url_path_isSet = false;
    use_local_file_cache = false;
    m_use_local_file_cache_isSet = false;
}

void
OAIBTCacheDataPath-191::cleanup() {
    if(bt_type != nullptr) { 
        delete bt_type;
    }
    if(document_id != nullptr) { 
        delete document_id;
    }
    if(element_id != nullptr) { 
        delete element_id;
    }
    if(expire_secs != nullptr) { 
        delete expire_secs;
    }
    if(full_file_path != nullptr) { 
        delete full_file_path;
    }

    if(key != nullptr) { 
        delete key;
    }
    if(url_path != nullptr) { 
        delete url_path;
    }

}

OAIBTCacheDataPath-191*
OAIBTCacheDataPath-191::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIBTCacheDataPath-191::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&bt_type, pJson["btType"], "QString", "QString");
    
    ::OpenAPI::setValue(&document_id, pJson["documentId"], "QString", "QString");
    
    ::OpenAPI::setValue(&element_id, pJson["elementId"], "QString", "QString");
    
    ::OpenAPI::setValue(&expire_secs, pJson["expireSecs"], "QString", "QString");
    
    ::OpenAPI::setValue(&full_file_path, pJson["fullFilePath"], "QString", "QString");
    
    ::OpenAPI::setValue(&is_persisted, pJson["isPersisted"], "bool", "");
    
    ::OpenAPI::setValue(&key, pJson["key"], "QString", "QString");
    
    ::OpenAPI::setValue(&url_path, pJson["urlPath"], "QString", "QString");
    
    ::OpenAPI::setValue(&use_local_file_cache, pJson["useLocalFileCache"], "bool", "");
    
}

QString
OAIBTCacheDataPath-191::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIBTCacheDataPath-191::asJsonObject() {
    QJsonObject obj;
    if(bt_type != nullptr && *bt_type != QString("")){
        toJsonValue(QString("btType"), bt_type, obj, QString("QString"));
    }
    if(document_id != nullptr && *document_id != QString("")){
        toJsonValue(QString("documentId"), document_id, obj, QString("QString"));
    }
    if(element_id != nullptr && *element_id != QString("")){
        toJsonValue(QString("elementId"), element_id, obj, QString("QString"));
    }
    if(expire_secs != nullptr && *expire_secs != QString("")){
        toJsonValue(QString("expireSecs"), expire_secs, obj, QString("QString"));
    }
    if(full_file_path != nullptr && *full_file_path != QString("")){
        toJsonValue(QString("fullFilePath"), full_file_path, obj, QString("QString"));
    }
    if(m_is_persisted_isSet){
        obj.insert("isPersisted", QJsonValue(is_persisted));
    }
    if(key != nullptr && *key != QString("")){
        toJsonValue(QString("key"), key, obj, QString("QString"));
    }
    if(url_path != nullptr && *url_path != QString("")){
        toJsonValue(QString("urlPath"), url_path, obj, QString("QString"));
    }
    if(m_use_local_file_cache_isSet){
        obj.insert("useLocalFileCache", QJsonValue(use_local_file_cache));
    }

    return obj;
}

QString*
OAIBTCacheDataPath-191::getBtType() {
    return bt_type;
}
void
OAIBTCacheDataPath-191::setBtType(QString* bt_type) {
    this->bt_type = bt_type;
    this->m_bt_type_isSet = true;
}

QString*
OAIBTCacheDataPath-191::getDocumentId() {
    return document_id;
}
void
OAIBTCacheDataPath-191::setDocumentId(QString* document_id) {
    this->document_id = document_id;
    this->m_document_id_isSet = true;
}

QString*
OAIBTCacheDataPath-191::getElementId() {
    return element_id;
}
void
OAIBTCacheDataPath-191::setElementId(QString* element_id) {
    this->element_id = element_id;
    this->m_element_id_isSet = true;
}

QString*
OAIBTCacheDataPath-191::getExpireSecs() {
    return expire_secs;
}
void
OAIBTCacheDataPath-191::setExpireSecs(QString* expire_secs) {
    this->expire_secs = expire_secs;
    this->m_expire_secs_isSet = true;
}

QString*
OAIBTCacheDataPath-191::getFullFilePath() {
    return full_file_path;
}
void
OAIBTCacheDataPath-191::setFullFilePath(QString* full_file_path) {
    this->full_file_path = full_file_path;
    this->m_full_file_path_isSet = true;
}

bool
OAIBTCacheDataPath-191::isIsPersisted() {
    return is_persisted;
}
void
OAIBTCacheDataPath-191::setIsPersisted(bool is_persisted) {
    this->is_persisted = is_persisted;
    this->m_is_persisted_isSet = true;
}

QString*
OAIBTCacheDataPath-191::getKey() {
    return key;
}
void
OAIBTCacheDataPath-191::setKey(QString* key) {
    this->key = key;
    this->m_key_isSet = true;
}

QString*
OAIBTCacheDataPath-191::getUrlPath() {
    return url_path;
}
void
OAIBTCacheDataPath-191::setUrlPath(QString* url_path) {
    this->url_path = url_path;
    this->m_url_path_isSet = true;
}

bool
OAIBTCacheDataPath-191::isUseLocalFileCache() {
    return use_local_file_cache;
}
void
OAIBTCacheDataPath-191::setUseLocalFileCache(bool use_local_file_cache) {
    this->use_local_file_cache = use_local_file_cache;
    this->m_use_local_file_cache_isSet = true;
}


bool
OAIBTCacheDataPath-191::isSet(){
    bool isObjectUpdated = false;
    do{
        if(bt_type != nullptr && *bt_type != QString("")){ isObjectUpdated = true; break;}
        if(document_id != nullptr && *document_id != QString("")){ isObjectUpdated = true; break;}
        if(element_id != nullptr && *element_id != QString("")){ isObjectUpdated = true; break;}
        if(expire_secs != nullptr && *expire_secs != QString("")){ isObjectUpdated = true; break;}
        if(full_file_path != nullptr && *full_file_path != QString("")){ isObjectUpdated = true; break;}
        if(m_is_persisted_isSet){ isObjectUpdated = true; break;}
        if(key != nullptr && *key != QString("")){ isObjectUpdated = true; break;}
        if(url_path != nullptr && *url_path != QString("")){ isObjectUpdated = true; break;}
        if(m_use_local_file_cache_isSet){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

