/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * OpenAPI spec version: 1.111
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIBTViewManipulationMouseKeyMappingInfo.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIBTViewManipulationMouseKeyMappingInfo::OAIBTViewManipulationMouseKeyMappingInfo(QString json) {
    init();
    this->fromJson(json);
}

OAIBTViewManipulationMouseKeyMappingInfo::OAIBTViewManipulationMouseKeyMappingInfo() {
    init();
}

OAIBTViewManipulationMouseKeyMappingInfo::~OAIBTViewManipulationMouseKeyMappingInfo() {
    this->cleanup();
}

void
OAIBTViewManipulationMouseKeyMappingInfo::init() {
    axis_rotate3_d_mapping = new QList<OAIBTKeyMouseValuesInfo*>();
    m_axis_rotate3_d_mapping_isSet = false;
    pan2_d_mapping = new QList<OAIBTKeyMouseValuesInfo*>();
    m_pan2_d_mapping_isSet = false;
    pan3_d_mapping = new QList<OAIBTKeyMouseValuesInfo*>();
    m_pan3_d_mapping_isSet = false;
    rotate3_d_mapping = new QList<OAIBTKeyMouseValuesInfo*>();
    m_rotate3_d_mapping_isSet = false;
    zoom2_d_mapping = new QList<OAIBTKeyMouseValuesInfo*>();
    m_zoom2_d_mapping_isSet = false;
    zoom3_d_mapping = new QList<OAIBTKeyMouseValuesInfo*>();
    m_zoom3_d_mapping_isSet = false;
}

void
OAIBTViewManipulationMouseKeyMappingInfo::cleanup() {
    if(axis_rotate3_d_mapping != nullptr) { 
        auto arr = axis_rotate3_d_mapping;
        for(auto o: *arr) { 
            delete o;
        }
        delete axis_rotate3_d_mapping;
    }
    if(pan2_d_mapping != nullptr) { 
        auto arr = pan2_d_mapping;
        for(auto o: *arr) { 
            delete o;
        }
        delete pan2_d_mapping;
    }
    if(pan3_d_mapping != nullptr) { 
        auto arr = pan3_d_mapping;
        for(auto o: *arr) { 
            delete o;
        }
        delete pan3_d_mapping;
    }
    if(rotate3_d_mapping != nullptr) { 
        auto arr = rotate3_d_mapping;
        for(auto o: *arr) { 
            delete o;
        }
        delete rotate3_d_mapping;
    }
    if(zoom2_d_mapping != nullptr) { 
        auto arr = zoom2_d_mapping;
        for(auto o: *arr) { 
            delete o;
        }
        delete zoom2_d_mapping;
    }
    if(zoom3_d_mapping != nullptr) { 
        auto arr = zoom3_d_mapping;
        for(auto o: *arr) { 
            delete o;
        }
        delete zoom3_d_mapping;
    }
}

OAIBTViewManipulationMouseKeyMappingInfo*
OAIBTViewManipulationMouseKeyMappingInfo::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIBTViewManipulationMouseKeyMappingInfo::fromJsonObject(QJsonObject pJson) {
    
    ::OpenAPI::setValue(&axis_rotate3_d_mapping, pJson["axisRotate3DMapping"], "QList", "OAIBTKeyMouseValuesInfo");
    
    ::OpenAPI::setValue(&pan2_d_mapping, pJson["pan2DMapping"], "QList", "OAIBTKeyMouseValuesInfo");
    
    ::OpenAPI::setValue(&pan3_d_mapping, pJson["pan3DMapping"], "QList", "OAIBTKeyMouseValuesInfo");
    
    ::OpenAPI::setValue(&rotate3_d_mapping, pJson["rotate3DMapping"], "QList", "OAIBTKeyMouseValuesInfo");
    
    ::OpenAPI::setValue(&zoom2_d_mapping, pJson["zoom2DMapping"], "QList", "OAIBTKeyMouseValuesInfo");
    
    ::OpenAPI::setValue(&zoom3_d_mapping, pJson["zoom3DMapping"], "QList", "OAIBTKeyMouseValuesInfo");
}

QString
OAIBTViewManipulationMouseKeyMappingInfo::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIBTViewManipulationMouseKeyMappingInfo::asJsonObject() {
    QJsonObject obj;
    if(axis_rotate3_d_mapping->size() > 0){
        toJsonArray((QList<void*>*)axis_rotate3_d_mapping, obj, "axisRotate3DMapping", "OAIBTKeyMouseValuesInfo");
    }
    if(pan2_d_mapping->size() > 0){
        toJsonArray((QList<void*>*)pan2_d_mapping, obj, "pan2DMapping", "OAIBTKeyMouseValuesInfo");
    }
    if(pan3_d_mapping->size() > 0){
        toJsonArray((QList<void*>*)pan3_d_mapping, obj, "pan3DMapping", "OAIBTKeyMouseValuesInfo");
    }
    if(rotate3_d_mapping->size() > 0){
        toJsonArray((QList<void*>*)rotate3_d_mapping, obj, "rotate3DMapping", "OAIBTKeyMouseValuesInfo");
    }
    if(zoom2_d_mapping->size() > 0){
        toJsonArray((QList<void*>*)zoom2_d_mapping, obj, "zoom2DMapping", "OAIBTKeyMouseValuesInfo");
    }
    if(zoom3_d_mapping->size() > 0){
        toJsonArray((QList<void*>*)zoom3_d_mapping, obj, "zoom3DMapping", "OAIBTKeyMouseValuesInfo");
    }

    return obj;
}

QList<OAIBTKeyMouseValuesInfo*>*
OAIBTViewManipulationMouseKeyMappingInfo::getAxisRotate3DMapping() {
    return axis_rotate3_d_mapping;
}
void
OAIBTViewManipulationMouseKeyMappingInfo::setAxisRotate3DMapping(QList<OAIBTKeyMouseValuesInfo*>* axis_rotate3_d_mapping) {
    this->axis_rotate3_d_mapping = axis_rotate3_d_mapping;
    this->m_axis_rotate3_d_mapping_isSet = true;
}

QList<OAIBTKeyMouseValuesInfo*>*
OAIBTViewManipulationMouseKeyMappingInfo::getPan2DMapping() {
    return pan2_d_mapping;
}
void
OAIBTViewManipulationMouseKeyMappingInfo::setPan2DMapping(QList<OAIBTKeyMouseValuesInfo*>* pan2_d_mapping) {
    this->pan2_d_mapping = pan2_d_mapping;
    this->m_pan2_d_mapping_isSet = true;
}

QList<OAIBTKeyMouseValuesInfo*>*
OAIBTViewManipulationMouseKeyMappingInfo::getPan3DMapping() {
    return pan3_d_mapping;
}
void
OAIBTViewManipulationMouseKeyMappingInfo::setPan3DMapping(QList<OAIBTKeyMouseValuesInfo*>* pan3_d_mapping) {
    this->pan3_d_mapping = pan3_d_mapping;
    this->m_pan3_d_mapping_isSet = true;
}

QList<OAIBTKeyMouseValuesInfo*>*
OAIBTViewManipulationMouseKeyMappingInfo::getRotate3DMapping() {
    return rotate3_d_mapping;
}
void
OAIBTViewManipulationMouseKeyMappingInfo::setRotate3DMapping(QList<OAIBTKeyMouseValuesInfo*>* rotate3_d_mapping) {
    this->rotate3_d_mapping = rotate3_d_mapping;
    this->m_rotate3_d_mapping_isSet = true;
}

QList<OAIBTKeyMouseValuesInfo*>*
OAIBTViewManipulationMouseKeyMappingInfo::getZoom2DMapping() {
    return zoom2_d_mapping;
}
void
OAIBTViewManipulationMouseKeyMappingInfo::setZoom2DMapping(QList<OAIBTKeyMouseValuesInfo*>* zoom2_d_mapping) {
    this->zoom2_d_mapping = zoom2_d_mapping;
    this->m_zoom2_d_mapping_isSet = true;
}

QList<OAIBTKeyMouseValuesInfo*>*
OAIBTViewManipulationMouseKeyMappingInfo::getZoom3DMapping() {
    return zoom3_d_mapping;
}
void
OAIBTViewManipulationMouseKeyMappingInfo::setZoom3DMapping(QList<OAIBTKeyMouseValuesInfo*>* zoom3_d_mapping) {
    this->zoom3_d_mapping = zoom3_d_mapping;
    this->m_zoom3_d_mapping_isSet = true;
}


bool
OAIBTViewManipulationMouseKeyMappingInfo::isSet(){
    bool isObjectUpdated = false;
    do{
        if(axis_rotate3_d_mapping->size() > 0){ isObjectUpdated = true; break;}
        if(pan2_d_mapping->size() > 0){ isObjectUpdated = true; break;}
        if(pan3_d_mapping->size() > 0){ isObjectUpdated = true; break;}
        if(rotate3_d_mapping->size() > 0){ isObjectUpdated = true; break;}
        if(zoom2_d_mapping->size() > 0){ isObjectUpdated = true; break;}
        if(zoom3_d_mapping->size() > 0){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

