/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * OpenAPI spec version: 1.111
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIElementsApi.h"
#include "OAIHelpers.h"
#include "OAIModelFactory.h"
#include "OAIQObjectWrapper.h"

#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAIElementsApi::OAIElementsApi() {}

OAIElementsApi::~OAIElementsApi() {}

OAIElementsApi::OAIElementsApi(QString host, QString basePath) {
    this->host = host;
    this->basePath = basePath;
}

void
OAIElementsApi::copyElementFromSourceDocument(QString* did, QString* wid, OAIBTCopyElementParams& oaibt_copy_element_params) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/api/elements/copyelement/{did}/workspace/{wid}");

    QString didPathParam("{"); didPathParam.append("did").append("}");
    fullPath.replace(didPathParam, stringValue(did));
    QString widPathParam("{"); widPathParam.append("wid").append("}");
    fullPath.replace(widPathParam, stringValue(wid));


    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "POST");


    
    QString output = oaibt_copy_element_params.asJson();
    input.request_body.append(output);
    


    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIElementsApi::copyElementFromSourceDocumentCallback);

    worker->execute(&input);
}

void
OAIElementsApi::copyElementFromSourceDocumentCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QString json(worker->response);
    OAIBTDocumentElementInfo* output = static_cast<OAIBTDocumentElementInfo*>(create(json, QString("OAIBTDocumentElementInfo")));
    auto wrapper = new OAIQObjectWrapper<OAIBTDocumentElementInfo*> (output);
    wrapper->deleteLater();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit copyElementFromSourceDocumentSignal(output);
    } else {
        emit copyElementFromSourceDocumentSignalE(output, error_type, error_str);
        emit copyElementFromSourceDocumentSignalEFull(worker, error_type, error_str);
    }
}

void
OAIElementsApi::decodeConfiguration(QString* did, QString* wvm, QString* wvmid, QString* eid, QString* cid, QString* link_document_id, bool include_display, bool configuration_is_id) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/api/elements/d/{did}/{wvm}/{wvmid}/e/{eid}/configurationencodings/{cid}");

    QString didPathParam("{"); didPathParam.append("did").append("}");
    fullPath.replace(didPathParam, stringValue(did));
    QString wvmPathParam("{"); wvmPathParam.append("wvm").append("}");
    fullPath.replace(wvmPathParam, stringValue(wvm));
    QString wvmidPathParam("{"); wvmidPathParam.append("wvmid").append("}");
    fullPath.replace(wvmidPathParam, stringValue(wvmid));
    QString eidPathParam("{"); eidPathParam.append("eid").append("}");
    fullPath.replace(eidPathParam, stringValue(eid));
    QString cidPathParam("{"); cidPathParam.append("cid").append("}");
    fullPath.replace(cidPathParam, stringValue(cid));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("linkDocumentId"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(link_document_id)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("includeDisplay"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(include_display)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("configurationIsId"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(configuration_is_id)));


    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIElementsApi::decodeConfigurationCallback);

    worker->execute(&input);
}

void
OAIElementsApi::decodeConfigurationCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QString json(worker->response);
    OAIBTConfigurationInfo* output = static_cast<OAIBTConfigurationInfo*>(create(json, QString("OAIBTConfigurationInfo")));
    auto wrapper = new OAIQObjectWrapper<OAIBTConfigurationInfo*> (output);
    wrapper->deleteLater();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit decodeConfigurationSignal(output);
    } else {
        emit decodeConfigurationSignalE(output, error_type, error_str);
        emit decodeConfigurationSignalEFull(worker, error_type, error_str);
    }
}

void
OAIElementsApi::deleteElement(QString* did, QString* wid, QString* eid) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/api/elements/d/{did}/w/{wid}/e/{eid}");

    QString didPathParam("{"); didPathParam.append("did").append("}");
    fullPath.replace(didPathParam, stringValue(did));
    QString widPathParam("{"); widPathParam.append("wid").append("}");
    fullPath.replace(widPathParam, stringValue(wid));
    QString eidPathParam("{"); eidPathParam.append("eid").append("}");
    fullPath.replace(eidPathParam, stringValue(eid));


    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "DELETE");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIElementsApi::deleteElementCallback);

    worker->execute(&input);
}

void
OAIElementsApi::deleteElementCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit deleteElementSignal();
    } else {
        emit deleteElementSignalE(error_type, error_str);
        emit deleteElementSignalEFull(worker, error_type, error_str);
    }
}

void
OAIElementsApi::encodeConfigurationMap(QString* did, QString* eid, OAIBTConfigurationParams& oaibt_configuration_params, QString* version_id, QString* link_document_id) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/api/elements/d/{did}/e/{eid}/configurationencodings");

    QString didPathParam("{"); didPathParam.append("did").append("}");
    fullPath.replace(didPathParam, stringValue(did));
    QString eidPathParam("{"); eidPathParam.append("eid").append("}");
    fullPath.replace(eidPathParam, stringValue(eid));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("versionId"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(version_id)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("linkDocumentId"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(link_document_id)));


    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "POST");


    
    QString output = oaibt_configuration_params.asJson();
    input.request_body.append(output);
    


    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIElementsApi::encodeConfigurationMapCallback);

    worker->execute(&input);
}

void
OAIElementsApi::encodeConfigurationMapCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QString json(worker->response);
    OAIBTEncodedConfigurationInfo* output = static_cast<OAIBTEncodedConfigurationInfo*>(create(json, QString("OAIBTEncodedConfigurationInfo")));
    auto wrapper = new OAIQObjectWrapper<OAIBTEncodedConfigurationInfo*> (output);
    wrapper->deleteLater();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit encodeConfigurationMapSignal(output);
    } else {
        emit encodeConfigurationMapSignalE(output, error_type, error_str);
        emit encodeConfigurationMapSignalEFull(worker, error_type, error_str);
    }
}

void
OAIElementsApi::getConfiguration(QString* did, QString* wvm, QString* wvmid, QString* eid) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/api/elements/d/{did}/{wvm}/{wvmid}/e/{eid}/configuration");

    QString didPathParam("{"); didPathParam.append("did").append("}");
    fullPath.replace(didPathParam, stringValue(did));
    QString wvmPathParam("{"); wvmPathParam.append("wvm").append("}");
    fullPath.replace(wvmPathParam, stringValue(wvm));
    QString wvmidPathParam("{"); wvmidPathParam.append("wvmid").append("}");
    fullPath.replace(wvmidPathParam, stringValue(wvmid));
    QString eidPathParam("{"); eidPathParam.append("eid").append("}");
    fullPath.replace(eidPathParam, stringValue(eid));


    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIElementsApi::getConfigurationCallback);

    worker->execute(&input);
}

void
OAIElementsApi::getConfigurationCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QString json(worker->response);
    OAIBTConfigurationInfo* output = static_cast<OAIBTConfigurationInfo*>(create(json, QString("OAIBTConfigurationInfo")));
    auto wrapper = new OAIQObjectWrapper<OAIBTConfigurationInfo*> (output);
    wrapper->deleteLater();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit getConfigurationSignal(output);
    } else {
        emit getConfigurationSignalE(output, error_type, error_str);
        emit getConfigurationSignalEFull(worker, error_type, error_str);
    }
}

void
OAIElementsApi::getElementTranslatorFormatsByVersionOrWorkspace(QString* did, QString* wv, QString* wvid, QString* eid, bool check_content, QString* configuration) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/api/elements/translatorFormats/{did}/{wv}/{wvid}/{eid}");

    QString didPathParam("{"); didPathParam.append("did").append("}");
    fullPath.replace(didPathParam, stringValue(did));
    QString wvPathParam("{"); wvPathParam.append("wv").append("}");
    fullPath.replace(wvPathParam, stringValue(wv));
    QString wvidPathParam("{"); wvidPathParam.append("wvid").append("}");
    fullPath.replace(wvidPathParam, stringValue(wvid));
    QString eidPathParam("{"); eidPathParam.append("eid").append("}");
    fullPath.replace(eidPathParam, stringValue(eid));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("checkContent"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(check_content)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("configuration"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(configuration)));


    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIElementsApi::getElementTranslatorFormatsByVersionOrWorkspaceCallback);

    worker->execute(&input);
}

void
OAIElementsApi::getElementTranslatorFormatsByVersionOrWorkspaceCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QList<OAIBTModelFormatInfo*>* output = new QList<OAIBTModelFormatInfo*>();
    QString json(worker->response);
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    auto wrapper = new OAIQObjectWrapper<QList<OAIBTModelFormatInfo*>*> (output);
    wrapper->deleteLater();
    foreach(QJsonValue obj, jsonArray) {
        OAIBTModelFormatInfo* o = new OAIBTModelFormatInfo();
        QJsonObject jv = obj.toObject();
        QJsonObject * ptr = (QJsonObject*)&jv;
        o->fromJsonObject(*ptr);
        auto objwrapper = new OAIQObjectWrapper<OAIBTModelFormatInfo*> (o);
        objwrapper->deleteLater();
        output->append(o);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit getElementTranslatorFormatsByVersionOrWorkspaceSignal(output);
    } else {
        emit getElementTranslatorFormatsByVersionOrWorkspaceSignalE(output, error_type, error_str);
        emit getElementTranslatorFormatsByVersionOrWorkspaceSignalEFull(worker, error_type, error_str);
    }
}

void
OAIElementsApi::updateConfiguration(QString* did, QString* wvm, QString* wvmid, QString* eid, QString*& body) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/api/elements/d/{did}/{wvm}/{wvmid}/e/{eid}/configuration");

    QString didPathParam("{"); didPathParam.append("did").append("}");
    fullPath.replace(didPathParam, stringValue(did));
    QString wvmPathParam("{"); wvmPathParam.append("wvm").append("}");
    fullPath.replace(wvmPathParam, stringValue(wvm));
    QString wvmidPathParam("{"); wvmidPathParam.append("wvmid").append("}");
    fullPath.replace(wvmidPathParam, stringValue(wvmid));
    QString eidPathParam("{"); eidPathParam.append("eid").append("}");
    fullPath.replace(eidPathParam, stringValue(eid));


    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "POST");


    
    QString output(*body);
    input.request_body.append(output);
    


    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIElementsApi::updateConfigurationCallback);

    worker->execute(&input);
}

void
OAIElementsApi::updateConfigurationCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QString json(worker->response);
    OAIBTConfigurationInfo* output = static_cast<OAIBTConfigurationInfo*>(create(json, QString("OAIBTConfigurationInfo")));
    auto wrapper = new OAIQObjectWrapper<OAIBTConfigurationInfo*> (output);
    wrapper->deleteLater();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit updateConfigurationSignal(output);
    } else {
        emit updateConfigurationSignalE(output, error_type, error_str);
        emit updateConfigurationSignalEFull(worker, error_type, error_str);
    }
}

void
OAIElementsApi::updateReferences(QString* did, QString* wid, QString* eid, OAIBTUpdateReferenceParams& oaibt_update_reference_params) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/api/elements/d/{did}/w/{wid}/e/{eid}/updatereferences");

    QString didPathParam("{"); didPathParam.append("did").append("}");
    fullPath.replace(didPathParam, stringValue(did));
    QString widPathParam("{"); widPathParam.append("wid").append("}");
    fullPath.replace(widPathParam, stringValue(wid));
    QString eidPathParam("{"); eidPathParam.append("eid").append("}");
    fullPath.replace(eidPathParam, stringValue(eid));


    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "POST");


    
    QString output = oaibt_update_reference_params.asJson();
    input.request_body.append(output);
    


    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIElementsApi::updateReferencesCallback);

    worker->execute(&input);
}

void
OAIElementsApi::updateReferencesCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit updateReferencesSignal();
    } else {
        emit updateReferencesSignalE(error_type, error_str);
        emit updateReferencesSignalEFull(worker, error_type, error_str);
    }
}


}
