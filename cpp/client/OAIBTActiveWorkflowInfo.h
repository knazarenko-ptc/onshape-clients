/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * OpenAPI spec version: 1.111
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIBTActiveWorkflowInfo.h
 *
 * 
 */

#ifndef OAIBTActiveWorkflowInfo_H_
#define OAIBTActiveWorkflowInfo_H_

#include <QJsonObject>


#include "OAIBTPublishedWorkflowInfo.h"
#include <QList>
#include <QString>

#include "OAIObject.h"

namespace OpenAPI {

class OAIBTActiveWorkflowInfo: public OAIObject {
public:
    OAIBTActiveWorkflowInfo();
    OAIBTActiveWorkflowInfo(QString json);
    ~OAIBTActiveWorkflowInfo();
    void init();
    void cleanup();

    QString asJson () override;
    QJsonObject asJsonObject() override;
    void fromJsonObject(QJsonObject json) override;
    OAIBTActiveWorkflowInfo* fromJson(QString jsonString) override;

    bool isCanCreateReleases();
    void setCanCreateReleases(bool can_create_releases);

    bool isCanCurrentUserCreateReleases();
    void setCanCurrentUserCreateReleases(bool can_current_user_create_releases);

    QString* getCompanyId();
    void setCompanyId(QString* company_id);

    QString* getDocumentId();
    void setDocumentId(QString* document_id);

    bool isDrawingCanDuplicatePartNumber();
    void setDrawingCanDuplicatePartNumber(bool drawing_can_duplicate_part_number);

    bool isEnabledActiveMultipleWorkflows();
    void setEnabledActiveMultipleWorkflows(bool enabled_active_multiple_workflows);

    OAIBTPublishedWorkflowInfo* getObsoletionWorkflow();
    void setObsoletionWorkflow(OAIBTPublishedWorkflowInfo* obsoletion_workflow);

    QString* getObsoletionWorkflowId();
    void setObsoletionWorkflowId(QString* obsoletion_workflow_id);

    QList<OAIBTPublishedWorkflowInfo*>* getPickableWorkflows();
    void setPickableWorkflows(QList<OAIBTPublishedWorkflowInfo*>* pickable_workflows);

    OAIBTPublishedWorkflowInfo* getReleaseWorkflow();
    void setReleaseWorkflow(OAIBTPublishedWorkflowInfo* release_workflow);

    QString* getReleaseWorkflowId();
    void setReleaseWorkflowId(QString* release_workflow_id);

    bool isUsingAutoPartNumbering();
    void setUsingAutoPartNumbering(bool using_auto_part_numbering);

    bool isUsingAutoPartNumberingScheme();
    void setUsingAutoPartNumberingScheme(bool using_auto_part_numbering_scheme);

    bool isUsingManagedWorkflow();
    void setUsingManagedWorkflow(bool using_managed_workflow);


    virtual bool isSet() override;

private:
    bool can_create_releases;
    bool m_can_create_releases_isSet;

    bool can_current_user_create_releases;
    bool m_can_current_user_create_releases_isSet;

    QString* company_id;
    bool m_company_id_isSet;

    QString* document_id;
    bool m_document_id_isSet;

    bool drawing_can_duplicate_part_number;
    bool m_drawing_can_duplicate_part_number_isSet;

    bool enabled_active_multiple_workflows;
    bool m_enabled_active_multiple_workflows_isSet;

    OAIBTPublishedWorkflowInfo* obsoletion_workflow;
    bool m_obsoletion_workflow_isSet;

    QString* obsoletion_workflow_id;
    bool m_obsoletion_workflow_id_isSet;

    QList<OAIBTPublishedWorkflowInfo*>* pickable_workflows;
    bool m_pickable_workflows_isSet;

    OAIBTPublishedWorkflowInfo* release_workflow;
    bool m_release_workflow_isSet;

    QString* release_workflow_id;
    bool m_release_workflow_id_isSet;

    bool using_auto_part_numbering;
    bool m_using_auto_part_numbering_isSet;

    bool using_auto_part_numbering_scheme;
    bool m_using_auto_part_numbering_scheme_isSet;

    bool using_managed_workflow;
    bool m_using_managed_workflow_isSet;

};

}

#endif /* OAIBTActiveWorkflowInfo_H_ */
