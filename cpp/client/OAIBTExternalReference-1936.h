/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * OpenAPI spec version: 1.111
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIBTExternalReference-1936.h
 *
 * 
 */

#ifndef OAIBTExternalReference-1936_H_
#define OAIBTExternalReference-1936_H_

#include <QJsonObject>


#include "OAIBTDocumentWithVersionAndElementId.h"
#include "OAIBTDocumentWithVersionId.h"
#include "OAIBTElementReference-725.h"
#include "OAIBTFullElementId-756.h"
#include "OAIBTMicroversionIdAndConfiguration-2338.h"
#include <QString>

#include "OAIObject.h"

namespace OpenAPI {

class OAIBTExternalReference-1936: public OAIObject {
public:
    OAIBTExternalReference-1936();
    OAIBTExternalReference-1936(QString json);
    ~OAIBTExternalReference-1936();
    void init();
    void cleanup();

    QString asJson () override;
    QJsonObject asJsonObject() override;
    void fromJsonObject(QJsonObject json) override;
    OAIBTExternalReference-1936* fromJson(QString jsonString) override;

    QString* getBtType();
    void setBtType(QString* bt_type);

    bool isConfigured();
    void setConfigured(bool configured);

    QString* getElementId();
    void setElementId(QString* element_id);

    OAIBTDocumentWithVersionId* getExternalDocumentWithVersion();
    void setExternalDocumentWithVersion(OAIBTDocumentWithVersionId* external_document_with_version);

    OAIBTDocumentWithVersionAndElementId* getExternalDocumentWithVersionAndElementId();
    void setExternalDocumentWithVersionAndElementId(OAIBTDocumentWithVersionAndElementId* external_document_with_version_and_element_id);

    bool isExternalReference();
    void setExternalReference(bool external_reference);

    OAIBTFullElementId-756* getFullElementId();
    void setFullElementId(OAIBTFullElementId-756* full_element_id);

    OAIBTMicroversionIdAndConfiguration-2338* getMicroversionIdAndConfiguration();
    void setMicroversionIdAndConfiguration(OAIBTMicroversionIdAndConfiguration-2338* microversion_id_and_configuration);

    QString* getNodeId();
    void setNodeId(QString* node_id);

    QString* getDocumentVersionId();
    void setDocumentVersionId(QString* document_version_id);


    virtual bool isSet() override;

private:
    QString* bt_type;
    bool m_bt_type_isSet;

    bool configured;
    bool m_configured_isSet;

    QString* element_id;
    bool m_element_id_isSet;

    OAIBTDocumentWithVersionId* external_document_with_version;
    bool m_external_document_with_version_isSet;

    OAIBTDocumentWithVersionAndElementId* external_document_with_version_and_element_id;
    bool m_external_document_with_version_and_element_id_isSet;

    bool external_reference;
    bool m_external_reference_isSet;

    OAIBTFullElementId-756* full_element_id;
    bool m_full_element_id_isSet;

    OAIBTMicroversionIdAndConfiguration-2338* microversion_id_and_configuration;
    bool m_microversion_id_and_configuration_isSet;

    QString* node_id;
    bool m_node_id_isSet;

    QString* document_version_id;
    bool m_document_version_id_isSet;

};

}

#endif /* OAIBTExternalReference-1936_H_ */
