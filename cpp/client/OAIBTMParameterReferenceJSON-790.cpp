/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * OpenAPI spec version: 1.111
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIBTMParameterReferenceJSON-790.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIBTMParameterReferenceJSON-790::OAIBTMParameterReferenceJSON-790(QString json) {
    init();
    this->fromJson(json);
}

OAIBTMParameterReferenceJSON-790::OAIBTMParameterReferenceJSON-790() {
    init();
}

OAIBTMParameterReferenceJSON-790::~OAIBTMParameterReferenceJSON-790() {
    this->cleanup();
}

void
OAIBTMParameterReferenceJSON-790::init() {
    bt_type = new QString("");
    m_bt_type_isSet = false;
    import_microversion = new QString("");
    m_import_microversion_isSet = false;
    node_id = new QString("");
    m_node_id_isSet = false;
    parameter_id = new QString("");
    m_parameter_id_isSet = false;
    element_id = new QString("");
    m_element_id_isSet = false;
    feature_script_type = new QString("");
    m_feature_script_type_isSet = false;
    _namespace = new QString("");
    m__namespace_isSet = false;
}

void
OAIBTMParameterReferenceJSON-790::cleanup() {
    if(bt_type != nullptr) { 
        delete bt_type;
    }
    if(import_microversion != nullptr) { 
        delete import_microversion;
    }
    if(node_id != nullptr) { 
        delete node_id;
    }
    if(parameter_id != nullptr) { 
        delete parameter_id;
    }
    if(element_id != nullptr) { 
        delete element_id;
    }
    if(feature_script_type != nullptr) { 
        delete feature_script_type;
    }
    if(_namespace != nullptr) { 
        delete _namespace;
    }
}

OAIBTMParameterReferenceJSON-790*
OAIBTMParameterReferenceJSON-790::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIBTMParameterReferenceJSON-790::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&bt_type, pJson["btType"], "QString", "QString");
    
    ::OpenAPI::setValue(&import_microversion, pJson["importMicroversion"], "QString", "QString");
    
    ::OpenAPI::setValue(&node_id, pJson["nodeId"], "QString", "QString");
    
    ::OpenAPI::setValue(&parameter_id, pJson["parameterId"], "QString", "QString");
    
    ::OpenAPI::setValue(&element_id, pJson["elementId"], "QString", "QString");
    
    ::OpenAPI::setValue(&feature_script_type, pJson["featureScriptType"], "QString", "QString");
    
    ::OpenAPI::setValue(&_namespace, pJson["namespace"], "QString", "QString");
    
}

QString
OAIBTMParameterReferenceJSON-790::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIBTMParameterReferenceJSON-790::asJsonObject() {
    QJsonObject obj;
    if(bt_type != nullptr && *bt_type != QString("")){
        toJsonValue(QString("btType"), bt_type, obj, QString("QString"));
    }
    if(import_microversion != nullptr && *import_microversion != QString("")){
        toJsonValue(QString("importMicroversion"), import_microversion, obj, QString("QString"));
    }
    if(node_id != nullptr && *node_id != QString("")){
        toJsonValue(QString("nodeId"), node_id, obj, QString("QString"));
    }
    if(parameter_id != nullptr && *parameter_id != QString("")){
        toJsonValue(QString("parameterId"), parameter_id, obj, QString("QString"));
    }
    if(element_id != nullptr && *element_id != QString("")){
        toJsonValue(QString("elementId"), element_id, obj, QString("QString"));
    }
    if(feature_script_type != nullptr && *feature_script_type != QString("")){
        toJsonValue(QString("featureScriptType"), feature_script_type, obj, QString("QString"));
    }
    if(_namespace != nullptr && *_namespace != QString("")){
        toJsonValue(QString("namespace"), _namespace, obj, QString("QString"));
    }

    return obj;
}

QString*
OAIBTMParameterReferenceJSON-790::getBtType() {
    return bt_type;
}
void
OAIBTMParameterReferenceJSON-790::setBtType(QString* bt_type) {
    this->bt_type = bt_type;
    this->m_bt_type_isSet = true;
}

QString*
OAIBTMParameterReferenceJSON-790::getImportMicroversion() {
    return import_microversion;
}
void
OAIBTMParameterReferenceJSON-790::setImportMicroversion(QString* import_microversion) {
    this->import_microversion = import_microversion;
    this->m_import_microversion_isSet = true;
}

QString*
OAIBTMParameterReferenceJSON-790::getNodeId() {
    return node_id;
}
void
OAIBTMParameterReferenceJSON-790::setNodeId(QString* node_id) {
    this->node_id = node_id;
    this->m_node_id_isSet = true;
}

QString*
OAIBTMParameterReferenceJSON-790::getParameterId() {
    return parameter_id;
}
void
OAIBTMParameterReferenceJSON-790::setParameterId(QString* parameter_id) {
    this->parameter_id = parameter_id;
    this->m_parameter_id_isSet = true;
}

QString*
OAIBTMParameterReferenceJSON-790::getElementId() {
    return element_id;
}
void
OAIBTMParameterReferenceJSON-790::setElementId(QString* element_id) {
    this->element_id = element_id;
    this->m_element_id_isSet = true;
}

QString*
OAIBTMParameterReferenceJSON-790::getFeatureScriptType() {
    return feature_script_type;
}
void
OAIBTMParameterReferenceJSON-790::setFeatureScriptType(QString* feature_script_type) {
    this->feature_script_type = feature_script_type;
    this->m_feature_script_type_isSet = true;
}

QString*
OAIBTMParameterReferenceJSON-790::getNamespace() {
    return _namespace;
}
void
OAIBTMParameterReferenceJSON-790::setNamespace(QString* _namespace) {
    this->_namespace = _namespace;
    this->m__namespace_isSet = true;
}


bool
OAIBTMParameterReferenceJSON-790::isSet(){
    bool isObjectUpdated = false;
    do{
        if(bt_type != nullptr && *bt_type != QString("")){ isObjectUpdated = true; break;}
        if(import_microversion != nullptr && *import_microversion != QString("")){ isObjectUpdated = true; break;}
        if(node_id != nullptr && *node_id != QString("")){ isObjectUpdated = true; break;}
        if(parameter_id != nullptr && *parameter_id != QString("")){ isObjectUpdated = true; break;}
        if(element_id != nullptr && *element_id != QString("")){ isObjectUpdated = true; break;}
        if(feature_script_type != nullptr && *feature_script_type != QString("")){ isObjectUpdated = true; break;}
        if(_namespace != nullptr && *_namespace != QString("")){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

