/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * OpenAPI spec version: 1.111
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIBTPSpace-10.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIBTPSpace-10::OAIBTPSpace-10(QString json) {
    init();
    this->fromJson(json);
}

OAIBTPSpace-10::OAIBTPSpace-10() {
    init();
}

OAIBTPSpace-10::~OAIBTPSpace-10() {
    this->cleanup();
}

void
OAIBTPSpace-10::init() {
    bt_type = new QString("");
    m_bt_type_isSet = false;
    lines = new QList<QString*>();
    m_lines_isSet = false;
    node_id = new QString("");
    m_node_id_isSet = false;
    text = new QString("");
    m_text_isSet = false;
}

void
OAIBTPSpace-10::cleanup() {
    if(bt_type != nullptr) { 
        delete bt_type;
    }
    if(lines != nullptr) { 
        auto arr = lines;
        for(auto o: *arr) { 
            delete o;
        }
        delete lines;
    }
    if(node_id != nullptr) { 
        delete node_id;
    }
    if(text != nullptr) { 
        delete text;
    }
}

OAIBTPSpace-10*
OAIBTPSpace-10::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIBTPSpace-10::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&bt_type, pJson["btType"], "QString", "QString");
    
    
    ::OpenAPI::setValue(&lines, pJson["lines"], "QList", "QString");
    ::OpenAPI::setValue(&node_id, pJson["nodeId"], "QString", "QString");
    
    ::OpenAPI::setValue(&text, pJson["text"], "QString", "QString");
    
}

QString
OAIBTPSpace-10::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIBTPSpace-10::asJsonObject() {
    QJsonObject obj;
    if(bt_type != nullptr && *bt_type != QString("")){
        toJsonValue(QString("btType"), bt_type, obj, QString("QString"));
    }
    if(lines->size() > 0){
        toJsonArray((QList<void*>*)lines, obj, "lines", "QString");
    }
    if(node_id != nullptr && *node_id != QString("")){
        toJsonValue(QString("nodeId"), node_id, obj, QString("QString"));
    }
    if(text != nullptr && *text != QString("")){
        toJsonValue(QString("text"), text, obj, QString("QString"));
    }

    return obj;
}

QString*
OAIBTPSpace-10::getBtType() {
    return bt_type;
}
void
OAIBTPSpace-10::setBtType(QString* bt_type) {
    this->bt_type = bt_type;
    this->m_bt_type_isSet = true;
}

QList<QString*>*
OAIBTPSpace-10::getLines() {
    return lines;
}
void
OAIBTPSpace-10::setLines(QList<QString*>* lines) {
    this->lines = lines;
    this->m_lines_isSet = true;
}

QString*
OAIBTPSpace-10::getNodeId() {
    return node_id;
}
void
OAIBTPSpace-10::setNodeId(QString* node_id) {
    this->node_id = node_id;
    this->m_node_id_isSet = true;
}

QString*
OAIBTPSpace-10::getText() {
    return text;
}
void
OAIBTPSpace-10::setText(QString* text) {
    this->text = text;
    this->m_text_isSet = true;
}


bool
OAIBTPSpace-10::isSet(){
    bool isObjectUpdated = false;
    do{
        if(bt_type != nullptr && *bt_type != QString("")){ isObjectUpdated = true; break;}
        if(lines->size() > 0){ isObjectUpdated = true; break;}
        if(node_id != nullptr && *node_id != QString("")){ isObjectUpdated = true; break;}
        if(text != nullptr && *text != QString("")){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

