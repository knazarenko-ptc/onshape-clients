/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * OpenAPI spec version: 1.111
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIBTThumbnailInfo.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIBTThumbnailInfo::OAIBTThumbnailInfo(QString json) {
    init();
    this->fromJson(json);
}

OAIBTThumbnailInfo::OAIBTThumbnailInfo() {
    init();
}

OAIBTThumbnailInfo::~OAIBTThumbnailInfo() {
    this->cleanup();
}

void
OAIBTThumbnailInfo::init() {
    href = new QString("");
    m_href_isSet = false;
    id = new QString("");
    m_id_isSet = false;
    secondary_sizes = new QList<QList<OAIBTThumbnailSizeInfo*>*>();
    m_secondary_sizes_isSet = false;
    sizes = new QList<OAIBTThumbnailSizeInfo*>();
    m_sizes_isSet = false;
}

void
OAIBTThumbnailInfo::cleanup() {
    if(href != nullptr) { 
        delete href;
    }
    if(id != nullptr) { 
        delete id;
    }
    if(secondary_sizes != nullptr) { 
        auto arr = secondary_sizes;
        for(auto o: *arr) { 
            for(auto o1: *o) {
                delete o1;
            }
            delete o;
        }
        delete secondary_sizes;
    }
    if(sizes != nullptr) { 
        auto arr = sizes;
        for(auto o: *arr) { 
            delete o;
        }
        delete sizes;
    }
}

OAIBTThumbnailInfo*
OAIBTThumbnailInfo::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIBTThumbnailInfo::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&href, pJson["href"], "QString", "QString");
    
    ::OpenAPI::setValue(&id, pJson["id"], "QString", "QString");
    
    
    
    if(pJson["secondarySizes"].isArray()){
        auto arr = pJson["secondarySizes"].toArray();
        for (const QJsonValue & jval : arr) {
            auto secondary_sizes_item = new QList<OAIBTThumbnailSizeInfo*>();
            
            auto jsonval = jval.toObject();
            ::OpenAPI::setValue(secondary_sizes_item, jsonval, "QList", "OAIBTThumbnailSizeInfo");
            secondary_sizes->push_back(secondary_sizes_item);
        }
    }
    
    ::OpenAPI::setValue(&sizes, pJson["sizes"], "QList", "OAIBTThumbnailSizeInfo");
}

QString
OAIBTThumbnailInfo::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIBTThumbnailInfo::asJsonObject() {
    QJsonObject obj;
    if(href != nullptr && *href != QString("")){
        toJsonValue(QString("href"), href, obj, QString("QString"));
    }
    if(id != nullptr && *id != QString("")){
        toJsonValue(QString("id"), id, obj, QString("QString"));
    }
    if(secondary_sizes->size() > 0){
        QJsonArray jarray;
        for(auto items : *secondary_sizes){
            QJsonObject jobj;
            toJsonArray((QList<void*>*)items, jobj, "secondarySizes", "OAIBTThumbnailSizeInfo");
            jarray.append(jobj.value("secondarySizes"));
        }
        obj.insert("secondarySizes", jarray);
    }
    if(sizes->size() > 0){
        toJsonArray((QList<void*>*)sizes, obj, "sizes", "OAIBTThumbnailSizeInfo");
    }

    return obj;
}

QString*
OAIBTThumbnailInfo::getHref() {
    return href;
}
void
OAIBTThumbnailInfo::setHref(QString* href) {
    this->href = href;
    this->m_href_isSet = true;
}

QString*
OAIBTThumbnailInfo::getId() {
    return id;
}
void
OAIBTThumbnailInfo::setId(QString* id) {
    this->id = id;
    this->m_id_isSet = true;
}

QList<QList<OAIBTThumbnailSizeInfo*>*>*
OAIBTThumbnailInfo::getSecondarySizes() {
    return secondary_sizes;
}
void
OAIBTThumbnailInfo::setSecondarySizes(QList<QList<OAIBTThumbnailSizeInfo*>*>* secondary_sizes) {
    this->secondary_sizes = secondary_sizes;
    this->m_secondary_sizes_isSet = true;
}

QList<OAIBTThumbnailSizeInfo*>*
OAIBTThumbnailInfo::getSizes() {
    return sizes;
}
void
OAIBTThumbnailInfo::setSizes(QList<OAIBTThumbnailSizeInfo*>* sizes) {
    this->sizes = sizes;
    this->m_sizes_isSet = true;
}


bool
OAIBTThumbnailInfo::isSet(){
    bool isObjectUpdated = false;
    do{
        if(href != nullptr && *href != QString("")){ isObjectUpdated = true; break;}
        if(id != nullptr && *id != QString("")){ isObjectUpdated = true; break;}
        if(secondary_sizes->size() > 0){ isObjectUpdated = true; break;}
        if(sizes->size() > 0){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

