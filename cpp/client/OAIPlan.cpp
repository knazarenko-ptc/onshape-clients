/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * OpenAPI spec version: 1.111
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIPlan.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIPlan::OAIPlan(QString json) {
    init();
    this->fromJson(json);
}

OAIPlan::OAIPlan() {
    init();
}

OAIPlan::~OAIPlan() {
    this->cleanup();
}

void
OAIPlan::init() {
    amount = 0L;
    m_amount_isSet = false;
    created = 0L;
    m_created_isSet = false;
    currency = new QString("");
    m_currency_isSet = false;
    id = new QString("");
    m_id_isSet = false;
    interval = new QString("");
    m_interval_isSet = false;
    interval_count = 0;
    m_interval_count_isSet = false;
    livemode = false;
    m_livemode_isSet = false;
    metadata = new QMap<QString, QString*>();
    m_metadata_isSet = false;
    name = new QString("");
    m_name_isSet = false;
    object = new QString("");
    m_object_isSet = false;
    statement_description = new QString("");
    m_statement_description_isSet = false;
    statement_descriptor = new QString("");
    m_statement_descriptor_isSet = false;
    trial_period_days = 0;
    m_trial_period_days_isSet = false;
}

void
OAIPlan::cleanup() {


    if(currency != nullptr) { 
        delete currency;
    }
    if(id != nullptr) { 
        delete id;
    }
    if(interval != nullptr) { 
        delete interval;
    }


    if(metadata != nullptr) { 
        auto arr = metadata;
        for(auto o: *arr) { 
            delete o;
        }
        delete metadata;
    }
    if(name != nullptr) { 
        delete name;
    }
    if(object != nullptr) { 
        delete object;
    }
    if(statement_description != nullptr) { 
        delete statement_description;
    }
    if(statement_descriptor != nullptr) { 
        delete statement_descriptor;
    }

}

OAIPlan*
OAIPlan::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIPlan::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&amount, pJson["amount"], "qint64", "");
    
    ::OpenAPI::setValue(&created, pJson["created"], "qint64", "");
    
    ::OpenAPI::setValue(&currency, pJson["currency"], "QString", "QString");
    
    ::OpenAPI::setValue(&id, pJson["id"], "QString", "QString");
    
    ::OpenAPI::setValue(&interval, pJson["interval"], "QString", "QString");
    
    ::OpenAPI::setValue(&interval_count, pJson["intervalCount"], "qint32", "");
    
    ::OpenAPI::setValue(&livemode, pJson["livemode"], "bool", "");
    
    
    ::OpenAPI::setValue(&metadata, pJson["metadata"], "QMap", "QString");
    ::OpenAPI::setValue(&name, pJson["name"], "QString", "QString");
    
    ::OpenAPI::setValue(&object, pJson["object"], "QString", "QString");
    
    ::OpenAPI::setValue(&statement_description, pJson["statementDescription"], "QString", "QString");
    
    ::OpenAPI::setValue(&statement_descriptor, pJson["statementDescriptor"], "QString", "QString");
    
    ::OpenAPI::setValue(&trial_period_days, pJson["trialPeriodDays"], "qint32", "");
    
}

QString
OAIPlan::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIPlan::asJsonObject() {
    QJsonObject obj;
    if(m_amount_isSet){
        obj.insert("amount", QJsonValue(amount));
    }
    if(m_created_isSet){
        obj.insert("created", QJsonValue(created));
    }
    if(currency != nullptr && *currency != QString("")){
        toJsonValue(QString("currency"), currency, obj, QString("QString"));
    }
    if(id != nullptr && *id != QString("")){
        toJsonValue(QString("id"), id, obj, QString("QString"));
    }
    if(interval != nullptr && *interval != QString("")){
        toJsonValue(QString("interval"), interval, obj, QString("QString"));
    }
    if(m_interval_count_isSet){
        obj.insert("intervalCount", QJsonValue(interval_count));
    }
    if(m_livemode_isSet){
        obj.insert("livemode", QJsonValue(livemode));
    }
    if(metadata->size() > 0){
        toJsonMap((QMap<QString, void*>*) metadata, obj, "metadata", "QString");
    }
    if(name != nullptr && *name != QString("")){
        toJsonValue(QString("name"), name, obj, QString("QString"));
    }
    if(object != nullptr && *object != QString("")){
        toJsonValue(QString("object"), object, obj, QString("QString"));
    }
    if(statement_description != nullptr && *statement_description != QString("")){
        toJsonValue(QString("statementDescription"), statement_description, obj, QString("QString"));
    }
    if(statement_descriptor != nullptr && *statement_descriptor != QString("")){
        toJsonValue(QString("statementDescriptor"), statement_descriptor, obj, QString("QString"));
    }
    if(m_trial_period_days_isSet){
        obj.insert("trialPeriodDays", QJsonValue(trial_period_days));
    }

    return obj;
}

qint64
OAIPlan::getAmount() {
    return amount;
}
void
OAIPlan::setAmount(qint64 amount) {
    this->amount = amount;
    this->m_amount_isSet = true;
}

qint64
OAIPlan::getCreated() {
    return created;
}
void
OAIPlan::setCreated(qint64 created) {
    this->created = created;
    this->m_created_isSet = true;
}

QString*
OAIPlan::getCurrency() {
    return currency;
}
void
OAIPlan::setCurrency(QString* currency) {
    this->currency = currency;
    this->m_currency_isSet = true;
}

QString*
OAIPlan::getId() {
    return id;
}
void
OAIPlan::setId(QString* id) {
    this->id = id;
    this->m_id_isSet = true;
}

QString*
OAIPlan::getInterval() {
    return interval;
}
void
OAIPlan::setInterval(QString* interval) {
    this->interval = interval;
    this->m_interval_isSet = true;
}

qint32
OAIPlan::getIntervalCount() {
    return interval_count;
}
void
OAIPlan::setIntervalCount(qint32 interval_count) {
    this->interval_count = interval_count;
    this->m_interval_count_isSet = true;
}

bool
OAIPlan::isLivemode() {
    return livemode;
}
void
OAIPlan::setLivemode(bool livemode) {
    this->livemode = livemode;
    this->m_livemode_isSet = true;
}

QMap<QString, QString*>*
OAIPlan::getMetadata() {
    return metadata;
}
void
OAIPlan::setMetadata(QMap<QString, QString*>* metadata) {
    this->metadata = metadata;
    this->m_metadata_isSet = true;
}

QString*
OAIPlan::getName() {
    return name;
}
void
OAIPlan::setName(QString* name) {
    this->name = name;
    this->m_name_isSet = true;
}

QString*
OAIPlan::getObject() {
    return object;
}
void
OAIPlan::setObject(QString* object) {
    this->object = object;
    this->m_object_isSet = true;
}

QString*
OAIPlan::getStatementDescription() {
    return statement_description;
}
void
OAIPlan::setStatementDescription(QString* statement_description) {
    this->statement_description = statement_description;
    this->m_statement_description_isSet = true;
}

QString*
OAIPlan::getStatementDescriptor() {
    return statement_descriptor;
}
void
OAIPlan::setStatementDescriptor(QString* statement_descriptor) {
    this->statement_descriptor = statement_descriptor;
    this->m_statement_descriptor_isSet = true;
}

qint32
OAIPlan::getTrialPeriodDays() {
    return trial_period_days;
}
void
OAIPlan::setTrialPeriodDays(qint32 trial_period_days) {
    this->trial_period_days = trial_period_days;
    this->m_trial_period_days_isSet = true;
}


bool
OAIPlan::isSet(){
    bool isObjectUpdated = false;
    do{
        if(m_amount_isSet){ isObjectUpdated = true; break;}
        if(m_created_isSet){ isObjectUpdated = true; break;}
        if(currency != nullptr && *currency != QString("")){ isObjectUpdated = true; break;}
        if(id != nullptr && *id != QString("")){ isObjectUpdated = true; break;}
        if(interval != nullptr && *interval != QString("")){ isObjectUpdated = true; break;}
        if(m_interval_count_isSet){ isObjectUpdated = true; break;}
        if(m_livemode_isSet){ isObjectUpdated = true; break;}
        if(metadata->size() > 0){ isObjectUpdated = true; break;}
        if(name != nullptr && *name != QString("")){ isObjectUpdated = true; break;}
        if(object != nullptr && *object != QString("")){ isObjectUpdated = true; break;}
        if(statement_description != nullptr && *statement_description != QString("")){ isObjectUpdated = true; break;}
        if(statement_descriptor != nullptr && *statement_descriptor != QString("")){ isObjectUpdated = true; break;}
        if(m_trial_period_days_isSet){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

