/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * OpenAPI spec version: 1.111
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIBTRootAssemblyInfo.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIBTRootAssemblyInfo::OAIBTRootAssemblyInfo(QString json) {
    init();
    this->fromJson(json);
}

OAIBTRootAssemblyInfo::OAIBTRootAssemblyInfo() {
    init();
}

OAIBTRootAssemblyInfo::~OAIBTRootAssemblyInfo() {
    this->cleanup();
}

void
OAIBTRootAssemblyInfo::init() {
    configuration = new QString("");
    m_configuration_isSet = false;
    document_id = new QString("");
    m_document_id_isSet = false;
    document_microversion = new QString("");
    m_document_microversion_isSet = false;
    document_version = new QString("");
    m_document_version_isSet = false;
    element_id = new QString("");
    m_element_id_isSet = false;
    features = new QList<OAIBTAssemblyFeatureInfo*>();
    m_features_isSet = false;
    full_configuration = new QString("");
    m_full_configuration_isSet = false;
    instances = new QList<OAIBTAssemblyInstanceInfo*>();
    m_instances_isSet = false;
    occurrences = new QList<OAIBTAssemblyOccurrenceInfo*>();
    m_occurrences_isSet = false;
    revision = new QString("");
    m_revision_isSet = false;
}

void
OAIBTRootAssemblyInfo::cleanup() {
    if(configuration != nullptr) { 
        delete configuration;
    }
    if(document_id != nullptr) { 
        delete document_id;
    }
    if(document_microversion != nullptr) { 
        delete document_microversion;
    }
    if(document_version != nullptr) { 
        delete document_version;
    }
    if(element_id != nullptr) { 
        delete element_id;
    }
    if(features != nullptr) { 
        auto arr = features;
        for(auto o: *arr) { 
            delete o;
        }
        delete features;
    }
    if(full_configuration != nullptr) { 
        delete full_configuration;
    }
    if(instances != nullptr) { 
        auto arr = instances;
        for(auto o: *arr) { 
            delete o;
        }
        delete instances;
    }
    if(occurrences != nullptr) { 
        auto arr = occurrences;
        for(auto o: *arr) { 
            delete o;
        }
        delete occurrences;
    }
    if(revision != nullptr) { 
        delete revision;
    }
}

OAIBTRootAssemblyInfo*
OAIBTRootAssemblyInfo::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIBTRootAssemblyInfo::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&configuration, pJson["configuration"], "QString", "QString");
    
    ::OpenAPI::setValue(&document_id, pJson["documentId"], "QString", "QString");
    
    ::OpenAPI::setValue(&document_microversion, pJson["documentMicroversion"], "QString", "QString");
    
    ::OpenAPI::setValue(&document_version, pJson["documentVersion"], "QString", "QString");
    
    ::OpenAPI::setValue(&element_id, pJson["elementId"], "QString", "QString");
    
    
    ::OpenAPI::setValue(&features, pJson["features"], "QList", "OAIBTAssemblyFeatureInfo");
    ::OpenAPI::setValue(&full_configuration, pJson["fullConfiguration"], "QString", "QString");
    
    
    ::OpenAPI::setValue(&instances, pJson["instances"], "QList", "OAIBTAssemblyInstanceInfo");
    
    ::OpenAPI::setValue(&occurrences, pJson["occurrences"], "QList", "OAIBTAssemblyOccurrenceInfo");
    ::OpenAPI::setValue(&revision, pJson["revision"], "QString", "QString");
    
}

QString
OAIBTRootAssemblyInfo::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIBTRootAssemblyInfo::asJsonObject() {
    QJsonObject obj;
    if(configuration != nullptr && *configuration != QString("")){
        toJsonValue(QString("configuration"), configuration, obj, QString("QString"));
    }
    if(document_id != nullptr && *document_id != QString("")){
        toJsonValue(QString("documentId"), document_id, obj, QString("QString"));
    }
    if(document_microversion != nullptr && *document_microversion != QString("")){
        toJsonValue(QString("documentMicroversion"), document_microversion, obj, QString("QString"));
    }
    if(document_version != nullptr && *document_version != QString("")){
        toJsonValue(QString("documentVersion"), document_version, obj, QString("QString"));
    }
    if(element_id != nullptr && *element_id != QString("")){
        toJsonValue(QString("elementId"), element_id, obj, QString("QString"));
    }
    if(features->size() > 0){
        toJsonArray((QList<void*>*)features, obj, "features", "OAIBTAssemblyFeatureInfo");
    }
    if(full_configuration != nullptr && *full_configuration != QString("")){
        toJsonValue(QString("fullConfiguration"), full_configuration, obj, QString("QString"));
    }
    if(instances->size() > 0){
        toJsonArray((QList<void*>*)instances, obj, "instances", "OAIBTAssemblyInstanceInfo");
    }
    if(occurrences->size() > 0){
        toJsonArray((QList<void*>*)occurrences, obj, "occurrences", "OAIBTAssemblyOccurrenceInfo");
    }
    if(revision != nullptr && *revision != QString("")){
        toJsonValue(QString("revision"), revision, obj, QString("QString"));
    }

    return obj;
}

QString*
OAIBTRootAssemblyInfo::getConfiguration() {
    return configuration;
}
void
OAIBTRootAssemblyInfo::setConfiguration(QString* configuration) {
    this->configuration = configuration;
    this->m_configuration_isSet = true;
}

QString*
OAIBTRootAssemblyInfo::getDocumentId() {
    return document_id;
}
void
OAIBTRootAssemblyInfo::setDocumentId(QString* document_id) {
    this->document_id = document_id;
    this->m_document_id_isSet = true;
}

QString*
OAIBTRootAssemblyInfo::getDocumentMicroversion() {
    return document_microversion;
}
void
OAIBTRootAssemblyInfo::setDocumentMicroversion(QString* document_microversion) {
    this->document_microversion = document_microversion;
    this->m_document_microversion_isSet = true;
}

QString*
OAIBTRootAssemblyInfo::getDocumentVersion() {
    return document_version;
}
void
OAIBTRootAssemblyInfo::setDocumentVersion(QString* document_version) {
    this->document_version = document_version;
    this->m_document_version_isSet = true;
}

QString*
OAIBTRootAssemblyInfo::getElementId() {
    return element_id;
}
void
OAIBTRootAssemblyInfo::setElementId(QString* element_id) {
    this->element_id = element_id;
    this->m_element_id_isSet = true;
}

QList<OAIBTAssemblyFeatureInfo*>*
OAIBTRootAssemblyInfo::getFeatures() {
    return features;
}
void
OAIBTRootAssemblyInfo::setFeatures(QList<OAIBTAssemblyFeatureInfo*>* features) {
    this->features = features;
    this->m_features_isSet = true;
}

QString*
OAIBTRootAssemblyInfo::getFullConfiguration() {
    return full_configuration;
}
void
OAIBTRootAssemblyInfo::setFullConfiguration(QString* full_configuration) {
    this->full_configuration = full_configuration;
    this->m_full_configuration_isSet = true;
}

QList<OAIBTAssemblyInstanceInfo*>*
OAIBTRootAssemblyInfo::getInstances() {
    return instances;
}
void
OAIBTRootAssemblyInfo::setInstances(QList<OAIBTAssemblyInstanceInfo*>* instances) {
    this->instances = instances;
    this->m_instances_isSet = true;
}

QList<OAIBTAssemblyOccurrenceInfo*>*
OAIBTRootAssemblyInfo::getOccurrences() {
    return occurrences;
}
void
OAIBTRootAssemblyInfo::setOccurrences(QList<OAIBTAssemblyOccurrenceInfo*>* occurrences) {
    this->occurrences = occurrences;
    this->m_occurrences_isSet = true;
}

QString*
OAIBTRootAssemblyInfo::getRevision() {
    return revision;
}
void
OAIBTRootAssemblyInfo::setRevision(QString* revision) {
    this->revision = revision;
    this->m_revision_isSet = true;
}


bool
OAIBTRootAssemblyInfo::isSet(){
    bool isObjectUpdated = false;
    do{
        if(configuration != nullptr && *configuration != QString("")){ isObjectUpdated = true; break;}
        if(document_id != nullptr && *document_id != QString("")){ isObjectUpdated = true; break;}
        if(document_microversion != nullptr && *document_microversion != QString("")){ isObjectUpdated = true; break;}
        if(document_version != nullptr && *document_version != QString("")){ isObjectUpdated = true; break;}
        if(element_id != nullptr && *element_id != QString("")){ isObjectUpdated = true; break;}
        if(features->size() > 0){ isObjectUpdated = true; break;}
        if(full_configuration != nullptr && *full_configuration != QString("")){ isObjectUpdated = true; break;}
        if(instances->size() > 0){ isObjectUpdated = true; break;}
        if(occurrences->size() > 0){ isObjectUpdated = true; break;}
        if(revision != nullptr && *revision != QString("")){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

