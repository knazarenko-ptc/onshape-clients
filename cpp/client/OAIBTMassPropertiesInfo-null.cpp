/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * OpenAPI spec version: 1.111
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIBTMassPropertiesInfo-null.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIBTMassPropertiesInfo-null::OAIBTMassPropertiesInfo-null(QString json) {
    init();
    this->fromJson(json);
}

OAIBTMassPropertiesInfo-null::OAIBTMassPropertiesInfo-null() {
    init();
}

OAIBTMassPropertiesInfo-null::~OAIBTMassPropertiesInfo-null() {
    this->cleanup();
}

void
OAIBTMassPropertiesInfo-null::init() {
    centroid = new QList<double>();
    m_centroid_isSet = false;
    has_mass = false;
    m_has_mass_isSet = false;
    inertia = new QList<double>();
    m_inertia_isSet = false;
    mass = new QList<double>();
    m_mass_isSet = false;
    mass_missing_count = 0;
    m_mass_missing_count_isSet = false;
    periphery = new QList<double>();
    m_periphery_isSet = false;
    principal_axes = new QList<OAIBTVector3d-389*>();
    m_principal_axes_isSet = false;
    principal_inertia = new QList<double>();
    m_principal_inertia_isSet = false;
    volume = new QList<double>();
    m_volume_isSet = false;
}

void
OAIBTMassPropertiesInfo-null::cleanup() {

    if(centroid != nullptr) { 
        delete centroid;
    }


    if(inertia != nullptr) { 
        delete inertia;
    }

    if(mass != nullptr) { 
        delete mass;
    }


    if(periphery != nullptr) { 
        delete periphery;
    }
    if(principal_axes != nullptr) { 
        auto arr = principal_axes;
        for(auto o: *arr) { 
            delete o;
        }
        delete principal_axes;
    }

    if(principal_inertia != nullptr) { 
        delete principal_inertia;
    }

    if(volume != nullptr) { 
        delete volume;
    }
}

OAIBTMassPropertiesInfo-null*
OAIBTMassPropertiesInfo-null::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIBTMassPropertiesInfo-null::fromJsonObject(QJsonObject pJson) {
    
    ::OpenAPI::setValue(&centroid, pJson["centroid"], "QList", "double");
    ::OpenAPI::setValue(&has_mass, pJson["hasMass"], "bool", "");
    
    
    ::OpenAPI::setValue(&inertia, pJson["inertia"], "QList", "double");
    
    ::OpenAPI::setValue(&mass, pJson["mass"], "QList", "double");
    ::OpenAPI::setValue(&mass_missing_count, pJson["massMissingCount"], "qint32", "");
    
    
    ::OpenAPI::setValue(&periphery, pJson["periphery"], "QList", "double");
    
    ::OpenAPI::setValue(&principal_axes, pJson["principalAxes"], "QList", "OAIBTVector3d-389");
    
    ::OpenAPI::setValue(&principal_inertia, pJson["principalInertia"], "QList", "double");
    
    ::OpenAPI::setValue(&volume, pJson["volume"], "QList", "double");
}

QString
OAIBTMassPropertiesInfo-null::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIBTMassPropertiesInfo-null::asJsonObject() {
    QJsonObject obj;
    if(centroid->size() > 0){
        toJsonArray((QList<void*>*)centroid, obj, "centroid", "");
    }
    if(m_has_mass_isSet){
        obj.insert("hasMass", QJsonValue(has_mass));
    }
    if(inertia->size() > 0){
        toJsonArray((QList<void*>*)inertia, obj, "inertia", "");
    }
    if(mass->size() > 0){
        toJsonArray((QList<void*>*)mass, obj, "mass", "");
    }
    if(m_mass_missing_count_isSet){
        obj.insert("massMissingCount", QJsonValue(mass_missing_count));
    }
    if(periphery->size() > 0){
        toJsonArray((QList<void*>*)periphery, obj, "periphery", "");
    }
    if(principal_axes->size() > 0){
        toJsonArray((QList<void*>*)principal_axes, obj, "principalAxes", "OAIBTVector3d-389");
    }
    if(principal_inertia->size() > 0){
        toJsonArray((QList<void*>*)principal_inertia, obj, "principalInertia", "");
    }
    if(volume->size() > 0){
        toJsonArray((QList<void*>*)volume, obj, "volume", "");
    }

    return obj;
}

QList<double>*
OAIBTMassPropertiesInfo-null::getCentroid() {
    return centroid;
}
void
OAIBTMassPropertiesInfo-null::setCentroid(QList<double>* centroid) {
    this->centroid = centroid;
    this->m_centroid_isSet = true;
}

bool
OAIBTMassPropertiesInfo-null::isHasMass() {
    return has_mass;
}
void
OAIBTMassPropertiesInfo-null::setHasMass(bool has_mass) {
    this->has_mass = has_mass;
    this->m_has_mass_isSet = true;
}

QList<double>*
OAIBTMassPropertiesInfo-null::getInertia() {
    return inertia;
}
void
OAIBTMassPropertiesInfo-null::setInertia(QList<double>* inertia) {
    this->inertia = inertia;
    this->m_inertia_isSet = true;
}

QList<double>*
OAIBTMassPropertiesInfo-null::getMass() {
    return mass;
}
void
OAIBTMassPropertiesInfo-null::setMass(QList<double>* mass) {
    this->mass = mass;
    this->m_mass_isSet = true;
}

qint32
OAIBTMassPropertiesInfo-null::getMassMissingCount() {
    return mass_missing_count;
}
void
OAIBTMassPropertiesInfo-null::setMassMissingCount(qint32 mass_missing_count) {
    this->mass_missing_count = mass_missing_count;
    this->m_mass_missing_count_isSet = true;
}

QList<double>*
OAIBTMassPropertiesInfo-null::getPeriphery() {
    return periphery;
}
void
OAIBTMassPropertiesInfo-null::setPeriphery(QList<double>* periphery) {
    this->periphery = periphery;
    this->m_periphery_isSet = true;
}

QList<OAIBTVector3d-389*>*
OAIBTMassPropertiesInfo-null::getPrincipalAxes() {
    return principal_axes;
}
void
OAIBTMassPropertiesInfo-null::setPrincipalAxes(QList<OAIBTVector3d-389*>* principal_axes) {
    this->principal_axes = principal_axes;
    this->m_principal_axes_isSet = true;
}

QList<double>*
OAIBTMassPropertiesInfo-null::getPrincipalInertia() {
    return principal_inertia;
}
void
OAIBTMassPropertiesInfo-null::setPrincipalInertia(QList<double>* principal_inertia) {
    this->principal_inertia = principal_inertia;
    this->m_principal_inertia_isSet = true;
}

QList<double>*
OAIBTMassPropertiesInfo-null::getVolume() {
    return volume;
}
void
OAIBTMassPropertiesInfo-null::setVolume(QList<double>* volume) {
    this->volume = volume;
    this->m_volume_isSet = true;
}


bool
OAIBTMassPropertiesInfo-null::isSet(){
    bool isObjectUpdated = false;
    do{
        if(m_centroid_isSet){ isObjectUpdated = true; break;}
        if(centroid->size() > 0){ isObjectUpdated = true; break;}
        if(m_has_mass_isSet){ isObjectUpdated = true; break;}
        if(m_inertia_isSet){ isObjectUpdated = true; break;}
        if(inertia->size() > 0){ isObjectUpdated = true; break;}
        if(m_mass_isSet){ isObjectUpdated = true; break;}
        if(mass->size() > 0){ isObjectUpdated = true; break;}
        if(m_mass_missing_count_isSet){ isObjectUpdated = true; break;}
        if(m_periphery_isSet){ isObjectUpdated = true; break;}
        if(periphery->size() > 0){ isObjectUpdated = true; break;}
        if(principal_axes->size() > 0){ isObjectUpdated = true; break;}
        if(m_principal_inertia_isSet){ isObjectUpdated = true; break;}
        if(principal_inertia->size() > 0){ isObjectUpdated = true; break;}
        if(m_volume_isSet){ isObjectUpdated = true; break;}
        if(volume->size() > 0){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

