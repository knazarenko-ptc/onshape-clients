/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * OpenAPI spec version: 1.111
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIBTDrawingParams.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIBTDrawingParams::OAIBTDrawingParams(QString json) {
    init();
    this->fromJson(json);
}

OAIBTDrawingParams::OAIBTDrawingParams() {
    init();
}

OAIBTDrawingParams::~OAIBTDrawingParams() {
    this->cleanup();
}

void
OAIBTDrawingParams::init() {
    border = false;
    m_border_isSet = false;
    compute_intersection = false;
    m_compute_intersection_isSet = false;
    decimal_separator = new QString("");
    m_decimal_separator_isSet = false;
    document_id = new QString("");
    m_document_id_isSet = false;
    document_microversion_id = new QString("");
    m_document_microversion_id_isSet = false;
    drawing_name = new QString("");
    m_drawing_name_isSet = false;
    element_configuration = new QString("");
    m_element_configuration_isSet = false;
    element_id = new QString("");
    m_element_id_isSet = false;
    element_microversion_id = new QString("");
    m_element_microversion_id_isSet = false;
    external_document_id = new QString("");
    m_external_document_id_isSet = false;
    external_document_version_id = new QString("");
    m_external_document_version_id_isSet = false;
    hidden_lines = new QString("");
    m_hidden_lines_isSet = false;
    include_surfaces = false;
    m_include_surfaces_isSet = false;
    is_flattened_part = false;
    m_is_flattened_part_isSet = false;
    is_sketch_only = false;
    m_is_sketch_only_isSet = false;
    is_surface = false;
    m_is_surface_isSet = false;
    language = new QString("");
    m_language_isSet = false;
    location = new OAIBTElementLocationParams();
    m_location_isSet = false;
    model_type = new QString("");
    m_model_type_isSet = false;
    number_horizontal_zones = 0;
    m_number_horizontal_zones_isSet = false;
    number_vertical_zones = 0;
    m_number_vertical_zones_isSet = false;
    part_id = new QString("");
    m_part_id_isSet = false;
    part_number = new QString("");
    m_part_number_isSet = false;
    part_query = new QString("");
    m_part_query_isSet = false;
    projection = new QString("");
    m_projection_isSet = false;
    pure_sketch = false;
    m_pure_sketch_isSet = false;
    quality_option = new QString("");
    m_quality_option_isSet = false;
    reference_type = 0;
    m_reference_type_isSet = false;
    reference_type_enum = new QString("");
    m_reference_type_enum_isSet = false;
    revision = new QString("");
    m_revision_isSet = false;
    show_cut_geom_only = false;
    m_show_cut_geom_only_isSet = false;
    simplification_option = new QString("");
    m_simplification_option_isSet = false;
    simplification_threshold = 0.0;
    m_simplification_threshold_isSet = false;
    size = new QString("");
    m_size_isSet = false;
    sketch_ids = new QList<QString*>();
    m_sketch_ids_isSet = false;
    standard = new QString("");
    m_standard_isSet = false;
    start_zones = new QString("");
    m_start_zones_isSet = false;
    template_args = new QList<QString*>();
    m_template_args_isSet = false;
    template_document_id = new QString("");
    m_template_document_id_isSet = false;
    template_element_id = new QString("");
    m_template_element_id_isSet = false;
    template_name = new QString("");
    m_template_name_isSet = false;
    template_version_id = new QString("");
    m_template_version_id_isSet = false;
    template_workspace_id = new QString("");
    m_template_workspace_id_isSet = false;
    titleblock = false;
    m_titleblock_isSet = false;
    units = new QString("");
    m_units_isSet = false;
    views = new QString("");
    m_views_isSet = false;
    workspace_id = new QString("");
    m_workspace_id_isSet = false;
}

void
OAIBTDrawingParams::cleanup() {


    if(decimal_separator != nullptr) { 
        delete decimal_separator;
    }
    if(document_id != nullptr) { 
        delete document_id;
    }
    if(document_microversion_id != nullptr) { 
        delete document_microversion_id;
    }
    if(drawing_name != nullptr) { 
        delete drawing_name;
    }
    if(element_configuration != nullptr) { 
        delete element_configuration;
    }
    if(element_id != nullptr) { 
        delete element_id;
    }
    if(element_microversion_id != nullptr) { 
        delete element_microversion_id;
    }
    if(external_document_id != nullptr) { 
        delete external_document_id;
    }
    if(external_document_version_id != nullptr) { 
        delete external_document_version_id;
    }
    if(hidden_lines != nullptr) { 
        delete hidden_lines;
    }




    if(language != nullptr) { 
        delete language;
    }
    if(location != nullptr) { 
        delete location;
    }
    if(model_type != nullptr) { 
        delete model_type;
    }


    if(part_id != nullptr) { 
        delete part_id;
    }
    if(part_number != nullptr) { 
        delete part_number;
    }
    if(part_query != nullptr) { 
        delete part_query;
    }
    if(projection != nullptr) { 
        delete projection;
    }

    if(quality_option != nullptr) { 
        delete quality_option;
    }

    if(reference_type_enum != nullptr) { 
        delete reference_type_enum;
    }
    if(revision != nullptr) { 
        delete revision;
    }

    if(simplification_option != nullptr) { 
        delete simplification_option;
    }

    if(size != nullptr) { 
        delete size;
    }
    if(sketch_ids != nullptr) { 
        auto arr = sketch_ids;
        for(auto o: *arr) { 
            delete o;
        }
        delete sketch_ids;
    }
    if(standard != nullptr) { 
        delete standard;
    }
    if(start_zones != nullptr) { 
        delete start_zones;
    }
    if(template_args != nullptr) { 
        auto arr = template_args;
        for(auto o: *arr) { 
            delete o;
        }
        delete template_args;
    }
    if(template_document_id != nullptr) { 
        delete template_document_id;
    }
    if(template_element_id != nullptr) { 
        delete template_element_id;
    }
    if(template_name != nullptr) { 
        delete template_name;
    }
    if(template_version_id != nullptr) { 
        delete template_version_id;
    }
    if(template_workspace_id != nullptr) { 
        delete template_workspace_id;
    }

    if(units != nullptr) { 
        delete units;
    }
    if(views != nullptr) { 
        delete views;
    }
    if(workspace_id != nullptr) { 
        delete workspace_id;
    }
}

OAIBTDrawingParams*
OAIBTDrawingParams::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIBTDrawingParams::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&border, pJson["border"], "bool", "");
    
    ::OpenAPI::setValue(&compute_intersection, pJson["computeIntersection"], "bool", "");
    
    ::OpenAPI::setValue(&decimal_separator, pJson["decimalSeparator"], "QString", "QString");
    
    ::OpenAPI::setValue(&document_id, pJson["documentId"], "QString", "QString");
    
    ::OpenAPI::setValue(&document_microversion_id, pJson["documentMicroversionId"], "QString", "QString");
    
    ::OpenAPI::setValue(&drawing_name, pJson["drawingName"], "QString", "QString");
    
    ::OpenAPI::setValue(&element_configuration, pJson["elementConfiguration"], "QString", "QString");
    
    ::OpenAPI::setValue(&element_id, pJson["elementId"], "QString", "QString");
    
    ::OpenAPI::setValue(&element_microversion_id, pJson["elementMicroversionId"], "QString", "QString");
    
    ::OpenAPI::setValue(&external_document_id, pJson["externalDocumentId"], "QString", "QString");
    
    ::OpenAPI::setValue(&external_document_version_id, pJson["externalDocumentVersionId"], "QString", "QString");
    
    ::OpenAPI::setValue(&hidden_lines, pJson["hiddenLines"], "QString", "QString");
    
    ::OpenAPI::setValue(&include_surfaces, pJson["includeSurfaces"], "bool", "");
    
    ::OpenAPI::setValue(&is_flattened_part, pJson["isFlattenedPart"], "bool", "");
    
    ::OpenAPI::setValue(&is_sketch_only, pJson["isSketchOnly"], "bool", "");
    
    ::OpenAPI::setValue(&is_surface, pJson["isSurface"], "bool", "");
    
    ::OpenAPI::setValue(&language, pJson["language"], "QString", "QString");
    
    ::OpenAPI::setValue(&location, pJson["location"], "OAIBTElementLocationParams", "OAIBTElementLocationParams");
    
    ::OpenAPI::setValue(&model_type, pJson["modelType"], "QString", "QString");
    
    ::OpenAPI::setValue(&number_horizontal_zones, pJson["numberHorizontalZones"], "qint32", "");
    
    ::OpenAPI::setValue(&number_vertical_zones, pJson["numberVerticalZones"], "qint32", "");
    
    ::OpenAPI::setValue(&part_id, pJson["partId"], "QString", "QString");
    
    ::OpenAPI::setValue(&part_number, pJson["partNumber"], "QString", "QString");
    
    ::OpenAPI::setValue(&part_query, pJson["partQuery"], "QString", "QString");
    
    ::OpenAPI::setValue(&projection, pJson["projection"], "QString", "QString");
    
    ::OpenAPI::setValue(&pure_sketch, pJson["pureSketch"], "bool", "");
    
    ::OpenAPI::setValue(&quality_option, pJson["qualityOption"], "QString", "QString");
    
    ::OpenAPI::setValue(&reference_type, pJson["referenceType"], "qint32", "");
    
    ::OpenAPI::setValue(&reference_type_enum, pJson["referenceTypeEnum"], "QString", "QString");
    
    ::OpenAPI::setValue(&revision, pJson["revision"], "QString", "QString");
    
    ::OpenAPI::setValue(&show_cut_geom_only, pJson["showCutGeomOnly"], "bool", "");
    
    ::OpenAPI::setValue(&simplification_option, pJson["simplificationOption"], "QString", "QString");
    
    ::OpenAPI::setValue(&simplification_threshold, pJson["simplificationThreshold"], "double", "");
    
    ::OpenAPI::setValue(&size, pJson["size"], "QString", "QString");
    
    
    ::OpenAPI::setValue(&sketch_ids, pJson["sketchIds"], "QList", "QString");
    ::OpenAPI::setValue(&standard, pJson["standard"], "QString", "QString");
    
    ::OpenAPI::setValue(&start_zones, pJson["startZones"], "QString", "QString");
    
    
    ::OpenAPI::setValue(&template_args, pJson["templateArgs"], "QList", "QString");
    ::OpenAPI::setValue(&template_document_id, pJson["templateDocumentId"], "QString", "QString");
    
    ::OpenAPI::setValue(&template_element_id, pJson["templateElementId"], "QString", "QString");
    
    ::OpenAPI::setValue(&template_name, pJson["templateName"], "QString", "QString");
    
    ::OpenAPI::setValue(&template_version_id, pJson["templateVersionId"], "QString", "QString");
    
    ::OpenAPI::setValue(&template_workspace_id, pJson["templateWorkspaceId"], "QString", "QString");
    
    ::OpenAPI::setValue(&titleblock, pJson["titleblock"], "bool", "");
    
    ::OpenAPI::setValue(&units, pJson["units"], "QString", "QString");
    
    ::OpenAPI::setValue(&views, pJson["views"], "QString", "QString");
    
    ::OpenAPI::setValue(&workspace_id, pJson["workspaceId"], "QString", "QString");
    
}

QString
OAIBTDrawingParams::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIBTDrawingParams::asJsonObject() {
    QJsonObject obj;
    if(m_border_isSet){
        obj.insert("border", QJsonValue(border));
    }
    if(m_compute_intersection_isSet){
        obj.insert("computeIntersection", QJsonValue(compute_intersection));
    }
    if(decimal_separator != nullptr && *decimal_separator != QString("")){
        toJsonValue(QString("decimalSeparator"), decimal_separator, obj, QString("QString"));
    }
    if(document_id != nullptr && *document_id != QString("")){
        toJsonValue(QString("documentId"), document_id, obj, QString("QString"));
    }
    if(document_microversion_id != nullptr && *document_microversion_id != QString("")){
        toJsonValue(QString("documentMicroversionId"), document_microversion_id, obj, QString("QString"));
    }
    if(drawing_name != nullptr && *drawing_name != QString("")){
        toJsonValue(QString("drawingName"), drawing_name, obj, QString("QString"));
    }
    if(element_configuration != nullptr && *element_configuration != QString("")){
        toJsonValue(QString("elementConfiguration"), element_configuration, obj, QString("QString"));
    }
    if(element_id != nullptr && *element_id != QString("")){
        toJsonValue(QString("elementId"), element_id, obj, QString("QString"));
    }
    if(element_microversion_id != nullptr && *element_microversion_id != QString("")){
        toJsonValue(QString("elementMicroversionId"), element_microversion_id, obj, QString("QString"));
    }
    if(external_document_id != nullptr && *external_document_id != QString("")){
        toJsonValue(QString("externalDocumentId"), external_document_id, obj, QString("QString"));
    }
    if(external_document_version_id != nullptr && *external_document_version_id != QString("")){
        toJsonValue(QString("externalDocumentVersionId"), external_document_version_id, obj, QString("QString"));
    }
    if(hidden_lines != nullptr && *hidden_lines != QString("")){
        toJsonValue(QString("hiddenLines"), hidden_lines, obj, QString("QString"));
    }
    if(m_include_surfaces_isSet){
        obj.insert("includeSurfaces", QJsonValue(include_surfaces));
    }
    if(m_is_flattened_part_isSet){
        obj.insert("isFlattenedPart", QJsonValue(is_flattened_part));
    }
    if(m_is_sketch_only_isSet){
        obj.insert("isSketchOnly", QJsonValue(is_sketch_only));
    }
    if(m_is_surface_isSet){
        obj.insert("isSurface", QJsonValue(is_surface));
    }
    if(language != nullptr && *language != QString("")){
        toJsonValue(QString("language"), language, obj, QString("QString"));
    }
    if((location != nullptr) && (location->isSet())){
        toJsonValue(QString("location"), location, obj, QString("OAIBTElementLocationParams"));
    }
    if(model_type != nullptr && *model_type != QString("")){
        toJsonValue(QString("modelType"), model_type, obj, QString("QString"));
    }
    if(m_number_horizontal_zones_isSet){
        obj.insert("numberHorizontalZones", QJsonValue(number_horizontal_zones));
    }
    if(m_number_vertical_zones_isSet){
        obj.insert("numberVerticalZones", QJsonValue(number_vertical_zones));
    }
    if(part_id != nullptr && *part_id != QString("")){
        toJsonValue(QString("partId"), part_id, obj, QString("QString"));
    }
    if(part_number != nullptr && *part_number != QString("")){
        toJsonValue(QString("partNumber"), part_number, obj, QString("QString"));
    }
    if(part_query != nullptr && *part_query != QString("")){
        toJsonValue(QString("partQuery"), part_query, obj, QString("QString"));
    }
    if(projection != nullptr && *projection != QString("")){
        toJsonValue(QString("projection"), projection, obj, QString("QString"));
    }
    if(m_pure_sketch_isSet){
        obj.insert("pureSketch", QJsonValue(pure_sketch));
    }
    if(quality_option != nullptr && *quality_option != QString("")){
        toJsonValue(QString("qualityOption"), quality_option, obj, QString("QString"));
    }
    if(m_reference_type_isSet){
        obj.insert("referenceType", QJsonValue(reference_type));
    }
    if(reference_type_enum != nullptr && *reference_type_enum != QString("")){
        toJsonValue(QString("referenceTypeEnum"), reference_type_enum, obj, QString("QString"));
    }
    if(revision != nullptr && *revision != QString("")){
        toJsonValue(QString("revision"), revision, obj, QString("QString"));
    }
    if(m_show_cut_geom_only_isSet){
        obj.insert("showCutGeomOnly", QJsonValue(show_cut_geom_only));
    }
    if(simplification_option != nullptr && *simplification_option != QString("")){
        toJsonValue(QString("simplificationOption"), simplification_option, obj, QString("QString"));
    }
    if(m_simplification_threshold_isSet){
        obj.insert("simplificationThreshold", QJsonValue(simplification_threshold));
    }
    if(size != nullptr && *size != QString("")){
        toJsonValue(QString("size"), size, obj, QString("QString"));
    }
    if(sketch_ids->size() > 0){
        toJsonArray((QList<void*>*)sketch_ids, obj, "sketchIds", "QString");
    }
    if(standard != nullptr && *standard != QString("")){
        toJsonValue(QString("standard"), standard, obj, QString("QString"));
    }
    if(start_zones != nullptr && *start_zones != QString("")){
        toJsonValue(QString("startZones"), start_zones, obj, QString("QString"));
    }
    if(template_args->size() > 0){
        toJsonArray((QList<void*>*)template_args, obj, "templateArgs", "QString");
    }
    if(template_document_id != nullptr && *template_document_id != QString("")){
        toJsonValue(QString("templateDocumentId"), template_document_id, obj, QString("QString"));
    }
    if(template_element_id != nullptr && *template_element_id != QString("")){
        toJsonValue(QString("templateElementId"), template_element_id, obj, QString("QString"));
    }
    if(template_name != nullptr && *template_name != QString("")){
        toJsonValue(QString("templateName"), template_name, obj, QString("QString"));
    }
    if(template_version_id != nullptr && *template_version_id != QString("")){
        toJsonValue(QString("templateVersionId"), template_version_id, obj, QString("QString"));
    }
    if(template_workspace_id != nullptr && *template_workspace_id != QString("")){
        toJsonValue(QString("templateWorkspaceId"), template_workspace_id, obj, QString("QString"));
    }
    if(m_titleblock_isSet){
        obj.insert("titleblock", QJsonValue(titleblock));
    }
    if(units != nullptr && *units != QString("")){
        toJsonValue(QString("units"), units, obj, QString("QString"));
    }
    if(views != nullptr && *views != QString("")){
        toJsonValue(QString("views"), views, obj, QString("QString"));
    }
    if(workspace_id != nullptr && *workspace_id != QString("")){
        toJsonValue(QString("workspaceId"), workspace_id, obj, QString("QString"));
    }

    return obj;
}

bool
OAIBTDrawingParams::isBorder() {
    return border;
}
void
OAIBTDrawingParams::setBorder(bool border) {
    this->border = border;
    this->m_border_isSet = true;
}

bool
OAIBTDrawingParams::isComputeIntersection() {
    return compute_intersection;
}
void
OAIBTDrawingParams::setComputeIntersection(bool compute_intersection) {
    this->compute_intersection = compute_intersection;
    this->m_compute_intersection_isSet = true;
}

QString*
OAIBTDrawingParams::getDecimalSeparator() {
    return decimal_separator;
}
void
OAIBTDrawingParams::setDecimalSeparator(QString* decimal_separator) {
    this->decimal_separator = decimal_separator;
    this->m_decimal_separator_isSet = true;
}

QString*
OAIBTDrawingParams::getDocumentId() {
    return document_id;
}
void
OAIBTDrawingParams::setDocumentId(QString* document_id) {
    this->document_id = document_id;
    this->m_document_id_isSet = true;
}

QString*
OAIBTDrawingParams::getDocumentMicroversionId() {
    return document_microversion_id;
}
void
OAIBTDrawingParams::setDocumentMicroversionId(QString* document_microversion_id) {
    this->document_microversion_id = document_microversion_id;
    this->m_document_microversion_id_isSet = true;
}

QString*
OAIBTDrawingParams::getDrawingName() {
    return drawing_name;
}
void
OAIBTDrawingParams::setDrawingName(QString* drawing_name) {
    this->drawing_name = drawing_name;
    this->m_drawing_name_isSet = true;
}

QString*
OAIBTDrawingParams::getElementConfiguration() {
    return element_configuration;
}
void
OAIBTDrawingParams::setElementConfiguration(QString* element_configuration) {
    this->element_configuration = element_configuration;
    this->m_element_configuration_isSet = true;
}

QString*
OAIBTDrawingParams::getElementId() {
    return element_id;
}
void
OAIBTDrawingParams::setElementId(QString* element_id) {
    this->element_id = element_id;
    this->m_element_id_isSet = true;
}

QString*
OAIBTDrawingParams::getElementMicroversionId() {
    return element_microversion_id;
}
void
OAIBTDrawingParams::setElementMicroversionId(QString* element_microversion_id) {
    this->element_microversion_id = element_microversion_id;
    this->m_element_microversion_id_isSet = true;
}

QString*
OAIBTDrawingParams::getExternalDocumentId() {
    return external_document_id;
}
void
OAIBTDrawingParams::setExternalDocumentId(QString* external_document_id) {
    this->external_document_id = external_document_id;
    this->m_external_document_id_isSet = true;
}

QString*
OAIBTDrawingParams::getExternalDocumentVersionId() {
    return external_document_version_id;
}
void
OAIBTDrawingParams::setExternalDocumentVersionId(QString* external_document_version_id) {
    this->external_document_version_id = external_document_version_id;
    this->m_external_document_version_id_isSet = true;
}

QString*
OAIBTDrawingParams::getHiddenLines() {
    return hidden_lines;
}
void
OAIBTDrawingParams::setHiddenLines(QString* hidden_lines) {
    this->hidden_lines = hidden_lines;
    this->m_hidden_lines_isSet = true;
}

bool
OAIBTDrawingParams::isIncludeSurfaces() {
    return include_surfaces;
}
void
OAIBTDrawingParams::setIncludeSurfaces(bool include_surfaces) {
    this->include_surfaces = include_surfaces;
    this->m_include_surfaces_isSet = true;
}

bool
OAIBTDrawingParams::isIsFlattenedPart() {
    return is_flattened_part;
}
void
OAIBTDrawingParams::setIsFlattenedPart(bool is_flattened_part) {
    this->is_flattened_part = is_flattened_part;
    this->m_is_flattened_part_isSet = true;
}

bool
OAIBTDrawingParams::isIsSketchOnly() {
    return is_sketch_only;
}
void
OAIBTDrawingParams::setIsSketchOnly(bool is_sketch_only) {
    this->is_sketch_only = is_sketch_only;
    this->m_is_sketch_only_isSet = true;
}

bool
OAIBTDrawingParams::isIsSurface() {
    return is_surface;
}
void
OAIBTDrawingParams::setIsSurface(bool is_surface) {
    this->is_surface = is_surface;
    this->m_is_surface_isSet = true;
}

QString*
OAIBTDrawingParams::getLanguage() {
    return language;
}
void
OAIBTDrawingParams::setLanguage(QString* language) {
    this->language = language;
    this->m_language_isSet = true;
}

OAIBTElementLocationParams*
OAIBTDrawingParams::getLocation() {
    return location;
}
void
OAIBTDrawingParams::setLocation(OAIBTElementLocationParams* location) {
    this->location = location;
    this->m_location_isSet = true;
}

QString*
OAIBTDrawingParams::getModelType() {
    return model_type;
}
void
OAIBTDrawingParams::setModelType(QString* model_type) {
    this->model_type = model_type;
    this->m_model_type_isSet = true;
}

qint32
OAIBTDrawingParams::getNumberHorizontalZones() {
    return number_horizontal_zones;
}
void
OAIBTDrawingParams::setNumberHorizontalZones(qint32 number_horizontal_zones) {
    this->number_horizontal_zones = number_horizontal_zones;
    this->m_number_horizontal_zones_isSet = true;
}

qint32
OAIBTDrawingParams::getNumberVerticalZones() {
    return number_vertical_zones;
}
void
OAIBTDrawingParams::setNumberVerticalZones(qint32 number_vertical_zones) {
    this->number_vertical_zones = number_vertical_zones;
    this->m_number_vertical_zones_isSet = true;
}

QString*
OAIBTDrawingParams::getPartId() {
    return part_id;
}
void
OAIBTDrawingParams::setPartId(QString* part_id) {
    this->part_id = part_id;
    this->m_part_id_isSet = true;
}

QString*
OAIBTDrawingParams::getPartNumber() {
    return part_number;
}
void
OAIBTDrawingParams::setPartNumber(QString* part_number) {
    this->part_number = part_number;
    this->m_part_number_isSet = true;
}

QString*
OAIBTDrawingParams::getPartQuery() {
    return part_query;
}
void
OAIBTDrawingParams::setPartQuery(QString* part_query) {
    this->part_query = part_query;
    this->m_part_query_isSet = true;
}

QString*
OAIBTDrawingParams::getProjection() {
    return projection;
}
void
OAIBTDrawingParams::setProjection(QString* projection) {
    this->projection = projection;
    this->m_projection_isSet = true;
}

bool
OAIBTDrawingParams::isPureSketch() {
    return pure_sketch;
}
void
OAIBTDrawingParams::setPureSketch(bool pure_sketch) {
    this->pure_sketch = pure_sketch;
    this->m_pure_sketch_isSet = true;
}

QString*
OAIBTDrawingParams::getQualityOption() {
    return quality_option;
}
void
OAIBTDrawingParams::setQualityOption(QString* quality_option) {
    this->quality_option = quality_option;
    this->m_quality_option_isSet = true;
}

qint32
OAIBTDrawingParams::getReferenceType() {
    return reference_type;
}
void
OAIBTDrawingParams::setReferenceType(qint32 reference_type) {
    this->reference_type = reference_type;
    this->m_reference_type_isSet = true;
}

QString*
OAIBTDrawingParams::getReferenceTypeEnum() {
    return reference_type_enum;
}
void
OAIBTDrawingParams::setReferenceTypeEnum(QString* reference_type_enum) {
    this->reference_type_enum = reference_type_enum;
    this->m_reference_type_enum_isSet = true;
}

QString*
OAIBTDrawingParams::getRevision() {
    return revision;
}
void
OAIBTDrawingParams::setRevision(QString* revision) {
    this->revision = revision;
    this->m_revision_isSet = true;
}

bool
OAIBTDrawingParams::isShowCutGeomOnly() {
    return show_cut_geom_only;
}
void
OAIBTDrawingParams::setShowCutGeomOnly(bool show_cut_geom_only) {
    this->show_cut_geom_only = show_cut_geom_only;
    this->m_show_cut_geom_only_isSet = true;
}

QString*
OAIBTDrawingParams::getSimplificationOption() {
    return simplification_option;
}
void
OAIBTDrawingParams::setSimplificationOption(QString* simplification_option) {
    this->simplification_option = simplification_option;
    this->m_simplification_option_isSet = true;
}

double
OAIBTDrawingParams::getSimplificationThreshold() {
    return simplification_threshold;
}
void
OAIBTDrawingParams::setSimplificationThreshold(double simplification_threshold) {
    this->simplification_threshold = simplification_threshold;
    this->m_simplification_threshold_isSet = true;
}

QString*
OAIBTDrawingParams::getSize() {
    return size;
}
void
OAIBTDrawingParams::setSize(QString* size) {
    this->size = size;
    this->m_size_isSet = true;
}

QList<QString*>*
OAIBTDrawingParams::getSketchIds() {
    return sketch_ids;
}
void
OAIBTDrawingParams::setSketchIds(QList<QString*>* sketch_ids) {
    this->sketch_ids = sketch_ids;
    this->m_sketch_ids_isSet = true;
}

QString*
OAIBTDrawingParams::getStandard() {
    return standard;
}
void
OAIBTDrawingParams::setStandard(QString* standard) {
    this->standard = standard;
    this->m_standard_isSet = true;
}

QString*
OAIBTDrawingParams::getStartZones() {
    return start_zones;
}
void
OAIBTDrawingParams::setStartZones(QString* start_zones) {
    this->start_zones = start_zones;
    this->m_start_zones_isSet = true;
}

QList<QString*>*
OAIBTDrawingParams::getTemplateArgs() {
    return template_args;
}
void
OAIBTDrawingParams::setTemplateArgs(QList<QString*>* template_args) {
    this->template_args = template_args;
    this->m_template_args_isSet = true;
}

QString*
OAIBTDrawingParams::getTemplateDocumentId() {
    return template_document_id;
}
void
OAIBTDrawingParams::setTemplateDocumentId(QString* template_document_id) {
    this->template_document_id = template_document_id;
    this->m_template_document_id_isSet = true;
}

QString*
OAIBTDrawingParams::getTemplateElementId() {
    return template_element_id;
}
void
OAIBTDrawingParams::setTemplateElementId(QString* template_element_id) {
    this->template_element_id = template_element_id;
    this->m_template_element_id_isSet = true;
}

QString*
OAIBTDrawingParams::getTemplateName() {
    return template_name;
}
void
OAIBTDrawingParams::setTemplateName(QString* template_name) {
    this->template_name = template_name;
    this->m_template_name_isSet = true;
}

QString*
OAIBTDrawingParams::getTemplateVersionId() {
    return template_version_id;
}
void
OAIBTDrawingParams::setTemplateVersionId(QString* template_version_id) {
    this->template_version_id = template_version_id;
    this->m_template_version_id_isSet = true;
}

QString*
OAIBTDrawingParams::getTemplateWorkspaceId() {
    return template_workspace_id;
}
void
OAIBTDrawingParams::setTemplateWorkspaceId(QString* template_workspace_id) {
    this->template_workspace_id = template_workspace_id;
    this->m_template_workspace_id_isSet = true;
}

bool
OAIBTDrawingParams::isTitleblock() {
    return titleblock;
}
void
OAIBTDrawingParams::setTitleblock(bool titleblock) {
    this->titleblock = titleblock;
    this->m_titleblock_isSet = true;
}

QString*
OAIBTDrawingParams::getUnits() {
    return units;
}
void
OAIBTDrawingParams::setUnits(QString* units) {
    this->units = units;
    this->m_units_isSet = true;
}

QString*
OAIBTDrawingParams::getViews() {
    return views;
}
void
OAIBTDrawingParams::setViews(QString* views) {
    this->views = views;
    this->m_views_isSet = true;
}

QString*
OAIBTDrawingParams::getWorkspaceId() {
    return workspace_id;
}
void
OAIBTDrawingParams::setWorkspaceId(QString* workspace_id) {
    this->workspace_id = workspace_id;
    this->m_workspace_id_isSet = true;
}


bool
OAIBTDrawingParams::isSet(){
    bool isObjectUpdated = false;
    do{
        if(m_border_isSet){ isObjectUpdated = true; break;}
        if(m_compute_intersection_isSet){ isObjectUpdated = true; break;}
        if(decimal_separator != nullptr && *decimal_separator != QString("")){ isObjectUpdated = true; break;}
        if(document_id != nullptr && *document_id != QString("")){ isObjectUpdated = true; break;}
        if(document_microversion_id != nullptr && *document_microversion_id != QString("")){ isObjectUpdated = true; break;}
        if(drawing_name != nullptr && *drawing_name != QString("")){ isObjectUpdated = true; break;}
        if(element_configuration != nullptr && *element_configuration != QString("")){ isObjectUpdated = true; break;}
        if(element_id != nullptr && *element_id != QString("")){ isObjectUpdated = true; break;}
        if(element_microversion_id != nullptr && *element_microversion_id != QString("")){ isObjectUpdated = true; break;}
        if(external_document_id != nullptr && *external_document_id != QString("")){ isObjectUpdated = true; break;}
        if(external_document_version_id != nullptr && *external_document_version_id != QString("")){ isObjectUpdated = true; break;}
        if(hidden_lines != nullptr && *hidden_lines != QString("")){ isObjectUpdated = true; break;}
        if(m_include_surfaces_isSet){ isObjectUpdated = true; break;}
        if(m_is_flattened_part_isSet){ isObjectUpdated = true; break;}
        if(m_is_sketch_only_isSet){ isObjectUpdated = true; break;}
        if(m_is_surface_isSet){ isObjectUpdated = true; break;}
        if(language != nullptr && *language != QString("")){ isObjectUpdated = true; break;}
        if(location != nullptr && location->isSet()){ isObjectUpdated = true; break;}
        if(model_type != nullptr && *model_type != QString("")){ isObjectUpdated = true; break;}
        if(m_number_horizontal_zones_isSet){ isObjectUpdated = true; break;}
        if(m_number_vertical_zones_isSet){ isObjectUpdated = true; break;}
        if(part_id != nullptr && *part_id != QString("")){ isObjectUpdated = true; break;}
        if(part_number != nullptr && *part_number != QString("")){ isObjectUpdated = true; break;}
        if(part_query != nullptr && *part_query != QString("")){ isObjectUpdated = true; break;}
        if(projection != nullptr && *projection != QString("")){ isObjectUpdated = true; break;}
        if(m_pure_sketch_isSet){ isObjectUpdated = true; break;}
        if(quality_option != nullptr && *quality_option != QString("")){ isObjectUpdated = true; break;}
        if(m_reference_type_isSet){ isObjectUpdated = true; break;}
        if(reference_type_enum != nullptr && *reference_type_enum != QString("")){ isObjectUpdated = true; break;}
        if(revision != nullptr && *revision != QString("")){ isObjectUpdated = true; break;}
        if(m_show_cut_geom_only_isSet){ isObjectUpdated = true; break;}
        if(simplification_option != nullptr && *simplification_option != QString("")){ isObjectUpdated = true; break;}
        if(m_simplification_threshold_isSet){ isObjectUpdated = true; break;}
        if(size != nullptr && *size != QString("")){ isObjectUpdated = true; break;}
        if(sketch_ids->size() > 0){ isObjectUpdated = true; break;}
        if(standard != nullptr && *standard != QString("")){ isObjectUpdated = true; break;}
        if(start_zones != nullptr && *start_zones != QString("")){ isObjectUpdated = true; break;}
        if(template_args->size() > 0){ isObjectUpdated = true; break;}
        if(template_document_id != nullptr && *template_document_id != QString("")){ isObjectUpdated = true; break;}
        if(template_element_id != nullptr && *template_element_id != QString("")){ isObjectUpdated = true; break;}
        if(template_name != nullptr && *template_name != QString("")){ isObjectUpdated = true; break;}
        if(template_version_id != nullptr && *template_version_id != QString("")){ isObjectUpdated = true; break;}
        if(template_workspace_id != nullptr && *template_workspace_id != QString("")){ isObjectUpdated = true; break;}
        if(m_titleblock_isSet){ isObjectUpdated = true; break;}
        if(units != nullptr && *units != QString("")){ isObjectUpdated = true; break;}
        if(views != nullptr && *views != QString("")){ isObjectUpdated = true; break;}
        if(workspace_id != nullptr && *workspace_id != QString("")){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

