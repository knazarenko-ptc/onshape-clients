/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * OpenAPI spec version: 1.111
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIBTPModuleId-235.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIBTPModuleId-235::OAIBTPModuleId-235(QString json) {
    init();
    this->fromJson(json);
}

OAIBTPModuleId-235::OAIBTPModuleId-235() {
    init();
}

OAIBTPModuleId-235::~OAIBTPModuleId-235() {
    this->cleanup();
}

void
OAIBTPModuleId-235::init() {
    atomic = false;
    m_atomic_isSet = false;
    bt_type = new QString("");
    m_bt_type_isSet = false;
    documentation_type = new QString("");
    m_documentation_type_isSet = false;
    end_source_location = 0;
    m_end_source_location_isSet = false;
    node_id = new QString("");
    m_node_id_isSet = false;
    short_descriptor = new QString("");
    m_short_descriptor_isSet = false;
    space_after = new OAIBTPSpace-10();
    m_space_after_isSet = false;
    space_before = new OAIBTPSpace-10();
    m_space_before_isSet = false;
    space_default = false;
    m_space_default_isSet = false;
    start_source_location = 0;
    m_start_source_location_isSet = false;
    standard_library = false;
    m_standard_library_isSet = false;
    version_and_microversion = new QString("");
    m_version_and_microversion_isSet = false;
    external_import = false;
    m_external_import_isSet = false;
    imported_document_id = new QString("");
    m_imported_document_id_isSet = false;
    external_document_with_version = new OAIBTDocumentWithVersionId();
    m_external_document_with_version_isSet = false;
    dbimport_string = new QString("");
    m_dbimport_string_isSet = false;
    element_import = false;
    m_element_import_isSet = false;
    imported_element_id = new QString("");
    m_imported_element_id_isSet = false;
    potentially_valid = false;
    m_potentially_valid_isSet = false;
    standard_library_common = false;
    m_standard_library_common_isSet = false;
    path_potentially_valid = false;
    m_path_potentially_valid_isSet = false;
    version_potentially_valid = false;
    m_version_potentially_valid_isSet = false;
    valid_legacy_version = false;
    m_valid_legacy_version_isSet = false;
    path_version = new QString("");
    m_path_version_isSet = false;
    imported_version_id = new QString("");
    m_imported_version_id_isSet = false;
    external_document_with_version_and_element_id = new OAIBTDocumentWithVersionAndElementId();
    m_external_document_with_version_and_element_id_isSet = false;
    legacy = false;
    m_legacy_isSet = false;
    microversion = new QString("");
    m_microversion_isSet = false;
    space_before_path = new OAIBTPSpace-10();
    m_space_before_path_isSet = false;
    space_after_path = new OAIBTPSpace-10();
    m_space_after_path_isSet = false;
    space_before_version = new OAIBTPSpace-10();
    m_space_before_version_isSet = false;
    space_after_version = new OAIBTPSpace-10();
    m_space_after_version_isSet = false;
    version = new OAIBTPLiteralString-259();
    m_version_isSet = false;
    path = new OAIBTPLiteralString-259();
    m_path_isSet = false;
}

void
OAIBTPModuleId-235::cleanup() {

    if(bt_type != nullptr) { 
        delete bt_type;
    }
    if(documentation_type != nullptr) { 
        delete documentation_type;
    }

    if(node_id != nullptr) { 
        delete node_id;
    }
    if(short_descriptor != nullptr) { 
        delete short_descriptor;
    }
    if(space_after != nullptr) { 
        delete space_after;
    }
    if(space_before != nullptr) { 
        delete space_before;
    }



    if(version_and_microversion != nullptr) { 
        delete version_and_microversion;
    }

    if(imported_document_id != nullptr) { 
        delete imported_document_id;
    }
    if(external_document_with_version != nullptr) { 
        delete external_document_with_version;
    }
    if(dbimport_string != nullptr) { 
        delete dbimport_string;
    }

    if(imported_element_id != nullptr) { 
        delete imported_element_id;
    }





    if(path_version != nullptr) { 
        delete path_version;
    }
    if(imported_version_id != nullptr) { 
        delete imported_version_id;
    }
    if(external_document_with_version_and_element_id != nullptr) { 
        delete external_document_with_version_and_element_id;
    }

    if(microversion != nullptr) { 
        delete microversion;
    }
    if(space_before_path != nullptr) { 
        delete space_before_path;
    }
    if(space_after_path != nullptr) { 
        delete space_after_path;
    }
    if(space_before_version != nullptr) { 
        delete space_before_version;
    }
    if(space_after_version != nullptr) { 
        delete space_after_version;
    }
    if(version != nullptr) { 
        delete version;
    }
    if(path != nullptr) { 
        delete path;
    }
}

OAIBTPModuleId-235*
OAIBTPModuleId-235::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIBTPModuleId-235::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&atomic, pJson["atomic"], "bool", "");
    
    ::OpenAPI::setValue(&bt_type, pJson["btType"], "QString", "QString");
    
    ::OpenAPI::setValue(&documentation_type, pJson["documentationType"], "QString", "QString");
    
    ::OpenAPI::setValue(&end_source_location, pJson["endSourceLocation"], "qint32", "");
    
    ::OpenAPI::setValue(&node_id, pJson["nodeId"], "QString", "QString");
    
    ::OpenAPI::setValue(&short_descriptor, pJson["shortDescriptor"], "QString", "QString");
    
    ::OpenAPI::setValue(&space_after, pJson["spaceAfter"], "OAIBTPSpace-10", "OAIBTPSpace-10");
    
    ::OpenAPI::setValue(&space_before, pJson["spaceBefore"], "OAIBTPSpace-10", "OAIBTPSpace-10");
    
    ::OpenAPI::setValue(&space_default, pJson["spaceDefault"], "bool", "");
    
    ::OpenAPI::setValue(&start_source_location, pJson["startSourceLocation"], "qint32", "");
    
    ::OpenAPI::setValue(&standard_library, pJson["standardLibrary"], "bool", "");
    
    ::OpenAPI::setValue(&version_and_microversion, pJson["versionAndMicroversion"], "QString", "QString");
    
    ::OpenAPI::setValue(&external_import, pJson["externalImport"], "bool", "");
    
    ::OpenAPI::setValue(&imported_document_id, pJson["importedDocumentId"], "QString", "QString");
    
    ::OpenAPI::setValue(&external_document_with_version, pJson["externalDocumentWithVersion"], "OAIBTDocumentWithVersionId", "OAIBTDocumentWithVersionId");
    
    ::OpenAPI::setValue(&dbimport_string, pJson["dbimportString"], "QString", "QString");
    
    ::OpenAPI::setValue(&element_import, pJson["elementImport"], "bool", "");
    
    ::OpenAPI::setValue(&imported_element_id, pJson["importedElementId"], "QString", "QString");
    
    ::OpenAPI::setValue(&potentially_valid, pJson["potentiallyValid"], "bool", "");
    
    ::OpenAPI::setValue(&standard_library_common, pJson["standardLibraryCommon"], "bool", "");
    
    ::OpenAPI::setValue(&path_potentially_valid, pJson["pathPotentiallyValid"], "bool", "");
    
    ::OpenAPI::setValue(&version_potentially_valid, pJson["versionPotentiallyValid"], "bool", "");
    
    ::OpenAPI::setValue(&valid_legacy_version, pJson["validLegacyVersion"], "bool", "");
    
    ::OpenAPI::setValue(&path_version, pJson["pathVersion"], "QString", "QString");
    
    ::OpenAPI::setValue(&imported_version_id, pJson["importedVersionId"], "QString", "QString");
    
    ::OpenAPI::setValue(&external_document_with_version_and_element_id, pJson["externalDocumentWithVersionAndElementId"], "OAIBTDocumentWithVersionAndElementId", "OAIBTDocumentWithVersionAndElementId");
    
    ::OpenAPI::setValue(&legacy, pJson["legacy"], "bool", "");
    
    ::OpenAPI::setValue(&microversion, pJson["microversion"], "QString", "QString");
    
    ::OpenAPI::setValue(&space_before_path, pJson["spaceBeforePath"], "OAIBTPSpace-10", "OAIBTPSpace-10");
    
    ::OpenAPI::setValue(&space_after_path, pJson["spaceAfterPath"], "OAIBTPSpace-10", "OAIBTPSpace-10");
    
    ::OpenAPI::setValue(&space_before_version, pJson["spaceBeforeVersion"], "OAIBTPSpace-10", "OAIBTPSpace-10");
    
    ::OpenAPI::setValue(&space_after_version, pJson["spaceAfterVersion"], "OAIBTPSpace-10", "OAIBTPSpace-10");
    
    ::OpenAPI::setValue(&version, pJson["version"], "OAIBTPLiteralString-259", "OAIBTPLiteralString-259");
    
    ::OpenAPI::setValue(&path, pJson["path"], "OAIBTPLiteralString-259", "OAIBTPLiteralString-259");
    
}

QString
OAIBTPModuleId-235::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIBTPModuleId-235::asJsonObject() {
    QJsonObject obj;
    if(m_atomic_isSet){
        obj.insert("atomic", QJsonValue(atomic));
    }
    if(bt_type != nullptr && *bt_type != QString("")){
        toJsonValue(QString("btType"), bt_type, obj, QString("QString"));
    }
    if(documentation_type != nullptr && *documentation_type != QString("")){
        toJsonValue(QString("documentationType"), documentation_type, obj, QString("QString"));
    }
    if(m_end_source_location_isSet){
        obj.insert("endSourceLocation", QJsonValue(end_source_location));
    }
    if(node_id != nullptr && *node_id != QString("")){
        toJsonValue(QString("nodeId"), node_id, obj, QString("QString"));
    }
    if(short_descriptor != nullptr && *short_descriptor != QString("")){
        toJsonValue(QString("shortDescriptor"), short_descriptor, obj, QString("QString"));
    }
    if((space_after != nullptr) && (space_after->isSet())){
        toJsonValue(QString("spaceAfter"), space_after, obj, QString("OAIBTPSpace-10"));
    }
    if((space_before != nullptr) && (space_before->isSet())){
        toJsonValue(QString("spaceBefore"), space_before, obj, QString("OAIBTPSpace-10"));
    }
    if(m_space_default_isSet){
        obj.insert("spaceDefault", QJsonValue(space_default));
    }
    if(m_start_source_location_isSet){
        obj.insert("startSourceLocation", QJsonValue(start_source_location));
    }
    if(m_standard_library_isSet){
        obj.insert("standardLibrary", QJsonValue(standard_library));
    }
    if(version_and_microversion != nullptr && *version_and_microversion != QString("")){
        toJsonValue(QString("versionAndMicroversion"), version_and_microversion, obj, QString("QString"));
    }
    if(m_external_import_isSet){
        obj.insert("externalImport", QJsonValue(external_import));
    }
    if(imported_document_id != nullptr && *imported_document_id != QString("")){
        toJsonValue(QString("importedDocumentId"), imported_document_id, obj, QString("QString"));
    }
    if((external_document_with_version != nullptr) && (external_document_with_version->isSet())){
        toJsonValue(QString("externalDocumentWithVersion"), external_document_with_version, obj, QString("OAIBTDocumentWithVersionId"));
    }
    if(dbimport_string != nullptr && *dbimport_string != QString("")){
        toJsonValue(QString("dbimportString"), dbimport_string, obj, QString("QString"));
    }
    if(m_element_import_isSet){
        obj.insert("elementImport", QJsonValue(element_import));
    }
    if(imported_element_id != nullptr && *imported_element_id != QString("")){
        toJsonValue(QString("importedElementId"), imported_element_id, obj, QString("QString"));
    }
    if(m_potentially_valid_isSet){
        obj.insert("potentiallyValid", QJsonValue(potentially_valid));
    }
    if(m_standard_library_common_isSet){
        obj.insert("standardLibraryCommon", QJsonValue(standard_library_common));
    }
    if(m_path_potentially_valid_isSet){
        obj.insert("pathPotentiallyValid", QJsonValue(path_potentially_valid));
    }
    if(m_version_potentially_valid_isSet){
        obj.insert("versionPotentiallyValid", QJsonValue(version_potentially_valid));
    }
    if(m_valid_legacy_version_isSet){
        obj.insert("validLegacyVersion", QJsonValue(valid_legacy_version));
    }
    if(path_version != nullptr && *path_version != QString("")){
        toJsonValue(QString("pathVersion"), path_version, obj, QString("QString"));
    }
    if(imported_version_id != nullptr && *imported_version_id != QString("")){
        toJsonValue(QString("importedVersionId"), imported_version_id, obj, QString("QString"));
    }
    if((external_document_with_version_and_element_id != nullptr) && (external_document_with_version_and_element_id->isSet())){
        toJsonValue(QString("externalDocumentWithVersionAndElementId"), external_document_with_version_and_element_id, obj, QString("OAIBTDocumentWithVersionAndElementId"));
    }
    if(m_legacy_isSet){
        obj.insert("legacy", QJsonValue(legacy));
    }
    if(microversion != nullptr && *microversion != QString("")){
        toJsonValue(QString("microversion"), microversion, obj, QString("QString"));
    }
    if((space_before_path != nullptr) && (space_before_path->isSet())){
        toJsonValue(QString("spaceBeforePath"), space_before_path, obj, QString("OAIBTPSpace-10"));
    }
    if((space_after_path != nullptr) && (space_after_path->isSet())){
        toJsonValue(QString("spaceAfterPath"), space_after_path, obj, QString("OAIBTPSpace-10"));
    }
    if((space_before_version != nullptr) && (space_before_version->isSet())){
        toJsonValue(QString("spaceBeforeVersion"), space_before_version, obj, QString("OAIBTPSpace-10"));
    }
    if((space_after_version != nullptr) && (space_after_version->isSet())){
        toJsonValue(QString("spaceAfterVersion"), space_after_version, obj, QString("OAIBTPSpace-10"));
    }
    if((version != nullptr) && (version->isSet())){
        toJsonValue(QString("version"), version, obj, QString("OAIBTPLiteralString-259"));
    }
    if((path != nullptr) && (path->isSet())){
        toJsonValue(QString("path"), path, obj, QString("OAIBTPLiteralString-259"));
    }

    return obj;
}

bool
OAIBTPModuleId-235::isAtomic() {
    return atomic;
}
void
OAIBTPModuleId-235::setAtomic(bool atomic) {
    this->atomic = atomic;
    this->m_atomic_isSet = true;
}

QString*
OAIBTPModuleId-235::getBtType() {
    return bt_type;
}
void
OAIBTPModuleId-235::setBtType(QString* bt_type) {
    this->bt_type = bt_type;
    this->m_bt_type_isSet = true;
}

QString*
OAIBTPModuleId-235::getDocumentationType() {
    return documentation_type;
}
void
OAIBTPModuleId-235::setDocumentationType(QString* documentation_type) {
    this->documentation_type = documentation_type;
    this->m_documentation_type_isSet = true;
}

qint32
OAIBTPModuleId-235::getEndSourceLocation() {
    return end_source_location;
}
void
OAIBTPModuleId-235::setEndSourceLocation(qint32 end_source_location) {
    this->end_source_location = end_source_location;
    this->m_end_source_location_isSet = true;
}

QString*
OAIBTPModuleId-235::getNodeId() {
    return node_id;
}
void
OAIBTPModuleId-235::setNodeId(QString* node_id) {
    this->node_id = node_id;
    this->m_node_id_isSet = true;
}

QString*
OAIBTPModuleId-235::getShortDescriptor() {
    return short_descriptor;
}
void
OAIBTPModuleId-235::setShortDescriptor(QString* short_descriptor) {
    this->short_descriptor = short_descriptor;
    this->m_short_descriptor_isSet = true;
}

OAIBTPSpace-10*
OAIBTPModuleId-235::getSpaceAfter() {
    return space_after;
}
void
OAIBTPModuleId-235::setSpaceAfter(OAIBTPSpace-10* space_after) {
    this->space_after = space_after;
    this->m_space_after_isSet = true;
}

OAIBTPSpace-10*
OAIBTPModuleId-235::getSpaceBefore() {
    return space_before;
}
void
OAIBTPModuleId-235::setSpaceBefore(OAIBTPSpace-10* space_before) {
    this->space_before = space_before;
    this->m_space_before_isSet = true;
}

bool
OAIBTPModuleId-235::isSpaceDefault() {
    return space_default;
}
void
OAIBTPModuleId-235::setSpaceDefault(bool space_default) {
    this->space_default = space_default;
    this->m_space_default_isSet = true;
}

qint32
OAIBTPModuleId-235::getStartSourceLocation() {
    return start_source_location;
}
void
OAIBTPModuleId-235::setStartSourceLocation(qint32 start_source_location) {
    this->start_source_location = start_source_location;
    this->m_start_source_location_isSet = true;
}

bool
OAIBTPModuleId-235::isStandardLibrary() {
    return standard_library;
}
void
OAIBTPModuleId-235::setStandardLibrary(bool standard_library) {
    this->standard_library = standard_library;
    this->m_standard_library_isSet = true;
}

QString*
OAIBTPModuleId-235::getVersionAndMicroversion() {
    return version_and_microversion;
}
void
OAIBTPModuleId-235::setVersionAndMicroversion(QString* version_and_microversion) {
    this->version_and_microversion = version_and_microversion;
    this->m_version_and_microversion_isSet = true;
}

bool
OAIBTPModuleId-235::isExternalImport() {
    return external_import;
}
void
OAIBTPModuleId-235::setExternalImport(bool external_import) {
    this->external_import = external_import;
    this->m_external_import_isSet = true;
}

QString*
OAIBTPModuleId-235::getImportedDocumentId() {
    return imported_document_id;
}
void
OAIBTPModuleId-235::setImportedDocumentId(QString* imported_document_id) {
    this->imported_document_id = imported_document_id;
    this->m_imported_document_id_isSet = true;
}

OAIBTDocumentWithVersionId*
OAIBTPModuleId-235::getExternalDocumentWithVersion() {
    return external_document_with_version;
}
void
OAIBTPModuleId-235::setExternalDocumentWithVersion(OAIBTDocumentWithVersionId* external_document_with_version) {
    this->external_document_with_version = external_document_with_version;
    this->m_external_document_with_version_isSet = true;
}

QString*
OAIBTPModuleId-235::getDbimportString() {
    return dbimport_string;
}
void
OAIBTPModuleId-235::setDbimportString(QString* dbimport_string) {
    this->dbimport_string = dbimport_string;
    this->m_dbimport_string_isSet = true;
}

bool
OAIBTPModuleId-235::isElementImport() {
    return element_import;
}
void
OAIBTPModuleId-235::setElementImport(bool element_import) {
    this->element_import = element_import;
    this->m_element_import_isSet = true;
}

QString*
OAIBTPModuleId-235::getImportedElementId() {
    return imported_element_id;
}
void
OAIBTPModuleId-235::setImportedElementId(QString* imported_element_id) {
    this->imported_element_id = imported_element_id;
    this->m_imported_element_id_isSet = true;
}

bool
OAIBTPModuleId-235::isPotentiallyValid() {
    return potentially_valid;
}
void
OAIBTPModuleId-235::setPotentiallyValid(bool potentially_valid) {
    this->potentially_valid = potentially_valid;
    this->m_potentially_valid_isSet = true;
}

bool
OAIBTPModuleId-235::isStandardLibraryCommon() {
    return standard_library_common;
}
void
OAIBTPModuleId-235::setStandardLibraryCommon(bool standard_library_common) {
    this->standard_library_common = standard_library_common;
    this->m_standard_library_common_isSet = true;
}

bool
OAIBTPModuleId-235::isPathPotentiallyValid() {
    return path_potentially_valid;
}
void
OAIBTPModuleId-235::setPathPotentiallyValid(bool path_potentially_valid) {
    this->path_potentially_valid = path_potentially_valid;
    this->m_path_potentially_valid_isSet = true;
}

bool
OAIBTPModuleId-235::isVersionPotentiallyValid() {
    return version_potentially_valid;
}
void
OAIBTPModuleId-235::setVersionPotentiallyValid(bool version_potentially_valid) {
    this->version_potentially_valid = version_potentially_valid;
    this->m_version_potentially_valid_isSet = true;
}

bool
OAIBTPModuleId-235::isValidLegacyVersion() {
    return valid_legacy_version;
}
void
OAIBTPModuleId-235::setValidLegacyVersion(bool valid_legacy_version) {
    this->valid_legacy_version = valid_legacy_version;
    this->m_valid_legacy_version_isSet = true;
}

QString*
OAIBTPModuleId-235::getPathVersion() {
    return path_version;
}
void
OAIBTPModuleId-235::setPathVersion(QString* path_version) {
    this->path_version = path_version;
    this->m_path_version_isSet = true;
}

QString*
OAIBTPModuleId-235::getImportedVersionId() {
    return imported_version_id;
}
void
OAIBTPModuleId-235::setImportedVersionId(QString* imported_version_id) {
    this->imported_version_id = imported_version_id;
    this->m_imported_version_id_isSet = true;
}

OAIBTDocumentWithVersionAndElementId*
OAIBTPModuleId-235::getExternalDocumentWithVersionAndElementId() {
    return external_document_with_version_and_element_id;
}
void
OAIBTPModuleId-235::setExternalDocumentWithVersionAndElementId(OAIBTDocumentWithVersionAndElementId* external_document_with_version_and_element_id) {
    this->external_document_with_version_and_element_id = external_document_with_version_and_element_id;
    this->m_external_document_with_version_and_element_id_isSet = true;
}

bool
OAIBTPModuleId-235::isLegacy() {
    return legacy;
}
void
OAIBTPModuleId-235::setLegacy(bool legacy) {
    this->legacy = legacy;
    this->m_legacy_isSet = true;
}

QString*
OAIBTPModuleId-235::getMicroversion() {
    return microversion;
}
void
OAIBTPModuleId-235::setMicroversion(QString* microversion) {
    this->microversion = microversion;
    this->m_microversion_isSet = true;
}

OAIBTPSpace-10*
OAIBTPModuleId-235::getSpaceBeforePath() {
    return space_before_path;
}
void
OAIBTPModuleId-235::setSpaceBeforePath(OAIBTPSpace-10* space_before_path) {
    this->space_before_path = space_before_path;
    this->m_space_before_path_isSet = true;
}

OAIBTPSpace-10*
OAIBTPModuleId-235::getSpaceAfterPath() {
    return space_after_path;
}
void
OAIBTPModuleId-235::setSpaceAfterPath(OAIBTPSpace-10* space_after_path) {
    this->space_after_path = space_after_path;
    this->m_space_after_path_isSet = true;
}

OAIBTPSpace-10*
OAIBTPModuleId-235::getSpaceBeforeVersion() {
    return space_before_version;
}
void
OAIBTPModuleId-235::setSpaceBeforeVersion(OAIBTPSpace-10* space_before_version) {
    this->space_before_version = space_before_version;
    this->m_space_before_version_isSet = true;
}

OAIBTPSpace-10*
OAIBTPModuleId-235::getSpaceAfterVersion() {
    return space_after_version;
}
void
OAIBTPModuleId-235::setSpaceAfterVersion(OAIBTPSpace-10* space_after_version) {
    this->space_after_version = space_after_version;
    this->m_space_after_version_isSet = true;
}

OAIBTPLiteralString-259*
OAIBTPModuleId-235::getVersion() {
    return version;
}
void
OAIBTPModuleId-235::setVersion(OAIBTPLiteralString-259* version) {
    this->version = version;
    this->m_version_isSet = true;
}

OAIBTPLiteralString-259*
OAIBTPModuleId-235::getPath() {
    return path;
}
void
OAIBTPModuleId-235::setPath(OAIBTPLiteralString-259* path) {
    this->path = path;
    this->m_path_isSet = true;
}


bool
OAIBTPModuleId-235::isSet(){
    bool isObjectUpdated = false;
    do{
        if(m_atomic_isSet){ isObjectUpdated = true; break;}
        if(bt_type != nullptr && *bt_type != QString("")){ isObjectUpdated = true; break;}
        if(documentation_type != nullptr && *documentation_type != QString("")){ isObjectUpdated = true; break;}
        if(m_end_source_location_isSet){ isObjectUpdated = true; break;}
        if(node_id != nullptr && *node_id != QString("")){ isObjectUpdated = true; break;}
        if(short_descriptor != nullptr && *short_descriptor != QString("")){ isObjectUpdated = true; break;}
        if(space_after != nullptr && space_after->isSet()){ isObjectUpdated = true; break;}
        if(space_before != nullptr && space_before->isSet()){ isObjectUpdated = true; break;}
        if(m_space_default_isSet){ isObjectUpdated = true; break;}
        if(m_start_source_location_isSet){ isObjectUpdated = true; break;}
        if(m_standard_library_isSet){ isObjectUpdated = true; break;}
        if(version_and_microversion != nullptr && *version_and_microversion != QString("")){ isObjectUpdated = true; break;}
        if(m_external_import_isSet){ isObjectUpdated = true; break;}
        if(imported_document_id != nullptr && *imported_document_id != QString("")){ isObjectUpdated = true; break;}
        if(external_document_with_version != nullptr && external_document_with_version->isSet()){ isObjectUpdated = true; break;}
        if(dbimport_string != nullptr && *dbimport_string != QString("")){ isObjectUpdated = true; break;}
        if(m_element_import_isSet){ isObjectUpdated = true; break;}
        if(imported_element_id != nullptr && *imported_element_id != QString("")){ isObjectUpdated = true; break;}
        if(m_potentially_valid_isSet){ isObjectUpdated = true; break;}
        if(m_standard_library_common_isSet){ isObjectUpdated = true; break;}
        if(m_path_potentially_valid_isSet){ isObjectUpdated = true; break;}
        if(m_version_potentially_valid_isSet){ isObjectUpdated = true; break;}
        if(m_valid_legacy_version_isSet){ isObjectUpdated = true; break;}
        if(path_version != nullptr && *path_version != QString("")){ isObjectUpdated = true; break;}
        if(imported_version_id != nullptr && *imported_version_id != QString("")){ isObjectUpdated = true; break;}
        if(external_document_with_version_and_element_id != nullptr && external_document_with_version_and_element_id->isSet()){ isObjectUpdated = true; break;}
        if(m_legacy_isSet){ isObjectUpdated = true; break;}
        if(microversion != nullptr && *microversion != QString("")){ isObjectUpdated = true; break;}
        if(space_before_path != nullptr && space_before_path->isSet()){ isObjectUpdated = true; break;}
        if(space_after_path != nullptr && space_after_path->isSet()){ isObjectUpdated = true; break;}
        if(space_before_version != nullptr && space_before_version->isSet()){ isObjectUpdated = true; break;}
        if(space_after_version != nullptr && space_after_version->isSet()){ isObjectUpdated = true; break;}
        if(version != nullptr && version->isSet()){ isObjectUpdated = true; break;}
        if(path != nullptr && path->isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

