/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * OpenAPI spec version: 1.111
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIBTSplineDescription-2118.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIBTSplineDescription-2118::OAIBTSplineDescription-2118(QString json) {
    init();
    this->fromJson(json);
}

OAIBTSplineDescription-2118::OAIBTSplineDescription-2118() {
    init();
}

OAIBTSplineDescription-2118::~OAIBTSplineDescription-2118() {
    this->cleanup();
}

void
OAIBTSplineDescription-2118::init() {
    bt_type = new QString("");
    m_bt_type_isSet = false;
    control_points = new QList<double>();
    m_control_points_isSet = false;
    degree = 0;
    m_degree_isSet = false;
    is_periodic = false;
    m_is_periodic_isSet = false;
    is_rational = false;
    m_is_rational_isSet = false;
    knots = new QList<double>();
    m_knots_isSet = false;
    type = new QString("");
    m_type_isSet = false;
}

void
OAIBTSplineDescription-2118::cleanup() {
    if(bt_type != nullptr) { 
        delete bt_type;
    }

    if(control_points != nullptr) { 
        delete control_points;
    }




    if(knots != nullptr) { 
        delete knots;
    }
    if(type != nullptr) { 
        delete type;
    }
}

OAIBTSplineDescription-2118*
OAIBTSplineDescription-2118::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIBTSplineDescription-2118::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&bt_type, pJson["btType"], "QString", "QString");
    
    
    ::OpenAPI::setValue(&control_points, pJson["controlPoints"], "QList", "double");
    ::OpenAPI::setValue(&degree, pJson["degree"], "qint32", "");
    
    ::OpenAPI::setValue(&is_periodic, pJson["isPeriodic"], "bool", "");
    
    ::OpenAPI::setValue(&is_rational, pJson["isRational"], "bool", "");
    
    
    ::OpenAPI::setValue(&knots, pJson["knots"], "QList", "double");
    ::OpenAPI::setValue(&type, pJson["type"], "QString", "QString");
    
}

QString
OAIBTSplineDescription-2118::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIBTSplineDescription-2118::asJsonObject() {
    QJsonObject obj;
    if(bt_type != nullptr && *bt_type != QString("")){
        toJsonValue(QString("btType"), bt_type, obj, QString("QString"));
    }
    if(control_points->size() > 0){
        toJsonArray((QList<void*>*)control_points, obj, "controlPoints", "");
    }
    if(m_degree_isSet){
        obj.insert("degree", QJsonValue(degree));
    }
    if(m_is_periodic_isSet){
        obj.insert("isPeriodic", QJsonValue(is_periodic));
    }
    if(m_is_rational_isSet){
        obj.insert("isRational", QJsonValue(is_rational));
    }
    if(knots->size() > 0){
        toJsonArray((QList<void*>*)knots, obj, "knots", "");
    }
    if(type != nullptr && *type != QString("")){
        toJsonValue(QString("type"), type, obj, QString("QString"));
    }

    return obj;
}

QString*
OAIBTSplineDescription-2118::getBtType() {
    return bt_type;
}
void
OAIBTSplineDescription-2118::setBtType(QString* bt_type) {
    this->bt_type = bt_type;
    this->m_bt_type_isSet = true;
}

QList<double>*
OAIBTSplineDescription-2118::getControlPoints() {
    return control_points;
}
void
OAIBTSplineDescription-2118::setControlPoints(QList<double>* control_points) {
    this->control_points = control_points;
    this->m_control_points_isSet = true;
}

qint32
OAIBTSplineDescription-2118::getDegree() {
    return degree;
}
void
OAIBTSplineDescription-2118::setDegree(qint32 degree) {
    this->degree = degree;
    this->m_degree_isSet = true;
}

bool
OAIBTSplineDescription-2118::isIsPeriodic() {
    return is_periodic;
}
void
OAIBTSplineDescription-2118::setIsPeriodic(bool is_periodic) {
    this->is_periodic = is_periodic;
    this->m_is_periodic_isSet = true;
}

bool
OAIBTSplineDescription-2118::isIsRational() {
    return is_rational;
}
void
OAIBTSplineDescription-2118::setIsRational(bool is_rational) {
    this->is_rational = is_rational;
    this->m_is_rational_isSet = true;
}

QList<double>*
OAIBTSplineDescription-2118::getKnots() {
    return knots;
}
void
OAIBTSplineDescription-2118::setKnots(QList<double>* knots) {
    this->knots = knots;
    this->m_knots_isSet = true;
}

QString*
OAIBTSplineDescription-2118::getType() {
    return type;
}
void
OAIBTSplineDescription-2118::setType(QString* type) {
    this->type = type;
    this->m_type_isSet = true;
}


bool
OAIBTSplineDescription-2118::isSet(){
    bool isObjectUpdated = false;
    do{
        if(bt_type != nullptr && *bt_type != QString("")){ isObjectUpdated = true; break;}
        if(m_control_points_isSet){ isObjectUpdated = true; break;}
        if(control_points->size() > 0){ isObjectUpdated = true; break;}
        if(m_degree_isSet){ isObjectUpdated = true; break;}
        if(m_is_periodic_isSet){ isObjectUpdated = true; break;}
        if(m_is_rational_isSet){ isObjectUpdated = true; break;}
        if(m_knots_isSet){ isObjectUpdated = true; break;}
        if(knots->size() > 0){ isObjectUpdated = true; break;}
        if(type != nullptr && *type != QString("")){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

