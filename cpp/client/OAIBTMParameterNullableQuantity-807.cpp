/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * OpenAPI spec version: 1.111
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIBTMParameterNullableQuantity-807.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIBTMParameterNullableQuantity-807::OAIBTMParameterNullableQuantity-807(QString json) {
    init();
    this->fromJson(json);
}

OAIBTMParameterNullableQuantity-807::OAIBTMParameterNullableQuantity-807() {
    init();
}

OAIBTMParameterNullableQuantity-807::~OAIBTMParameterNullableQuantity-807() {
    this->cleanup();
}

void
OAIBTMParameterNullableQuantity-807::init() {
    bt_type = new QString("");
    m_bt_type_isSet = false;
    import_microversion = new QString("");
    m_import_microversion_isSet = false;
    node_id = new QString("");
    m_node_id_isSet = false;
    parameter_id = new QString("");
    m_parameter_id_isSet = false;
    units = new QString("");
    m_units_isSet = false;
    is_integer = false;
    m_is_integer_isSet = false;
    value = 0.0;
    m_value_isSet = false;
    expression = new QString("");
    m_expression_isSet = false;
    null_value = new QString("");
    m_null_value_isSet = false;
    is_null = false;
    m_is_null_isSet = false;
}

void
OAIBTMParameterNullableQuantity-807::cleanup() {
    if(bt_type != nullptr) { 
        delete bt_type;
    }
    if(import_microversion != nullptr) { 
        delete import_microversion;
    }
    if(node_id != nullptr) { 
        delete node_id;
    }
    if(parameter_id != nullptr) { 
        delete parameter_id;
    }
    if(units != nullptr) { 
        delete units;
    }


    if(expression != nullptr) { 
        delete expression;
    }
    if(null_value != nullptr) { 
        delete null_value;
    }

}

OAIBTMParameterNullableQuantity-807*
OAIBTMParameterNullableQuantity-807::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIBTMParameterNullableQuantity-807::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&bt_type, pJson["btType"], "QString", "QString");
    
    ::OpenAPI::setValue(&import_microversion, pJson["importMicroversion"], "QString", "QString");
    
    ::OpenAPI::setValue(&node_id, pJson["nodeId"], "QString", "QString");
    
    ::OpenAPI::setValue(&parameter_id, pJson["parameterId"], "QString", "QString");
    
    ::OpenAPI::setValue(&units, pJson["units"], "QString", "QString");
    
    ::OpenAPI::setValue(&is_integer, pJson["isInteger"], "bool", "");
    
    ::OpenAPI::setValue(&value, pJson["value"], "double", "");
    
    ::OpenAPI::setValue(&expression, pJson["expression"], "QString", "QString");
    
    ::OpenAPI::setValue(&null_value, pJson["nullValue"], "QString", "QString");
    
    ::OpenAPI::setValue(&is_null, pJson["isNull"], "bool", "");
    
}

QString
OAIBTMParameterNullableQuantity-807::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIBTMParameterNullableQuantity-807::asJsonObject() {
    QJsonObject obj;
    if(bt_type != nullptr && *bt_type != QString("")){
        toJsonValue(QString("btType"), bt_type, obj, QString("QString"));
    }
    if(import_microversion != nullptr && *import_microversion != QString("")){
        toJsonValue(QString("importMicroversion"), import_microversion, obj, QString("QString"));
    }
    if(node_id != nullptr && *node_id != QString("")){
        toJsonValue(QString("nodeId"), node_id, obj, QString("QString"));
    }
    if(parameter_id != nullptr && *parameter_id != QString("")){
        toJsonValue(QString("parameterId"), parameter_id, obj, QString("QString"));
    }
    if(units != nullptr && *units != QString("")){
        toJsonValue(QString("units"), units, obj, QString("QString"));
    }
    if(m_is_integer_isSet){
        obj.insert("isInteger", QJsonValue(is_integer));
    }
    if(m_value_isSet){
        obj.insert("value", QJsonValue(value));
    }
    if(expression != nullptr && *expression != QString("")){
        toJsonValue(QString("expression"), expression, obj, QString("QString"));
    }
    if(null_value != nullptr && *null_value != QString("")){
        toJsonValue(QString("nullValue"), null_value, obj, QString("QString"));
    }
    if(m_is_null_isSet){
        obj.insert("isNull", QJsonValue(is_null));
    }

    return obj;
}

QString*
OAIBTMParameterNullableQuantity-807::getBtType() {
    return bt_type;
}
void
OAIBTMParameterNullableQuantity-807::setBtType(QString* bt_type) {
    this->bt_type = bt_type;
    this->m_bt_type_isSet = true;
}

QString*
OAIBTMParameterNullableQuantity-807::getImportMicroversion() {
    return import_microversion;
}
void
OAIBTMParameterNullableQuantity-807::setImportMicroversion(QString* import_microversion) {
    this->import_microversion = import_microversion;
    this->m_import_microversion_isSet = true;
}

QString*
OAIBTMParameterNullableQuantity-807::getNodeId() {
    return node_id;
}
void
OAIBTMParameterNullableQuantity-807::setNodeId(QString* node_id) {
    this->node_id = node_id;
    this->m_node_id_isSet = true;
}

QString*
OAIBTMParameterNullableQuantity-807::getParameterId() {
    return parameter_id;
}
void
OAIBTMParameterNullableQuantity-807::setParameterId(QString* parameter_id) {
    this->parameter_id = parameter_id;
    this->m_parameter_id_isSet = true;
}

QString*
OAIBTMParameterNullableQuantity-807::getUnits() {
    return units;
}
void
OAIBTMParameterNullableQuantity-807::setUnits(QString* units) {
    this->units = units;
    this->m_units_isSet = true;
}

bool
OAIBTMParameterNullableQuantity-807::isIsInteger() {
    return is_integer;
}
void
OAIBTMParameterNullableQuantity-807::setIsInteger(bool is_integer) {
    this->is_integer = is_integer;
    this->m_is_integer_isSet = true;
}

double
OAIBTMParameterNullableQuantity-807::getValue() {
    return value;
}
void
OAIBTMParameterNullableQuantity-807::setValue(double value) {
    this->value = value;
    this->m_value_isSet = true;
}

QString*
OAIBTMParameterNullableQuantity-807::getExpression() {
    return expression;
}
void
OAIBTMParameterNullableQuantity-807::setExpression(QString* expression) {
    this->expression = expression;
    this->m_expression_isSet = true;
}

QString*
OAIBTMParameterNullableQuantity-807::getNullValue() {
    return null_value;
}
void
OAIBTMParameterNullableQuantity-807::setNullValue(QString* null_value) {
    this->null_value = null_value;
    this->m_null_value_isSet = true;
}

bool
OAIBTMParameterNullableQuantity-807::isIsNull() {
    return is_null;
}
void
OAIBTMParameterNullableQuantity-807::setIsNull(bool is_null) {
    this->is_null = is_null;
    this->m_is_null_isSet = true;
}


bool
OAIBTMParameterNullableQuantity-807::isSet(){
    bool isObjectUpdated = false;
    do{
        if(bt_type != nullptr && *bt_type != QString("")){ isObjectUpdated = true; break;}
        if(import_microversion != nullptr && *import_microversion != QString("")){ isObjectUpdated = true; break;}
        if(node_id != nullptr && *node_id != QString("")){ isObjectUpdated = true; break;}
        if(parameter_id != nullptr && *parameter_id != QString("")){ isObjectUpdated = true; break;}
        if(units != nullptr && *units != QString("")){ isObjectUpdated = true; break;}
        if(m_is_integer_isSet){ isObjectUpdated = true; break;}
        if(m_value_isSet){ isObjectUpdated = true; break;}
        if(expression != nullptr && *expression != QString("")){ isObjectUpdated = true; break;}
        if(null_value != nullptr && *null_value != QString("")){ isObjectUpdated = true; break;}
        if(m_is_null_isSet){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

