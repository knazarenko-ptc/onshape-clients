/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * OpenAPI spec version: 1.111
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIBTReleasePackageInfo.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIBTReleasePackageInfo::OAIBTReleasePackageInfo(QString json) {
    init();
    this->fromJson(json);
}

OAIBTReleasePackageInfo::OAIBTReleasePackageInfo() {
    init();
}

OAIBTReleasePackageInfo::~OAIBTReleasePackageInfo() {
    this->cleanup();
}

void
OAIBTReleasePackageInfo::init() {
    column_names = new QMap<QString, QString*>();
    m_column_names_isSet = false;
    comments = new QList<OAIBTCommentInfo*>();
    m_comments_isSet = false;
    company_id = new QString("");
    m_company_id_isSet = false;
    description = new QString("");
    m_description_isSet = false;
    description_as_property = new QString("");
    m_description_as_property_isSet = false;
    detailed = false;
    m_detailed_isSet = false;
    document_id = new QString("");
    m_document_id_isSet = false;
    href = new QString("");
    m_href_isSet = false;
    id = new QString("");
    m_id_isSet = false;
    is_obsoletion = false;
    m_is_obsoletion_isSet = false;
    items = new QList<OAIBTReleasePackageItemInfo*>();
    m_items_isSet = false;
    linked_version_ids = new QList<QString*>();
    m_linked_version_ids_isSet = false;
    name = new QString("");
    m_name_isSet = false;
    name_as_property = new QString("");
    m_name_as_property_isSet = false;
    package_thumbnail = new QString("");
    m_package_thumbnail_isSet = false;
    parent_comments = new QList<OAIBTReleaseCommentListInfo*>();
    m_parent_comments_isSet = false;
    parent_packages = new QList<QString*>();
    m_parent_packages_isSet = false;
    properties = new QList<OAIBTWorkflowPropertyInfo*>();
    m_properties_isSet = false;
    revision_rule_id = new QString("");
    m_revision_rule_id_isSet = false;
    version_id = new QString("");
    m_version_id_isSet = false;
    view_ref = new QString("");
    m_view_ref_isSet = false;
    workflow = new OAIBTWorkflowSnapshotInfo();
    m_workflow_isSet = false;
    workflow_id = new OAIBTPublishedWorkflowId();
    m_workflow_id_isSet = false;
    workspace_id = new QString("");
    m_workspace_id_isSet = false;
}

void
OAIBTReleasePackageInfo::cleanup() {
    if(column_names != nullptr) { 
        auto arr = column_names;
        for(auto o: *arr) { 
            delete o;
        }
        delete column_names;
    }
    if(comments != nullptr) { 
        auto arr = comments;
        for(auto o: *arr) { 
            delete o;
        }
        delete comments;
    }
    if(company_id != nullptr) { 
        delete company_id;
    }
    if(description != nullptr) { 
        delete description;
    }
    if(description_as_property != nullptr) { 
        delete description_as_property;
    }

    if(document_id != nullptr) { 
        delete document_id;
    }
    if(href != nullptr) { 
        delete href;
    }
    if(id != nullptr) { 
        delete id;
    }

    if(items != nullptr) { 
        auto arr = items;
        for(auto o: *arr) { 
            delete o;
        }
        delete items;
    }
    if(linked_version_ids != nullptr) { 
        auto arr = linked_version_ids;
        for(auto o: *arr) { 
            delete o;
        }
        delete linked_version_ids;
    }
    if(name != nullptr) { 
        delete name;
    }
    if(name_as_property != nullptr) { 
        delete name_as_property;
    }
    if(package_thumbnail != nullptr) { 
        delete package_thumbnail;
    }
    if(parent_comments != nullptr) { 
        auto arr = parent_comments;
        for(auto o: *arr) { 
            delete o;
        }
        delete parent_comments;
    }
    if(parent_packages != nullptr) { 
        auto arr = parent_packages;
        for(auto o: *arr) { 
            delete o;
        }
        delete parent_packages;
    }
    if(properties != nullptr) { 
        auto arr = properties;
        for(auto o: *arr) { 
            delete o;
        }
        delete properties;
    }
    if(revision_rule_id != nullptr) { 
        delete revision_rule_id;
    }
    if(version_id != nullptr) { 
        delete version_id;
    }
    if(view_ref != nullptr) { 
        delete view_ref;
    }
    if(workflow != nullptr) { 
        delete workflow;
    }
    if(workflow_id != nullptr) { 
        delete workflow_id;
    }
    if(workspace_id != nullptr) { 
        delete workspace_id;
    }
}

OAIBTReleasePackageInfo*
OAIBTReleasePackageInfo::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIBTReleasePackageInfo::fromJsonObject(QJsonObject pJson) {
    
    ::OpenAPI::setValue(&column_names, pJson["columnNames"], "QMap", "QString");
    
    ::OpenAPI::setValue(&comments, pJson["comments"], "QList", "OAIBTCommentInfo");
    ::OpenAPI::setValue(&company_id, pJson["companyId"], "QString", "QString");
    
    ::OpenAPI::setValue(&description, pJson["description"], "QString", "QString");
    
    ::OpenAPI::setValue(&description_as_property, pJson["descriptionAsProperty"], "QString", "QString");
    
    ::OpenAPI::setValue(&detailed, pJson["detailed"], "bool", "");
    
    ::OpenAPI::setValue(&document_id, pJson["documentId"], "QString", "QString");
    
    ::OpenAPI::setValue(&href, pJson["href"], "QString", "QString");
    
    ::OpenAPI::setValue(&id, pJson["id"], "QString", "QString");
    
    ::OpenAPI::setValue(&is_obsoletion, pJson["isObsoletion"], "bool", "");
    
    
    ::OpenAPI::setValue(&items, pJson["items"], "QList", "OAIBTReleasePackageItemInfo");
    
    ::OpenAPI::setValue(&linked_version_ids, pJson["linkedVersionIds"], "QList", "QString");
    ::OpenAPI::setValue(&name, pJson["name"], "QString", "QString");
    
    ::OpenAPI::setValue(&name_as_property, pJson["nameAsProperty"], "QString", "QString");
    
    ::OpenAPI::setValue(&package_thumbnail, pJson["packageThumbnail"], "QString", "QString");
    
    
    ::OpenAPI::setValue(&parent_comments, pJson["parentComments"], "QList", "OAIBTReleaseCommentListInfo");
    
    ::OpenAPI::setValue(&parent_packages, pJson["parentPackages"], "QList", "QString");
    
    ::OpenAPI::setValue(&properties, pJson["properties"], "QList", "OAIBTWorkflowPropertyInfo");
    ::OpenAPI::setValue(&revision_rule_id, pJson["revisionRuleId"], "QString", "QString");
    
    ::OpenAPI::setValue(&version_id, pJson["versionId"], "QString", "QString");
    
    ::OpenAPI::setValue(&view_ref, pJson["viewRef"], "QString", "QString");
    
    ::OpenAPI::setValue(&workflow, pJson["workflow"], "OAIBTWorkflowSnapshotInfo", "OAIBTWorkflowSnapshotInfo");
    
    ::OpenAPI::setValue(&workflow_id, pJson["workflowId"], "OAIBTPublishedWorkflowId", "OAIBTPublishedWorkflowId");
    
    ::OpenAPI::setValue(&workspace_id, pJson["workspaceId"], "QString", "QString");
    
}

QString
OAIBTReleasePackageInfo::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIBTReleasePackageInfo::asJsonObject() {
    QJsonObject obj;
    if(column_names->size() > 0){
        toJsonMap((QMap<QString, void*>*) column_names, obj, "columnNames", "QString");
    }
    if(comments->size() > 0){
        toJsonArray((QList<void*>*)comments, obj, "comments", "OAIBTCommentInfo");
    }
    if(company_id != nullptr && *company_id != QString("")){
        toJsonValue(QString("companyId"), company_id, obj, QString("QString"));
    }
    if(description != nullptr && *description != QString("")){
        toJsonValue(QString("description"), description, obj, QString("QString"));
    }
    if(description_as_property != nullptr && *description_as_property != QString("")){
        toJsonValue(QString("descriptionAsProperty"), description_as_property, obj, QString("QString"));
    }
    if(m_detailed_isSet){
        obj.insert("detailed", QJsonValue(detailed));
    }
    if(document_id != nullptr && *document_id != QString("")){
        toJsonValue(QString("documentId"), document_id, obj, QString("QString"));
    }
    if(href != nullptr && *href != QString("")){
        toJsonValue(QString("href"), href, obj, QString("QString"));
    }
    if(id != nullptr && *id != QString("")){
        toJsonValue(QString("id"), id, obj, QString("QString"));
    }
    if(m_is_obsoletion_isSet){
        obj.insert("isObsoletion", QJsonValue(is_obsoletion));
    }
    if(items->size() > 0){
        toJsonArray((QList<void*>*)items, obj, "items", "OAIBTReleasePackageItemInfo");
    }
    if(linked_version_ids->size() > 0){
        toJsonArray((QList<void*>*)linked_version_ids, obj, "linkedVersionIds", "QString");
    }
    if(name != nullptr && *name != QString("")){
        toJsonValue(QString("name"), name, obj, QString("QString"));
    }
    if(name_as_property != nullptr && *name_as_property != QString("")){
        toJsonValue(QString("nameAsProperty"), name_as_property, obj, QString("QString"));
    }
    if(package_thumbnail != nullptr && *package_thumbnail != QString("")){
        toJsonValue(QString("packageThumbnail"), package_thumbnail, obj, QString("QString"));
    }
    if(parent_comments->size() > 0){
        toJsonArray((QList<void*>*)parent_comments, obj, "parentComments", "OAIBTReleaseCommentListInfo");
    }
    if(parent_packages->size() > 0){
        toJsonArray((QList<void*>*)parent_packages, obj, "parentPackages", "QString");
    }
    if(properties->size() > 0){
        toJsonArray((QList<void*>*)properties, obj, "properties", "OAIBTWorkflowPropertyInfo");
    }
    if(revision_rule_id != nullptr && *revision_rule_id != QString("")){
        toJsonValue(QString("revisionRuleId"), revision_rule_id, obj, QString("QString"));
    }
    if(version_id != nullptr && *version_id != QString("")){
        toJsonValue(QString("versionId"), version_id, obj, QString("QString"));
    }
    if(view_ref != nullptr && *view_ref != QString("")){
        toJsonValue(QString("viewRef"), view_ref, obj, QString("QString"));
    }
    if((workflow != nullptr) && (workflow->isSet())){
        toJsonValue(QString("workflow"), workflow, obj, QString("OAIBTWorkflowSnapshotInfo"));
    }
    if((workflow_id != nullptr) && (workflow_id->isSet())){
        toJsonValue(QString("workflowId"), workflow_id, obj, QString("OAIBTPublishedWorkflowId"));
    }
    if(workspace_id != nullptr && *workspace_id != QString("")){
        toJsonValue(QString("workspaceId"), workspace_id, obj, QString("QString"));
    }

    return obj;
}

QMap<QString, QString*>*
OAIBTReleasePackageInfo::getColumnNames() {
    return column_names;
}
void
OAIBTReleasePackageInfo::setColumnNames(QMap<QString, QString*>* column_names) {
    this->column_names = column_names;
    this->m_column_names_isSet = true;
}

QList<OAIBTCommentInfo*>*
OAIBTReleasePackageInfo::getComments() {
    return comments;
}
void
OAIBTReleasePackageInfo::setComments(QList<OAIBTCommentInfo*>* comments) {
    this->comments = comments;
    this->m_comments_isSet = true;
}

QString*
OAIBTReleasePackageInfo::getCompanyId() {
    return company_id;
}
void
OAIBTReleasePackageInfo::setCompanyId(QString* company_id) {
    this->company_id = company_id;
    this->m_company_id_isSet = true;
}

QString*
OAIBTReleasePackageInfo::getDescription() {
    return description;
}
void
OAIBTReleasePackageInfo::setDescription(QString* description) {
    this->description = description;
    this->m_description_isSet = true;
}

QString*
OAIBTReleasePackageInfo::getDescriptionAsProperty() {
    return description_as_property;
}
void
OAIBTReleasePackageInfo::setDescriptionAsProperty(QString* description_as_property) {
    this->description_as_property = description_as_property;
    this->m_description_as_property_isSet = true;
}

bool
OAIBTReleasePackageInfo::isDetailed() {
    return detailed;
}
void
OAIBTReleasePackageInfo::setDetailed(bool detailed) {
    this->detailed = detailed;
    this->m_detailed_isSet = true;
}

QString*
OAIBTReleasePackageInfo::getDocumentId() {
    return document_id;
}
void
OAIBTReleasePackageInfo::setDocumentId(QString* document_id) {
    this->document_id = document_id;
    this->m_document_id_isSet = true;
}

QString*
OAIBTReleasePackageInfo::getHref() {
    return href;
}
void
OAIBTReleasePackageInfo::setHref(QString* href) {
    this->href = href;
    this->m_href_isSet = true;
}

QString*
OAIBTReleasePackageInfo::getId() {
    return id;
}
void
OAIBTReleasePackageInfo::setId(QString* id) {
    this->id = id;
    this->m_id_isSet = true;
}

bool
OAIBTReleasePackageInfo::isIsObsoletion() {
    return is_obsoletion;
}
void
OAIBTReleasePackageInfo::setIsObsoletion(bool is_obsoletion) {
    this->is_obsoletion = is_obsoletion;
    this->m_is_obsoletion_isSet = true;
}

QList<OAIBTReleasePackageItemInfo*>*
OAIBTReleasePackageInfo::getItems() {
    return items;
}
void
OAIBTReleasePackageInfo::setItems(QList<OAIBTReleasePackageItemInfo*>* items) {
    this->items = items;
    this->m_items_isSet = true;
}

QList<QString*>*
OAIBTReleasePackageInfo::getLinkedVersionIds() {
    return linked_version_ids;
}
void
OAIBTReleasePackageInfo::setLinkedVersionIds(QList<QString*>* linked_version_ids) {
    this->linked_version_ids = linked_version_ids;
    this->m_linked_version_ids_isSet = true;
}

QString*
OAIBTReleasePackageInfo::getName() {
    return name;
}
void
OAIBTReleasePackageInfo::setName(QString* name) {
    this->name = name;
    this->m_name_isSet = true;
}

QString*
OAIBTReleasePackageInfo::getNameAsProperty() {
    return name_as_property;
}
void
OAIBTReleasePackageInfo::setNameAsProperty(QString* name_as_property) {
    this->name_as_property = name_as_property;
    this->m_name_as_property_isSet = true;
}

QString*
OAIBTReleasePackageInfo::getPackageThumbnail() {
    return package_thumbnail;
}
void
OAIBTReleasePackageInfo::setPackageThumbnail(QString* package_thumbnail) {
    this->package_thumbnail = package_thumbnail;
    this->m_package_thumbnail_isSet = true;
}

QList<OAIBTReleaseCommentListInfo*>*
OAIBTReleasePackageInfo::getParentComments() {
    return parent_comments;
}
void
OAIBTReleasePackageInfo::setParentComments(QList<OAIBTReleaseCommentListInfo*>* parent_comments) {
    this->parent_comments = parent_comments;
    this->m_parent_comments_isSet = true;
}

QList<QString*>*
OAIBTReleasePackageInfo::getParentPackages() {
    return parent_packages;
}
void
OAIBTReleasePackageInfo::setParentPackages(QList<QString*>* parent_packages) {
    this->parent_packages = parent_packages;
    this->m_parent_packages_isSet = true;
}

QList<OAIBTWorkflowPropertyInfo*>*
OAIBTReleasePackageInfo::getProperties() {
    return properties;
}
void
OAIBTReleasePackageInfo::setProperties(QList<OAIBTWorkflowPropertyInfo*>* properties) {
    this->properties = properties;
    this->m_properties_isSet = true;
}

QString*
OAIBTReleasePackageInfo::getRevisionRuleId() {
    return revision_rule_id;
}
void
OAIBTReleasePackageInfo::setRevisionRuleId(QString* revision_rule_id) {
    this->revision_rule_id = revision_rule_id;
    this->m_revision_rule_id_isSet = true;
}

QString*
OAIBTReleasePackageInfo::getVersionId() {
    return version_id;
}
void
OAIBTReleasePackageInfo::setVersionId(QString* version_id) {
    this->version_id = version_id;
    this->m_version_id_isSet = true;
}

QString*
OAIBTReleasePackageInfo::getViewRef() {
    return view_ref;
}
void
OAIBTReleasePackageInfo::setViewRef(QString* view_ref) {
    this->view_ref = view_ref;
    this->m_view_ref_isSet = true;
}

OAIBTWorkflowSnapshotInfo*
OAIBTReleasePackageInfo::getWorkflow() {
    return workflow;
}
void
OAIBTReleasePackageInfo::setWorkflow(OAIBTWorkflowSnapshotInfo* workflow) {
    this->workflow = workflow;
    this->m_workflow_isSet = true;
}

OAIBTPublishedWorkflowId*
OAIBTReleasePackageInfo::getWorkflowId() {
    return workflow_id;
}
void
OAIBTReleasePackageInfo::setWorkflowId(OAIBTPublishedWorkflowId* workflow_id) {
    this->workflow_id = workflow_id;
    this->m_workflow_id_isSet = true;
}

QString*
OAIBTReleasePackageInfo::getWorkspaceId() {
    return workspace_id;
}
void
OAIBTReleasePackageInfo::setWorkspaceId(QString* workspace_id) {
    this->workspace_id = workspace_id;
    this->m_workspace_id_isSet = true;
}


bool
OAIBTReleasePackageInfo::isSet(){
    bool isObjectUpdated = false;
    do{
        if(column_names->size() > 0){ isObjectUpdated = true; break;}
        if(comments->size() > 0){ isObjectUpdated = true; break;}
        if(company_id != nullptr && *company_id != QString("")){ isObjectUpdated = true; break;}
        if(description != nullptr && *description != QString("")){ isObjectUpdated = true; break;}
        if(description_as_property != nullptr && *description_as_property != QString("")){ isObjectUpdated = true; break;}
        if(m_detailed_isSet){ isObjectUpdated = true; break;}
        if(document_id != nullptr && *document_id != QString("")){ isObjectUpdated = true; break;}
        if(href != nullptr && *href != QString("")){ isObjectUpdated = true; break;}
        if(id != nullptr && *id != QString("")){ isObjectUpdated = true; break;}
        if(m_is_obsoletion_isSet){ isObjectUpdated = true; break;}
        if(items->size() > 0){ isObjectUpdated = true; break;}
        if(linked_version_ids->size() > 0){ isObjectUpdated = true; break;}
        if(name != nullptr && *name != QString("")){ isObjectUpdated = true; break;}
        if(name_as_property != nullptr && *name_as_property != QString("")){ isObjectUpdated = true; break;}
        if(package_thumbnail != nullptr && *package_thumbnail != QString("")){ isObjectUpdated = true; break;}
        if(parent_comments->size() > 0){ isObjectUpdated = true; break;}
        if(parent_packages->size() > 0){ isObjectUpdated = true; break;}
        if(properties->size() > 0){ isObjectUpdated = true; break;}
        if(revision_rule_id != nullptr && *revision_rule_id != QString("")){ isObjectUpdated = true; break;}
        if(version_id != nullptr && *version_id != QString("")){ isObjectUpdated = true; break;}
        if(view_ref != nullptr && *view_ref != QString("")){ isObjectUpdated = true; break;}
        if(workflow != nullptr && workflow->isSet()){ isObjectUpdated = true; break;}
        if(workflow_id != nullptr && workflow_id->isSet()){ isObjectUpdated = true; break;}
        if(workspace_id != nullptr && *workspace_id != QString("")){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

