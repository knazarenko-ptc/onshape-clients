/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * OpenAPI spec version: 1.111
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIBTWebhookParams.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIBTWebhookParams::OAIBTWebhookParams(QString json) {
    init();
    this->fromJson(json);
}

OAIBTWebhookParams::OAIBTWebhookParams() {
    init();
}

OAIBTWebhookParams::~OAIBTWebhookParams() {
    this->cleanup();
}

void
OAIBTWebhookParams::init() {
    client_id = new QString("");
    m_client_id_isSet = false;
    company_id = new QString("");
    m_company_id_isSet = false;
    data = new QString("");
    m_data_isSet = false;
    document_id = new QString("");
    m_document_id_isSet = false;
    element_id = new QString("");
    m_element_id_isSet = false;
    events = new QList<QString*>();
    m_events_isSet = false;
    filter = new QString("");
    m_filter_isSet = false;
    folder_id = new QString("");
    m_folder_id_isSet = false;
    id = new QString("");
    m_id_isSet = false;
    options = new OAIBTWebhookOptions();
    m_options_isSet = false;
    part_id = new QString("");
    m_part_id_isSet = false;
    project_id = new QString("");
    m_project_id_isSet = false;
    url = new QString("");
    m_url_isSet = false;
    user_id = new QString("");
    m_user_id_isSet = false;
    version_id = new QString("");
    m_version_id_isSet = false;
    workspace_id = new QString("");
    m_workspace_id_isSet = false;
}

void
OAIBTWebhookParams::cleanup() {
    if(client_id != nullptr) { 
        delete client_id;
    }
    if(company_id != nullptr) { 
        delete company_id;
    }
    if(data != nullptr) { 
        delete data;
    }
    if(document_id != nullptr) { 
        delete document_id;
    }
    if(element_id != nullptr) { 
        delete element_id;
    }
    if(events != nullptr) { 
        auto arr = events;
        for(auto o: *arr) { 
            delete o;
        }
        delete events;
    }
    if(filter != nullptr) { 
        delete filter;
    }
    if(folder_id != nullptr) { 
        delete folder_id;
    }
    if(id != nullptr) { 
        delete id;
    }
    if(options != nullptr) { 
        delete options;
    }
    if(part_id != nullptr) { 
        delete part_id;
    }
    if(project_id != nullptr) { 
        delete project_id;
    }
    if(url != nullptr) { 
        delete url;
    }
    if(user_id != nullptr) { 
        delete user_id;
    }
    if(version_id != nullptr) { 
        delete version_id;
    }
    if(workspace_id != nullptr) { 
        delete workspace_id;
    }
}

OAIBTWebhookParams*
OAIBTWebhookParams::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIBTWebhookParams::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&client_id, pJson["clientId"], "QString", "QString");
    
    ::OpenAPI::setValue(&company_id, pJson["companyId"], "QString", "QString");
    
    ::OpenAPI::setValue(&data, pJson["data"], "QString", "QString");
    
    ::OpenAPI::setValue(&document_id, pJson["documentId"], "QString", "QString");
    
    ::OpenAPI::setValue(&element_id, pJson["elementId"], "QString", "QString");
    
    
    ::OpenAPI::setValue(&events, pJson["events"], "QList", "QString");
    ::OpenAPI::setValue(&filter, pJson["filter"], "QString", "QString");
    
    ::OpenAPI::setValue(&folder_id, pJson["folderId"], "QString", "QString");
    
    ::OpenAPI::setValue(&id, pJson["id"], "QString", "QString");
    
    ::OpenAPI::setValue(&options, pJson["options"], "OAIBTWebhookOptions", "OAIBTWebhookOptions");
    
    ::OpenAPI::setValue(&part_id, pJson["partId"], "QString", "QString");
    
    ::OpenAPI::setValue(&project_id, pJson["projectId"], "QString", "QString");
    
    ::OpenAPI::setValue(&url, pJson["url"], "QString", "QString");
    
    ::OpenAPI::setValue(&user_id, pJson["userId"], "QString", "QString");
    
    ::OpenAPI::setValue(&version_id, pJson["versionId"], "QString", "QString");
    
    ::OpenAPI::setValue(&workspace_id, pJson["workspaceId"], "QString", "QString");
    
}

QString
OAIBTWebhookParams::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIBTWebhookParams::asJsonObject() {
    QJsonObject obj;
    if(client_id != nullptr && *client_id != QString("")){
        toJsonValue(QString("clientId"), client_id, obj, QString("QString"));
    }
    if(company_id != nullptr && *company_id != QString("")){
        toJsonValue(QString("companyId"), company_id, obj, QString("QString"));
    }
    if(data != nullptr && *data != QString("")){
        toJsonValue(QString("data"), data, obj, QString("QString"));
    }
    if(document_id != nullptr && *document_id != QString("")){
        toJsonValue(QString("documentId"), document_id, obj, QString("QString"));
    }
    if(element_id != nullptr && *element_id != QString("")){
        toJsonValue(QString("elementId"), element_id, obj, QString("QString"));
    }
    if(events->size() > 0){
        toJsonArray((QList<void*>*)events, obj, "events", "QString");
    }
    if(filter != nullptr && *filter != QString("")){
        toJsonValue(QString("filter"), filter, obj, QString("QString"));
    }
    if(folder_id != nullptr && *folder_id != QString("")){
        toJsonValue(QString("folderId"), folder_id, obj, QString("QString"));
    }
    if(id != nullptr && *id != QString("")){
        toJsonValue(QString("id"), id, obj, QString("QString"));
    }
    if((options != nullptr) && (options->isSet())){
        toJsonValue(QString("options"), options, obj, QString("OAIBTWebhookOptions"));
    }
    if(part_id != nullptr && *part_id != QString("")){
        toJsonValue(QString("partId"), part_id, obj, QString("QString"));
    }
    if(project_id != nullptr && *project_id != QString("")){
        toJsonValue(QString("projectId"), project_id, obj, QString("QString"));
    }
    if(url != nullptr && *url != QString("")){
        toJsonValue(QString("url"), url, obj, QString("QString"));
    }
    if(user_id != nullptr && *user_id != QString("")){
        toJsonValue(QString("userId"), user_id, obj, QString("QString"));
    }
    if(version_id != nullptr && *version_id != QString("")){
        toJsonValue(QString("versionId"), version_id, obj, QString("QString"));
    }
    if(workspace_id != nullptr && *workspace_id != QString("")){
        toJsonValue(QString("workspaceId"), workspace_id, obj, QString("QString"));
    }

    return obj;
}

QString*
OAIBTWebhookParams::getClientId() {
    return client_id;
}
void
OAIBTWebhookParams::setClientId(QString* client_id) {
    this->client_id = client_id;
    this->m_client_id_isSet = true;
}

QString*
OAIBTWebhookParams::getCompanyId() {
    return company_id;
}
void
OAIBTWebhookParams::setCompanyId(QString* company_id) {
    this->company_id = company_id;
    this->m_company_id_isSet = true;
}

QString*
OAIBTWebhookParams::getData() {
    return data;
}
void
OAIBTWebhookParams::setData(QString* data) {
    this->data = data;
    this->m_data_isSet = true;
}

QString*
OAIBTWebhookParams::getDocumentId() {
    return document_id;
}
void
OAIBTWebhookParams::setDocumentId(QString* document_id) {
    this->document_id = document_id;
    this->m_document_id_isSet = true;
}

QString*
OAIBTWebhookParams::getElementId() {
    return element_id;
}
void
OAIBTWebhookParams::setElementId(QString* element_id) {
    this->element_id = element_id;
    this->m_element_id_isSet = true;
}

QList<QString*>*
OAIBTWebhookParams::getEvents() {
    return events;
}
void
OAIBTWebhookParams::setEvents(QList<QString*>* events) {
    this->events = events;
    this->m_events_isSet = true;
}

QString*
OAIBTWebhookParams::getFilter() {
    return filter;
}
void
OAIBTWebhookParams::setFilter(QString* filter) {
    this->filter = filter;
    this->m_filter_isSet = true;
}

QString*
OAIBTWebhookParams::getFolderId() {
    return folder_id;
}
void
OAIBTWebhookParams::setFolderId(QString* folder_id) {
    this->folder_id = folder_id;
    this->m_folder_id_isSet = true;
}

QString*
OAIBTWebhookParams::getId() {
    return id;
}
void
OAIBTWebhookParams::setId(QString* id) {
    this->id = id;
    this->m_id_isSet = true;
}

OAIBTWebhookOptions*
OAIBTWebhookParams::getOptions() {
    return options;
}
void
OAIBTWebhookParams::setOptions(OAIBTWebhookOptions* options) {
    this->options = options;
    this->m_options_isSet = true;
}

QString*
OAIBTWebhookParams::getPartId() {
    return part_id;
}
void
OAIBTWebhookParams::setPartId(QString* part_id) {
    this->part_id = part_id;
    this->m_part_id_isSet = true;
}

QString*
OAIBTWebhookParams::getProjectId() {
    return project_id;
}
void
OAIBTWebhookParams::setProjectId(QString* project_id) {
    this->project_id = project_id;
    this->m_project_id_isSet = true;
}

QString*
OAIBTWebhookParams::getUrl() {
    return url;
}
void
OAIBTWebhookParams::setUrl(QString* url) {
    this->url = url;
    this->m_url_isSet = true;
}

QString*
OAIBTWebhookParams::getUserId() {
    return user_id;
}
void
OAIBTWebhookParams::setUserId(QString* user_id) {
    this->user_id = user_id;
    this->m_user_id_isSet = true;
}

QString*
OAIBTWebhookParams::getVersionId() {
    return version_id;
}
void
OAIBTWebhookParams::setVersionId(QString* version_id) {
    this->version_id = version_id;
    this->m_version_id_isSet = true;
}

QString*
OAIBTWebhookParams::getWorkspaceId() {
    return workspace_id;
}
void
OAIBTWebhookParams::setWorkspaceId(QString* workspace_id) {
    this->workspace_id = workspace_id;
    this->m_workspace_id_isSet = true;
}


bool
OAIBTWebhookParams::isSet(){
    bool isObjectUpdated = false;
    do{
        if(client_id != nullptr && *client_id != QString("")){ isObjectUpdated = true; break;}
        if(company_id != nullptr && *company_id != QString("")){ isObjectUpdated = true; break;}
        if(data != nullptr && *data != QString("")){ isObjectUpdated = true; break;}
        if(document_id != nullptr && *document_id != QString("")){ isObjectUpdated = true; break;}
        if(element_id != nullptr && *element_id != QString("")){ isObjectUpdated = true; break;}
        if(events->size() > 0){ isObjectUpdated = true; break;}
        if(filter != nullptr && *filter != QString("")){ isObjectUpdated = true; break;}
        if(folder_id != nullptr && *folder_id != QString("")){ isObjectUpdated = true; break;}
        if(id != nullptr && *id != QString("")){ isObjectUpdated = true; break;}
        if(options != nullptr && options->isSet()){ isObjectUpdated = true; break;}
        if(part_id != nullptr && *part_id != QString("")){ isObjectUpdated = true; break;}
        if(project_id != nullptr && *project_id != QString("")){ isObjectUpdated = true; break;}
        if(url != nullptr && *url != QString("")){ isObjectUpdated = true; break;}
        if(user_id != nullptr && *user_id != QString("")){ isObjectUpdated = true; break;}
        if(version_id != nullptr && *version_id != QString("")){ isObjectUpdated = true; break;}
        if(workspace_id != nullptr && *workspace_id != QString("")){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

