/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * OpenAPI spec version: 1.111
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAISubscriptionItem.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAISubscriptionItem::OAISubscriptionItem(QString json) {
    init();
    this->fromJson(json);
}

OAISubscriptionItem::OAISubscriptionItem() {
    init();
}

OAISubscriptionItem::~OAISubscriptionItem() {
    this->cleanup();
}

void
OAISubscriptionItem::init() {
    created = 0L;
    m_created_isSet = false;
    id = new QString("");
    m_id_isSet = false;
    object = new QString("");
    m_object_isSet = false;
    plan = new OAIPlan();
    m_plan_isSet = false;
    quantity = 0;
    m_quantity_isSet = false;
}

void
OAISubscriptionItem::cleanup() {

    if(id != nullptr) { 
        delete id;
    }
    if(object != nullptr) { 
        delete object;
    }
    if(plan != nullptr) { 
        delete plan;
    }

}

OAISubscriptionItem*
OAISubscriptionItem::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAISubscriptionItem::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&created, pJson["created"], "qint64", "");
    
    ::OpenAPI::setValue(&id, pJson["id"], "QString", "QString");
    
    ::OpenAPI::setValue(&object, pJson["object"], "QString", "QString");
    
    ::OpenAPI::setValue(&plan, pJson["plan"], "OAIPlan", "OAIPlan");
    
    ::OpenAPI::setValue(&quantity, pJson["quantity"], "qint32", "");
    
}

QString
OAISubscriptionItem::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAISubscriptionItem::asJsonObject() {
    QJsonObject obj;
    if(m_created_isSet){
        obj.insert("created", QJsonValue(created));
    }
    if(id != nullptr && *id != QString("")){
        toJsonValue(QString("id"), id, obj, QString("QString"));
    }
    if(object != nullptr && *object != QString("")){
        toJsonValue(QString("object"), object, obj, QString("QString"));
    }
    if((plan != nullptr) && (plan->isSet())){
        toJsonValue(QString("plan"), plan, obj, QString("OAIPlan"));
    }
    if(m_quantity_isSet){
        obj.insert("quantity", QJsonValue(quantity));
    }

    return obj;
}

qint64
OAISubscriptionItem::getCreated() {
    return created;
}
void
OAISubscriptionItem::setCreated(qint64 created) {
    this->created = created;
    this->m_created_isSet = true;
}

QString*
OAISubscriptionItem::getId() {
    return id;
}
void
OAISubscriptionItem::setId(QString* id) {
    this->id = id;
    this->m_id_isSet = true;
}

QString*
OAISubscriptionItem::getObject() {
    return object;
}
void
OAISubscriptionItem::setObject(QString* object) {
    this->object = object;
    this->m_object_isSet = true;
}

OAIPlan*
OAISubscriptionItem::getPlan() {
    return plan;
}
void
OAISubscriptionItem::setPlan(OAIPlan* plan) {
    this->plan = plan;
    this->m_plan_isSet = true;
}

qint32
OAISubscriptionItem::getQuantity() {
    return quantity;
}
void
OAISubscriptionItem::setQuantity(qint32 quantity) {
    this->quantity = quantity;
    this->m_quantity_isSet = true;
}


bool
OAISubscriptionItem::isSet(){
    bool isObjectUpdated = false;
    do{
        if(m_created_isSet){ isObjectUpdated = true; break;}
        if(id != nullptr && *id != QString("")){ isObjectUpdated = true; break;}
        if(object != nullptr && *object != QString("")){ isObjectUpdated = true; break;}
        if(plan != nullptr && plan->isSet()){ isObjectUpdated = true; break;}
        if(m_quantity_isSet){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

