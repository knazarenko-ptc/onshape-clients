/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * OpenAPI spec version: 1.111
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIBTDocumentWithVersionAndElementId.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIBTDocumentWithVersionAndElementId::OAIBTDocumentWithVersionAndElementId(QString json) {
    init();
    this->fromJson(json);
}

OAIBTDocumentWithVersionAndElementId::OAIBTDocumentWithVersionAndElementId() {
    init();
}

OAIBTDocumentWithVersionAndElementId::~OAIBTDocumentWithVersionAndElementId() {
    this->cleanup();
}

void
OAIBTDocumentWithVersionAndElementId::init() {
    document_id = new QString("");
    m_document_id_isSet = false;
    document_version_id = new QString("");
    m_document_version_id_isSet = false;
    element_id = new QString("");
    m_element_id_isSet = false;
    part_number = new QString("");
    m_part_number_isSet = false;
    revision = new QString("");
    m_revision_isSet = false;
    unique_version_id = new QString("");
    m_unique_version_id_isSet = false;
    valid_revision_reference = false;
    m_valid_revision_reference_isSet = false;
}

void
OAIBTDocumentWithVersionAndElementId::cleanup() {
    if(document_id != nullptr) { 
        delete document_id;
    }
    if(document_version_id != nullptr) { 
        delete document_version_id;
    }
    if(element_id != nullptr) { 
        delete element_id;
    }
    if(part_number != nullptr) { 
        delete part_number;
    }
    if(revision != nullptr) { 
        delete revision;
    }
    if(unique_version_id != nullptr) { 
        delete unique_version_id;
    }

}

OAIBTDocumentWithVersionAndElementId*
OAIBTDocumentWithVersionAndElementId::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIBTDocumentWithVersionAndElementId::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&document_id, pJson["documentId"], "QString", "QString");
    
    ::OpenAPI::setValue(&document_version_id, pJson["documentVersionId"], "QString", "QString");
    
    ::OpenAPI::setValue(&element_id, pJson["elementId"], "QString", "QString");
    
    ::OpenAPI::setValue(&part_number, pJson["partNumber"], "QString", "QString");
    
    ::OpenAPI::setValue(&revision, pJson["revision"], "QString", "QString");
    
    ::OpenAPI::setValue(&unique_version_id, pJson["uniqueVersionId"], "QString", "QString");
    
    ::OpenAPI::setValue(&valid_revision_reference, pJson["validRevisionReference"], "bool", "");
    
}

QString
OAIBTDocumentWithVersionAndElementId::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIBTDocumentWithVersionAndElementId::asJsonObject() {
    QJsonObject obj;
    if(document_id != nullptr && *document_id != QString("")){
        toJsonValue(QString("documentId"), document_id, obj, QString("QString"));
    }
    if(document_version_id != nullptr && *document_version_id != QString("")){
        toJsonValue(QString("documentVersionId"), document_version_id, obj, QString("QString"));
    }
    if(element_id != nullptr && *element_id != QString("")){
        toJsonValue(QString("elementId"), element_id, obj, QString("QString"));
    }
    if(part_number != nullptr && *part_number != QString("")){
        toJsonValue(QString("partNumber"), part_number, obj, QString("QString"));
    }
    if(revision != nullptr && *revision != QString("")){
        toJsonValue(QString("revision"), revision, obj, QString("QString"));
    }
    if(unique_version_id != nullptr && *unique_version_id != QString("")){
        toJsonValue(QString("uniqueVersionId"), unique_version_id, obj, QString("QString"));
    }
    if(m_valid_revision_reference_isSet){
        obj.insert("validRevisionReference", QJsonValue(valid_revision_reference));
    }

    return obj;
}

QString*
OAIBTDocumentWithVersionAndElementId::getDocumentId() {
    return document_id;
}
void
OAIBTDocumentWithVersionAndElementId::setDocumentId(QString* document_id) {
    this->document_id = document_id;
    this->m_document_id_isSet = true;
}

QString*
OAIBTDocumentWithVersionAndElementId::getDocumentVersionId() {
    return document_version_id;
}
void
OAIBTDocumentWithVersionAndElementId::setDocumentVersionId(QString* document_version_id) {
    this->document_version_id = document_version_id;
    this->m_document_version_id_isSet = true;
}

QString*
OAIBTDocumentWithVersionAndElementId::getElementId() {
    return element_id;
}
void
OAIBTDocumentWithVersionAndElementId::setElementId(QString* element_id) {
    this->element_id = element_id;
    this->m_element_id_isSet = true;
}

QString*
OAIBTDocumentWithVersionAndElementId::getPartNumber() {
    return part_number;
}
void
OAIBTDocumentWithVersionAndElementId::setPartNumber(QString* part_number) {
    this->part_number = part_number;
    this->m_part_number_isSet = true;
}

QString*
OAIBTDocumentWithVersionAndElementId::getRevision() {
    return revision;
}
void
OAIBTDocumentWithVersionAndElementId::setRevision(QString* revision) {
    this->revision = revision;
    this->m_revision_isSet = true;
}

QString*
OAIBTDocumentWithVersionAndElementId::getUniqueVersionId() {
    return unique_version_id;
}
void
OAIBTDocumentWithVersionAndElementId::setUniqueVersionId(QString* unique_version_id) {
    this->unique_version_id = unique_version_id;
    this->m_unique_version_id_isSet = true;
}

bool
OAIBTDocumentWithVersionAndElementId::isValidRevisionReference() {
    return valid_revision_reference;
}
void
OAIBTDocumentWithVersionAndElementId::setValidRevisionReference(bool valid_revision_reference) {
    this->valid_revision_reference = valid_revision_reference;
    this->m_valid_revision_reference_isSet = true;
}


bool
OAIBTDocumentWithVersionAndElementId::isSet(){
    bool isObjectUpdated = false;
    do{
        if(document_id != nullptr && *document_id != QString("")){ isObjectUpdated = true; break;}
        if(document_version_id != nullptr && *document_version_id != QString("")){ isObjectUpdated = true; break;}
        if(element_id != nullptr && *element_id != QString("")){ isObjectUpdated = true; break;}
        if(part_number != nullptr && *part_number != QString("")){ isObjectUpdated = true; break;}
        if(revision != nullptr && *revision != QString("")){ isObjectUpdated = true; break;}
        if(unique_version_id != nullptr && *unique_version_id != QString("")){ isObjectUpdated = true; break;}
        if(m_valid_revision_reference_isSet){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

