/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * OpenAPI spec version: 1.111
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIBTAclEntryInfo.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIBTAclEntryInfo::OAIBTAclEntryInfo(QString json) {
    init();
    this->fromJson(json);
}

OAIBTAclEntryInfo::OAIBTAclEntryInfo() {
    init();
}

OAIBTAclEntryInfo::~OAIBTAclEntryInfo() {
    this->cleanup();
}

void
OAIBTAclEntryInfo::init() {
    accept_owner_transfer = false;
    m_accept_owner_transfer_isSet = false;
    company_name = new QString("");
    m_company_name_isSet = false;
    email = new QString("");
    m_email_isSet = false;
    enterprise_member = false;
    m_enterprise_member_isSet = false;
    entry_id = new QString("");
    m_entry_id_isSet = false;
    entry_state = new QString("");
    m_entry_state_isSet = false;
    entry_type = 0;
    m_entry_type_isSet = false;
    image = new QString("");
    m_image_isSet = false;
    name = new QString("");
    m_name_isSet = false;
    object_id = new QString("");
    m_object_id_isSet = false;
    pending_owner_transfer = false;
    m_pending_owner_transfer_isSet = false;
    permission = 0L;
    m_permission_isSet = false;
    permission_set = new OAIBTPermissionSet();
    m_permission_set_isSet = false;
    team_name = new QString("");
    m_team_name_isSet = false;
}

void
OAIBTAclEntryInfo::cleanup() {

    if(company_name != nullptr) { 
        delete company_name;
    }
    if(email != nullptr) { 
        delete email;
    }

    if(entry_id != nullptr) { 
        delete entry_id;
    }
    if(entry_state != nullptr) { 
        delete entry_state;
    }

    if(image != nullptr) { 
        delete image;
    }
    if(name != nullptr) { 
        delete name;
    }
    if(object_id != nullptr) { 
        delete object_id;
    }


    if(permission_set != nullptr) { 
        delete permission_set;
    }
    if(team_name != nullptr) { 
        delete team_name;
    }
}

OAIBTAclEntryInfo*
OAIBTAclEntryInfo::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIBTAclEntryInfo::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&accept_owner_transfer, pJson["acceptOwnerTransfer"], "bool", "");
    
    ::OpenAPI::setValue(&company_name, pJson["companyName"], "QString", "QString");
    
    ::OpenAPI::setValue(&email, pJson["email"], "QString", "QString");
    
    ::OpenAPI::setValue(&enterprise_member, pJson["enterpriseMember"], "bool", "");
    
    ::OpenAPI::setValue(&entry_id, pJson["entryId"], "QString", "QString");
    
    ::OpenAPI::setValue(&entry_state, pJson["entryState"], "QString", "QString");
    
    ::OpenAPI::setValue(&entry_type, pJson["entryType"], "qint32", "");
    
    ::OpenAPI::setValue(&image, pJson["image"], "QString", "QString");
    
    ::OpenAPI::setValue(&name, pJson["name"], "QString", "QString");
    
    ::OpenAPI::setValue(&object_id, pJson["objectId"], "QString", "QString");
    
    ::OpenAPI::setValue(&pending_owner_transfer, pJson["pendingOwnerTransfer"], "bool", "");
    
    ::OpenAPI::setValue(&permission, pJson["permission"], "qint64", "");
    
    ::OpenAPI::setValue(&permission_set, pJson["permissionSet"], "OAIBTPermissionSet", "OAIBTPermissionSet");
    
    ::OpenAPI::setValue(&team_name, pJson["teamName"], "QString", "QString");
    
}

QString
OAIBTAclEntryInfo::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIBTAclEntryInfo::asJsonObject() {
    QJsonObject obj;
    if(m_accept_owner_transfer_isSet){
        obj.insert("acceptOwnerTransfer", QJsonValue(accept_owner_transfer));
    }
    if(company_name != nullptr && *company_name != QString("")){
        toJsonValue(QString("companyName"), company_name, obj, QString("QString"));
    }
    if(email != nullptr && *email != QString("")){
        toJsonValue(QString("email"), email, obj, QString("QString"));
    }
    if(m_enterprise_member_isSet){
        obj.insert("enterpriseMember", QJsonValue(enterprise_member));
    }
    if(entry_id != nullptr && *entry_id != QString("")){
        toJsonValue(QString("entryId"), entry_id, obj, QString("QString"));
    }
    if(entry_state != nullptr && *entry_state != QString("")){
        toJsonValue(QString("entryState"), entry_state, obj, QString("QString"));
    }
    if(m_entry_type_isSet){
        obj.insert("entryType", QJsonValue(entry_type));
    }
    if(image != nullptr && *image != QString("")){
        toJsonValue(QString("image"), image, obj, QString("QString"));
    }
    if(name != nullptr && *name != QString("")){
        toJsonValue(QString("name"), name, obj, QString("QString"));
    }
    if(object_id != nullptr && *object_id != QString("")){
        toJsonValue(QString("objectId"), object_id, obj, QString("QString"));
    }
    if(m_pending_owner_transfer_isSet){
        obj.insert("pendingOwnerTransfer", QJsonValue(pending_owner_transfer));
    }
    if(m_permission_isSet){
        obj.insert("permission", QJsonValue(permission));
    }
    if((permission_set != nullptr) && (permission_set->isSet())){
        toJsonValue(QString("permissionSet"), permission_set, obj, QString("OAIBTPermissionSet"));
    }
    if(team_name != nullptr && *team_name != QString("")){
        toJsonValue(QString("teamName"), team_name, obj, QString("QString"));
    }

    return obj;
}

bool
OAIBTAclEntryInfo::isAcceptOwnerTransfer() {
    return accept_owner_transfer;
}
void
OAIBTAclEntryInfo::setAcceptOwnerTransfer(bool accept_owner_transfer) {
    this->accept_owner_transfer = accept_owner_transfer;
    this->m_accept_owner_transfer_isSet = true;
}

QString*
OAIBTAclEntryInfo::getCompanyName() {
    return company_name;
}
void
OAIBTAclEntryInfo::setCompanyName(QString* company_name) {
    this->company_name = company_name;
    this->m_company_name_isSet = true;
}

QString*
OAIBTAclEntryInfo::getEmail() {
    return email;
}
void
OAIBTAclEntryInfo::setEmail(QString* email) {
    this->email = email;
    this->m_email_isSet = true;
}

bool
OAIBTAclEntryInfo::isEnterpriseMember() {
    return enterprise_member;
}
void
OAIBTAclEntryInfo::setEnterpriseMember(bool enterprise_member) {
    this->enterprise_member = enterprise_member;
    this->m_enterprise_member_isSet = true;
}

QString*
OAIBTAclEntryInfo::getEntryId() {
    return entry_id;
}
void
OAIBTAclEntryInfo::setEntryId(QString* entry_id) {
    this->entry_id = entry_id;
    this->m_entry_id_isSet = true;
}

QString*
OAIBTAclEntryInfo::getEntryState() {
    return entry_state;
}
void
OAIBTAclEntryInfo::setEntryState(QString* entry_state) {
    this->entry_state = entry_state;
    this->m_entry_state_isSet = true;
}

qint32
OAIBTAclEntryInfo::getEntryType() {
    return entry_type;
}
void
OAIBTAclEntryInfo::setEntryType(qint32 entry_type) {
    this->entry_type = entry_type;
    this->m_entry_type_isSet = true;
}

QString*
OAIBTAclEntryInfo::getImage() {
    return image;
}
void
OAIBTAclEntryInfo::setImage(QString* image) {
    this->image = image;
    this->m_image_isSet = true;
}

QString*
OAIBTAclEntryInfo::getName() {
    return name;
}
void
OAIBTAclEntryInfo::setName(QString* name) {
    this->name = name;
    this->m_name_isSet = true;
}

QString*
OAIBTAclEntryInfo::getObjectId() {
    return object_id;
}
void
OAIBTAclEntryInfo::setObjectId(QString* object_id) {
    this->object_id = object_id;
    this->m_object_id_isSet = true;
}

bool
OAIBTAclEntryInfo::isPendingOwnerTransfer() {
    return pending_owner_transfer;
}
void
OAIBTAclEntryInfo::setPendingOwnerTransfer(bool pending_owner_transfer) {
    this->pending_owner_transfer = pending_owner_transfer;
    this->m_pending_owner_transfer_isSet = true;
}

qint64
OAIBTAclEntryInfo::getPermission() {
    return permission;
}
void
OAIBTAclEntryInfo::setPermission(qint64 permission) {
    this->permission = permission;
    this->m_permission_isSet = true;
}

OAIBTPermissionSet*
OAIBTAclEntryInfo::getPermissionSet() {
    return permission_set;
}
void
OAIBTAclEntryInfo::setPermissionSet(OAIBTPermissionSet* permission_set) {
    this->permission_set = permission_set;
    this->m_permission_set_isSet = true;
}

QString*
OAIBTAclEntryInfo::getTeamName() {
    return team_name;
}
void
OAIBTAclEntryInfo::setTeamName(QString* team_name) {
    this->team_name = team_name;
    this->m_team_name_isSet = true;
}


bool
OAIBTAclEntryInfo::isSet(){
    bool isObjectUpdated = false;
    do{
        if(m_accept_owner_transfer_isSet){ isObjectUpdated = true; break;}
        if(company_name != nullptr && *company_name != QString("")){ isObjectUpdated = true; break;}
        if(email != nullptr && *email != QString("")){ isObjectUpdated = true; break;}
        if(m_enterprise_member_isSet){ isObjectUpdated = true; break;}
        if(entry_id != nullptr && *entry_id != QString("")){ isObjectUpdated = true; break;}
        if(entry_state != nullptr && *entry_state != QString("")){ isObjectUpdated = true; break;}
        if(m_entry_type_isSet){ isObjectUpdated = true; break;}
        if(image != nullptr && *image != QString("")){ isObjectUpdated = true; break;}
        if(name != nullptr && *name != QString("")){ isObjectUpdated = true; break;}
        if(object_id != nullptr && *object_id != QString("")){ isObjectUpdated = true; break;}
        if(m_pending_owner_transfer_isSet){ isObjectUpdated = true; break;}
        if(m_permission_isSet){ isObjectUpdated = true; break;}
        if(permission_set != nullptr && permission_set->isSet()){ isObjectUpdated = true; break;}
        if(team_name != nullptr && *team_name != QString("")){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

