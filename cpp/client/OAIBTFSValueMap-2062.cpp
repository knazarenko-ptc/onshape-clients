/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * OpenAPI spec version: 1.111
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIBTFSValueMap-2062.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIBTFSValueMap-2062::OAIBTFSValueMap-2062(QString json) {
    init();
    this->fromJson(json);
}

OAIBTFSValueMap-2062::OAIBTFSValueMap-2062() {
    init();
}

OAIBTFSValueMap-2062::~OAIBTFSValueMap-2062() {
    this->cleanup();
}

void
OAIBTFSValueMap-2062::init() {
    configuration_value_string = new QString("");
    m_configuration_value_string_isSet = false;
    fsvalues_keyed_by_strings = new QMap<QString, OAIBTFSValue-1888*>();
    m_fsvalues_keyed_by_strings_isSet = false;
    type_tag = new QString("");
    m_type_tag_isSet = false;
    value = new QList<OAIBTFSValueMapEntry-2077*>();
    m_value_isSet = false;
    value_object = new QMap<QString, OAIObject*>();
    m_value_object_isSet = false;
}

void
OAIBTFSValueMap-2062::cleanup() {
    if(configuration_value_string != nullptr) { 
        delete configuration_value_string;
    }
    if(fsvalues_keyed_by_strings != nullptr) { 
        auto arr = fsvalues_keyed_by_strings;
        for(auto o: *arr) { 
            delete o;
        }
        delete fsvalues_keyed_by_strings;
    }
    if(type_tag != nullptr) { 
        delete type_tag;
    }
    if(value != nullptr) { 
        auto arr = value;
        for(auto o: *arr) { 
            delete o;
        }
        delete value;
    }
    if(value_object != nullptr) { 
        auto arr = value_object;
        for(auto o: *arr) { 
            delete o;
        }
        delete value_object;
    }
}

OAIBTFSValueMap-2062*
OAIBTFSValueMap-2062::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIBTFSValueMap-2062::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&configuration_value_string, pJson["configurationValueString"], "QString", "QString");
    
    
    ::OpenAPI::setValue(&fsvalues_keyed_by_strings, pJson["fsvaluesKeyedByStrings"], "QMap", "OAIBTFSValue-1888");
    ::OpenAPI::setValue(&type_tag, pJson["typeTag"], "QString", "QString");
    
    
    ::OpenAPI::setValue(&value, pJson["value"], "QList", "OAIBTFSValueMapEntry-2077");
    
    ::OpenAPI::setValue(&value_object, pJson["valueObject"], "QMap", "OAIObject");
}

QString
OAIBTFSValueMap-2062::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIBTFSValueMap-2062::asJsonObject() {
    QJsonObject obj;
    if(configuration_value_string != nullptr && *configuration_value_string != QString("")){
        toJsonValue(QString("configurationValueString"), configuration_value_string, obj, QString("QString"));
    }
    if(fsvalues_keyed_by_strings->size() > 0){
        toJsonMap((QMap<QString, void*>*) fsvalues_keyed_by_strings, obj, "fsvaluesKeyedByStrings", "OAIBTFSValue-1888");
    }
    if(type_tag != nullptr && *type_tag != QString("")){
        toJsonValue(QString("typeTag"), type_tag, obj, QString("QString"));
    }
    if(value->size() > 0){
        toJsonArray((QList<void*>*)value, obj, "value", "OAIBTFSValueMapEntry-2077");
    }
    if(value_object->size() > 0){
        toJsonMap((QMap<QString, void*>*) value_object, obj, "valueObject", "OAIObject");
    }

    return obj;
}

QString*
OAIBTFSValueMap-2062::getConfigurationValueString() {
    return configuration_value_string;
}
void
OAIBTFSValueMap-2062::setConfigurationValueString(QString* configuration_value_string) {
    this->configuration_value_string = configuration_value_string;
    this->m_configuration_value_string_isSet = true;
}

QMap<QString, OAIBTFSValue-1888*>*
OAIBTFSValueMap-2062::getFsvaluesKeyedByStrings() {
    return fsvalues_keyed_by_strings;
}
void
OAIBTFSValueMap-2062::setFsvaluesKeyedByStrings(QMap<QString, OAIBTFSValue-1888*>* fsvalues_keyed_by_strings) {
    this->fsvalues_keyed_by_strings = fsvalues_keyed_by_strings;
    this->m_fsvalues_keyed_by_strings_isSet = true;
}

QString*
OAIBTFSValueMap-2062::getTypeTag() {
    return type_tag;
}
void
OAIBTFSValueMap-2062::setTypeTag(QString* type_tag) {
    this->type_tag = type_tag;
    this->m_type_tag_isSet = true;
}

QList<OAIBTFSValueMapEntry-2077*>*
OAIBTFSValueMap-2062::getValue() {
    return value;
}
void
OAIBTFSValueMap-2062::setValue(QList<OAIBTFSValueMapEntry-2077*>* value) {
    this->value = value;
    this->m_value_isSet = true;
}

QMap<QString, OAIObject*>*
OAIBTFSValueMap-2062::getValueObject() {
    return value_object;
}
void
OAIBTFSValueMap-2062::setValueObject(QMap<QString, OAIObject*>* value_object) {
    this->value_object = value_object;
    this->m_value_object_isSet = true;
}


bool
OAIBTFSValueMap-2062::isSet(){
    bool isObjectUpdated = false;
    do{
        if(configuration_value_string != nullptr && *configuration_value_string != QString("")){ isObjectUpdated = true; break;}
        if(fsvalues_keyed_by_strings->size() > 0){ isObjectUpdated = true; break;}
        if(type_tag != nullptr && *type_tag != QString("")){ isObjectUpdated = true; break;}
        if(value->size() > 0){ isObjectUpdated = true; break;}
        if(value_object->size() > 0){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

