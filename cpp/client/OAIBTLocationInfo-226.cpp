/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * OpenAPI spec version: 1.111
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIBTLocationInfo-226.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIBTLocationInfo-226::OAIBTLocationInfo-226(QString json) {
    init();
    this->fromJson(json);
}

OAIBTLocationInfo-226::OAIBTLocationInfo-226() {
    init();
}

OAIBTLocationInfo-226::~OAIBTLocationInfo-226() {
    this->cleanup();
}

void
OAIBTLocationInfo-226::init() {
    bt_type = new QString("");
    m_bt_type_isSet = false;
    character = 0;
    m_character_isSet = false;
    column = 0;
    m_column_isSet = false;
    document = new QString("");
    m_document_isSet = false;
    element_microversion = new QString("");
    m_element_microversion_isSet = false;
    end_character = 0;
    m_end_character_isSet = false;
    end_column = 0;
    m_end_column_isSet = false;
    end_line = 0;
    m_end_line_isSet = false;
    from_node = new OAIBTPNode-7();
    m_from_node_isSet = false;
    language_version = 0;
    m_language_version_isSet = false;
    line = 0;
    m_line_isSet = false;
    module_ids = new OAIBTDocumentVersionElementIds-1897();
    m_module_ids_isSet = false;
    node_id = new QString("");
    m_node_id_isSet = false;
    parse_node_id = new QString("");
    m_parse_node_id_isSet = false;
    parse_node_id_raw = new OAIBTObjectId();
    m_parse_node_id_raw_isSet = false;
    top_level = new QString("");
    m_top_level_isSet = false;
    version = new QString("");
    m_version_isSet = false;
}

void
OAIBTLocationInfo-226::cleanup() {
    if(bt_type != nullptr) { 
        delete bt_type;
    }


    if(document != nullptr) { 
        delete document;
    }
    if(element_microversion != nullptr) { 
        delete element_microversion;
    }



    if(from_node != nullptr) { 
        delete from_node;
    }


    if(module_ids != nullptr) { 
        delete module_ids;
    }
    if(node_id != nullptr) { 
        delete node_id;
    }
    if(parse_node_id != nullptr) { 
        delete parse_node_id;
    }
    if(parse_node_id_raw != nullptr) { 
        delete parse_node_id_raw;
    }
    if(top_level != nullptr) { 
        delete top_level;
    }
    if(version != nullptr) { 
        delete version;
    }
}

OAIBTLocationInfo-226*
OAIBTLocationInfo-226::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIBTLocationInfo-226::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&bt_type, pJson["btType"], "QString", "QString");
    
    ::OpenAPI::setValue(&character, pJson["character"], "qint32", "");
    
    ::OpenAPI::setValue(&column, pJson["column"], "qint32", "");
    
    ::OpenAPI::setValue(&document, pJson["document"], "QString", "QString");
    
    ::OpenAPI::setValue(&element_microversion, pJson["elementMicroversion"], "QString", "QString");
    
    ::OpenAPI::setValue(&end_character, pJson["endCharacter"], "qint32", "");
    
    ::OpenAPI::setValue(&end_column, pJson["endColumn"], "qint32", "");
    
    ::OpenAPI::setValue(&end_line, pJson["endLine"], "qint32", "");
    
    ::OpenAPI::setValue(&from_node, pJson["fromNode"], "OAIBTPNode-7", "OAIBTPNode-7");
    
    ::OpenAPI::setValue(&language_version, pJson["languageVersion"], "qint32", "");
    
    ::OpenAPI::setValue(&line, pJson["line"], "qint32", "");
    
    ::OpenAPI::setValue(&module_ids, pJson["moduleIds"], "OAIBTDocumentVersionElementIds-1897", "OAIBTDocumentVersionElementIds-1897");
    
    ::OpenAPI::setValue(&node_id, pJson["nodeId"], "QString", "QString");
    
    ::OpenAPI::setValue(&parse_node_id, pJson["parseNodeId"], "QString", "QString");
    
    ::OpenAPI::setValue(&parse_node_id_raw, pJson["parseNodeIdRaw"], "OAIBTObjectId", "OAIBTObjectId");
    
    ::OpenAPI::setValue(&top_level, pJson["topLevel"], "QString", "QString");
    
    ::OpenAPI::setValue(&version, pJson["version"], "QString", "QString");
    
}

QString
OAIBTLocationInfo-226::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIBTLocationInfo-226::asJsonObject() {
    QJsonObject obj;
    if(bt_type != nullptr && *bt_type != QString("")){
        toJsonValue(QString("btType"), bt_type, obj, QString("QString"));
    }
    if(m_character_isSet){
        obj.insert("character", QJsonValue(character));
    }
    if(m_column_isSet){
        obj.insert("column", QJsonValue(column));
    }
    if(document != nullptr && *document != QString("")){
        toJsonValue(QString("document"), document, obj, QString("QString"));
    }
    if(element_microversion != nullptr && *element_microversion != QString("")){
        toJsonValue(QString("elementMicroversion"), element_microversion, obj, QString("QString"));
    }
    if(m_end_character_isSet){
        obj.insert("endCharacter", QJsonValue(end_character));
    }
    if(m_end_column_isSet){
        obj.insert("endColumn", QJsonValue(end_column));
    }
    if(m_end_line_isSet){
        obj.insert("endLine", QJsonValue(end_line));
    }
    if((from_node != nullptr) && (from_node->isSet())){
        toJsonValue(QString("fromNode"), from_node, obj, QString("OAIBTPNode-7"));
    }
    if(m_language_version_isSet){
        obj.insert("languageVersion", QJsonValue(language_version));
    }
    if(m_line_isSet){
        obj.insert("line", QJsonValue(line));
    }
    if((module_ids != nullptr) && (module_ids->isSet())){
        toJsonValue(QString("moduleIds"), module_ids, obj, QString("OAIBTDocumentVersionElementIds-1897"));
    }
    if(node_id != nullptr && *node_id != QString("")){
        toJsonValue(QString("nodeId"), node_id, obj, QString("QString"));
    }
    if(parse_node_id != nullptr && *parse_node_id != QString("")){
        toJsonValue(QString("parseNodeId"), parse_node_id, obj, QString("QString"));
    }
    if((parse_node_id_raw != nullptr) && (parse_node_id_raw->isSet())){
        toJsonValue(QString("parseNodeIdRaw"), parse_node_id_raw, obj, QString("OAIBTObjectId"));
    }
    if(top_level != nullptr && *top_level != QString("")){
        toJsonValue(QString("topLevel"), top_level, obj, QString("QString"));
    }
    if(version != nullptr && *version != QString("")){
        toJsonValue(QString("version"), version, obj, QString("QString"));
    }

    return obj;
}

QString*
OAIBTLocationInfo-226::getBtType() {
    return bt_type;
}
void
OAIBTLocationInfo-226::setBtType(QString* bt_type) {
    this->bt_type = bt_type;
    this->m_bt_type_isSet = true;
}

qint32
OAIBTLocationInfo-226::getCharacter() {
    return character;
}
void
OAIBTLocationInfo-226::setCharacter(qint32 character) {
    this->character = character;
    this->m_character_isSet = true;
}

qint32
OAIBTLocationInfo-226::getColumn() {
    return column;
}
void
OAIBTLocationInfo-226::setColumn(qint32 column) {
    this->column = column;
    this->m_column_isSet = true;
}

QString*
OAIBTLocationInfo-226::getDocument() {
    return document;
}
void
OAIBTLocationInfo-226::setDocument(QString* document) {
    this->document = document;
    this->m_document_isSet = true;
}

QString*
OAIBTLocationInfo-226::getElementMicroversion() {
    return element_microversion;
}
void
OAIBTLocationInfo-226::setElementMicroversion(QString* element_microversion) {
    this->element_microversion = element_microversion;
    this->m_element_microversion_isSet = true;
}

qint32
OAIBTLocationInfo-226::getEndCharacter() {
    return end_character;
}
void
OAIBTLocationInfo-226::setEndCharacter(qint32 end_character) {
    this->end_character = end_character;
    this->m_end_character_isSet = true;
}

qint32
OAIBTLocationInfo-226::getEndColumn() {
    return end_column;
}
void
OAIBTLocationInfo-226::setEndColumn(qint32 end_column) {
    this->end_column = end_column;
    this->m_end_column_isSet = true;
}

qint32
OAIBTLocationInfo-226::getEndLine() {
    return end_line;
}
void
OAIBTLocationInfo-226::setEndLine(qint32 end_line) {
    this->end_line = end_line;
    this->m_end_line_isSet = true;
}

OAIBTPNode-7*
OAIBTLocationInfo-226::getFromNode() {
    return from_node;
}
void
OAIBTLocationInfo-226::setFromNode(OAIBTPNode-7* from_node) {
    this->from_node = from_node;
    this->m_from_node_isSet = true;
}

qint32
OAIBTLocationInfo-226::getLanguageVersion() {
    return language_version;
}
void
OAIBTLocationInfo-226::setLanguageVersion(qint32 language_version) {
    this->language_version = language_version;
    this->m_language_version_isSet = true;
}

qint32
OAIBTLocationInfo-226::getLine() {
    return line;
}
void
OAIBTLocationInfo-226::setLine(qint32 line) {
    this->line = line;
    this->m_line_isSet = true;
}

OAIBTDocumentVersionElementIds-1897*
OAIBTLocationInfo-226::getModuleIds() {
    return module_ids;
}
void
OAIBTLocationInfo-226::setModuleIds(OAIBTDocumentVersionElementIds-1897* module_ids) {
    this->module_ids = module_ids;
    this->m_module_ids_isSet = true;
}

QString*
OAIBTLocationInfo-226::getNodeId() {
    return node_id;
}
void
OAIBTLocationInfo-226::setNodeId(QString* node_id) {
    this->node_id = node_id;
    this->m_node_id_isSet = true;
}

QString*
OAIBTLocationInfo-226::getParseNodeId() {
    return parse_node_id;
}
void
OAIBTLocationInfo-226::setParseNodeId(QString* parse_node_id) {
    this->parse_node_id = parse_node_id;
    this->m_parse_node_id_isSet = true;
}

OAIBTObjectId*
OAIBTLocationInfo-226::getParseNodeIdRaw() {
    return parse_node_id_raw;
}
void
OAIBTLocationInfo-226::setParseNodeIdRaw(OAIBTObjectId* parse_node_id_raw) {
    this->parse_node_id_raw = parse_node_id_raw;
    this->m_parse_node_id_raw_isSet = true;
}

QString*
OAIBTLocationInfo-226::getTopLevel() {
    return top_level;
}
void
OAIBTLocationInfo-226::setTopLevel(QString* top_level) {
    this->top_level = top_level;
    this->m_top_level_isSet = true;
}

QString*
OAIBTLocationInfo-226::getVersion() {
    return version;
}
void
OAIBTLocationInfo-226::setVersion(QString* version) {
    this->version = version;
    this->m_version_isSet = true;
}


bool
OAIBTLocationInfo-226::isSet(){
    bool isObjectUpdated = false;
    do{
        if(bt_type != nullptr && *bt_type != QString("")){ isObjectUpdated = true; break;}
        if(m_character_isSet){ isObjectUpdated = true; break;}
        if(m_column_isSet){ isObjectUpdated = true; break;}
        if(document != nullptr && *document != QString("")){ isObjectUpdated = true; break;}
        if(element_microversion != nullptr && *element_microversion != QString("")){ isObjectUpdated = true; break;}
        if(m_end_character_isSet){ isObjectUpdated = true; break;}
        if(m_end_column_isSet){ isObjectUpdated = true; break;}
        if(m_end_line_isSet){ isObjectUpdated = true; break;}
        if(from_node != nullptr && from_node->isSet()){ isObjectUpdated = true; break;}
        if(m_language_version_isSet){ isObjectUpdated = true; break;}
        if(m_line_isSet){ isObjectUpdated = true; break;}
        if(module_ids != nullptr && module_ids->isSet()){ isObjectUpdated = true; break;}
        if(node_id != nullptr && *node_id != QString("")){ isObjectUpdated = true; break;}
        if(parse_node_id != nullptr && *parse_node_id != QString("")){ isObjectUpdated = true; break;}
        if(parse_node_id_raw != nullptr && parse_node_id_raw->isSet()){ isObjectUpdated = true; break;}
        if(top_level != nullptr && *top_level != QString("")){ isObjectUpdated = true; break;}
        if(version != nullptr && *version != QString("")){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

