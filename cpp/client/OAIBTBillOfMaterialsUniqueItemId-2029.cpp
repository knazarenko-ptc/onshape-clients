/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * OpenAPI spec version: 1.111
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIBTBillOfMaterialsUniqueItemId-2029.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIBTBillOfMaterialsUniqueItemId-2029::OAIBTBillOfMaterialsUniqueItemId-2029(QString json) {
    init();
    this->fromJson(json);
}

OAIBTBillOfMaterialsUniqueItemId-2029::OAIBTBillOfMaterialsUniqueItemId-2029() {
    init();
}

OAIBTBillOfMaterialsUniqueItemId-2029::~OAIBTBillOfMaterialsUniqueItemId-2029() {
    this->cleanup();
}

void
OAIBTBillOfMaterialsUniqueItemId-2029::init() {
    ambiguous_unique_id = new OAIBTBillOfMaterialsUniqueItemId-2029();
    m_ambiguous_unique_id_isSet = false;
    api_configuration = new QString("");
    m_api_configuration_isSet = false;
    bt_type = new QString("");
    m_bt_type_isSet = false;
    document_version_element_id = new OAIBTDocumentVersionElementIds-1897();
    m_document_version_element_id_isSet = false;
    element_id = new QString("");
    m_element_id_isSet = false;
    full_element_id = new OAIBTFullElementId-756();
    m_full_element_id_isSet = false;
    is_standard_content = false;
    m_is_standard_content_isSet = false;
    item_definition_id = new QString("");
    m_item_definition_id_isSet = false;
    non_geometric = false;
    m_non_geometric_isSet = false;
    part_id = new QString("");
    m_part_id_isSet = false;
    source_element = new OAIBTElementReference-725();
    m_source_element_isSet = false;
    standard_content_owner = new OAIBTOwner-3114();
    m_standard_content_owner_isSet = false;
    unique_element_id = new OAIBTBillOfMaterialsUniqueItemId-2029();
    m_unique_element_id_isSet = false;
    version_id = new QString("");
    m_version_id_isSet = false;
    workspace_part_item = false;
    m_workspace_part_item_isSet = false;
    workspace_reference = false;
    m_workspace_reference_isSet = false;
}

void
OAIBTBillOfMaterialsUniqueItemId-2029::cleanup() {
    if(ambiguous_unique_id != nullptr) { 
        delete ambiguous_unique_id;
    }
    if(api_configuration != nullptr) { 
        delete api_configuration;
    }
    if(bt_type != nullptr) { 
        delete bt_type;
    }
    if(document_version_element_id != nullptr) { 
        delete document_version_element_id;
    }
    if(element_id != nullptr) { 
        delete element_id;
    }
    if(full_element_id != nullptr) { 
        delete full_element_id;
    }

    if(item_definition_id != nullptr) { 
        delete item_definition_id;
    }

    if(part_id != nullptr) { 
        delete part_id;
    }
    if(source_element != nullptr) { 
        delete source_element;
    }
    if(standard_content_owner != nullptr) { 
        delete standard_content_owner;
    }
    if(unique_element_id != nullptr) { 
        delete unique_element_id;
    }
    if(version_id != nullptr) { 
        delete version_id;
    }


}

OAIBTBillOfMaterialsUniqueItemId-2029*
OAIBTBillOfMaterialsUniqueItemId-2029::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIBTBillOfMaterialsUniqueItemId-2029::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&ambiguous_unique_id, pJson["ambiguousUniqueId"], "OAIBTBillOfMaterialsUniqueItemId-2029", "OAIBTBillOfMaterialsUniqueItemId-2029");
    
    ::OpenAPI::setValue(&api_configuration, pJson["apiConfiguration"], "QString", "QString");
    
    ::OpenAPI::setValue(&bt_type, pJson["btType"], "QString", "QString");
    
    ::OpenAPI::setValue(&document_version_element_id, pJson["documentVersionElementId"], "OAIBTDocumentVersionElementIds-1897", "OAIBTDocumentVersionElementIds-1897");
    
    ::OpenAPI::setValue(&element_id, pJson["elementId"], "QString", "QString");
    
    ::OpenAPI::setValue(&full_element_id, pJson["fullElementId"], "OAIBTFullElementId-756", "OAIBTFullElementId-756");
    
    ::OpenAPI::setValue(&is_standard_content, pJson["isStandardContent"], "bool", "");
    
    ::OpenAPI::setValue(&item_definition_id, pJson["itemDefinitionId"], "QString", "QString");
    
    ::OpenAPI::setValue(&non_geometric, pJson["nonGeometric"], "bool", "");
    
    ::OpenAPI::setValue(&part_id, pJson["partId"], "QString", "QString");
    
    ::OpenAPI::setValue(&source_element, pJson["sourceElement"], "OAIBTElementReference-725", "OAIBTElementReference-725");
    
    ::OpenAPI::setValue(&standard_content_owner, pJson["standardContentOwner"], "OAIBTOwner-3114", "OAIBTOwner-3114");
    
    ::OpenAPI::setValue(&unique_element_id, pJson["uniqueElementId"], "OAIBTBillOfMaterialsUniqueItemId-2029", "OAIBTBillOfMaterialsUniqueItemId-2029");
    
    ::OpenAPI::setValue(&version_id, pJson["versionId"], "QString", "QString");
    
    ::OpenAPI::setValue(&workspace_part_item, pJson["workspacePartItem"], "bool", "");
    
    ::OpenAPI::setValue(&workspace_reference, pJson["workspaceReference"], "bool", "");
    
}

QString
OAIBTBillOfMaterialsUniqueItemId-2029::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIBTBillOfMaterialsUniqueItemId-2029::asJsonObject() {
    QJsonObject obj;
    if((ambiguous_unique_id != nullptr) && (ambiguous_unique_id->isSet())){
        toJsonValue(QString("ambiguousUniqueId"), ambiguous_unique_id, obj, QString("OAIBTBillOfMaterialsUniqueItemId-2029"));
    }
    if(api_configuration != nullptr && *api_configuration != QString("")){
        toJsonValue(QString("apiConfiguration"), api_configuration, obj, QString("QString"));
    }
    if(bt_type != nullptr && *bt_type != QString("")){
        toJsonValue(QString("btType"), bt_type, obj, QString("QString"));
    }
    if((document_version_element_id != nullptr) && (document_version_element_id->isSet())){
        toJsonValue(QString("documentVersionElementId"), document_version_element_id, obj, QString("OAIBTDocumentVersionElementIds-1897"));
    }
    if(element_id != nullptr && *element_id != QString("")){
        toJsonValue(QString("elementId"), element_id, obj, QString("QString"));
    }
    if((full_element_id != nullptr) && (full_element_id->isSet())){
        toJsonValue(QString("fullElementId"), full_element_id, obj, QString("OAIBTFullElementId-756"));
    }
    if(m_is_standard_content_isSet){
        obj.insert("isStandardContent", QJsonValue(is_standard_content));
    }
    if(item_definition_id != nullptr && *item_definition_id != QString("")){
        toJsonValue(QString("itemDefinitionId"), item_definition_id, obj, QString("QString"));
    }
    if(m_non_geometric_isSet){
        obj.insert("nonGeometric", QJsonValue(non_geometric));
    }
    if(part_id != nullptr && *part_id != QString("")){
        toJsonValue(QString("partId"), part_id, obj, QString("QString"));
    }
    if((source_element != nullptr) && (source_element->isSet())){
        toJsonValue(QString("sourceElement"), source_element, obj, QString("OAIBTElementReference-725"));
    }
    if((standard_content_owner != nullptr) && (standard_content_owner->isSet())){
        toJsonValue(QString("standardContentOwner"), standard_content_owner, obj, QString("OAIBTOwner-3114"));
    }
    if((unique_element_id != nullptr) && (unique_element_id->isSet())){
        toJsonValue(QString("uniqueElementId"), unique_element_id, obj, QString("OAIBTBillOfMaterialsUniqueItemId-2029"));
    }
    if(version_id != nullptr && *version_id != QString("")){
        toJsonValue(QString("versionId"), version_id, obj, QString("QString"));
    }
    if(m_workspace_part_item_isSet){
        obj.insert("workspacePartItem", QJsonValue(workspace_part_item));
    }
    if(m_workspace_reference_isSet){
        obj.insert("workspaceReference", QJsonValue(workspace_reference));
    }

    return obj;
}

OAIBTBillOfMaterialsUniqueItemId-2029*
OAIBTBillOfMaterialsUniqueItemId-2029::getAmbiguousUniqueId() {
    return ambiguous_unique_id;
}
void
OAIBTBillOfMaterialsUniqueItemId-2029::setAmbiguousUniqueId(OAIBTBillOfMaterialsUniqueItemId-2029* ambiguous_unique_id) {
    this->ambiguous_unique_id = ambiguous_unique_id;
    this->m_ambiguous_unique_id_isSet = true;
}

QString*
OAIBTBillOfMaterialsUniqueItemId-2029::getApiConfiguration() {
    return api_configuration;
}
void
OAIBTBillOfMaterialsUniqueItemId-2029::setApiConfiguration(QString* api_configuration) {
    this->api_configuration = api_configuration;
    this->m_api_configuration_isSet = true;
}

QString*
OAIBTBillOfMaterialsUniqueItemId-2029::getBtType() {
    return bt_type;
}
void
OAIBTBillOfMaterialsUniqueItemId-2029::setBtType(QString* bt_type) {
    this->bt_type = bt_type;
    this->m_bt_type_isSet = true;
}

OAIBTDocumentVersionElementIds-1897*
OAIBTBillOfMaterialsUniqueItemId-2029::getDocumentVersionElementId() {
    return document_version_element_id;
}
void
OAIBTBillOfMaterialsUniqueItemId-2029::setDocumentVersionElementId(OAIBTDocumentVersionElementIds-1897* document_version_element_id) {
    this->document_version_element_id = document_version_element_id;
    this->m_document_version_element_id_isSet = true;
}

QString*
OAIBTBillOfMaterialsUniqueItemId-2029::getElementId() {
    return element_id;
}
void
OAIBTBillOfMaterialsUniqueItemId-2029::setElementId(QString* element_id) {
    this->element_id = element_id;
    this->m_element_id_isSet = true;
}

OAIBTFullElementId-756*
OAIBTBillOfMaterialsUniqueItemId-2029::getFullElementId() {
    return full_element_id;
}
void
OAIBTBillOfMaterialsUniqueItemId-2029::setFullElementId(OAIBTFullElementId-756* full_element_id) {
    this->full_element_id = full_element_id;
    this->m_full_element_id_isSet = true;
}

bool
OAIBTBillOfMaterialsUniqueItemId-2029::isIsStandardContent() {
    return is_standard_content;
}
void
OAIBTBillOfMaterialsUniqueItemId-2029::setIsStandardContent(bool is_standard_content) {
    this->is_standard_content = is_standard_content;
    this->m_is_standard_content_isSet = true;
}

QString*
OAIBTBillOfMaterialsUniqueItemId-2029::getItemDefinitionId() {
    return item_definition_id;
}
void
OAIBTBillOfMaterialsUniqueItemId-2029::setItemDefinitionId(QString* item_definition_id) {
    this->item_definition_id = item_definition_id;
    this->m_item_definition_id_isSet = true;
}

bool
OAIBTBillOfMaterialsUniqueItemId-2029::isNonGeometric() {
    return non_geometric;
}
void
OAIBTBillOfMaterialsUniqueItemId-2029::setNonGeometric(bool non_geometric) {
    this->non_geometric = non_geometric;
    this->m_non_geometric_isSet = true;
}

QString*
OAIBTBillOfMaterialsUniqueItemId-2029::getPartId() {
    return part_id;
}
void
OAIBTBillOfMaterialsUniqueItemId-2029::setPartId(QString* part_id) {
    this->part_id = part_id;
    this->m_part_id_isSet = true;
}

OAIBTElementReference-725*
OAIBTBillOfMaterialsUniqueItemId-2029::getSourceElement() {
    return source_element;
}
void
OAIBTBillOfMaterialsUniqueItemId-2029::setSourceElement(OAIBTElementReference-725* source_element) {
    this->source_element = source_element;
    this->m_source_element_isSet = true;
}

OAIBTOwner-3114*
OAIBTBillOfMaterialsUniqueItemId-2029::getStandardContentOwner() {
    return standard_content_owner;
}
void
OAIBTBillOfMaterialsUniqueItemId-2029::setStandardContentOwner(OAIBTOwner-3114* standard_content_owner) {
    this->standard_content_owner = standard_content_owner;
    this->m_standard_content_owner_isSet = true;
}

OAIBTBillOfMaterialsUniqueItemId-2029*
OAIBTBillOfMaterialsUniqueItemId-2029::getUniqueElementId() {
    return unique_element_id;
}
void
OAIBTBillOfMaterialsUniqueItemId-2029::setUniqueElementId(OAIBTBillOfMaterialsUniqueItemId-2029* unique_element_id) {
    this->unique_element_id = unique_element_id;
    this->m_unique_element_id_isSet = true;
}

QString*
OAIBTBillOfMaterialsUniqueItemId-2029::getVersionId() {
    return version_id;
}
void
OAIBTBillOfMaterialsUniqueItemId-2029::setVersionId(QString* version_id) {
    this->version_id = version_id;
    this->m_version_id_isSet = true;
}

bool
OAIBTBillOfMaterialsUniqueItemId-2029::isWorkspacePartItem() {
    return workspace_part_item;
}
void
OAIBTBillOfMaterialsUniqueItemId-2029::setWorkspacePartItem(bool workspace_part_item) {
    this->workspace_part_item = workspace_part_item;
    this->m_workspace_part_item_isSet = true;
}

bool
OAIBTBillOfMaterialsUniqueItemId-2029::isWorkspaceReference() {
    return workspace_reference;
}
void
OAIBTBillOfMaterialsUniqueItemId-2029::setWorkspaceReference(bool workspace_reference) {
    this->workspace_reference = workspace_reference;
    this->m_workspace_reference_isSet = true;
}


bool
OAIBTBillOfMaterialsUniqueItemId-2029::isSet(){
    bool isObjectUpdated = false;
    do{
        if(ambiguous_unique_id != nullptr && ambiguous_unique_id->isSet()){ isObjectUpdated = true; break;}
        if(api_configuration != nullptr && *api_configuration != QString("")){ isObjectUpdated = true; break;}
        if(bt_type != nullptr && *bt_type != QString("")){ isObjectUpdated = true; break;}
        if(document_version_element_id != nullptr && document_version_element_id->isSet()){ isObjectUpdated = true; break;}
        if(element_id != nullptr && *element_id != QString("")){ isObjectUpdated = true; break;}
        if(full_element_id != nullptr && full_element_id->isSet()){ isObjectUpdated = true; break;}
        if(m_is_standard_content_isSet){ isObjectUpdated = true; break;}
        if(item_definition_id != nullptr && *item_definition_id != QString("")){ isObjectUpdated = true; break;}
        if(m_non_geometric_isSet){ isObjectUpdated = true; break;}
        if(part_id != nullptr && *part_id != QString("")){ isObjectUpdated = true; break;}
        if(source_element != nullptr && source_element->isSet()){ isObjectUpdated = true; break;}
        if(standard_content_owner != nullptr && standard_content_owner->isSet()){ isObjectUpdated = true; break;}
        if(unique_element_id != nullptr && unique_element_id->isSet()){ isObjectUpdated = true; break;}
        if(version_id != nullptr && *version_id != QString("")){ isObjectUpdated = true; break;}
        if(m_workspace_part_item_isSet){ isObjectUpdated = true; break;}
        if(m_workspace_reference_isSet){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

