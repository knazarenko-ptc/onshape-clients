/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * OpenAPI spec version: 1.111
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAINextRecurringCharge.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAINextRecurringCharge::OAINextRecurringCharge(QString json) {
    init();
    this->fromJson(json);
}

OAINextRecurringCharge::OAINextRecurringCharge() {
    init();
}

OAINextRecurringCharge::~OAINextRecurringCharge() {
    this->cleanup();
}

void
OAINextRecurringCharge::init() {
    amount = 0L;
    m_amount_isSet = false;
    date = new QString("");
    m_date_isSet = false;
}

void
OAINextRecurringCharge::cleanup() {

    if(date != nullptr) { 
        delete date;
    }
}

OAINextRecurringCharge*
OAINextRecurringCharge::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAINextRecurringCharge::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&amount, pJson["amount"], "qint64", "");
    
    ::OpenAPI::setValue(&date, pJson["date"], "QString", "QString");
    
}

QString
OAINextRecurringCharge::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAINextRecurringCharge::asJsonObject() {
    QJsonObject obj;
    if(m_amount_isSet){
        obj.insert("amount", QJsonValue(amount));
    }
    if(date != nullptr && *date != QString("")){
        toJsonValue(QString("date"), date, obj, QString("QString"));
    }

    return obj;
}

qint64
OAINextRecurringCharge::getAmount() {
    return amount;
}
void
OAINextRecurringCharge::setAmount(qint64 amount) {
    this->amount = amount;
    this->m_amount_isSet = true;
}

QString*
OAINextRecurringCharge::getDate() {
    return date;
}
void
OAINextRecurringCharge::setDate(QString* date) {
    this->date = date;
    this->m_date_isSet = true;
}


bool
OAINextRecurringCharge::isSet(){
    bool isObjectUpdated = false;
    do{
        if(m_amount_isSet){ isObjectUpdated = true; break;}
        if(date != nullptr && *date != QString("")){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

