/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * OpenAPI spec version: 1.111
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAINextCharge.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAINextCharge::OAINextCharge(QString json) {
    init();
    this->fromJson(json);
}

OAINextCharge::OAINextCharge() {
    init();
}

OAINextCharge::~OAINextCharge() {
    this->cleanup();
}

void
OAINextCharge::init() {
    amount = 0L;
    m_amount_isSet = false;
    current_period_end = NULL;
    m_current_period_end_isSet = false;
    interval = new QString("");
    m_interval_isSet = false;
    total = 0L;
    m_total_isSet = false;
}

void
OAINextCharge::cleanup() {

    if(current_period_end != nullptr) { 
        delete current_period_end;
    }
    if(interval != nullptr) { 
        delete interval;
    }

}

OAINextCharge*
OAINextCharge::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAINextCharge::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&amount, pJson["amount"], "qint64", "");
    
    ::OpenAPI::setValue(&current_period_end, pJson["currentPeriodEnd"], "QDateTime", "QDateTime");
    
    ::OpenAPI::setValue(&interval, pJson["interval"], "QString", "QString");
    
    ::OpenAPI::setValue(&total, pJson["total"], "qint64", "");
    
}

QString
OAINextCharge::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAINextCharge::asJsonObject() {
    QJsonObject obj;
    if(m_amount_isSet){
        obj.insert("amount", QJsonValue(amount));
    }
    if(current_period_end != nullptr) { 
        toJsonValue(QString("currentPeriodEnd"), current_period_end, obj, QString("QDateTime"));
    }
    if(interval != nullptr && *interval != QString("")){
        toJsonValue(QString("interval"), interval, obj, QString("QString"));
    }
    if(m_total_isSet){
        obj.insert("total", QJsonValue(total));
    }

    return obj;
}

qint64
OAINextCharge::getAmount() {
    return amount;
}
void
OAINextCharge::setAmount(qint64 amount) {
    this->amount = amount;
    this->m_amount_isSet = true;
}

QDateTime*
OAINextCharge::getCurrentPeriodEnd() {
    return current_period_end;
}
void
OAINextCharge::setCurrentPeriodEnd(QDateTime* current_period_end) {
    this->current_period_end = current_period_end;
    this->m_current_period_end_isSet = true;
}

QString*
OAINextCharge::getInterval() {
    return interval;
}
void
OAINextCharge::setInterval(QString* interval) {
    this->interval = interval;
    this->m_interval_isSet = true;
}

qint64
OAINextCharge::getTotal() {
    return total;
}
void
OAINextCharge::setTotal(qint64 total) {
    this->total = total;
    this->m_total_isSet = true;
}


bool
OAINextCharge::isSet(){
    bool isObjectUpdated = false;
    do{
        if(m_amount_isSet){ isObjectUpdated = true; break;}
        if(interval != nullptr && *interval != QString("")){ isObjectUpdated = true; break;}
        if(m_total_isSet){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

