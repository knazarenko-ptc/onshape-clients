/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * OpenAPI spec version: 1.111
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIBTQuantityRange-181.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIBTQuantityRange-181::OAIBTQuantityRange-181(QString json) {
    init();
    this->fromJson(json);
}

OAIBTQuantityRange-181::OAIBTQuantityRange-181() {
    init();
}

OAIBTQuantityRange-181::~OAIBTQuantityRange-181() {
    this->cleanup();
}

void
OAIBTQuantityRange-181::init() {
    bt_type = new QString("");
    m_bt_type_isSet = false;
    default_value = 0.0;
    m_default_value_isSet = false;
    location = new OAIBTLocationInfo-226();
    m_location_isSet = false;
    max_value = 0.0;
    m_max_value_isSet = false;
    min_value = 0.0;
    m_min_value_isSet = false;
    units = new QString("");
    m_units_isSet = false;
}

void
OAIBTQuantityRange-181::cleanup() {
    if(bt_type != nullptr) { 
        delete bt_type;
    }

    if(location != nullptr) { 
        delete location;
    }


    if(units != nullptr) { 
        delete units;
    }
}

OAIBTQuantityRange-181*
OAIBTQuantityRange-181::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIBTQuantityRange-181::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&bt_type, pJson["btType"], "QString", "QString");
    
    ::OpenAPI::setValue(&default_value, pJson["defaultValue"], "double", "");
    
    ::OpenAPI::setValue(&location, pJson["location"], "OAIBTLocationInfo-226", "OAIBTLocationInfo-226");
    
    ::OpenAPI::setValue(&max_value, pJson["maxValue"], "double", "");
    
    ::OpenAPI::setValue(&min_value, pJson["minValue"], "double", "");
    
    ::OpenAPI::setValue(&units, pJson["units"], "QString", "QString");
    
}

QString
OAIBTQuantityRange-181::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIBTQuantityRange-181::asJsonObject() {
    QJsonObject obj;
    if(bt_type != nullptr && *bt_type != QString("")){
        toJsonValue(QString("btType"), bt_type, obj, QString("QString"));
    }
    if(m_default_value_isSet){
        obj.insert("defaultValue", QJsonValue(default_value));
    }
    if((location != nullptr) && (location->isSet())){
        toJsonValue(QString("location"), location, obj, QString("OAIBTLocationInfo-226"));
    }
    if(m_max_value_isSet){
        obj.insert("maxValue", QJsonValue(max_value));
    }
    if(m_min_value_isSet){
        obj.insert("minValue", QJsonValue(min_value));
    }
    if(units != nullptr && *units != QString("")){
        toJsonValue(QString("units"), units, obj, QString("QString"));
    }

    return obj;
}

QString*
OAIBTQuantityRange-181::getBtType() {
    return bt_type;
}
void
OAIBTQuantityRange-181::setBtType(QString* bt_type) {
    this->bt_type = bt_type;
    this->m_bt_type_isSet = true;
}

double
OAIBTQuantityRange-181::getDefaultValue() {
    return default_value;
}
void
OAIBTQuantityRange-181::setDefaultValue(double default_value) {
    this->default_value = default_value;
    this->m_default_value_isSet = true;
}

OAIBTLocationInfo-226*
OAIBTQuantityRange-181::getLocation() {
    return location;
}
void
OAIBTQuantityRange-181::setLocation(OAIBTLocationInfo-226* location) {
    this->location = location;
    this->m_location_isSet = true;
}

double
OAIBTQuantityRange-181::getMaxValue() {
    return max_value;
}
void
OAIBTQuantityRange-181::setMaxValue(double max_value) {
    this->max_value = max_value;
    this->m_max_value_isSet = true;
}

double
OAIBTQuantityRange-181::getMinValue() {
    return min_value;
}
void
OAIBTQuantityRange-181::setMinValue(double min_value) {
    this->min_value = min_value;
    this->m_min_value_isSet = true;
}

QString*
OAIBTQuantityRange-181::getUnits() {
    return units;
}
void
OAIBTQuantityRange-181::setUnits(QString* units) {
    this->units = units;
    this->m_units_isSet = true;
}


bool
OAIBTQuantityRange-181::isSet(){
    bool isObjectUpdated = false;
    do{
        if(bt_type != nullptr && *bt_type != QString("")){ isObjectUpdated = true; break;}
        if(m_default_value_isSet){ isObjectUpdated = true; break;}
        if(location != nullptr && location->isSet()){ isObjectUpdated = true; break;}
        if(m_max_value_isSet){ isObjectUpdated = true; break;}
        if(m_min_value_isSet){ isObjectUpdated = true; break;}
        if(units != nullptr && *units != QString("")){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

