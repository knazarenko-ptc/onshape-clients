/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * OpenAPI spec version: 1.111
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIBTWebhookInfo.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIBTWebhookInfo::OAIBTWebhookInfo(QString json) {
    init();
    this->fromJson(json);
}

OAIBTWebhookInfo::OAIBTWebhookInfo() {
    init();
}

OAIBTWebhookInfo::~OAIBTWebhookInfo() {
    this->cleanup();
}

void
OAIBTWebhookInfo::init() {
    company_id = new QString("");
    m_company_id_isSet = false;
    data = new QString("");
    m_data_isSet = false;
    dropped_event_count = 0;
    m_dropped_event_count_isSet = false;
    events = new QList<QString*>();
    m_events_isSet = false;
    filter = new QString("");
    m_filter_isSet = false;
    folder_id = new QString("");
    m_folder_id_isSet = false;
    getproject_id = new QString("");
    m_getproject_id_isSet = false;
    href = new QString("");
    m_href_isSet = false;
    id = new QString("");
    m_id_isSet = false;
    name = new QString("");
    m_name_isSet = false;
    options = new OAIBTWebhookOptions();
    m_options_isSet = false;
    url = new QString("");
    m_url_isSet = false;
    view_ref = new QString("");
    m_view_ref_isSet = false;
}

void
OAIBTWebhookInfo::cleanup() {
    if(company_id != nullptr) { 
        delete company_id;
    }
    if(data != nullptr) { 
        delete data;
    }

    if(events != nullptr) { 
        auto arr = events;
        for(auto o: *arr) { 
            delete o;
        }
        delete events;
    }
    if(filter != nullptr) { 
        delete filter;
    }
    if(folder_id != nullptr) { 
        delete folder_id;
    }
    if(getproject_id != nullptr) { 
        delete getproject_id;
    }
    if(href != nullptr) { 
        delete href;
    }
    if(id != nullptr) { 
        delete id;
    }
    if(name != nullptr) { 
        delete name;
    }
    if(options != nullptr) { 
        delete options;
    }
    if(url != nullptr) { 
        delete url;
    }
    if(view_ref != nullptr) { 
        delete view_ref;
    }
}

OAIBTWebhookInfo*
OAIBTWebhookInfo::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIBTWebhookInfo::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&company_id, pJson["companyId"], "QString", "QString");
    
    ::OpenAPI::setValue(&data, pJson["data"], "QString", "QString");
    
    ::OpenAPI::setValue(&dropped_event_count, pJson["droppedEventCount"], "qint32", "");
    
    
    ::OpenAPI::setValue(&events, pJson["events"], "QList", "QString");
    ::OpenAPI::setValue(&filter, pJson["filter"], "QString", "QString");
    
    ::OpenAPI::setValue(&folder_id, pJson["folderId"], "QString", "QString");
    
    ::OpenAPI::setValue(&getproject_id, pJson["getprojectId"], "QString", "QString");
    
    ::OpenAPI::setValue(&href, pJson["href"], "QString", "QString");
    
    ::OpenAPI::setValue(&id, pJson["id"], "QString", "QString");
    
    ::OpenAPI::setValue(&name, pJson["name"], "QString", "QString");
    
    ::OpenAPI::setValue(&options, pJson["options"], "OAIBTWebhookOptions", "OAIBTWebhookOptions");
    
    ::OpenAPI::setValue(&url, pJson["url"], "QString", "QString");
    
    ::OpenAPI::setValue(&view_ref, pJson["viewRef"], "QString", "QString");
    
}

QString
OAIBTWebhookInfo::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIBTWebhookInfo::asJsonObject() {
    QJsonObject obj;
    if(company_id != nullptr && *company_id != QString("")){
        toJsonValue(QString("companyId"), company_id, obj, QString("QString"));
    }
    if(data != nullptr && *data != QString("")){
        toJsonValue(QString("data"), data, obj, QString("QString"));
    }
    if(m_dropped_event_count_isSet){
        obj.insert("droppedEventCount", QJsonValue(dropped_event_count));
    }
    if(events->size() > 0){
        toJsonArray((QList<void*>*)events, obj, "events", "QString");
    }
    if(filter != nullptr && *filter != QString("")){
        toJsonValue(QString("filter"), filter, obj, QString("QString"));
    }
    if(folder_id != nullptr && *folder_id != QString("")){
        toJsonValue(QString("folderId"), folder_id, obj, QString("QString"));
    }
    if(getproject_id != nullptr && *getproject_id != QString("")){
        toJsonValue(QString("getprojectId"), getproject_id, obj, QString("QString"));
    }
    if(href != nullptr && *href != QString("")){
        toJsonValue(QString("href"), href, obj, QString("QString"));
    }
    if(id != nullptr && *id != QString("")){
        toJsonValue(QString("id"), id, obj, QString("QString"));
    }
    if(name != nullptr && *name != QString("")){
        toJsonValue(QString("name"), name, obj, QString("QString"));
    }
    if((options != nullptr) && (options->isSet())){
        toJsonValue(QString("options"), options, obj, QString("OAIBTWebhookOptions"));
    }
    if(url != nullptr && *url != QString("")){
        toJsonValue(QString("url"), url, obj, QString("QString"));
    }
    if(view_ref != nullptr && *view_ref != QString("")){
        toJsonValue(QString("viewRef"), view_ref, obj, QString("QString"));
    }

    return obj;
}

QString*
OAIBTWebhookInfo::getCompanyId() {
    return company_id;
}
void
OAIBTWebhookInfo::setCompanyId(QString* company_id) {
    this->company_id = company_id;
    this->m_company_id_isSet = true;
}

QString*
OAIBTWebhookInfo::getData() {
    return data;
}
void
OAIBTWebhookInfo::setData(QString* data) {
    this->data = data;
    this->m_data_isSet = true;
}

qint32
OAIBTWebhookInfo::getDroppedEventCount() {
    return dropped_event_count;
}
void
OAIBTWebhookInfo::setDroppedEventCount(qint32 dropped_event_count) {
    this->dropped_event_count = dropped_event_count;
    this->m_dropped_event_count_isSet = true;
}

QList<QString*>*
OAIBTWebhookInfo::getEvents() {
    return events;
}
void
OAIBTWebhookInfo::setEvents(QList<QString*>* events) {
    this->events = events;
    this->m_events_isSet = true;
}

QString*
OAIBTWebhookInfo::getFilter() {
    return filter;
}
void
OAIBTWebhookInfo::setFilter(QString* filter) {
    this->filter = filter;
    this->m_filter_isSet = true;
}

QString*
OAIBTWebhookInfo::getFolderId() {
    return folder_id;
}
void
OAIBTWebhookInfo::setFolderId(QString* folder_id) {
    this->folder_id = folder_id;
    this->m_folder_id_isSet = true;
}

QString*
OAIBTWebhookInfo::getGetprojectId() {
    return getproject_id;
}
void
OAIBTWebhookInfo::setGetprojectId(QString* getproject_id) {
    this->getproject_id = getproject_id;
    this->m_getproject_id_isSet = true;
}

QString*
OAIBTWebhookInfo::getHref() {
    return href;
}
void
OAIBTWebhookInfo::setHref(QString* href) {
    this->href = href;
    this->m_href_isSet = true;
}

QString*
OAIBTWebhookInfo::getId() {
    return id;
}
void
OAIBTWebhookInfo::setId(QString* id) {
    this->id = id;
    this->m_id_isSet = true;
}

QString*
OAIBTWebhookInfo::getName() {
    return name;
}
void
OAIBTWebhookInfo::setName(QString* name) {
    this->name = name;
    this->m_name_isSet = true;
}

OAIBTWebhookOptions*
OAIBTWebhookInfo::getOptions() {
    return options;
}
void
OAIBTWebhookInfo::setOptions(OAIBTWebhookOptions* options) {
    this->options = options;
    this->m_options_isSet = true;
}

QString*
OAIBTWebhookInfo::getUrl() {
    return url;
}
void
OAIBTWebhookInfo::setUrl(QString* url) {
    this->url = url;
    this->m_url_isSet = true;
}

QString*
OAIBTWebhookInfo::getViewRef() {
    return view_ref;
}
void
OAIBTWebhookInfo::setViewRef(QString* view_ref) {
    this->view_ref = view_ref;
    this->m_view_ref_isSet = true;
}


bool
OAIBTWebhookInfo::isSet(){
    bool isObjectUpdated = false;
    do{
        if(company_id != nullptr && *company_id != QString("")){ isObjectUpdated = true; break;}
        if(data != nullptr && *data != QString("")){ isObjectUpdated = true; break;}
        if(m_dropped_event_count_isSet){ isObjectUpdated = true; break;}
        if(events->size() > 0){ isObjectUpdated = true; break;}
        if(filter != nullptr && *filter != QString("")){ isObjectUpdated = true; break;}
        if(folder_id != nullptr && *folder_id != QString("")){ isObjectUpdated = true; break;}
        if(getproject_id != nullptr && *getproject_id != QString("")){ isObjectUpdated = true; break;}
        if(href != nullptr && *href != QString("")){ isObjectUpdated = true; break;}
        if(id != nullptr && *id != QString("")){ isObjectUpdated = true; break;}
        if(name != nullptr && *name != QString("")){ isObjectUpdated = true; break;}
        if(options != nullptr && options->isSet()){ isObjectUpdated = true; break;}
        if(url != nullptr && *url != QString("")){ isObjectUpdated = true; break;}
        if(view_ref != nullptr && *view_ref != QString("")){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

