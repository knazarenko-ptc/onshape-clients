/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * OpenAPI spec version: 1.111
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIBTTranslationRequestInfo.h
 *
 * 
 */

#ifndef OAIBTTranslationRequestInfo_H_
#define OAIBTTranslationRequestInfo_H_

#include <QJsonObject>


#include <QList>
#include <QString>

#include "OAIObject.h"

namespace OpenAPI {

class OAIBTTranslationRequestInfo: public OAIObject {
public:
    OAIBTTranslationRequestInfo();
    OAIBTTranslationRequestInfo(QString json);
    ~OAIBTTranslationRequestInfo();
    void init();
    void cleanup();

    QString asJson () override;
    QJsonObject asJsonObject() override;
    void fromJsonObject(QJsonObject json) override;
    OAIBTTranslationRequestInfo* fromJson(QString jsonString) override;

    QString* getDocumentId();
    void setDocumentId(QString* document_id);

    QString* getFailureReason();
    void setFailureReason(QString* failure_reason);

    QString* getHref();
    void setHref(QString* href);

    QString* getId();
    void setId(QString* id);

    QString* getName();
    void setName(QString* name);

    QString* getRequestElementId();
    void setRequestElementId(QString* request_element_id);

    QString* getRequestState();
    void setRequestState(QString* request_state);

    QString* getResultDocumentId();
    void setResultDocumentId(QString* result_document_id);

    QList<QString*>* getResultElementIds();
    void setResultElementIds(QList<QString*>* result_element_ids);

    QList<QString*>* getResultExternalDataIds();
    void setResultExternalDataIds(QList<QString*>* result_external_data_ids);

    QString* getResultWorkspaceId();
    void setResultWorkspaceId(QString* result_workspace_id);

    QString* getVersionId();
    void setVersionId(QString* version_id);

    QString* getViewRef();
    void setViewRef(QString* view_ref);

    QString* getWorkspaceId();
    void setWorkspaceId(QString* workspace_id);


    virtual bool isSet() override;

private:
    QString* document_id;
    bool m_document_id_isSet;

    QString* failure_reason;
    bool m_failure_reason_isSet;

    QString* href;
    bool m_href_isSet;

    QString* id;
    bool m_id_isSet;

    QString* name;
    bool m_name_isSet;

    QString* request_element_id;
    bool m_request_element_id_isSet;

    QString* request_state;
    bool m_request_state_isSet;

    QString* result_document_id;
    bool m_result_document_id_isSet;

    QList<QString*>* result_element_ids;
    bool m_result_element_ids_isSet;

    QList<QString*>* result_external_data_ids;
    bool m_result_external_data_ids_isSet;

    QString* result_workspace_id;
    bool m_result_workspace_id_isSet;

    QString* version_id;
    bool m_version_id_isSet;

    QString* view_ref;
    bool m_view_ref_isSet;

    QString* workspace_id;
    bool m_workspace_id_isSet;

};

}

#endif /* OAIBTTranslationRequestInfo_H_ */
