/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * OpenAPI spec version: 1.111
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIBTMInferenceQueryWithOccurrence-1083.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIBTMInferenceQueryWithOccurrence-1083::OAIBTMInferenceQueryWithOccurrence-1083(QString json) {
    init();
    this->fromJson(json);
}

OAIBTMInferenceQueryWithOccurrence-1083::OAIBTMInferenceQueryWithOccurrence-1083() {
    init();
}

OAIBTMInferenceQueryWithOccurrence-1083::~OAIBTMInferenceQueryWithOccurrence-1083() {
    this->cleanup();
}

void
OAIBTMInferenceQueryWithOccurrence-1083::init() {
    bt_type = new QString("");
    m_bt_type_isSet = false;
    deterministic_id_list = new OAIBTMIndividualQueryBase-139();
    m_deterministic_id_list_isSet = false;
    deterministic_ids = new QList<QString*>();
    m_deterministic_ids_isSet = false;
    import_microversion = new QString("");
    m_import_microversion_isSet = false;
    node_id = new QString("");
    m_node_id_isSet = false;
    path = new QList<QString*>();
    m_path_isSet = false;
    query = new OAIBTMIndividualQueryBase-139();
    m_query_isSet = false;
    query_string = new QString("");
    m_query_string_isSet = false;
    entity_query = new QString("");
    m_entity_query_isSet = false;
    second_deterministic_id = new QString("");
    m_second_deterministic_id_isSet = false;
    second_entity_query = new QString("");
    m_second_entity_query_isSet = false;
    inference_type = new QString("");
    m_inference_type_isSet = false;
}

void
OAIBTMInferenceQueryWithOccurrence-1083::cleanup() {
    if(bt_type != nullptr) { 
        delete bt_type;
    }
    if(deterministic_id_list != nullptr) { 
        delete deterministic_id_list;
    }
    if(deterministic_ids != nullptr) { 
        auto arr = deterministic_ids;
        for(auto o: *arr) { 
            delete o;
        }
        delete deterministic_ids;
    }
    if(import_microversion != nullptr) { 
        delete import_microversion;
    }
    if(node_id != nullptr) { 
        delete node_id;
    }
    if(path != nullptr) { 
        auto arr = path;
        for(auto o: *arr) { 
            delete o;
        }
        delete path;
    }
    if(query != nullptr) { 
        delete query;
    }
    if(query_string != nullptr) { 
        delete query_string;
    }
    if(entity_query != nullptr) { 
        delete entity_query;
    }
    if(second_deterministic_id != nullptr) { 
        delete second_deterministic_id;
    }
    if(second_entity_query != nullptr) { 
        delete second_entity_query;
    }
    if(inference_type != nullptr) { 
        delete inference_type;
    }
}

OAIBTMInferenceQueryWithOccurrence-1083*
OAIBTMInferenceQueryWithOccurrence-1083::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIBTMInferenceQueryWithOccurrence-1083::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&bt_type, pJson["btType"], "QString", "QString");
    
    ::OpenAPI::setValue(&deterministic_id_list, pJson["deterministicIdList"], "OAIBTMIndividualQueryBase-139", "OAIBTMIndividualQueryBase-139");
    
    
    ::OpenAPI::setValue(&deterministic_ids, pJson["deterministicIds"], "QList", "QString");
    ::OpenAPI::setValue(&import_microversion, pJson["importMicroversion"], "QString", "QString");
    
    ::OpenAPI::setValue(&node_id, pJson["nodeId"], "QString", "QString");
    
    
    ::OpenAPI::setValue(&path, pJson["path"], "QList", "QString");
    ::OpenAPI::setValue(&query, pJson["query"], "OAIBTMIndividualQueryBase-139", "OAIBTMIndividualQueryBase-139");
    
    ::OpenAPI::setValue(&query_string, pJson["queryString"], "QString", "QString");
    
    ::OpenAPI::setValue(&entity_query, pJson["entityQuery"], "QString", "QString");
    
    ::OpenAPI::setValue(&second_deterministic_id, pJson["secondDeterministicId"], "QString", "QString");
    
    ::OpenAPI::setValue(&second_entity_query, pJson["secondEntityQuery"], "QString", "QString");
    
    ::OpenAPI::setValue(&inference_type, pJson["inferenceType"], "QString", "QString");
    
}

QString
OAIBTMInferenceQueryWithOccurrence-1083::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIBTMInferenceQueryWithOccurrence-1083::asJsonObject() {
    QJsonObject obj;
    if(bt_type != nullptr && *bt_type != QString("")){
        toJsonValue(QString("btType"), bt_type, obj, QString("QString"));
    }
    if((deterministic_id_list != nullptr) && (deterministic_id_list->isSet())){
        toJsonValue(QString("deterministicIdList"), deterministic_id_list, obj, QString("OAIBTMIndividualQueryBase-139"));
    }
    if(deterministic_ids->size() > 0){
        toJsonArray((QList<void*>*)deterministic_ids, obj, "deterministicIds", "QString");
    }
    if(import_microversion != nullptr && *import_microversion != QString("")){
        toJsonValue(QString("importMicroversion"), import_microversion, obj, QString("QString"));
    }
    if(node_id != nullptr && *node_id != QString("")){
        toJsonValue(QString("nodeId"), node_id, obj, QString("QString"));
    }
    if(path->size() > 0){
        toJsonArray((QList<void*>*)path, obj, "path", "QString");
    }
    if((query != nullptr) && (query->isSet())){
        toJsonValue(QString("query"), query, obj, QString("OAIBTMIndividualQueryBase-139"));
    }
    if(query_string != nullptr && *query_string != QString("")){
        toJsonValue(QString("queryString"), query_string, obj, QString("QString"));
    }
    if(entity_query != nullptr && *entity_query != QString("")){
        toJsonValue(QString("entityQuery"), entity_query, obj, QString("QString"));
    }
    if(second_deterministic_id != nullptr && *second_deterministic_id != QString("")){
        toJsonValue(QString("secondDeterministicId"), second_deterministic_id, obj, QString("QString"));
    }
    if(second_entity_query != nullptr && *second_entity_query != QString("")){
        toJsonValue(QString("secondEntityQuery"), second_entity_query, obj, QString("QString"));
    }
    if(inference_type != nullptr && *inference_type != QString("")){
        toJsonValue(QString("inferenceType"), inference_type, obj, QString("QString"));
    }

    return obj;
}

QString*
OAIBTMInferenceQueryWithOccurrence-1083::getBtType() {
    return bt_type;
}
void
OAIBTMInferenceQueryWithOccurrence-1083::setBtType(QString* bt_type) {
    this->bt_type = bt_type;
    this->m_bt_type_isSet = true;
}

OAIBTMIndividualQueryBase-139*
OAIBTMInferenceQueryWithOccurrence-1083::getDeterministicIdList() {
    return deterministic_id_list;
}
void
OAIBTMInferenceQueryWithOccurrence-1083::setDeterministicIdList(OAIBTMIndividualQueryBase-139* deterministic_id_list) {
    this->deterministic_id_list = deterministic_id_list;
    this->m_deterministic_id_list_isSet = true;
}

QList<QString*>*
OAIBTMInferenceQueryWithOccurrence-1083::getDeterministicIds() {
    return deterministic_ids;
}
void
OAIBTMInferenceQueryWithOccurrence-1083::setDeterministicIds(QList<QString*>* deterministic_ids) {
    this->deterministic_ids = deterministic_ids;
    this->m_deterministic_ids_isSet = true;
}

QString*
OAIBTMInferenceQueryWithOccurrence-1083::getImportMicroversion() {
    return import_microversion;
}
void
OAIBTMInferenceQueryWithOccurrence-1083::setImportMicroversion(QString* import_microversion) {
    this->import_microversion = import_microversion;
    this->m_import_microversion_isSet = true;
}

QString*
OAIBTMInferenceQueryWithOccurrence-1083::getNodeId() {
    return node_id;
}
void
OAIBTMInferenceQueryWithOccurrence-1083::setNodeId(QString* node_id) {
    this->node_id = node_id;
    this->m_node_id_isSet = true;
}

QList<QString*>*
OAIBTMInferenceQueryWithOccurrence-1083::getPath() {
    return path;
}
void
OAIBTMInferenceQueryWithOccurrence-1083::setPath(QList<QString*>* path) {
    this->path = path;
    this->m_path_isSet = true;
}

OAIBTMIndividualQueryBase-139*
OAIBTMInferenceQueryWithOccurrence-1083::getQuery() {
    return query;
}
void
OAIBTMInferenceQueryWithOccurrence-1083::setQuery(OAIBTMIndividualQueryBase-139* query) {
    this->query = query;
    this->m_query_isSet = true;
}

QString*
OAIBTMInferenceQueryWithOccurrence-1083::getQueryString() {
    return query_string;
}
void
OAIBTMInferenceQueryWithOccurrence-1083::setQueryString(QString* query_string) {
    this->query_string = query_string;
    this->m_query_string_isSet = true;
}

QString*
OAIBTMInferenceQueryWithOccurrence-1083::getEntityQuery() {
    return entity_query;
}
void
OAIBTMInferenceQueryWithOccurrence-1083::setEntityQuery(QString* entity_query) {
    this->entity_query = entity_query;
    this->m_entity_query_isSet = true;
}

QString*
OAIBTMInferenceQueryWithOccurrence-1083::getSecondDeterministicId() {
    return second_deterministic_id;
}
void
OAIBTMInferenceQueryWithOccurrence-1083::setSecondDeterministicId(QString* second_deterministic_id) {
    this->second_deterministic_id = second_deterministic_id;
    this->m_second_deterministic_id_isSet = true;
}

QString*
OAIBTMInferenceQueryWithOccurrence-1083::getSecondEntityQuery() {
    return second_entity_query;
}
void
OAIBTMInferenceQueryWithOccurrence-1083::setSecondEntityQuery(QString* second_entity_query) {
    this->second_entity_query = second_entity_query;
    this->m_second_entity_query_isSet = true;
}

QString*
OAIBTMInferenceQueryWithOccurrence-1083::getInferenceType() {
    return inference_type;
}
void
OAIBTMInferenceQueryWithOccurrence-1083::setInferenceType(QString* inference_type) {
    this->inference_type = inference_type;
    this->m_inference_type_isSet = true;
}


bool
OAIBTMInferenceQueryWithOccurrence-1083::isSet(){
    bool isObjectUpdated = false;
    do{
        if(bt_type != nullptr && *bt_type != QString("")){ isObjectUpdated = true; break;}
        if(deterministic_id_list != nullptr && deterministic_id_list->isSet()){ isObjectUpdated = true; break;}
        if(deterministic_ids->size() > 0){ isObjectUpdated = true; break;}
        if(import_microversion != nullptr && *import_microversion != QString("")){ isObjectUpdated = true; break;}
        if(node_id != nullptr && *node_id != QString("")){ isObjectUpdated = true; break;}
        if(path->size() > 0){ isObjectUpdated = true; break;}
        if(query != nullptr && query->isSet()){ isObjectUpdated = true; break;}
        if(query_string != nullptr && *query_string != QString("")){ isObjectUpdated = true; break;}
        if(entity_query != nullptr && *entity_query != QString("")){ isObjectUpdated = true; break;}
        if(second_deterministic_id != nullptr && *second_deterministic_id != QString("")){ isObjectUpdated = true; break;}
        if(second_entity_query != nullptr && *second_entity_query != QString("")){ isObjectUpdated = true; break;}
        if(inference_type != nullptr && *inference_type != QString("")){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

