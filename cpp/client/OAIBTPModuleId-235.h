/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * OpenAPI spec version: 1.111
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIBTPModuleId-235.h
 *
 * 
 */

#ifndef OAIBTPModuleId-235_H_
#define OAIBTPModuleId-235_H_

#include <QJsonObject>


#include "OAIBTDocumentWithVersionAndElementId.h"
#include "OAIBTDocumentWithVersionId.h"
#include "OAIBTPLiteralString-259.h"
#include "OAIBTPNode-7.h"
#include "OAIBTPSpace-10.h"
#include <QString>

#include "OAIObject.h"

namespace OpenAPI {

class OAIBTPModuleId-235: public OAIObject {
public:
    OAIBTPModuleId-235();
    OAIBTPModuleId-235(QString json);
    ~OAIBTPModuleId-235();
    void init();
    void cleanup();

    QString asJson () override;
    QJsonObject asJsonObject() override;
    void fromJsonObject(QJsonObject json) override;
    OAIBTPModuleId-235* fromJson(QString jsonString) override;

    bool isAtomic();
    void setAtomic(bool atomic);

    QString* getBtType();
    void setBtType(QString* bt_type);

    QString* getDocumentationType();
    void setDocumentationType(QString* documentation_type);

    qint32 getEndSourceLocation();
    void setEndSourceLocation(qint32 end_source_location);

    QString* getNodeId();
    void setNodeId(QString* node_id);

    QString* getShortDescriptor();
    void setShortDescriptor(QString* short_descriptor);

    OAIBTPSpace-10* getSpaceAfter();
    void setSpaceAfter(OAIBTPSpace-10* space_after);

    OAIBTPSpace-10* getSpaceBefore();
    void setSpaceBefore(OAIBTPSpace-10* space_before);

    bool isSpaceDefault();
    void setSpaceDefault(bool space_default);

    qint32 getStartSourceLocation();
    void setStartSourceLocation(qint32 start_source_location);

    bool isStandardLibrary();
    void setStandardLibrary(bool standard_library);

    QString* getVersionAndMicroversion();
    void setVersionAndMicroversion(QString* version_and_microversion);

    bool isExternalImport();
    void setExternalImport(bool external_import);

    QString* getImportedDocumentId();
    void setImportedDocumentId(QString* imported_document_id);

    OAIBTDocumentWithVersionId* getExternalDocumentWithVersion();
    void setExternalDocumentWithVersion(OAIBTDocumentWithVersionId* external_document_with_version);

    QString* getDbimportString();
    void setDbimportString(QString* dbimport_string);

    bool isElementImport();
    void setElementImport(bool element_import);

    QString* getImportedElementId();
    void setImportedElementId(QString* imported_element_id);

    bool isPotentiallyValid();
    void setPotentiallyValid(bool potentially_valid);

    bool isStandardLibraryCommon();
    void setStandardLibraryCommon(bool standard_library_common);

    bool isPathPotentiallyValid();
    void setPathPotentiallyValid(bool path_potentially_valid);

    bool isVersionPotentiallyValid();
    void setVersionPotentiallyValid(bool version_potentially_valid);

    bool isValidLegacyVersion();
    void setValidLegacyVersion(bool valid_legacy_version);

    QString* getPathVersion();
    void setPathVersion(QString* path_version);

    QString* getImportedVersionId();
    void setImportedVersionId(QString* imported_version_id);

    OAIBTDocumentWithVersionAndElementId* getExternalDocumentWithVersionAndElementId();
    void setExternalDocumentWithVersionAndElementId(OAIBTDocumentWithVersionAndElementId* external_document_with_version_and_element_id);

    bool isLegacy();
    void setLegacy(bool legacy);

    QString* getMicroversion();
    void setMicroversion(QString* microversion);

    OAIBTPSpace-10* getSpaceBeforePath();
    void setSpaceBeforePath(OAIBTPSpace-10* space_before_path);

    OAIBTPSpace-10* getSpaceAfterPath();
    void setSpaceAfterPath(OAIBTPSpace-10* space_after_path);

    OAIBTPSpace-10* getSpaceBeforeVersion();
    void setSpaceBeforeVersion(OAIBTPSpace-10* space_before_version);

    OAIBTPSpace-10* getSpaceAfterVersion();
    void setSpaceAfterVersion(OAIBTPSpace-10* space_after_version);

    OAIBTPLiteralString-259* getVersion();
    void setVersion(OAIBTPLiteralString-259* version);

    OAIBTPLiteralString-259* getPath();
    void setPath(OAIBTPLiteralString-259* path);


    virtual bool isSet() override;

private:
    bool atomic;
    bool m_atomic_isSet;

    QString* bt_type;
    bool m_bt_type_isSet;

    QString* documentation_type;
    bool m_documentation_type_isSet;

    qint32 end_source_location;
    bool m_end_source_location_isSet;

    QString* node_id;
    bool m_node_id_isSet;

    QString* short_descriptor;
    bool m_short_descriptor_isSet;

    OAIBTPSpace-10* space_after;
    bool m_space_after_isSet;

    OAIBTPSpace-10* space_before;
    bool m_space_before_isSet;

    bool space_default;
    bool m_space_default_isSet;

    qint32 start_source_location;
    bool m_start_source_location_isSet;

    bool standard_library;
    bool m_standard_library_isSet;

    QString* version_and_microversion;
    bool m_version_and_microversion_isSet;

    bool external_import;
    bool m_external_import_isSet;

    QString* imported_document_id;
    bool m_imported_document_id_isSet;

    OAIBTDocumentWithVersionId* external_document_with_version;
    bool m_external_document_with_version_isSet;

    QString* dbimport_string;
    bool m_dbimport_string_isSet;

    bool element_import;
    bool m_element_import_isSet;

    QString* imported_element_id;
    bool m_imported_element_id_isSet;

    bool potentially_valid;
    bool m_potentially_valid_isSet;

    bool standard_library_common;
    bool m_standard_library_common_isSet;

    bool path_potentially_valid;
    bool m_path_potentially_valid_isSet;

    bool version_potentially_valid;
    bool m_version_potentially_valid_isSet;

    bool valid_legacy_version;
    bool m_valid_legacy_version_isSet;

    QString* path_version;
    bool m_path_version_isSet;

    QString* imported_version_id;
    bool m_imported_version_id_isSet;

    OAIBTDocumentWithVersionAndElementId* external_document_with_version_and_element_id;
    bool m_external_document_with_version_and_element_id_isSet;

    bool legacy;
    bool m_legacy_isSet;

    QString* microversion;
    bool m_microversion_isSet;

    OAIBTPSpace-10* space_before_path;
    bool m_space_before_path_isSet;

    OAIBTPSpace-10* space_after_path;
    bool m_space_after_path_isSet;

    OAIBTPSpace-10* space_before_version;
    bool m_space_before_version_isSet;

    OAIBTPSpace-10* space_after_version;
    bool m_space_after_version_isSet;

    OAIBTPLiteralString-259* version;
    bool m_version_isSet;

    OAIBTPLiteralString-259* path;
    bool m_path_isSet;

};

}

#endif /* OAIBTPModuleId-235_H_ */
