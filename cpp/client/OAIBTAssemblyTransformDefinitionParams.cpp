/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * OpenAPI spec version: 1.111
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIBTAssemblyTransformDefinitionParams.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIBTAssemblyTransformDefinitionParams::OAIBTAssemblyTransformDefinitionParams(QString json) {
    init();
    this->fromJson(json);
}

OAIBTAssemblyTransformDefinitionParams::OAIBTAssemblyTransformDefinitionParams() {
    init();
}

OAIBTAssemblyTransformDefinitionParams::~OAIBTAssemblyTransformDefinitionParams() {
    this->cleanup();
}

void
OAIBTAssemblyTransformDefinitionParams::init() {
    is_relative = false;
    m_is_relative_isSet = false;
    occurrences = new QList<OAIBTOccurrence-74*>();
    m_occurrences_isSet = false;
    transform = new QList<double>();
    m_transform_isSet = false;
}

void
OAIBTAssemblyTransformDefinitionParams::cleanup() {

    if(occurrences != nullptr) { 
        auto arr = occurrences;
        for(auto o: *arr) { 
            delete o;
        }
        delete occurrences;
    }

    if(transform != nullptr) { 
        delete transform;
    }
}

OAIBTAssemblyTransformDefinitionParams*
OAIBTAssemblyTransformDefinitionParams::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIBTAssemblyTransformDefinitionParams::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&is_relative, pJson["isRelative"], "bool", "");
    
    
    ::OpenAPI::setValue(&occurrences, pJson["occurrences"], "QList", "OAIBTOccurrence-74");
    
    ::OpenAPI::setValue(&transform, pJson["transform"], "QList", "double");
}

QString
OAIBTAssemblyTransformDefinitionParams::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIBTAssemblyTransformDefinitionParams::asJsonObject() {
    QJsonObject obj;
    if(m_is_relative_isSet){
        obj.insert("isRelative", QJsonValue(is_relative));
    }
    if(occurrences->size() > 0){
        toJsonArray((QList<void*>*)occurrences, obj, "occurrences", "OAIBTOccurrence-74");
    }
    if(transform->size() > 0){
        toJsonArray((QList<void*>*)transform, obj, "transform", "");
    }

    return obj;
}

bool
OAIBTAssemblyTransformDefinitionParams::isIsRelative() {
    return is_relative;
}
void
OAIBTAssemblyTransformDefinitionParams::setIsRelative(bool is_relative) {
    this->is_relative = is_relative;
    this->m_is_relative_isSet = true;
}

QList<OAIBTOccurrence-74*>*
OAIBTAssemblyTransformDefinitionParams::getOccurrences() {
    return occurrences;
}
void
OAIBTAssemblyTransformDefinitionParams::setOccurrences(QList<OAIBTOccurrence-74*>* occurrences) {
    this->occurrences = occurrences;
    this->m_occurrences_isSet = true;
}

QList<double>*
OAIBTAssemblyTransformDefinitionParams::getTransform() {
    return transform;
}
void
OAIBTAssemblyTransformDefinitionParams::setTransform(QList<double>* transform) {
    this->transform = transform;
    this->m_transform_isSet = true;
}


bool
OAIBTAssemblyTransformDefinitionParams::isSet(){
    bool isObjectUpdated = false;
    do{
        if(m_is_relative_isSet){ isObjectUpdated = true; break;}
        if(occurrences->size() > 0){ isObjectUpdated = true; break;}
        if(m_transform_isSet){ isObjectUpdated = true; break;}
        if(transform->size() > 0){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

