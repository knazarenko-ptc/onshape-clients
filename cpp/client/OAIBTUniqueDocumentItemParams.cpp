/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * OpenAPI spec version: 1.111
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIBTUniqueDocumentItemParams.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIBTUniqueDocumentItemParams::OAIBTUniqueDocumentItemParams(QString json) {
    init();
    this->fromJson(json);
}

OAIBTUniqueDocumentItemParams::OAIBTUniqueDocumentItemParams() {
    init();
}

OAIBTUniqueDocumentItemParams::~OAIBTUniqueDocumentItemParams() {
    this->cleanup();
}

void
OAIBTUniqueDocumentItemParams::init() {
    api_configuration = new QString("");
    m_api_configuration_isSet = false;
    document_id = new QString("");
    m_document_id_isSet = false;
    element_id = new QString("");
    m_element_id_isSet = false;
    element_type = new QString("");
    m_element_type_isSet = false;
    part_id = new QString("");
    m_part_id_isSet = false;
    part_number = new QString("");
    m_part_number_isSet = false;
    revision = new QString("");
    m_revision_isSet = false;
    version_id = new QString("");
    m_version_id_isSet = false;
    workspace_id = new QString("");
    m_workspace_id_isSet = false;
}

void
OAIBTUniqueDocumentItemParams::cleanup() {
    if(api_configuration != nullptr) { 
        delete api_configuration;
    }
    if(document_id != nullptr) { 
        delete document_id;
    }
    if(element_id != nullptr) { 
        delete element_id;
    }
    if(element_type != nullptr) { 
        delete element_type;
    }
    if(part_id != nullptr) { 
        delete part_id;
    }
    if(part_number != nullptr) { 
        delete part_number;
    }
    if(revision != nullptr) { 
        delete revision;
    }
    if(version_id != nullptr) { 
        delete version_id;
    }
    if(workspace_id != nullptr) { 
        delete workspace_id;
    }
}

OAIBTUniqueDocumentItemParams*
OAIBTUniqueDocumentItemParams::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIBTUniqueDocumentItemParams::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&api_configuration, pJson["apiConfiguration"], "QString", "QString");
    
    ::OpenAPI::setValue(&document_id, pJson["documentId"], "QString", "QString");
    
    ::OpenAPI::setValue(&element_id, pJson["elementId"], "QString", "QString");
    
    ::OpenAPI::setValue(&element_type, pJson["elementType"], "QString", "QString");
    
    ::OpenAPI::setValue(&part_id, pJson["partId"], "QString", "QString");
    
    ::OpenAPI::setValue(&part_number, pJson["partNumber"], "QString", "QString");
    
    ::OpenAPI::setValue(&revision, pJson["revision"], "QString", "QString");
    
    ::OpenAPI::setValue(&version_id, pJson["versionId"], "QString", "QString");
    
    ::OpenAPI::setValue(&workspace_id, pJson["workspaceId"], "QString", "QString");
    
}

QString
OAIBTUniqueDocumentItemParams::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIBTUniqueDocumentItemParams::asJsonObject() {
    QJsonObject obj;
    if(api_configuration != nullptr && *api_configuration != QString("")){
        toJsonValue(QString("apiConfiguration"), api_configuration, obj, QString("QString"));
    }
    if(document_id != nullptr && *document_id != QString("")){
        toJsonValue(QString("documentId"), document_id, obj, QString("QString"));
    }
    if(element_id != nullptr && *element_id != QString("")){
        toJsonValue(QString("elementId"), element_id, obj, QString("QString"));
    }
    if(element_type != nullptr && *element_type != QString("")){
        toJsonValue(QString("elementType"), element_type, obj, QString("QString"));
    }
    if(part_id != nullptr && *part_id != QString("")){
        toJsonValue(QString("partId"), part_id, obj, QString("QString"));
    }
    if(part_number != nullptr && *part_number != QString("")){
        toJsonValue(QString("partNumber"), part_number, obj, QString("QString"));
    }
    if(revision != nullptr && *revision != QString("")){
        toJsonValue(QString("revision"), revision, obj, QString("QString"));
    }
    if(version_id != nullptr && *version_id != QString("")){
        toJsonValue(QString("versionId"), version_id, obj, QString("QString"));
    }
    if(workspace_id != nullptr && *workspace_id != QString("")){
        toJsonValue(QString("workspaceId"), workspace_id, obj, QString("QString"));
    }

    return obj;
}

QString*
OAIBTUniqueDocumentItemParams::getApiConfiguration() {
    return api_configuration;
}
void
OAIBTUniqueDocumentItemParams::setApiConfiguration(QString* api_configuration) {
    this->api_configuration = api_configuration;
    this->m_api_configuration_isSet = true;
}

QString*
OAIBTUniqueDocumentItemParams::getDocumentId() {
    return document_id;
}
void
OAIBTUniqueDocumentItemParams::setDocumentId(QString* document_id) {
    this->document_id = document_id;
    this->m_document_id_isSet = true;
}

QString*
OAIBTUniqueDocumentItemParams::getElementId() {
    return element_id;
}
void
OAIBTUniqueDocumentItemParams::setElementId(QString* element_id) {
    this->element_id = element_id;
    this->m_element_id_isSet = true;
}

QString*
OAIBTUniqueDocumentItemParams::getElementType() {
    return element_type;
}
void
OAIBTUniqueDocumentItemParams::setElementType(QString* element_type) {
    this->element_type = element_type;
    this->m_element_type_isSet = true;
}

QString*
OAIBTUniqueDocumentItemParams::getPartId() {
    return part_id;
}
void
OAIBTUniqueDocumentItemParams::setPartId(QString* part_id) {
    this->part_id = part_id;
    this->m_part_id_isSet = true;
}

QString*
OAIBTUniqueDocumentItemParams::getPartNumber() {
    return part_number;
}
void
OAIBTUniqueDocumentItemParams::setPartNumber(QString* part_number) {
    this->part_number = part_number;
    this->m_part_number_isSet = true;
}

QString*
OAIBTUniqueDocumentItemParams::getRevision() {
    return revision;
}
void
OAIBTUniqueDocumentItemParams::setRevision(QString* revision) {
    this->revision = revision;
    this->m_revision_isSet = true;
}

QString*
OAIBTUniqueDocumentItemParams::getVersionId() {
    return version_id;
}
void
OAIBTUniqueDocumentItemParams::setVersionId(QString* version_id) {
    this->version_id = version_id;
    this->m_version_id_isSet = true;
}

QString*
OAIBTUniqueDocumentItemParams::getWorkspaceId() {
    return workspace_id;
}
void
OAIBTUniqueDocumentItemParams::setWorkspaceId(QString* workspace_id) {
    this->workspace_id = workspace_id;
    this->m_workspace_id_isSet = true;
}


bool
OAIBTUniqueDocumentItemParams::isSet(){
    bool isObjectUpdated = false;
    do{
        if(api_configuration != nullptr && *api_configuration != QString("")){ isObjectUpdated = true; break;}
        if(document_id != nullptr && *document_id != QString("")){ isObjectUpdated = true; break;}
        if(element_id != nullptr && *element_id != QString("")){ isObjectUpdated = true; break;}
        if(element_type != nullptr && *element_type != QString("")){ isObjectUpdated = true; break;}
        if(part_id != nullptr && *part_id != QString("")){ isObjectUpdated = true; break;}
        if(part_number != nullptr && *part_number != QString("")){ isObjectUpdated = true; break;}
        if(revision != nullptr && *revision != QString("")){ isObjectUpdated = true; break;}
        if(version_id != nullptr && *version_id != QString("")){ isObjectUpdated = true; break;}
        if(workspace_id != nullptr && *workspace_id != QString("")){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

