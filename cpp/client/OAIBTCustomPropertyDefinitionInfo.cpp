/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * OpenAPI spec version: 1.111
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIBTCustomPropertyDefinitionInfo.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIBTCustomPropertyDefinitionInfo::OAIBTCustomPropertyDefinitionInfo(QString json) {
    init();
    this->fromJson(json);
}

OAIBTCustomPropertyDefinitionInfo::OAIBTCustomPropertyDefinitionInfo() {
    init();
}

OAIBTCustomPropertyDefinitionInfo::~OAIBTCustomPropertyDefinitionInfo() {
    this->cleanup();
}

void
OAIBTCustomPropertyDefinitionInfo::init() {
    description = new QString("");
    m_description_isSet = false;
    enum_definition = new QList<QString*>();
    m_enum_definition_isSet = false;
    name = new QString("");
    m_name_isSet = false;
    _template = new QString("");
    m__template_isSet = false;
    type = new QString("");
    m_type_isSet = false;
}

void
OAIBTCustomPropertyDefinitionInfo::cleanup() {
    if(description != nullptr) { 
        delete description;
    }
    if(enum_definition != nullptr) { 
        auto arr = enum_definition;
        for(auto o: *arr) { 
            delete o;
        }
        delete enum_definition;
    }
    if(name != nullptr) { 
        delete name;
    }
    if(_template != nullptr) { 
        delete _template;
    }
    if(type != nullptr) { 
        delete type;
    }
}

OAIBTCustomPropertyDefinitionInfo*
OAIBTCustomPropertyDefinitionInfo::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIBTCustomPropertyDefinitionInfo::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&description, pJson["description"], "QString", "QString");
    
    
    ::OpenAPI::setValue(&enum_definition, pJson["enumDefinition"], "QList", "QString");
    ::OpenAPI::setValue(&name, pJson["name"], "QString", "QString");
    
    ::OpenAPI::setValue(&_template, pJson["template"], "QString", "QString");
    
    ::OpenAPI::setValue(&type, pJson["type"], "QString", "QString");
    
}

QString
OAIBTCustomPropertyDefinitionInfo::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIBTCustomPropertyDefinitionInfo::asJsonObject() {
    QJsonObject obj;
    if(description != nullptr && *description != QString("")){
        toJsonValue(QString("description"), description, obj, QString("QString"));
    }
    if(enum_definition->size() > 0){
        toJsonArray((QList<void*>*)enum_definition, obj, "enumDefinition", "QString");
    }
    if(name != nullptr && *name != QString("")){
        toJsonValue(QString("name"), name, obj, QString("QString"));
    }
    if(_template != nullptr && *_template != QString("")){
        toJsonValue(QString("template"), _template, obj, QString("QString"));
    }
    if(type != nullptr && *type != QString("")){
        toJsonValue(QString("type"), type, obj, QString("QString"));
    }

    return obj;
}

QString*
OAIBTCustomPropertyDefinitionInfo::getDescription() {
    return description;
}
void
OAIBTCustomPropertyDefinitionInfo::setDescription(QString* description) {
    this->description = description;
    this->m_description_isSet = true;
}

QList<QString*>*
OAIBTCustomPropertyDefinitionInfo::getEnumDefinition() {
    return enum_definition;
}
void
OAIBTCustomPropertyDefinitionInfo::setEnumDefinition(QList<QString*>* enum_definition) {
    this->enum_definition = enum_definition;
    this->m_enum_definition_isSet = true;
}

QString*
OAIBTCustomPropertyDefinitionInfo::getName() {
    return name;
}
void
OAIBTCustomPropertyDefinitionInfo::setName(QString* name) {
    this->name = name;
    this->m_name_isSet = true;
}

QString*
OAIBTCustomPropertyDefinitionInfo::getTemplate() {
    return _template;
}
void
OAIBTCustomPropertyDefinitionInfo::setTemplate(QString* _template) {
    this->_template = _template;
    this->m__template_isSet = true;
}

QString*
OAIBTCustomPropertyDefinitionInfo::getType() {
    return type;
}
void
OAIBTCustomPropertyDefinitionInfo::setType(QString* type) {
    this->type = type;
    this->m_type_isSet = true;
}


bool
OAIBTCustomPropertyDefinitionInfo::isSet(){
    bool isObjectUpdated = false;
    do{
        if(description != nullptr && *description != QString("")){ isObjectUpdated = true; break;}
        if(enum_definition->size() > 0){ isObjectUpdated = true; break;}
        if(name != nullptr && *name != QString("")){ isObjectUpdated = true; break;}
        if(_template != nullptr && *_template != QString("")){ isObjectUpdated = true; break;}
        if(type != nullptr && *type != QString("")){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

