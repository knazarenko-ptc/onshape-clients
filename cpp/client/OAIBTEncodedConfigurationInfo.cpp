/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * OpenAPI spec version: 1.111
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIBTEncodedConfigurationInfo.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIBTEncodedConfigurationInfo::OAIBTEncodedConfigurationInfo(QString json) {
    init();
    this->fromJson(json);
}

OAIBTEncodedConfigurationInfo::OAIBTEncodedConfigurationInfo() {
    init();
}

OAIBTEncodedConfigurationInfo::~OAIBTEncodedConfigurationInfo() {
    this->cleanup();
}

void
OAIBTEncodedConfigurationInfo::init() {
    encoded_id = new QString("");
    m_encoded_id_isSet = false;
    query_param = new QString("");
    m_query_param_isSet = false;
    query_param_ = new QString("");
    m_query_param__isSet = false;
}

void
OAIBTEncodedConfigurationInfo::cleanup() {
    if(encoded_id != nullptr) { 
        delete encoded_id;
    }
    if(query_param != nullptr) { 
        delete query_param;
    }
    if(query_param_ != nullptr) { 
        delete query_param_;
    }
}

OAIBTEncodedConfigurationInfo*
OAIBTEncodedConfigurationInfo::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIBTEncodedConfigurationInfo::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&encoded_id, pJson["encodedId"], "QString", "QString");
    
    ::OpenAPI::setValue(&query_param, pJson["queryParam"], "QString", "QString");
    
    ::OpenAPI::setValue(&query_param_, pJson["queryParam_"], "QString", "QString");
    
}

QString
OAIBTEncodedConfigurationInfo::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIBTEncodedConfigurationInfo::asJsonObject() {
    QJsonObject obj;
    if(encoded_id != nullptr && *encoded_id != QString("")){
        toJsonValue(QString("encodedId"), encoded_id, obj, QString("QString"));
    }
    if(query_param != nullptr && *query_param != QString("")){
        toJsonValue(QString("queryParam"), query_param, obj, QString("QString"));
    }
    if(query_param_ != nullptr && *query_param_ != QString("")){
        toJsonValue(QString("queryParam_"), query_param_, obj, QString("QString"));
    }

    return obj;
}

QString*
OAIBTEncodedConfigurationInfo::getEncodedId() {
    return encoded_id;
}
void
OAIBTEncodedConfigurationInfo::setEncodedId(QString* encoded_id) {
    this->encoded_id = encoded_id;
    this->m_encoded_id_isSet = true;
}

QString*
OAIBTEncodedConfigurationInfo::getQueryParam() {
    return query_param;
}
void
OAIBTEncodedConfigurationInfo::setQueryParam(QString* query_param) {
    this->query_param = query_param;
    this->m_query_param_isSet = true;
}

QString*
OAIBTEncodedConfigurationInfo::getQueryParam() {
    return query_param_;
}
void
OAIBTEncodedConfigurationInfo::setQueryParam(QString* query_param_) {
    this->query_param_ = query_param_;
    this->m_query_param__isSet = true;
}


bool
OAIBTEncodedConfigurationInfo::isSet(){
    bool isObjectUpdated = false;
    do{
        if(encoded_id != nullptr && *encoded_id != QString("")){ isObjectUpdated = true; break;}
        if(query_param != nullptr && *query_param != QString("")){ isObjectUpdated = true; break;}
        if(query_param_ != nullptr && *query_param_ != QString("")){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

