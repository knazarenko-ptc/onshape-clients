/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * OpenAPI spec version: 1.111
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef _OAI_OAIMetadataApi_H_
#define _OAI_OAIMetadataApi_H_

#include "OAIHttpRequest.h"

#include <QString>

#include <QObject>

namespace OpenAPI {

class OAIMetadataApi: public QObject {
    Q_OBJECT

public:
    OAIMetadataApi();
    OAIMetadataApi(QString host, QString basePath);
    ~OAIMetadataApi();

    QString host;
    QString basePath;
    QMap<QString, QString> defaultHeaders;

    void getVEOPStandardContentMetadata(QString* did, QString* vid, QString* eid, QString* otype, QString* oid, QString* pid, QString* configuration, QString* link_document_id);
    void getWMVEMetadata(QString* did, QString* wvm, QString* wvmid, QString* eid, QString* configuration, QString* link_document_id, bool infer_metadata_owner);
    void getWMVEPMetadata(QString* did, QString* wvm, QString* wvmid, QString* eid, QString* pid, QString* configuration, QString* link_document_id, bool infer_metadata_owner);
    void getWMVEPsMetadata(QString* did, QString* wvm, QString* wvmid, QString* eid, QString* configuration, QString* link_document_id, bool infer_metadata_owner);
    void getWMVEsMetadata(QString* did, QString* wvm, QString* wvmid, QString* link_document_id, bool infer_metadata_owner);
    void getWVMetadata(QString* did, QString* wv, QString* wvid, QString* link_document_id, bool infer_metadata_owner);
    void updateVEOPStandardContentPartMetadata(QString* did, QString* vid, QString* eid, QString* otype, QString* oid, QString* pid, QString*& body, QString* link_document_id);
    void updateWVEMetadata(QString* did, QString* wvm, QString* wvmid, QString* eid, QString*& body, QString* configuration);
    void updateWVEPMetadata(QString* did, QString* wvm, QString* wvmid, QString* eid, QString* pid, QString* sub_resource, QString*& body, QString* configuration);
    void updateWVMetadata(QString* did, QString* wv, QString* wvid, QString*& body);
    
private:
    void getVEOPStandardContentMetadataCallback (OAIHttpRequestWorker * worker);
    void getWMVEMetadataCallback (OAIHttpRequestWorker * worker);
    void getWMVEPMetadataCallback (OAIHttpRequestWorker * worker);
    void getWMVEPsMetadataCallback (OAIHttpRequestWorker * worker);
    void getWMVEsMetadataCallback (OAIHttpRequestWorker * worker);
    void getWVMetadataCallback (OAIHttpRequestWorker * worker);
    void updateVEOPStandardContentPartMetadataCallback (OAIHttpRequestWorker * worker);
    void updateWVEMetadataCallback (OAIHttpRequestWorker * worker);
    void updateWVEPMetadataCallback (OAIHttpRequestWorker * worker);
    void updateWVMetadataCallback (OAIHttpRequestWorker * worker);
    
signals:
    void getVEOPStandardContentMetadataSignal();
    void getWMVEMetadataSignal();
    void getWMVEPMetadataSignal();
    void getWMVEPsMetadataSignal();
    void getWMVEsMetadataSignal();
    void getWVMetadataSignal();
    void updateVEOPStandardContentPartMetadataSignal();
    void updateWVEMetadataSignal();
    void updateWVEPMetadataSignal();
    void updateWVMetadataSignal();
    
    void getVEOPStandardContentMetadataSignalE(QNetworkReply::NetworkError error_type, QString& error_str);
    void getWMVEMetadataSignalE(QNetworkReply::NetworkError error_type, QString& error_str);
    void getWMVEPMetadataSignalE(QNetworkReply::NetworkError error_type, QString& error_str);
    void getWMVEPsMetadataSignalE(QNetworkReply::NetworkError error_type, QString& error_str);
    void getWMVEsMetadataSignalE(QNetworkReply::NetworkError error_type, QString& error_str);
    void getWVMetadataSignalE(QNetworkReply::NetworkError error_type, QString& error_str);
    void updateVEOPStandardContentPartMetadataSignalE(QNetworkReply::NetworkError error_type, QString& error_str);
    void updateWVEMetadataSignalE(QNetworkReply::NetworkError error_type, QString& error_str);
    void updateWVEPMetadataSignalE(QNetworkReply::NetworkError error_type, QString& error_str);
    void updateWVMetadataSignalE(QNetworkReply::NetworkError error_type, QString& error_str);
    
    void getVEOPStandardContentMetadataSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void getWMVEMetadataSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void getWMVEPMetadataSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void getWMVEPsMetadataSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void getWMVEsMetadataSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void getWVMetadataSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void updateVEOPStandardContentPartMetadataSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void updateWVEMetadataSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void updateWVEPMetadataSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void updateWVMetadataSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    
};

}
#endif
