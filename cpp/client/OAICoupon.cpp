/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * OpenAPI spec version: 1.111
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAICoupon.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAICoupon::OAICoupon(QString json) {
    init();
    this->fromJson(json);
}

OAICoupon::OAICoupon() {
    init();
}

OAICoupon::~OAICoupon() {
    this->cleanup();
}

void
OAICoupon::init() {
    amount_off = 0L;
    m_amount_off_isSet = false;
    created = 0L;
    m_created_isSet = false;
    currency = new QString("");
    m_currency_isSet = false;
    duration = new QString("");
    m_duration_isSet = false;
    duration_in_months = 0;
    m_duration_in_months_isSet = false;
    id = new QString("");
    m_id_isSet = false;
    livemode = false;
    m_livemode_isSet = false;
    max_redemptions = 0L;
    m_max_redemptions_isSet = false;
    metadata = new QMap<QString, QString*>();
    m_metadata_isSet = false;
    object = new QString("");
    m_object_isSet = false;
    percent_off = 0;
    m_percent_off_isSet = false;
    redeem_by = 0L;
    m_redeem_by_isSet = false;
    times_redeemed = 0;
    m_times_redeemed_isSet = false;
    valid = false;
    m_valid_isSet = false;
}

void
OAICoupon::cleanup() {


    if(currency != nullptr) { 
        delete currency;
    }
    if(duration != nullptr) { 
        delete duration;
    }

    if(id != nullptr) { 
        delete id;
    }


    if(metadata != nullptr) { 
        auto arr = metadata;
        for(auto o: *arr) { 
            delete o;
        }
        delete metadata;
    }
    if(object != nullptr) { 
        delete object;
    }




}

OAICoupon*
OAICoupon::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAICoupon::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&amount_off, pJson["amountOff"], "qint64", "");
    
    ::OpenAPI::setValue(&created, pJson["created"], "qint64", "");
    
    ::OpenAPI::setValue(&currency, pJson["currency"], "QString", "QString");
    
    ::OpenAPI::setValue(&duration, pJson["duration"], "QString", "QString");
    
    ::OpenAPI::setValue(&duration_in_months, pJson["durationInMonths"], "qint32", "");
    
    ::OpenAPI::setValue(&id, pJson["id"], "QString", "QString");
    
    ::OpenAPI::setValue(&livemode, pJson["livemode"], "bool", "");
    
    ::OpenAPI::setValue(&max_redemptions, pJson["maxRedemptions"], "qint64", "");
    
    
    ::OpenAPI::setValue(&metadata, pJson["metadata"], "QMap", "QString");
    ::OpenAPI::setValue(&object, pJson["object"], "QString", "QString");
    
    ::OpenAPI::setValue(&percent_off, pJson["percentOff"], "qint32", "");
    
    ::OpenAPI::setValue(&redeem_by, pJson["redeemBy"], "qint64", "");
    
    ::OpenAPI::setValue(&times_redeemed, pJson["timesRedeemed"], "qint32", "");
    
    ::OpenAPI::setValue(&valid, pJson["valid"], "bool", "");
    
}

QString
OAICoupon::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAICoupon::asJsonObject() {
    QJsonObject obj;
    if(m_amount_off_isSet){
        obj.insert("amountOff", QJsonValue(amount_off));
    }
    if(m_created_isSet){
        obj.insert("created", QJsonValue(created));
    }
    if(currency != nullptr && *currency != QString("")){
        toJsonValue(QString("currency"), currency, obj, QString("QString"));
    }
    if(duration != nullptr && *duration != QString("")){
        toJsonValue(QString("duration"), duration, obj, QString("QString"));
    }
    if(m_duration_in_months_isSet){
        obj.insert("durationInMonths", QJsonValue(duration_in_months));
    }
    if(id != nullptr && *id != QString("")){
        toJsonValue(QString("id"), id, obj, QString("QString"));
    }
    if(m_livemode_isSet){
        obj.insert("livemode", QJsonValue(livemode));
    }
    if(m_max_redemptions_isSet){
        obj.insert("maxRedemptions", QJsonValue(max_redemptions));
    }
    if(metadata->size() > 0){
        toJsonMap((QMap<QString, void*>*) metadata, obj, "metadata", "QString");
    }
    if(object != nullptr && *object != QString("")){
        toJsonValue(QString("object"), object, obj, QString("QString"));
    }
    if(m_percent_off_isSet){
        obj.insert("percentOff", QJsonValue(percent_off));
    }
    if(m_redeem_by_isSet){
        obj.insert("redeemBy", QJsonValue(redeem_by));
    }
    if(m_times_redeemed_isSet){
        obj.insert("timesRedeemed", QJsonValue(times_redeemed));
    }
    if(m_valid_isSet){
        obj.insert("valid", QJsonValue(valid));
    }

    return obj;
}

qint64
OAICoupon::getAmountOff() {
    return amount_off;
}
void
OAICoupon::setAmountOff(qint64 amount_off) {
    this->amount_off = amount_off;
    this->m_amount_off_isSet = true;
}

qint64
OAICoupon::getCreated() {
    return created;
}
void
OAICoupon::setCreated(qint64 created) {
    this->created = created;
    this->m_created_isSet = true;
}

QString*
OAICoupon::getCurrency() {
    return currency;
}
void
OAICoupon::setCurrency(QString* currency) {
    this->currency = currency;
    this->m_currency_isSet = true;
}

QString*
OAICoupon::getDuration() {
    return duration;
}
void
OAICoupon::setDuration(QString* duration) {
    this->duration = duration;
    this->m_duration_isSet = true;
}

qint32
OAICoupon::getDurationInMonths() {
    return duration_in_months;
}
void
OAICoupon::setDurationInMonths(qint32 duration_in_months) {
    this->duration_in_months = duration_in_months;
    this->m_duration_in_months_isSet = true;
}

QString*
OAICoupon::getId() {
    return id;
}
void
OAICoupon::setId(QString* id) {
    this->id = id;
    this->m_id_isSet = true;
}

bool
OAICoupon::isLivemode() {
    return livemode;
}
void
OAICoupon::setLivemode(bool livemode) {
    this->livemode = livemode;
    this->m_livemode_isSet = true;
}

qint64
OAICoupon::getMaxRedemptions() {
    return max_redemptions;
}
void
OAICoupon::setMaxRedemptions(qint64 max_redemptions) {
    this->max_redemptions = max_redemptions;
    this->m_max_redemptions_isSet = true;
}

QMap<QString, QString*>*
OAICoupon::getMetadata() {
    return metadata;
}
void
OAICoupon::setMetadata(QMap<QString, QString*>* metadata) {
    this->metadata = metadata;
    this->m_metadata_isSet = true;
}

QString*
OAICoupon::getObject() {
    return object;
}
void
OAICoupon::setObject(QString* object) {
    this->object = object;
    this->m_object_isSet = true;
}

qint32
OAICoupon::getPercentOff() {
    return percent_off;
}
void
OAICoupon::setPercentOff(qint32 percent_off) {
    this->percent_off = percent_off;
    this->m_percent_off_isSet = true;
}

qint64
OAICoupon::getRedeemBy() {
    return redeem_by;
}
void
OAICoupon::setRedeemBy(qint64 redeem_by) {
    this->redeem_by = redeem_by;
    this->m_redeem_by_isSet = true;
}

qint32
OAICoupon::getTimesRedeemed() {
    return times_redeemed;
}
void
OAICoupon::setTimesRedeemed(qint32 times_redeemed) {
    this->times_redeemed = times_redeemed;
    this->m_times_redeemed_isSet = true;
}

bool
OAICoupon::isValid() {
    return valid;
}
void
OAICoupon::setValid(bool valid) {
    this->valid = valid;
    this->m_valid_isSet = true;
}


bool
OAICoupon::isSet(){
    bool isObjectUpdated = false;
    do{
        if(m_amount_off_isSet){ isObjectUpdated = true; break;}
        if(m_created_isSet){ isObjectUpdated = true; break;}
        if(currency != nullptr && *currency != QString("")){ isObjectUpdated = true; break;}
        if(duration != nullptr && *duration != QString("")){ isObjectUpdated = true; break;}
        if(m_duration_in_months_isSet){ isObjectUpdated = true; break;}
        if(id != nullptr && *id != QString("")){ isObjectUpdated = true; break;}
        if(m_livemode_isSet){ isObjectUpdated = true; break;}
        if(m_max_redemptions_isSet){ isObjectUpdated = true; break;}
        if(metadata->size() > 0){ isObjectUpdated = true; break;}
        if(object != nullptr && *object != QString("")){ isObjectUpdated = true; break;}
        if(m_percent_off_isSet){ isObjectUpdated = true; break;}
        if(m_redeem_by_isSet){ isObjectUpdated = true; break;}
        if(m_times_redeemed_isSet){ isObjectUpdated = true; break;}
        if(m_valid_isSet){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

