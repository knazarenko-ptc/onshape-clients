/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * OpenAPI spec version: 1.111
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIBTAddressInfo.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIBTAddressInfo::OAIBTAddressInfo(QString json) {
    init();
    this->fromJson(json);
}

OAIBTAddressInfo::OAIBTAddressInfo() {
    init();
}

OAIBTAddressInfo::~OAIBTAddressInfo() {
    this->cleanup();
}

void
OAIBTAddressInfo::init() {
    address = new QString("");
    m_address_isSet = false;
    city = new QString("");
    m_city_isSet = false;
    country = new QString("");
    m_country_isSet = false;
    country_code = new QString("");
    m_country_code_isSet = false;
    id = new QString("");
    m_id_isSet = false;
    state = new QString("");
    m_state_isSet = false;
    state_code = new QString("");
    m_state_code_isSet = false;
    zip = new QString("");
    m_zip_isSet = false;
}

void
OAIBTAddressInfo::cleanup() {
    if(address != nullptr) { 
        delete address;
    }
    if(city != nullptr) { 
        delete city;
    }
    if(country != nullptr) { 
        delete country;
    }
    if(country_code != nullptr) { 
        delete country_code;
    }
    if(id != nullptr) { 
        delete id;
    }
    if(state != nullptr) { 
        delete state;
    }
    if(state_code != nullptr) { 
        delete state_code;
    }
    if(zip != nullptr) { 
        delete zip;
    }
}

OAIBTAddressInfo*
OAIBTAddressInfo::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIBTAddressInfo::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&address, pJson["address"], "QString", "QString");
    
    ::OpenAPI::setValue(&city, pJson["city"], "QString", "QString");
    
    ::OpenAPI::setValue(&country, pJson["country"], "QString", "QString");
    
    ::OpenAPI::setValue(&country_code, pJson["countryCode"], "QString", "QString");
    
    ::OpenAPI::setValue(&id, pJson["id"], "QString", "QString");
    
    ::OpenAPI::setValue(&state, pJson["state"], "QString", "QString");
    
    ::OpenAPI::setValue(&state_code, pJson["stateCode"], "QString", "QString");
    
    ::OpenAPI::setValue(&zip, pJson["zip"], "QString", "QString");
    
}

QString
OAIBTAddressInfo::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIBTAddressInfo::asJsonObject() {
    QJsonObject obj;
    if(address != nullptr && *address != QString("")){
        toJsonValue(QString("address"), address, obj, QString("QString"));
    }
    if(city != nullptr && *city != QString("")){
        toJsonValue(QString("city"), city, obj, QString("QString"));
    }
    if(country != nullptr && *country != QString("")){
        toJsonValue(QString("country"), country, obj, QString("QString"));
    }
    if(country_code != nullptr && *country_code != QString("")){
        toJsonValue(QString("countryCode"), country_code, obj, QString("QString"));
    }
    if(id != nullptr && *id != QString("")){
        toJsonValue(QString("id"), id, obj, QString("QString"));
    }
    if(state != nullptr && *state != QString("")){
        toJsonValue(QString("state"), state, obj, QString("QString"));
    }
    if(state_code != nullptr && *state_code != QString("")){
        toJsonValue(QString("stateCode"), state_code, obj, QString("QString"));
    }
    if(zip != nullptr && *zip != QString("")){
        toJsonValue(QString("zip"), zip, obj, QString("QString"));
    }

    return obj;
}

QString*
OAIBTAddressInfo::getAddress() {
    return address;
}
void
OAIBTAddressInfo::setAddress(QString* address) {
    this->address = address;
    this->m_address_isSet = true;
}

QString*
OAIBTAddressInfo::getCity() {
    return city;
}
void
OAIBTAddressInfo::setCity(QString* city) {
    this->city = city;
    this->m_city_isSet = true;
}

QString*
OAIBTAddressInfo::getCountry() {
    return country;
}
void
OAIBTAddressInfo::setCountry(QString* country) {
    this->country = country;
    this->m_country_isSet = true;
}

QString*
OAIBTAddressInfo::getCountryCode() {
    return country_code;
}
void
OAIBTAddressInfo::setCountryCode(QString* country_code) {
    this->country_code = country_code;
    this->m_country_code_isSet = true;
}

QString*
OAIBTAddressInfo::getId() {
    return id;
}
void
OAIBTAddressInfo::setId(QString* id) {
    this->id = id;
    this->m_id_isSet = true;
}

QString*
OAIBTAddressInfo::getState() {
    return state;
}
void
OAIBTAddressInfo::setState(QString* state) {
    this->state = state;
    this->m_state_isSet = true;
}

QString*
OAIBTAddressInfo::getStateCode() {
    return state_code;
}
void
OAIBTAddressInfo::setStateCode(QString* state_code) {
    this->state_code = state_code;
    this->m_state_code_isSet = true;
}

QString*
OAIBTAddressInfo::getZip() {
    return zip;
}
void
OAIBTAddressInfo::setZip(QString* zip) {
    this->zip = zip;
    this->m_zip_isSet = true;
}


bool
OAIBTAddressInfo::isSet(){
    bool isObjectUpdated = false;
    do{
        if(address != nullptr && *address != QString("")){ isObjectUpdated = true; break;}
        if(city != nullptr && *city != QString("")){ isObjectUpdated = true; break;}
        if(country != nullptr && *country != QString("")){ isObjectUpdated = true; break;}
        if(country_code != nullptr && *country_code != QString("")){ isObjectUpdated = true; break;}
        if(id != nullptr && *id != QString("")){ isObjectUpdated = true; break;}
        if(state != nullptr && *state != QString("")){ isObjectUpdated = true; break;}
        if(state_code != nullptr && *state_code != QString("")){ isObjectUpdated = true; break;}
        if(zip != nullptr && *zip != QString("")){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

