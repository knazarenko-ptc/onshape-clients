/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * OpenAPI spec version: 1.111
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIBTFeatureScriptEvalCall-2377.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIBTFeatureScriptEvalCall-2377::OAIBTFeatureScriptEvalCall-2377(QString json) {
    init();
    this->fromJson(json);
}

OAIBTFeatureScriptEvalCall-2377::OAIBTFeatureScriptEvalCall-2377() {
    init();
}

OAIBTFeatureScriptEvalCall-2377::~OAIBTFeatureScriptEvalCall-2377() {
    this->cleanup();
}

void
OAIBTFeatureScriptEvalCall-2377::init() {
    library_version = 0;
    m_library_version_isSet = false;
    microversion_skew = false;
    m_microversion_skew_isSet = false;
    queries = new QMap<QString, QList<QString*>*>();
    m_queries_isSet = false;
    reject_microversion_skew = false;
    m_reject_microversion_skew_isSet = false;
    script = new QString("");
    m_script_isSet = false;
    serialization_version = new QString("");
    m_serialization_version_isSet = false;
    source_microversion = new QString("");
    m_source_microversion_isSet = false;
}

void
OAIBTFeatureScriptEvalCall-2377::cleanup() {


    if(queries != nullptr) { 
        auto arr = queries;
        for(auto o: *arr) { 
            for(auto o1: *o) {
                delete o1;
            }
            delete o;
        }
        delete queries;
    }

    if(script != nullptr) { 
        delete script;
    }
    if(serialization_version != nullptr) { 
        delete serialization_version;
    }
    if(source_microversion != nullptr) { 
        delete source_microversion;
    }
}

OAIBTFeatureScriptEvalCall-2377*
OAIBTFeatureScriptEvalCall-2377::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIBTFeatureScriptEvalCall-2377::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&library_version, pJson["libraryVersion"], "qint32", "");
    
    ::OpenAPI::setValue(&microversion_skew, pJson["microversionSkew"], "bool", "");
    
    
    
    if(pJson["queries"].isObject()){
        auto varmap = pJson["queries"].toObject().toVariantMap();
        if(varmap.count() > 0){
            for(auto val : varmap.keys()){
                auto queries_item = new QList<QString*>();
                
    		    auto jsonval = QJsonValue::fromVariant(varmap.value(val));
    		    ::OpenAPI::setValue((QMap<QString, void *>*)&queries_item, jsonval, "QList", "QString");

                queries->insert(queries->end(), val, queries_item);
            }
        }
    }
    ::OpenAPI::setValue(&reject_microversion_skew, pJson["rejectMicroversionSkew"], "bool", "");
    
    ::OpenAPI::setValue(&script, pJson["script"], "QString", "QString");
    
    ::OpenAPI::setValue(&serialization_version, pJson["serializationVersion"], "QString", "QString");
    
    ::OpenAPI::setValue(&source_microversion, pJson["sourceMicroversion"], "QString", "QString");
    
}

QString
OAIBTFeatureScriptEvalCall-2377::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIBTFeatureScriptEvalCall-2377::asJsonObject() {
    QJsonObject obj;
    if(m_library_version_isSet){
        obj.insert("libraryVersion", QJsonValue(library_version));
    }
    if(m_microversion_skew_isSet){
        obj.insert("microversionSkew", QJsonValue(microversion_skew));
    }
    if(queries->size() > 0){
        
        QJsonObject mapobj;
        for(auto itemkey : queries->keys()){
            QJsonObject jobj;
            toJsonArray((QList<void*>*)queries->value(itemkey), jobj, itemkey, "QString");
            mapobj.insert(itemkey, jobj);
        }
        obj.insert("queries", mapobj);
    }
    if(m_reject_microversion_skew_isSet){
        obj.insert("rejectMicroversionSkew", QJsonValue(reject_microversion_skew));
    }
    if(script != nullptr && *script != QString("")){
        toJsonValue(QString("script"), script, obj, QString("QString"));
    }
    if(serialization_version != nullptr && *serialization_version != QString("")){
        toJsonValue(QString("serializationVersion"), serialization_version, obj, QString("QString"));
    }
    if(source_microversion != nullptr && *source_microversion != QString("")){
        toJsonValue(QString("sourceMicroversion"), source_microversion, obj, QString("QString"));
    }

    return obj;
}

qint32
OAIBTFeatureScriptEvalCall-2377::getLibraryVersion() {
    return library_version;
}
void
OAIBTFeatureScriptEvalCall-2377::setLibraryVersion(qint32 library_version) {
    this->library_version = library_version;
    this->m_library_version_isSet = true;
}

bool
OAIBTFeatureScriptEvalCall-2377::isMicroversionSkew() {
    return microversion_skew;
}
void
OAIBTFeatureScriptEvalCall-2377::setMicroversionSkew(bool microversion_skew) {
    this->microversion_skew = microversion_skew;
    this->m_microversion_skew_isSet = true;
}

QMap<QString, QList<QString*>*>*
OAIBTFeatureScriptEvalCall-2377::getQueries() {
    return queries;
}
void
OAIBTFeatureScriptEvalCall-2377::setQueries(QMap<QString, QList<QString*>*>* queries) {
    this->queries = queries;
    this->m_queries_isSet = true;
}

bool
OAIBTFeatureScriptEvalCall-2377::isRejectMicroversionSkew() {
    return reject_microversion_skew;
}
void
OAIBTFeatureScriptEvalCall-2377::setRejectMicroversionSkew(bool reject_microversion_skew) {
    this->reject_microversion_skew = reject_microversion_skew;
    this->m_reject_microversion_skew_isSet = true;
}

QString*
OAIBTFeatureScriptEvalCall-2377::getScript() {
    return script;
}
void
OAIBTFeatureScriptEvalCall-2377::setScript(QString* script) {
    this->script = script;
    this->m_script_isSet = true;
}

QString*
OAIBTFeatureScriptEvalCall-2377::getSerializationVersion() {
    return serialization_version;
}
void
OAIBTFeatureScriptEvalCall-2377::setSerializationVersion(QString* serialization_version) {
    this->serialization_version = serialization_version;
    this->m_serialization_version_isSet = true;
}

QString*
OAIBTFeatureScriptEvalCall-2377::getSourceMicroversion() {
    return source_microversion;
}
void
OAIBTFeatureScriptEvalCall-2377::setSourceMicroversion(QString* source_microversion) {
    this->source_microversion = source_microversion;
    this->m_source_microversion_isSet = true;
}


bool
OAIBTFeatureScriptEvalCall-2377::isSet(){
    bool isObjectUpdated = false;
    do{
        if(m_library_version_isSet){ isObjectUpdated = true; break;}
        if(m_microversion_skew_isSet){ isObjectUpdated = true; break;}
        if(queries->size() > 0){ isObjectUpdated = true; break;}
        if(m_reject_microversion_skew_isSet){ isObjectUpdated = true; break;}
        if(script != nullptr && *script != QString("")){ isObjectUpdated = true; break;}
        if(serialization_version != nullptr && *serialization_version != QString("")){ isObjectUpdated = true; break;}
        if(source_microversion != nullptr && *source_microversion != QString("")){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

