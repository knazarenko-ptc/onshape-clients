/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * OpenAPI spec version: 1.111
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRevisionsApi.h"
#include "OAIHelpers.h"
#include "OAIModelFactory.h"
#include "OAIQObjectWrapper.h"

#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAIRevisionsApi::OAIRevisionsApi() {}

OAIRevisionsApi::~OAIRevisionsApi() {}

OAIRevisionsApi::OAIRevisionsApi(QString host, QString basePath) {
    this->host = host;
    this->basePath = basePath;
}

void
OAIRevisionsApi::enumerateRevisions(QString* cid, qint32 element_type, qint32 limit, qint32 offset, bool latest_only, qint64 after) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/api/revisions/companies/{cid}");

    QString cidPathParam("{"); cidPathParam.append("cid").append("}");
    fullPath.replace(cidPathParam, stringValue(cid));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("elementType"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(element_type)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("limit"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(limit)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("offset"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(offset)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("latestOnly"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(latest_only)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("after"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(after)));


    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIRevisionsApi::enumerateRevisionsCallback);

    worker->execute(&input);
}

void
OAIRevisionsApi::enumerateRevisionsCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QString json(worker->response);
    OAIBTListResponseBTRevisionInfo* output = static_cast<OAIBTListResponseBTRevisionInfo*>(create(json, QString("OAIBTListResponseBTRevisionInfo")));
    auto wrapper = new OAIQObjectWrapper<OAIBTListResponseBTRevisionInfo*> (output);
    wrapper->deleteLater();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit enumerateRevisionsSignal(output);
    } else {
        emit enumerateRevisionsSignalE(output, error_type, error_str);
        emit enumerateRevisionsSignalEFull(worker, error_type, error_str);
    }
}

void
OAIRevisionsApi::getLatestInDocumentOrCompany(QString* cd, QString* cdid, QString* pnum, QString* et) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/api/revisions/{cd}/{cdid}/p/{pnum}/latest");

    QString cdPathParam("{"); cdPathParam.append("cd").append("}");
    fullPath.replace(cdPathParam, stringValue(cd));
    QString cdidPathParam("{"); cdidPathParam.append("cdid").append("}");
    fullPath.replace(cdidPathParam, stringValue(cdid));
    QString pnumPathParam("{"); pnumPathParam.append("pnum").append("}");
    fullPath.replace(pnumPathParam, stringValue(pnum));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("et"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(et)));


    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIRevisionsApi::getLatestInDocumentOrCompanyCallback);

    worker->execute(&input);
}

void
OAIRevisionsApi::getLatestInDocumentOrCompanyCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QString json(worker->response);
    OAIBTRevisionInfo* output = static_cast<OAIBTRevisionInfo*>(create(json, QString("OAIBTRevisionInfo")));
    auto wrapper = new OAIQObjectWrapper<OAIBTRevisionInfo*> (output);
    wrapper->deleteLater();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit getLatestInDocumentOrCompanySignal(output);
    } else {
        emit getLatestInDocumentOrCompanySignalE(output, error_type, error_str);
        emit getLatestInDocumentOrCompanySignalEFull(worker, error_type, error_str);
    }
}

void
OAIRevisionsApi::getRevisionHistoryInCompany(QString* cid, QString* pnum, QString* element_type, bool fill_approvers, bool fill_export_permission) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/api/revisions/companies/{cid}/partnumber/{pnum}");

    QString cidPathParam("{"); cidPathParam.append("cid").append("}");
    fullPath.replace(cidPathParam, stringValue(cid));
    QString pnumPathParam("{"); pnumPathParam.append("pnum").append("}");
    fullPath.replace(pnumPathParam, stringValue(pnum));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("elementType"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(element_type)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("fillApprovers"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(fill_approvers)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("fillExportPermission"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(fill_export_permission)));


    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIRevisionsApi::getRevisionHistoryInCompanyCallback);

    worker->execute(&input);
}

void
OAIRevisionsApi::getRevisionHistoryInCompanyCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QString json(worker->response);
    OAIBTListResponseBTRevisionInfo* output = static_cast<OAIBTListResponseBTRevisionInfo*>(create(json, QString("OAIBTListResponseBTRevisionInfo")));
    auto wrapper = new OAIQObjectWrapper<OAIBTListResponseBTRevisionInfo*> (output);
    wrapper->deleteLater();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit getRevisionHistoryInCompanySignal(output);
    } else {
        emit getRevisionHistoryInCompanySignalE(output, error_type, error_str);
        emit getRevisionHistoryInCompanySignalEFull(worker, error_type, error_str);
    }
}


}
