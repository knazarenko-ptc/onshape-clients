/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * OpenAPI spec version: 1.111
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIBTIdentityInfo.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIBTIdentityInfo::OAIBTIdentityInfo(QString json) {
    init();
    this->fromJson(json);
}

OAIBTIdentityInfo::OAIBTIdentityInfo() {
    init();
}

OAIBTIdentityInfo::~OAIBTIdentityInfo() {
    this->cleanup();
}

void
OAIBTIdentityInfo::init() {
    href = new QString("");
    m_href_isSet = false;
    id = new QString("");
    m_id_isSet = false;
    identity_type = 0;
    m_identity_type_isSet = false;
    team = new OAIBTTeamSummaryInfo();
    m_team_isSet = false;
    user = new OAIBTUserSummaryInfo();
    m_user_isSet = false;
    view_ref = new QString("");
    m_view_ref_isSet = false;
}

void
OAIBTIdentityInfo::cleanup() {
    if(href != nullptr) { 
        delete href;
    }
    if(id != nullptr) { 
        delete id;
    }

    if(team != nullptr) { 
        delete team;
    }
    if(user != nullptr) { 
        delete user;
    }
    if(view_ref != nullptr) { 
        delete view_ref;
    }
}

OAIBTIdentityInfo*
OAIBTIdentityInfo::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIBTIdentityInfo::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&href, pJson["href"], "QString", "QString");
    
    ::OpenAPI::setValue(&id, pJson["id"], "QString", "QString");
    
    ::OpenAPI::setValue(&identity_type, pJson["identityType"], "qint32", "");
    
    ::OpenAPI::setValue(&team, pJson["team"], "OAIBTTeamSummaryInfo", "OAIBTTeamSummaryInfo");
    
    ::OpenAPI::setValue(&user, pJson["user"], "OAIBTUserSummaryInfo", "OAIBTUserSummaryInfo");
    
    ::OpenAPI::setValue(&view_ref, pJson["viewRef"], "QString", "QString");
    
}

QString
OAIBTIdentityInfo::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIBTIdentityInfo::asJsonObject() {
    QJsonObject obj;
    if(href != nullptr && *href != QString("")){
        toJsonValue(QString("href"), href, obj, QString("QString"));
    }
    if(id != nullptr && *id != QString("")){
        toJsonValue(QString("id"), id, obj, QString("QString"));
    }
    if(m_identity_type_isSet){
        obj.insert("identityType", QJsonValue(identity_type));
    }
    if((team != nullptr) && (team->isSet())){
        toJsonValue(QString("team"), team, obj, QString("OAIBTTeamSummaryInfo"));
    }
    if((user != nullptr) && (user->isSet())){
        toJsonValue(QString("user"), user, obj, QString("OAIBTUserSummaryInfo"));
    }
    if(view_ref != nullptr && *view_ref != QString("")){
        toJsonValue(QString("viewRef"), view_ref, obj, QString("QString"));
    }

    return obj;
}

QString*
OAIBTIdentityInfo::getHref() {
    return href;
}
void
OAIBTIdentityInfo::setHref(QString* href) {
    this->href = href;
    this->m_href_isSet = true;
}

QString*
OAIBTIdentityInfo::getId() {
    return id;
}
void
OAIBTIdentityInfo::setId(QString* id) {
    this->id = id;
    this->m_id_isSet = true;
}

qint32
OAIBTIdentityInfo::getIdentityType() {
    return identity_type;
}
void
OAIBTIdentityInfo::setIdentityType(qint32 identity_type) {
    this->identity_type = identity_type;
    this->m_identity_type_isSet = true;
}

OAIBTTeamSummaryInfo*
OAIBTIdentityInfo::getTeam() {
    return team;
}
void
OAIBTIdentityInfo::setTeam(OAIBTTeamSummaryInfo* team) {
    this->team = team;
    this->m_team_isSet = true;
}

OAIBTUserSummaryInfo*
OAIBTIdentityInfo::getUser() {
    return user;
}
void
OAIBTIdentityInfo::setUser(OAIBTUserSummaryInfo* user) {
    this->user = user;
    this->m_user_isSet = true;
}

QString*
OAIBTIdentityInfo::getViewRef() {
    return view_ref;
}
void
OAIBTIdentityInfo::setViewRef(QString* view_ref) {
    this->view_ref = view_ref;
    this->m_view_ref_isSet = true;
}


bool
OAIBTIdentityInfo::isSet(){
    bool isObjectUpdated = false;
    do{
        if(href != nullptr && *href != QString("")){ isObjectUpdated = true; break;}
        if(id != nullptr && *id != QString("")){ isObjectUpdated = true; break;}
        if(m_identity_type_isSet){ isObjectUpdated = true; break;}
        if(team != nullptr && team->isSet()){ isObjectUpdated = true; break;}
        if(user != nullptr && user->isSet()){ isObjectUpdated = true; break;}
        if(view_ref != nullptr && *view_ref != QString("")){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

