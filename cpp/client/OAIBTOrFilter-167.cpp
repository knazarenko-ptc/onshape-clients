/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * OpenAPI spec version: 1.111
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIBTOrFilter-167.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIBTOrFilter-167::OAIBTOrFilter-167(QString json) {
    init();
    this->fromJson(json);
}

OAIBTOrFilter-167::OAIBTOrFilter-167() {
    init();
}

OAIBTOrFilter-167::~OAIBTOrFilter-167() {
    this->cleanup();
}

void
OAIBTOrFilter-167::init() {
    bt_type = new QString("");
    m_bt_type_isSet = false;
    operand1 = new OAIBTQueryFilter-183();
    m_operand1_isSet = false;
    operand2 = new OAIBTQueryFilter-183();
    m_operand2_isSet = false;
}

void
OAIBTOrFilter-167::cleanup() {
    if(bt_type != nullptr) { 
        delete bt_type;
    }
    if(operand1 != nullptr) { 
        delete operand1;
    }
    if(operand2 != nullptr) { 
        delete operand2;
    }
}

OAIBTOrFilter-167*
OAIBTOrFilter-167::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIBTOrFilter-167::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&bt_type, pJson["btType"], "QString", "QString");
    
    ::OpenAPI::setValue(&operand1, pJson["operand1"], "OAIBTQueryFilter-183", "OAIBTQueryFilter-183");
    
    ::OpenAPI::setValue(&operand2, pJson["operand2"], "OAIBTQueryFilter-183", "OAIBTQueryFilter-183");
    
}

QString
OAIBTOrFilter-167::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIBTOrFilter-167::asJsonObject() {
    QJsonObject obj;
    if(bt_type != nullptr && *bt_type != QString("")){
        toJsonValue(QString("btType"), bt_type, obj, QString("QString"));
    }
    if((operand1 != nullptr) && (operand1->isSet())){
        toJsonValue(QString("operand1"), operand1, obj, QString("OAIBTQueryFilter-183"));
    }
    if((operand2 != nullptr) && (operand2->isSet())){
        toJsonValue(QString("operand2"), operand2, obj, QString("OAIBTQueryFilter-183"));
    }

    return obj;
}

QString*
OAIBTOrFilter-167::getBtType() {
    return bt_type;
}
void
OAIBTOrFilter-167::setBtType(QString* bt_type) {
    this->bt_type = bt_type;
    this->m_bt_type_isSet = true;
}

OAIBTQueryFilter-183*
OAIBTOrFilter-167::getOperand1() {
    return operand1;
}
void
OAIBTOrFilter-167::setOperand1(OAIBTQueryFilter-183* operand1) {
    this->operand1 = operand1;
    this->m_operand1_isSet = true;
}

OAIBTQueryFilter-183*
OAIBTOrFilter-167::getOperand2() {
    return operand2;
}
void
OAIBTOrFilter-167::setOperand2(OAIBTQueryFilter-183* operand2) {
    this->operand2 = operand2;
    this->m_operand2_isSet = true;
}


bool
OAIBTOrFilter-167::isSet(){
    bool isObjectUpdated = false;
    do{
        if(bt_type != nullptr && *bt_type != QString("")){ isObjectUpdated = true; break;}
        if(operand1 != nullptr && operand1->isSet()){ isObjectUpdated = true; break;}
        if(operand2 != nullptr && operand2->isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

