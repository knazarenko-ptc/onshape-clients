/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * OpenAPI spec version: 1.111
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIBTDrawingParams.h
 *
 * 
 */

#ifndef OAIBTDrawingParams_H_
#define OAIBTDrawingParams_H_

#include <QJsonObject>


#include "OAIBTElementLocationParams.h"
#include <QList>
#include <QString>

#include "OAIObject.h"

namespace OpenAPI {

class OAIBTDrawingParams: public OAIObject {
public:
    OAIBTDrawingParams();
    OAIBTDrawingParams(QString json);
    ~OAIBTDrawingParams();
    void init();
    void cleanup();

    QString asJson () override;
    QJsonObject asJsonObject() override;
    void fromJsonObject(QJsonObject json) override;
    OAIBTDrawingParams* fromJson(QString jsonString) override;

    bool isBorder();
    void setBorder(bool border);

    bool isComputeIntersection();
    void setComputeIntersection(bool compute_intersection);

    QString* getDecimalSeparator();
    void setDecimalSeparator(QString* decimal_separator);

    QString* getDocumentId();
    void setDocumentId(QString* document_id);

    QString* getDocumentMicroversionId();
    void setDocumentMicroversionId(QString* document_microversion_id);

    QString* getDrawingName();
    void setDrawingName(QString* drawing_name);

    QString* getElementConfiguration();
    void setElementConfiguration(QString* element_configuration);

    QString* getElementId();
    void setElementId(QString* element_id);

    QString* getElementMicroversionId();
    void setElementMicroversionId(QString* element_microversion_id);

    QString* getExternalDocumentId();
    void setExternalDocumentId(QString* external_document_id);

    QString* getExternalDocumentVersionId();
    void setExternalDocumentVersionId(QString* external_document_version_id);

    QString* getHiddenLines();
    void setHiddenLines(QString* hidden_lines);

    bool isIncludeSurfaces();
    void setIncludeSurfaces(bool include_surfaces);

    bool isIsFlattenedPart();
    void setIsFlattenedPart(bool is_flattened_part);

    bool isIsSketchOnly();
    void setIsSketchOnly(bool is_sketch_only);

    bool isIsSurface();
    void setIsSurface(bool is_surface);

    QString* getLanguage();
    void setLanguage(QString* language);

    OAIBTElementLocationParams* getLocation();
    void setLocation(OAIBTElementLocationParams* location);

    QString* getModelType();
    void setModelType(QString* model_type);

    qint32 getNumberHorizontalZones();
    void setNumberHorizontalZones(qint32 number_horizontal_zones);

    qint32 getNumberVerticalZones();
    void setNumberVerticalZones(qint32 number_vertical_zones);

    QString* getPartId();
    void setPartId(QString* part_id);

    QString* getPartNumber();
    void setPartNumber(QString* part_number);

    QString* getPartQuery();
    void setPartQuery(QString* part_query);

    QString* getProjection();
    void setProjection(QString* projection);

    bool isPureSketch();
    void setPureSketch(bool pure_sketch);

    QString* getQualityOption();
    void setQualityOption(QString* quality_option);

    qint32 getReferenceType();
    void setReferenceType(qint32 reference_type);

    QString* getReferenceTypeEnum();
    void setReferenceTypeEnum(QString* reference_type_enum);

    QString* getRevision();
    void setRevision(QString* revision);

    bool isShowCutGeomOnly();
    void setShowCutGeomOnly(bool show_cut_geom_only);

    QString* getSimplificationOption();
    void setSimplificationOption(QString* simplification_option);

    double getSimplificationThreshold();
    void setSimplificationThreshold(double simplification_threshold);

    QString* getSize();
    void setSize(QString* size);

    QList<QString*>* getSketchIds();
    void setSketchIds(QList<QString*>* sketch_ids);

    QString* getStandard();
    void setStandard(QString* standard);

    QString* getStartZones();
    void setStartZones(QString* start_zones);

    QList<QString*>* getTemplateArgs();
    void setTemplateArgs(QList<QString*>* template_args);

    QString* getTemplateDocumentId();
    void setTemplateDocumentId(QString* template_document_id);

    QString* getTemplateElementId();
    void setTemplateElementId(QString* template_element_id);

    QString* getTemplateName();
    void setTemplateName(QString* template_name);

    QString* getTemplateVersionId();
    void setTemplateVersionId(QString* template_version_id);

    QString* getTemplateWorkspaceId();
    void setTemplateWorkspaceId(QString* template_workspace_id);

    bool isTitleblock();
    void setTitleblock(bool titleblock);

    QString* getUnits();
    void setUnits(QString* units);

    QString* getViews();
    void setViews(QString* views);

    QString* getWorkspaceId();
    void setWorkspaceId(QString* workspace_id);


    virtual bool isSet() override;

private:
    bool border;
    bool m_border_isSet;

    bool compute_intersection;
    bool m_compute_intersection_isSet;

    QString* decimal_separator;
    bool m_decimal_separator_isSet;

    QString* document_id;
    bool m_document_id_isSet;

    QString* document_microversion_id;
    bool m_document_microversion_id_isSet;

    QString* drawing_name;
    bool m_drawing_name_isSet;

    QString* element_configuration;
    bool m_element_configuration_isSet;

    QString* element_id;
    bool m_element_id_isSet;

    QString* element_microversion_id;
    bool m_element_microversion_id_isSet;

    QString* external_document_id;
    bool m_external_document_id_isSet;

    QString* external_document_version_id;
    bool m_external_document_version_id_isSet;

    QString* hidden_lines;
    bool m_hidden_lines_isSet;

    bool include_surfaces;
    bool m_include_surfaces_isSet;

    bool is_flattened_part;
    bool m_is_flattened_part_isSet;

    bool is_sketch_only;
    bool m_is_sketch_only_isSet;

    bool is_surface;
    bool m_is_surface_isSet;

    QString* language;
    bool m_language_isSet;

    OAIBTElementLocationParams* location;
    bool m_location_isSet;

    QString* model_type;
    bool m_model_type_isSet;

    qint32 number_horizontal_zones;
    bool m_number_horizontal_zones_isSet;

    qint32 number_vertical_zones;
    bool m_number_vertical_zones_isSet;

    QString* part_id;
    bool m_part_id_isSet;

    QString* part_number;
    bool m_part_number_isSet;

    QString* part_query;
    bool m_part_query_isSet;

    QString* projection;
    bool m_projection_isSet;

    bool pure_sketch;
    bool m_pure_sketch_isSet;

    QString* quality_option;
    bool m_quality_option_isSet;

    qint32 reference_type;
    bool m_reference_type_isSet;

    QString* reference_type_enum;
    bool m_reference_type_enum_isSet;

    QString* revision;
    bool m_revision_isSet;

    bool show_cut_geom_only;
    bool m_show_cut_geom_only_isSet;

    QString* simplification_option;
    bool m_simplification_option_isSet;

    double simplification_threshold;
    bool m_simplification_threshold_isSet;

    QString* size;
    bool m_size_isSet;

    QList<QString*>* sketch_ids;
    bool m_sketch_ids_isSet;

    QString* standard;
    bool m_standard_isSet;

    QString* start_zones;
    bool m_start_zones_isSet;

    QList<QString*>* template_args;
    bool m_template_args_isSet;

    QString* template_document_id;
    bool m_template_document_id_isSet;

    QString* template_element_id;
    bool m_template_element_id_isSet;

    QString* template_name;
    bool m_template_name_isSet;

    QString* template_version_id;
    bool m_template_version_id_isSet;

    QString* template_workspace_id;
    bool m_template_workspace_id_isSet;

    bool titleblock;
    bool m_titleblock_isSet;

    QString* units;
    bool m_units_isSet;

    QString* views;
    bool m_views_isSet;

    QString* workspace_id;
    bool m_workspace_id_isSet;

};

}

#endif /* OAIBTDrawingParams_H_ */
