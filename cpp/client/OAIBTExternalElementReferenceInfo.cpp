/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * OpenAPI spec version: 1.111
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIBTExternalElementReferenceInfo.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIBTExternalElementReferenceInfo::OAIBTExternalElementReferenceInfo(QString json) {
    init();
    this->fromJson(json);
}

OAIBTExternalElementReferenceInfo::OAIBTExternalElementReferenceInfo() {
    init();
}

OAIBTExternalElementReferenceInfo::~OAIBTExternalElementReferenceInfo() {
    this->cleanup();
}

void
OAIBTExternalElementReferenceInfo::init() {
    document_id = new QString("");
    m_document_id_isSet = false;
    element_id = new QString("");
    m_element_id_isSet = false;
    element_microversion_id = new QString("");
    m_element_microversion_id_isSet = false;
    version_id = new QString("");
    m_version_id_isSet = false;
}

void
OAIBTExternalElementReferenceInfo::cleanup() {
    if(document_id != nullptr) { 
        delete document_id;
    }
    if(element_id != nullptr) { 
        delete element_id;
    }
    if(element_microversion_id != nullptr) { 
        delete element_microversion_id;
    }
    if(version_id != nullptr) { 
        delete version_id;
    }
}

OAIBTExternalElementReferenceInfo*
OAIBTExternalElementReferenceInfo::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIBTExternalElementReferenceInfo::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&document_id, pJson["documentId"], "QString", "QString");
    
    ::OpenAPI::setValue(&element_id, pJson["elementId"], "QString", "QString");
    
    ::OpenAPI::setValue(&element_microversion_id, pJson["elementMicroversionId"], "QString", "QString");
    
    ::OpenAPI::setValue(&version_id, pJson["versionId"], "QString", "QString");
    
}

QString
OAIBTExternalElementReferenceInfo::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIBTExternalElementReferenceInfo::asJsonObject() {
    QJsonObject obj;
    if(document_id != nullptr && *document_id != QString("")){
        toJsonValue(QString("documentId"), document_id, obj, QString("QString"));
    }
    if(element_id != nullptr && *element_id != QString("")){
        toJsonValue(QString("elementId"), element_id, obj, QString("QString"));
    }
    if(element_microversion_id != nullptr && *element_microversion_id != QString("")){
        toJsonValue(QString("elementMicroversionId"), element_microversion_id, obj, QString("QString"));
    }
    if(version_id != nullptr && *version_id != QString("")){
        toJsonValue(QString("versionId"), version_id, obj, QString("QString"));
    }

    return obj;
}

QString*
OAIBTExternalElementReferenceInfo::getDocumentId() {
    return document_id;
}
void
OAIBTExternalElementReferenceInfo::setDocumentId(QString* document_id) {
    this->document_id = document_id;
    this->m_document_id_isSet = true;
}

QString*
OAIBTExternalElementReferenceInfo::getElementId() {
    return element_id;
}
void
OAIBTExternalElementReferenceInfo::setElementId(QString* element_id) {
    this->element_id = element_id;
    this->m_element_id_isSet = true;
}

QString*
OAIBTExternalElementReferenceInfo::getElementMicroversionId() {
    return element_microversion_id;
}
void
OAIBTExternalElementReferenceInfo::setElementMicroversionId(QString* element_microversion_id) {
    this->element_microversion_id = element_microversion_id;
    this->m_element_microversion_id_isSet = true;
}

QString*
OAIBTExternalElementReferenceInfo::getVersionId() {
    return version_id;
}
void
OAIBTExternalElementReferenceInfo::setVersionId(QString* version_id) {
    this->version_id = version_id;
    this->m_version_id_isSet = true;
}


bool
OAIBTExternalElementReferenceInfo::isSet(){
    bool isObjectUpdated = false;
    do{
        if(document_id != nullptr && *document_id != QString("")){ isObjectUpdated = true; break;}
        if(element_id != nullptr && *element_id != QString("")){ isObjectUpdated = true; break;}
        if(element_microversion_id != nullptr && *element_microversion_id != QString("")){ isObjectUpdated = true; break;}
        if(version_id != nullptr && *version_id != QString("")){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

