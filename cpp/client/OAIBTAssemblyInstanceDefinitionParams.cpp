/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * OpenAPI spec version: 1.111
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIBTAssemblyInstanceDefinitionParams.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIBTAssemblyInstanceDefinitionParams::OAIBTAssemblyInstanceDefinitionParams(QString json) {
    init();
    this->fromJson(json);
}

OAIBTAssemblyInstanceDefinitionParams::OAIBTAssemblyInstanceDefinitionParams() {
    init();
}

OAIBTAssemblyInstanceDefinitionParams::~OAIBTAssemblyInstanceDefinitionParams() {
    this->cleanup();
}

void
OAIBTAssemblyInstanceDefinitionParams::init() {
    configuration = new QString("");
    m_configuration_isSet = false;
    document_id = new QString("");
    m_document_id_isSet = false;
    element_id = new QString("");
    m_element_id_isSet = false;
    feature_id = new QString("");
    m_feature_id_isSet = false;
    is_assembly = false;
    m_is_assembly_isSet = false;
    is_hidden = false;
    m_is_hidden_isSet = false;
    is_suppressed = false;
    m_is_suppressed_isSet = false;
    is_whole_part_studio = false;
    m_is_whole_part_studio_isSet = false;
    microversion_id = new QString("");
    m_microversion_id_isSet = false;
    part_id = new QString("");
    m_part_id_isSet = false;
    part_number = new QString("");
    m_part_number_isSet = false;
    revision = new QString("");
    m_revision_isSet = false;
    version_id = new QString("");
    m_version_id_isSet = false;
}

void
OAIBTAssemblyInstanceDefinitionParams::cleanup() {
    if(configuration != nullptr) { 
        delete configuration;
    }
    if(document_id != nullptr) { 
        delete document_id;
    }
    if(element_id != nullptr) { 
        delete element_id;
    }
    if(feature_id != nullptr) { 
        delete feature_id;
    }




    if(microversion_id != nullptr) { 
        delete microversion_id;
    }
    if(part_id != nullptr) { 
        delete part_id;
    }
    if(part_number != nullptr) { 
        delete part_number;
    }
    if(revision != nullptr) { 
        delete revision;
    }
    if(version_id != nullptr) { 
        delete version_id;
    }
}

OAIBTAssemblyInstanceDefinitionParams*
OAIBTAssemblyInstanceDefinitionParams::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIBTAssemblyInstanceDefinitionParams::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&configuration, pJson["configuration"], "QString", "QString");
    
    ::OpenAPI::setValue(&document_id, pJson["documentId"], "QString", "QString");
    
    ::OpenAPI::setValue(&element_id, pJson["elementId"], "QString", "QString");
    
    ::OpenAPI::setValue(&feature_id, pJson["featureId"], "QString", "QString");
    
    ::OpenAPI::setValue(&is_assembly, pJson["isAssembly"], "bool", "");
    
    ::OpenAPI::setValue(&is_hidden, pJson["isHidden"], "bool", "");
    
    ::OpenAPI::setValue(&is_suppressed, pJson["isSuppressed"], "bool", "");
    
    ::OpenAPI::setValue(&is_whole_part_studio, pJson["isWholePartStudio"], "bool", "");
    
    ::OpenAPI::setValue(&microversion_id, pJson["microversionId"], "QString", "QString");
    
    ::OpenAPI::setValue(&part_id, pJson["partId"], "QString", "QString");
    
    ::OpenAPI::setValue(&part_number, pJson["partNumber"], "QString", "QString");
    
    ::OpenAPI::setValue(&revision, pJson["revision"], "QString", "QString");
    
    ::OpenAPI::setValue(&version_id, pJson["versionId"], "QString", "QString");
    
}

QString
OAIBTAssemblyInstanceDefinitionParams::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIBTAssemblyInstanceDefinitionParams::asJsonObject() {
    QJsonObject obj;
    if(configuration != nullptr && *configuration != QString("")){
        toJsonValue(QString("configuration"), configuration, obj, QString("QString"));
    }
    if(document_id != nullptr && *document_id != QString("")){
        toJsonValue(QString("documentId"), document_id, obj, QString("QString"));
    }
    if(element_id != nullptr && *element_id != QString("")){
        toJsonValue(QString("elementId"), element_id, obj, QString("QString"));
    }
    if(feature_id != nullptr && *feature_id != QString("")){
        toJsonValue(QString("featureId"), feature_id, obj, QString("QString"));
    }
    if(m_is_assembly_isSet){
        obj.insert("isAssembly", QJsonValue(is_assembly));
    }
    if(m_is_hidden_isSet){
        obj.insert("isHidden", QJsonValue(is_hidden));
    }
    if(m_is_suppressed_isSet){
        obj.insert("isSuppressed", QJsonValue(is_suppressed));
    }
    if(m_is_whole_part_studio_isSet){
        obj.insert("isWholePartStudio", QJsonValue(is_whole_part_studio));
    }
    if(microversion_id != nullptr && *microversion_id != QString("")){
        toJsonValue(QString("microversionId"), microversion_id, obj, QString("QString"));
    }
    if(part_id != nullptr && *part_id != QString("")){
        toJsonValue(QString("partId"), part_id, obj, QString("QString"));
    }
    if(part_number != nullptr && *part_number != QString("")){
        toJsonValue(QString("partNumber"), part_number, obj, QString("QString"));
    }
    if(revision != nullptr && *revision != QString("")){
        toJsonValue(QString("revision"), revision, obj, QString("QString"));
    }
    if(version_id != nullptr && *version_id != QString("")){
        toJsonValue(QString("versionId"), version_id, obj, QString("QString"));
    }

    return obj;
}

QString*
OAIBTAssemblyInstanceDefinitionParams::getConfiguration() {
    return configuration;
}
void
OAIBTAssemblyInstanceDefinitionParams::setConfiguration(QString* configuration) {
    this->configuration = configuration;
    this->m_configuration_isSet = true;
}

QString*
OAIBTAssemblyInstanceDefinitionParams::getDocumentId() {
    return document_id;
}
void
OAIBTAssemblyInstanceDefinitionParams::setDocumentId(QString* document_id) {
    this->document_id = document_id;
    this->m_document_id_isSet = true;
}

QString*
OAIBTAssemblyInstanceDefinitionParams::getElementId() {
    return element_id;
}
void
OAIBTAssemblyInstanceDefinitionParams::setElementId(QString* element_id) {
    this->element_id = element_id;
    this->m_element_id_isSet = true;
}

QString*
OAIBTAssemblyInstanceDefinitionParams::getFeatureId() {
    return feature_id;
}
void
OAIBTAssemblyInstanceDefinitionParams::setFeatureId(QString* feature_id) {
    this->feature_id = feature_id;
    this->m_feature_id_isSet = true;
}

bool
OAIBTAssemblyInstanceDefinitionParams::isIsAssembly() {
    return is_assembly;
}
void
OAIBTAssemblyInstanceDefinitionParams::setIsAssembly(bool is_assembly) {
    this->is_assembly = is_assembly;
    this->m_is_assembly_isSet = true;
}

bool
OAIBTAssemblyInstanceDefinitionParams::isIsHidden() {
    return is_hidden;
}
void
OAIBTAssemblyInstanceDefinitionParams::setIsHidden(bool is_hidden) {
    this->is_hidden = is_hidden;
    this->m_is_hidden_isSet = true;
}

bool
OAIBTAssemblyInstanceDefinitionParams::isIsSuppressed() {
    return is_suppressed;
}
void
OAIBTAssemblyInstanceDefinitionParams::setIsSuppressed(bool is_suppressed) {
    this->is_suppressed = is_suppressed;
    this->m_is_suppressed_isSet = true;
}

bool
OAIBTAssemblyInstanceDefinitionParams::isIsWholePartStudio() {
    return is_whole_part_studio;
}
void
OAIBTAssemblyInstanceDefinitionParams::setIsWholePartStudio(bool is_whole_part_studio) {
    this->is_whole_part_studio = is_whole_part_studio;
    this->m_is_whole_part_studio_isSet = true;
}

QString*
OAIBTAssemblyInstanceDefinitionParams::getMicroversionId() {
    return microversion_id;
}
void
OAIBTAssemblyInstanceDefinitionParams::setMicroversionId(QString* microversion_id) {
    this->microversion_id = microversion_id;
    this->m_microversion_id_isSet = true;
}

QString*
OAIBTAssemblyInstanceDefinitionParams::getPartId() {
    return part_id;
}
void
OAIBTAssemblyInstanceDefinitionParams::setPartId(QString* part_id) {
    this->part_id = part_id;
    this->m_part_id_isSet = true;
}

QString*
OAIBTAssemblyInstanceDefinitionParams::getPartNumber() {
    return part_number;
}
void
OAIBTAssemblyInstanceDefinitionParams::setPartNumber(QString* part_number) {
    this->part_number = part_number;
    this->m_part_number_isSet = true;
}

QString*
OAIBTAssemblyInstanceDefinitionParams::getRevision() {
    return revision;
}
void
OAIBTAssemblyInstanceDefinitionParams::setRevision(QString* revision) {
    this->revision = revision;
    this->m_revision_isSet = true;
}

QString*
OAIBTAssemblyInstanceDefinitionParams::getVersionId() {
    return version_id;
}
void
OAIBTAssemblyInstanceDefinitionParams::setVersionId(QString* version_id) {
    this->version_id = version_id;
    this->m_version_id_isSet = true;
}


bool
OAIBTAssemblyInstanceDefinitionParams::isSet(){
    bool isObjectUpdated = false;
    do{
        if(configuration != nullptr && *configuration != QString("")){ isObjectUpdated = true; break;}
        if(document_id != nullptr && *document_id != QString("")){ isObjectUpdated = true; break;}
        if(element_id != nullptr && *element_id != QString("")){ isObjectUpdated = true; break;}
        if(feature_id != nullptr && *feature_id != QString("")){ isObjectUpdated = true; break;}
        if(m_is_assembly_isSet){ isObjectUpdated = true; break;}
        if(m_is_hidden_isSet){ isObjectUpdated = true; break;}
        if(m_is_suppressed_isSet){ isObjectUpdated = true; break;}
        if(m_is_whole_part_studio_isSet){ isObjectUpdated = true; break;}
        if(microversion_id != nullptr && *microversion_id != QString("")){ isObjectUpdated = true; break;}
        if(part_id != nullptr && *part_id != QString("")){ isObjectUpdated = true; break;}
        if(part_number != nullptr && *part_number != QString("")){ isObjectUpdated = true; break;}
        if(revision != nullptr && *revision != QString("")){ isObjectUpdated = true; break;}
        if(version_id != nullptr && *version_id != QString("")){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

