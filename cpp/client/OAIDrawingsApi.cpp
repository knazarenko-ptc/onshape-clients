/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * OpenAPI spec version: 1.111
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDrawingsApi.h"
#include "OAIHelpers.h"
#include "OAIModelFactory.h"
#include "OAIQObjectWrapper.h"

#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAIDrawingsApi::OAIDrawingsApi() {}

OAIDrawingsApi::~OAIDrawingsApi() {}

OAIDrawingsApi::OAIDrawingsApi(QString host, QString basePath) {
    this->host = host;
    this->basePath = basePath;
}

void
OAIDrawingsApi::createDrawingAppElement(OAIBTDrawingParams& oaibt_drawing_params) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/api/drawings/create");



    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "POST");


    
    QString output = oaibt_drawing_params.asJson();
    input.request_body.append(output);
    


    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIDrawingsApi::createDrawingAppElementCallback);

    worker->execute(&input);
}

void
OAIDrawingsApi::createDrawingAppElementCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QString json(worker->response);
    OAIBTDocumentElementInfo* output = static_cast<OAIBTDocumentElementInfo*>(create(json, QString("OAIBTDocumentElementInfo")));
    auto wrapper = new OAIQObjectWrapper<OAIBTDocumentElementInfo*> (output);
    wrapper->deleteLater();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit createDrawingAppElementSignal(output);
    } else {
        emit createDrawingAppElementSignalE(output, error_type, error_str);
        emit createDrawingAppElementSignalEFull(worker, error_type, error_str);
    }
}

void
OAIDrawingsApi::createDrawingTranslation(QString* did, QString* wv, QString* wvid, QString* eid, OAIBTTranslateFormatParams& oaibt_translate_format_params) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/api/drawings/d/{did}/{wv}/{wvid}/e/{eid}/translations");

    QString didPathParam("{"); didPathParam.append("did").append("}");
    fullPath.replace(didPathParam, stringValue(did));
    QString wvPathParam("{"); wvPathParam.append("wv").append("}");
    fullPath.replace(wvPathParam, stringValue(wv));
    QString wvidPathParam("{"); wvidPathParam.append("wvid").append("}");
    fullPath.replace(wvidPathParam, stringValue(wvid));
    QString eidPathParam("{"); eidPathParam.append("eid").append("}");
    fullPath.replace(eidPathParam, stringValue(eid));


    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "POST");


    
    QString output = oaibt_translate_format_params.asJson();
    input.request_body.append(output);
    


    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIDrawingsApi::createDrawingTranslationCallback);

    worker->execute(&input);
}

void
OAIDrawingsApi::createDrawingTranslationCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QString json(worker->response);
    OAIBTTranslationRequestInfo* output = static_cast<OAIBTTranslationRequestInfo*>(create(json, QString("OAIBTTranslationRequestInfo")));
    auto wrapper = new OAIQObjectWrapper<OAIBTTranslationRequestInfo*> (output);
    wrapper->deleteLater();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit createDrawingTranslationSignal(output);
    } else {
        emit createDrawingTranslationSignalE(output, error_type, error_str);
        emit createDrawingTranslationSignalEFull(worker, error_type, error_str);
    }
}

void
OAIDrawingsApi::getDrawingTranslatorFormats(QString* did, QString* wid, QString* eid) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/api/drawings/d/{did}/w/{wid}/e/{eid}/translationformats");

    QString didPathParam("{"); didPathParam.append("did").append("}");
    fullPath.replace(didPathParam, stringValue(did));
    QString widPathParam("{"); widPathParam.append("wid").append("}");
    fullPath.replace(widPathParam, stringValue(wid));
    QString eidPathParam("{"); eidPathParam.append("eid").append("}");
    fullPath.replace(eidPathParam, stringValue(eid));


    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIDrawingsApi::getDrawingTranslatorFormatsCallback);

    worker->execute(&input);
}

void
OAIDrawingsApi::getDrawingTranslatorFormatsCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QList<OAIBTModelFormatInfo*>* output = new QList<OAIBTModelFormatInfo*>();
    QString json(worker->response);
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    auto wrapper = new OAIQObjectWrapper<QList<OAIBTModelFormatInfo*>*> (output);
    wrapper->deleteLater();
    foreach(QJsonValue obj, jsonArray) {
        OAIBTModelFormatInfo* o = new OAIBTModelFormatInfo();
        QJsonObject jv = obj.toObject();
        QJsonObject * ptr = (QJsonObject*)&jv;
        o->fromJsonObject(*ptr);
        auto objwrapper = new OAIQObjectWrapper<OAIBTModelFormatInfo*> (o);
        objwrapper->deleteLater();
        output->append(o);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit getDrawingTranslatorFormatsSignal(output);
    } else {
        emit getDrawingTranslatorFormatsSignalE(output, error_type, error_str);
        emit getDrawingTranslatorFormatsSignalEFull(worker, error_type, error_str);
    }
}


}
