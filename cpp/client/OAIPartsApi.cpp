/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * OpenAPI spec version: 1.111
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPartsApi.h"
#include "OAIHelpers.h"
#include "OAIModelFactory.h"
#include "OAIQObjectWrapper.h"

#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAIPartsApi::OAIPartsApi() {}

OAIPartsApi::~OAIPartsApi() {}

OAIPartsApi::OAIPartsApi(QString host, QString basePath) {
    this->host = host;
    this->basePath = basePath;
}

void
OAIPartsApi::exportPS(QString* did, QString* wvm, QString* wvmid, QString* eid, QString* partid, QString* version, QString* configuration, QString* link_document_id) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/api/parts/d/{did}/{wvm}/{wvmid}/e/{eid}/partid/{partid}/parasolid");

    QString didPathParam("{"); didPathParam.append("did").append("}");
    fullPath.replace(didPathParam, stringValue(did));
    QString wvmPathParam("{"); wvmPathParam.append("wvm").append("}");
    fullPath.replace(wvmPathParam, stringValue(wvm));
    QString wvmidPathParam("{"); wvmidPathParam.append("wvmid").append("}");
    fullPath.replace(wvmidPathParam, stringValue(wvmid));
    QString eidPathParam("{"); eidPathParam.append("eid").append("}");
    fullPath.replace(eidPathParam, stringValue(eid));
    QString partidPathParam("{"); partidPathParam.append("partid").append("}");
    fullPath.replace(partidPathParam, stringValue(partid));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("version"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(version)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("configuration"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(configuration)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("linkDocumentId"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(link_document_id)));


    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIPartsApi::exportPSCallback);

    worker->execute(&input);
}

void
OAIPartsApi::exportPSCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QString json(worker->response);
    OAIHttpRequestInputFileElement* output = static_cast<OAIHttpRequestInputFileElement*>(create(json, QString("OAIHttpRequestInputFileElement")));
    auto wrapper = new OAIQObjectWrapper<OAIHttpRequestInputFileElement*> (output);
    wrapper->deleteLater();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit exportPSSignal(output);
    } else {
        emit exportPSSignalE(output, error_type, error_str);
        emit exportPSSignalEFull(worker, error_type, error_str);
    }
}

void
OAIPartsApi::getBendTable(QString* did, QString* wvm, QString* wvmid, QString* eid, QString* partid, QString* link_document_id) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/api/parts/d/{did}/{wvm}/{wvmid}/e/{eid}/partid/{partid}/sheetmetal/bendtable");

    QString didPathParam("{"); didPathParam.append("did").append("}");
    fullPath.replace(didPathParam, stringValue(did));
    QString wvmPathParam("{"); wvmPathParam.append("wvm").append("}");
    fullPath.replace(wvmPathParam, stringValue(wvm));
    QString wvmidPathParam("{"); wvmidPathParam.append("wvmid").append("}");
    fullPath.replace(wvmidPathParam, stringValue(wvmid));
    QString eidPathParam("{"); eidPathParam.append("eid").append("}");
    fullPath.replace(eidPathParam, stringValue(eid));
    QString partidPathParam("{"); partidPathParam.append("partid").append("}");
    fullPath.replace(partidPathParam, stringValue(partid));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("linkDocumentId"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(link_document_id)));


    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIPartsApi::getBendTableCallback);

    worker->execute(&input);
}

void
OAIPartsApi::getBendTableCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QString json(worker->response);
    OAIBTTableResponse-1546* output = static_cast<OAIBTTableResponse-1546*>(create(json, QString("OAIBTTableResponse-1546")));
    auto wrapper = new OAIQObjectWrapper<OAIBTTableResponse-1546*> (output);
    wrapper->deleteLater();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit getBendTableSignal(output);
    } else {
        emit getBendTableSignalE(output, error_type, error_str);
        emit getBendTableSignalEFull(worker, error_type, error_str);
    }
}

void
OAIPartsApi::getBodyDetails(QString* did, QString* wvm, QString* wvmid, QString* eid, QString* partid, QString* configuration, QString* link_document_id) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/api/parts/d/{did}/{wvm}/{wvmid}/e/{eid}/partid/{partid}/bodydetails");

    QString didPathParam("{"); didPathParam.append("did").append("}");
    fullPath.replace(didPathParam, stringValue(did));
    QString wvmPathParam("{"); wvmPathParam.append("wvm").append("}");
    fullPath.replace(wvmPathParam, stringValue(wvm));
    QString wvmidPathParam("{"); wvmidPathParam.append("wvmid").append("}");
    fullPath.replace(wvmidPathParam, stringValue(wvmid));
    QString eidPathParam("{"); eidPathParam.append("eid").append("}");
    fullPath.replace(eidPathParam, stringValue(eid));
    QString partidPathParam("{"); partidPathParam.append("partid").append("}");
    fullPath.replace(partidPathParam, stringValue(partid));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("configuration"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(configuration)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("linkDocumentId"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(link_document_id)));


    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIPartsApi::getBodyDetailsCallback);

    worker->execute(&input);
}

void
OAIPartsApi::getBodyDetailsCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QString json(worker->response);
    OAIBTExportModelBodiesResponse-734* output = static_cast<OAIBTExportModelBodiesResponse-734*>(create(json, QString("OAIBTExportModelBodiesResponse-734")));
    auto wrapper = new OAIQObjectWrapper<OAIBTExportModelBodiesResponse-734*> (output);
    wrapper->deleteLater();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit getBodyDetailsSignal(output);
    } else {
        emit getBodyDetailsSignalE(output, error_type, error_str);
        emit getBodyDetailsSignalEFull(worker, error_type, error_str);
    }
}

void
OAIPartsApi::getBoundingBoxes(QString* did, QString* wvm, QString* wvmid, QString* eid, QString* partid, bool include_hidden, QString* configuration, QString* link_document_id) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/api/parts/d/{did}/{wvm}/{wvmid}/e/{eid}/partid/{partid}/boundingboxes");

    QString didPathParam("{"); didPathParam.append("did").append("}");
    fullPath.replace(didPathParam, stringValue(did));
    QString wvmPathParam("{"); wvmPathParam.append("wvm").append("}");
    fullPath.replace(wvmPathParam, stringValue(wvm));
    QString wvmidPathParam("{"); wvmidPathParam.append("wvmid").append("}");
    fullPath.replace(wvmidPathParam, stringValue(wvmid));
    QString eidPathParam("{"); eidPathParam.append("eid").append("}");
    fullPath.replace(eidPathParam, stringValue(eid));
    QString partidPathParam("{"); partidPathParam.append("partid").append("}");
    fullPath.replace(partidPathParam, stringValue(partid));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("includeHidden"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(include_hidden)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("configuration"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(configuration)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("linkDocumentId"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(link_document_id)));


    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIPartsApi::getBoundingBoxesCallback);

    worker->execute(&input);
}

void
OAIPartsApi::getBoundingBoxesCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QString json(worker->response);
    OAIBTBoundingBoxInfo* output = static_cast<OAIBTBoundingBoxInfo*>(create(json, QString("OAIBTBoundingBoxInfo")));
    auto wrapper = new OAIQObjectWrapper<OAIBTBoundingBoxInfo*> (output);
    wrapper->deleteLater();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit getBoundingBoxesSignal(output);
    } else {
        emit getBoundingBoxesSignalE(output, error_type, error_str);
        emit getBoundingBoxesSignalEFull(worker, error_type, error_str);
    }
}

void
OAIPartsApi::getEdges(QString* did, QString* wvm, QString* wvmid, QString* eid, QString* partid, double angle_tolerance, double chord_tolerance, QList<QString*>* edge_id, QString* configuration, QString* link_document_id, QString*& body) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/api/parts/d/{did}/{wvm}/{wvmid}/e/{eid}/partid/{partid}/tessellatededges");

    QString didPathParam("{"); didPathParam.append("did").append("}");
    fullPath.replace(didPathParam, stringValue(did));
    QString wvmPathParam("{"); wvmPathParam.append("wvm").append("}");
    fullPath.replace(wvmPathParam, stringValue(wvm));
    QString wvmidPathParam("{"); wvmidPathParam.append("wvmid").append("}");
    fullPath.replace(wvmidPathParam, stringValue(wvmid));
    QString eidPathParam("{"); eidPathParam.append("eid").append("}");
    fullPath.replace(eidPathParam, stringValue(eid));
    QString partidPathParam("{"); partidPathParam.append("partid").append("}");
    fullPath.replace(partidPathParam, stringValue(partid));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("angleTolerance"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(angle_tolerance)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("chordTolerance"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(chord_tolerance)));



    if (edge_id->size() > 0) {
      if (QString("multi").indexOf("multi") == 0) {
        foreach(QString* t, *edge_id) {
          if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
          else
            fullPath.append("?");
          fullPath.append("edgeId=").append(stringValue(t));
        }
      }
      else if (QString("multi").indexOf("ssv") == 0) {
        if (fullPath.indexOf("?") > 0)
          fullPath.append("&");
        else
          fullPath.append("?");
        fullPath.append("edgeId=");
        qint32 count = 0;
        foreach(QString* t, *edge_id) {
          if (count > 0) {
            fullPath.append(" ");
          }
          fullPath.append(stringValue(t));
        }
      }
      else if (QString("multi").indexOf("tsv") == 0) {
        if (fullPath.indexOf("?") > 0)
          fullPath.append("&");
        else
          fullPath.append("?");
        fullPath.append("edgeId=");
        qint32 count = 0;
        foreach(QString* t, *edge_id) {
          if (count > 0) {
            fullPath.append("\t");
          }
          fullPath.append(stringValue(t));
        }
      }
    }

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("configuration"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(configuration)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("linkDocumentId"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(link_document_id)));


    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");


    
    QString output(*body);
    input.request_body.append(output);
    


    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIPartsApi::getEdgesCallback);

    worker->execute(&input);
}

void
OAIPartsApi::getEdgesCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QString json(worker->response);
    OAIBTExportTessellatedEdgesResponse-327* output = static_cast<OAIBTExportTessellatedEdgesResponse-327*>(create(json, QString("OAIBTExportTessellatedEdgesResponse-327")));
    auto wrapper = new OAIQObjectWrapper<OAIBTExportTessellatedEdgesResponse-327*> (output);
    wrapper->deleteLater();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit getEdgesSignal(output);
    } else {
        emit getEdgesSignalE(output, error_type, error_str);
        emit getEdgesSignalEFull(worker, error_type, error_str);
    }
}

void
OAIPartsApi::getFaces1(QString* did, QString* wvm, QString* wvmid, QString* eid, QString* partid, double angle_tolerance, double chord_tolerance, double max_facet_width, bool output_vertex_normals, bool output_facet_normals, bool output_texture_coordinates, bool output_face_appearances, bool output_index_table, QList<QString*>* face_id, QString* configuration, bool output_error_faces, QString* link_document_id, QString*& body) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/api/parts/d/{did}/{wvm}/{wvmid}/e/{eid}/partid/{partid}/tessellatedfaces");

    QString didPathParam("{"); didPathParam.append("did").append("}");
    fullPath.replace(didPathParam, stringValue(did));
    QString wvmPathParam("{"); wvmPathParam.append("wvm").append("}");
    fullPath.replace(wvmPathParam, stringValue(wvm));
    QString wvmidPathParam("{"); wvmidPathParam.append("wvmid").append("}");
    fullPath.replace(wvmidPathParam, stringValue(wvmid));
    QString eidPathParam("{"); eidPathParam.append("eid").append("}");
    fullPath.replace(eidPathParam, stringValue(eid));
    QString partidPathParam("{"); partidPathParam.append("partid").append("}");
    fullPath.replace(partidPathParam, stringValue(partid));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("angleTolerance"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(angle_tolerance)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("chordTolerance"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(chord_tolerance)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("maxFacetWidth"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(max_facet_width)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("outputVertexNormals"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(output_vertex_normals)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("outputFacetNormals"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(output_facet_normals)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("outputTextureCoordinates"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(output_texture_coordinates)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("outputFaceAppearances"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(output_face_appearances)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("outputIndexTable"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(output_index_table)));



    if (face_id->size() > 0) {
      if (QString("multi").indexOf("multi") == 0) {
        foreach(QString* t, *face_id) {
          if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
          else
            fullPath.append("?");
          fullPath.append("faceId=").append(stringValue(t));
        }
      }
      else if (QString("multi").indexOf("ssv") == 0) {
        if (fullPath.indexOf("?") > 0)
          fullPath.append("&");
        else
          fullPath.append("?");
        fullPath.append("faceId=");
        qint32 count = 0;
        foreach(QString* t, *face_id) {
          if (count > 0) {
            fullPath.append(" ");
          }
          fullPath.append(stringValue(t));
        }
      }
      else if (QString("multi").indexOf("tsv") == 0) {
        if (fullPath.indexOf("?") > 0)
          fullPath.append("&");
        else
          fullPath.append("?");
        fullPath.append("faceId=");
        qint32 count = 0;
        foreach(QString* t, *face_id) {
          if (count > 0) {
            fullPath.append("\t");
          }
          fullPath.append(stringValue(t));
        }
      }
    }

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("configuration"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(configuration)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("outputErrorFaces"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(output_error_faces)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("linkDocumentId"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(link_document_id)));


    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");


    
    QString output(*body);
    input.request_body.append(output);
    


    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIPartsApi::getFaces1Callback);

    worker->execute(&input);
}

void
OAIPartsApi::getFaces1Callback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QString json(worker->response);
    OAIBTExportTessellatedFacesResponse-898* output = static_cast<OAIBTExportTessellatedFacesResponse-898*>(create(json, QString("OAIBTExportTessellatedFacesResponse-898")));
    auto wrapper = new OAIQObjectWrapper<OAIBTExportTessellatedFacesResponse-898*> (output);
    wrapper->deleteLater();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit getFaces1Signal(output);
    } else {
        emit getFaces1SignalE(output, error_type, error_str);
        emit getFaces1SignalEFull(worker, error_type, error_str);
    }
}

void
OAIPartsApi::getMassProperties(QString* did, QString* wvm, QString* wvmid, QString* eid, QString* partid, bool infer_metadata_owner, QString* link_document_id, QString* configuration) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/api/parts/d/{did}/{wvm}/{wvmid}/e/{eid}/partid/{partid}/massproperties");

    QString didPathParam("{"); didPathParam.append("did").append("}");
    fullPath.replace(didPathParam, stringValue(did));
    QString wvmPathParam("{"); wvmPathParam.append("wvm").append("}");
    fullPath.replace(wvmPathParam, stringValue(wvm));
    QString wvmidPathParam("{"); wvmidPathParam.append("wvmid").append("}");
    fullPath.replace(wvmidPathParam, stringValue(wvmid));
    QString eidPathParam("{"); eidPathParam.append("eid").append("}");
    fullPath.replace(eidPathParam, stringValue(eid));
    QString partidPathParam("{"); partidPathParam.append("partid").append("}");
    fullPath.replace(partidPathParam, stringValue(partid));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("inferMetadataOwner"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(infer_metadata_owner)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("linkDocumentId"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(link_document_id)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("configuration"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(configuration)));


    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIPartsApi::getMassPropertiesCallback);

    worker->execute(&input);
}

void
OAIPartsApi::getMassPropertiesCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QString json(worker->response);
    OAIBTMassPropertiesBulkInfo* output = static_cast<OAIBTMassPropertiesBulkInfo*>(create(json, QString("OAIBTMassPropertiesBulkInfo")));
    auto wrapper = new OAIQObjectWrapper<OAIBTMassPropertiesBulkInfo*> (output);
    wrapper->deleteLater();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit getMassPropertiesSignal(output);
    } else {
        emit getMassPropertiesSignalE(output, error_type, error_str);
        emit getMassPropertiesSignalEFull(worker, error_type, error_str);
    }
}

void
OAIPartsApi::getPartMetadata(QString* did, QString* wvm, QString* wvmid, QString* eid, QString* partid, bool infer_metadata_owner, bool include_property_defaults, bool friendly_user_ids, QString* configuration, QString* link_document_id) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/api/parts/d/{did}/{wvm}/{wvmid}/e/{eid}/partid/{partid}/metadata");

    QString didPathParam("{"); didPathParam.append("did").append("}");
    fullPath.replace(didPathParam, stringValue(did));
    QString wvmPathParam("{"); wvmPathParam.append("wvm").append("}");
    fullPath.replace(wvmPathParam, stringValue(wvm));
    QString wvmidPathParam("{"); wvmidPathParam.append("wvmid").append("}");
    fullPath.replace(wvmidPathParam, stringValue(wvmid));
    QString eidPathParam("{"); eidPathParam.append("eid").append("}");
    fullPath.replace(eidPathParam, stringValue(eid));
    QString partidPathParam("{"); partidPathParam.append("partid").append("}");
    fullPath.replace(partidPathParam, stringValue(partid));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("inferMetadataOwner"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(infer_metadata_owner)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("includePropertyDefaults"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(include_property_defaults)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("friendlyUserIds"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(friendly_user_ids)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("configuration"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(configuration)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("linkDocumentId"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(link_document_id)));


    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIPartsApi::getPartMetadataCallback);

    worker->execute(&input);
}

void
OAIPartsApi::getPartMetadataCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QString json(worker->response);
    OAIBTPartMetadataInfo* output = static_cast<OAIBTPartMetadataInfo*>(create(json, QString("OAIBTPartMetadataInfo")));
    auto wrapper = new OAIQObjectWrapper<OAIBTPartMetadataInfo*> (output);
    wrapper->deleteLater();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit getPartMetadataSignal(output);
    } else {
        emit getPartMetadataSignalE(output, error_type, error_str);
        emit getPartMetadataSignalEFull(worker, error_type, error_str);
    }
}

void
OAIPartsApi::getPartsWMV(QString* did, QString* wvm, QString* wvmid, QString* element_id, bool with_thumbnails, bool include_property_defaults, QString* link_document_id, QString* configuration) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/api/parts/d/{did}/{wvm}/{wvmid}");

    QString didPathParam("{"); didPathParam.append("did").append("}");
    fullPath.replace(didPathParam, stringValue(did));
    QString wvmPathParam("{"); wvmPathParam.append("wvm").append("}");
    fullPath.replace(wvmPathParam, stringValue(wvm));
    QString wvmidPathParam("{"); wvmidPathParam.append("wvmid").append("}");
    fullPath.replace(wvmidPathParam, stringValue(wvmid));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("elementId"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(element_id)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("withThumbnails"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(with_thumbnails)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("includePropertyDefaults"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(include_property_defaults)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("linkDocumentId"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(link_document_id)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("configuration"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(configuration)));


    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIPartsApi::getPartsWMVCallback);

    worker->execute(&input);
}

void
OAIPartsApi::getPartsWMVCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QList<OAIBTPartMetadataInfo*>* output = new QList<OAIBTPartMetadataInfo*>();
    QString json(worker->response);
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    auto wrapper = new OAIQObjectWrapper<QList<OAIBTPartMetadataInfo*>*> (output);
    wrapper->deleteLater();
    foreach(QJsonValue obj, jsonArray) {
        OAIBTPartMetadataInfo* o = new OAIBTPartMetadataInfo();
        QJsonObject jv = obj.toObject();
        QJsonObject * ptr = (QJsonObject*)&jv;
        o->fromJsonObject(*ptr);
        auto objwrapper = new OAIQObjectWrapper<OAIBTPartMetadataInfo*> (o);
        objwrapper->deleteLater();
        output->append(o);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit getPartsWMVSignal(output);
    } else {
        emit getPartsWMVSignalE(output, error_type, error_str);
        emit getPartsWMVSignalEFull(worker, error_type, error_str);
    }
}

void
OAIPartsApi::getPartsWMVE(QString* did, QString* wvm, QString* wvmid, QString* eid, bool with_thumbnails, bool include_property_defaults, QString* configuration, QString* link_document_id) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/api/parts/d/{did}/{wvm}/{wvmid}/e/{eid}");

    QString didPathParam("{"); didPathParam.append("did").append("}");
    fullPath.replace(didPathParam, stringValue(did));
    QString wvmPathParam("{"); wvmPathParam.append("wvm").append("}");
    fullPath.replace(wvmPathParam, stringValue(wvm));
    QString wvmidPathParam("{"); wvmidPathParam.append("wvmid").append("}");
    fullPath.replace(wvmidPathParam, stringValue(wvmid));
    QString eidPathParam("{"); eidPathParam.append("eid").append("}");
    fullPath.replace(eidPathParam, stringValue(eid));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("withThumbnails"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(with_thumbnails)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("includePropertyDefaults"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(include_property_defaults)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("configuration"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(configuration)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("linkDocumentId"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(link_document_id)));


    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIPartsApi::getPartsWMVECallback);

    worker->execute(&input);
}

void
OAIPartsApi::getPartsWMVECallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QList<OAIBTPartMetadataInfo*>* output = new QList<OAIBTPartMetadataInfo*>();
    QString json(worker->response);
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    auto wrapper = new OAIQObjectWrapper<QList<OAIBTPartMetadataInfo*>*> (output);
    wrapper->deleteLater();
    foreach(QJsonValue obj, jsonArray) {
        OAIBTPartMetadataInfo* o = new OAIBTPartMetadataInfo();
        QJsonObject jv = obj.toObject();
        QJsonObject * ptr = (QJsonObject*)&jv;
        o->fromJsonObject(*ptr);
        auto objwrapper = new OAIQObjectWrapper<OAIBTPartMetadataInfo*> (o);
        objwrapper->deleteLater();
        output->append(o);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit getPartsWMVESignal(output);
    } else {
        emit getPartsWMVESignalE(output, error_type, error_str);
        emit getPartsWMVESignalEFull(worker, error_type, error_str);
    }
}

void
OAIPartsApi::getShadedViews1(QString* did, QString* wvm, QString* wvmid, QString* eid, QString* partid, QString* view_matrix, qint32 output_height, qint32 output_width, double pixel_size, QString* edges, bool use_anti_aliasing, QString* configuration, QString* link_document_id) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/api/parts/d/{did}/{wvm}/{wvmid}/e/{eid}/partid/{partid}/shadedviews");

    QString didPathParam("{"); didPathParam.append("did").append("}");
    fullPath.replace(didPathParam, stringValue(did));
    QString wvmPathParam("{"); wvmPathParam.append("wvm").append("}");
    fullPath.replace(wvmPathParam, stringValue(wvm));
    QString wvmidPathParam("{"); wvmidPathParam.append("wvmid").append("}");
    fullPath.replace(wvmidPathParam, stringValue(wvmid));
    QString eidPathParam("{"); eidPathParam.append("eid").append("}");
    fullPath.replace(eidPathParam, stringValue(eid));
    QString partidPathParam("{"); partidPathParam.append("partid").append("}");
    fullPath.replace(partidPathParam, stringValue(partid));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("viewMatrix"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(view_matrix)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("outputHeight"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(output_height)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("outputWidth"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(output_width)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("pixelSize"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(pixel_size)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("edges"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(edges)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("useAntiAliasing"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(use_anti_aliasing)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("configuration"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(configuration)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("linkDocumentId"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(link_document_id)));


    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIPartsApi::getShadedViews1Callback);

    worker->execute(&input);
}

void
OAIPartsApi::getShadedViews1Callback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QString json(worker->response);
    OAIBTShadedViewsInfo* output = static_cast<OAIBTShadedViewsInfo*>(create(json, QString("OAIBTShadedViewsInfo")));
    auto wrapper = new OAIQObjectWrapper<OAIBTShadedViewsInfo*> (output);
    wrapper->deleteLater();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit getShadedViews1Signal(output);
    } else {
        emit getShadedViews1SignalE(output, error_type, error_str);
        emit getShadedViews1SignalEFull(worker, error_type, error_str);
    }
}

void
OAIPartsApi::getStandardContentPartMetadata(QString* did, QString* vid, QString* eid, QString* otype, QString* oid, QString* partid, bool include_property_defaults, QString* configuration, QString* link_document_id) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/api/parts/standardcontent/d/{did}/v/{vid}/e/{eid}/{otype}/{oid}/partid/{partid}/metadata");

    QString didPathParam("{"); didPathParam.append("did").append("}");
    fullPath.replace(didPathParam, stringValue(did));
    QString vidPathParam("{"); vidPathParam.append("vid").append("}");
    fullPath.replace(vidPathParam, stringValue(vid));
    QString eidPathParam("{"); eidPathParam.append("eid").append("}");
    fullPath.replace(eidPathParam, stringValue(eid));
    QString otypePathParam("{"); otypePathParam.append("otype").append("}");
    fullPath.replace(otypePathParam, stringValue(otype));
    QString oidPathParam("{"); oidPathParam.append("oid").append("}");
    fullPath.replace(oidPathParam, stringValue(oid));
    QString partidPathParam("{"); partidPathParam.append("partid").append("}");
    fullPath.replace(partidPathParam, stringValue(partid));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("includePropertyDefaults"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(include_property_defaults)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("configuration"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(configuration)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("linkDocumentId"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(link_document_id)));


    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIPartsApi::getStandardContentPartMetadataCallback);

    worker->execute(&input);
}

void
OAIPartsApi::getStandardContentPartMetadataCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QString json(worker->response);
    OAIBTPartMetadataInfo* output = static_cast<OAIBTPartMetadataInfo*>(create(json, QString("OAIBTPartMetadataInfo")));
    auto wrapper = new OAIQObjectWrapper<OAIBTPartMetadataInfo*> (output);
    wrapper->deleteLater();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit getStandardContentPartMetadataSignal(output);
    } else {
        emit getStandardContentPartMetadataSignalE(output, error_type, error_str);
        emit getStandardContentPartMetadataSignalEFull(worker, error_type, error_str);
    }
}

void
OAIPartsApi::updatePartMetadata(QString* did, QString* wvm, QString* wvmid, QString* eid, QString* partid, QString*& body) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/api/parts/d/{did}/{wvm}/{wvmid}/e/{eid}/partid/{partid}/metadata");

    QString didPathParam("{"); didPathParam.append("did").append("}");
    fullPath.replace(didPathParam, stringValue(did));
    QString wvmPathParam("{"); wvmPathParam.append("wvm").append("}");
    fullPath.replace(wvmPathParam, stringValue(wvm));
    QString wvmidPathParam("{"); wvmidPathParam.append("wvmid").append("}");
    fullPath.replace(wvmidPathParam, stringValue(wvmid));
    QString eidPathParam("{"); eidPathParam.append("eid").append("}");
    fullPath.replace(eidPathParam, stringValue(eid));
    QString partidPathParam("{"); partidPathParam.append("partid").append("}");
    fullPath.replace(partidPathParam, stringValue(partid));


    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "POST");


    
    QString output(*body);
    input.request_body.append(output);
    


    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIPartsApi::updatePartMetadataCallback);

    worker->execute(&input);
}

void
OAIPartsApi::updatePartMetadataCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QString json(worker->response);
    OAIBTPartMetadataInfo* output = static_cast<OAIBTPartMetadataInfo*>(create(json, QString("OAIBTPartMetadataInfo")));
    auto wrapper = new OAIQObjectWrapper<OAIBTPartMetadataInfo*> (output);
    wrapper->deleteLater();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit updatePartMetadataSignal(output);
    } else {
        emit updatePartMetadataSignalE(output, error_type, error_str);
        emit updatePartMetadataSignalEFull(worker, error_type, error_str);
    }
}

void
OAIPartsApi::updateStandardContentPartMetadata(QString* did, QString* vid, QString* eid, QString* otype, QString* oid, QString* partid, QString* link_document_id, bool include_property_defaults, OAIBTWorkspacePartParams& oaibt_workspace_part_params) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/api/parts/standardcontent/d/{did}/v/{vid}/e/{eid}/{otype}/{oid}/partid/{partid}/metadata");

    QString didPathParam("{"); didPathParam.append("did").append("}");
    fullPath.replace(didPathParam, stringValue(did));
    QString vidPathParam("{"); vidPathParam.append("vid").append("}");
    fullPath.replace(vidPathParam, stringValue(vid));
    QString eidPathParam("{"); eidPathParam.append("eid").append("}");
    fullPath.replace(eidPathParam, stringValue(eid));
    QString otypePathParam("{"); otypePathParam.append("otype").append("}");
    fullPath.replace(otypePathParam, stringValue(otype));
    QString oidPathParam("{"); oidPathParam.append("oid").append("}");
    fullPath.replace(oidPathParam, stringValue(oid));
    QString partidPathParam("{"); partidPathParam.append("partid").append("}");
    fullPath.replace(partidPathParam, stringValue(partid));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("linkDocumentId"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(link_document_id)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("includePropertyDefaults"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(include_property_defaults)));


    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "POST");


    
    QString output = oaibt_workspace_part_params.asJson();
    input.request_body.append(output);
    


    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIPartsApi::updateStandardContentPartMetadataCallback);

    worker->execute(&input);
}

void
OAIPartsApi::updateStandardContentPartMetadataCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QString json(worker->response);
    OAIBTPartMetadataInfo* output = static_cast<OAIBTPartMetadataInfo*>(create(json, QString("OAIBTPartMetadataInfo")));
    auto wrapper = new OAIQObjectWrapper<OAIBTPartMetadataInfo*> (output);
    wrapper->deleteLater();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit updateStandardContentPartMetadataSignal(output);
    } else {
        emit updateStandardContentPartMetadataSignalE(output, error_type, error_str);
        emit updateStandardContentPartMetadataSignalEFull(worker, error_type, error_str);
    }
}


}
