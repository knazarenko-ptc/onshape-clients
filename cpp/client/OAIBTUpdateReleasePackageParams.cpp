/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * OpenAPI spec version: 1.111
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIBTUpdateReleasePackageParams.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIBTUpdateReleasePackageParams::OAIBTUpdateReleasePackageParams(QString json) {
    init();
    this->fromJson(json);
}

OAIBTUpdateReleasePackageParams::OAIBTUpdateReleasePackageParams() {
    init();
}

OAIBTUpdateReleasePackageParams::~OAIBTUpdateReleasePackageParams() {
    this->cleanup();
}

void
OAIBTUpdateReleasePackageParams::init() {
    empty = false;
    m_empty_isSet = false;
    item_ids = new QList<QString*>();
    m_item_ids_isSet = false;
    items = new QList<OAIBTReleasePackageItemParams*>();
    m_items_isSet = false;
    properties = new QList<OAIBTPropertyValueParam*>();
    m_properties_isSet = false;
}

void
OAIBTUpdateReleasePackageParams::cleanup() {

    if(item_ids != nullptr) { 
        auto arr = item_ids;
        for(auto o: *arr) { 
            delete o;
        }
        delete item_ids;
    }
    if(items != nullptr) { 
        auto arr = items;
        for(auto o: *arr) { 
            delete o;
        }
        delete items;
    }
    if(properties != nullptr) { 
        auto arr = properties;
        for(auto o: *arr) { 
            delete o;
        }
        delete properties;
    }
}

OAIBTUpdateReleasePackageParams*
OAIBTUpdateReleasePackageParams::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIBTUpdateReleasePackageParams::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&empty, pJson["empty"], "bool", "");
    
    
    ::OpenAPI::setValue(&item_ids, pJson["itemIds"], "QList", "QString");
    
    ::OpenAPI::setValue(&items, pJson["items"], "QList", "OAIBTReleasePackageItemParams");
    
    ::OpenAPI::setValue(&properties, pJson["properties"], "QList", "OAIBTPropertyValueParam");
}

QString
OAIBTUpdateReleasePackageParams::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIBTUpdateReleasePackageParams::asJsonObject() {
    QJsonObject obj;
    if(m_empty_isSet){
        obj.insert("empty", QJsonValue(empty));
    }
    if(item_ids->size() > 0){
        toJsonArray((QList<void*>*)item_ids, obj, "itemIds", "QString");
    }
    if(items->size() > 0){
        toJsonArray((QList<void*>*)items, obj, "items", "OAIBTReleasePackageItemParams");
    }
    if(properties->size() > 0){
        toJsonArray((QList<void*>*)properties, obj, "properties", "OAIBTPropertyValueParam");
    }

    return obj;
}

bool
OAIBTUpdateReleasePackageParams::isEmpty() {
    return empty;
}
void
OAIBTUpdateReleasePackageParams::setEmpty(bool empty) {
    this->empty = empty;
    this->m_empty_isSet = true;
}

QList<QString*>*
OAIBTUpdateReleasePackageParams::getItemIds() {
    return item_ids;
}
void
OAIBTUpdateReleasePackageParams::setItemIds(QList<QString*>* item_ids) {
    this->item_ids = item_ids;
    this->m_item_ids_isSet = true;
}

QList<OAIBTReleasePackageItemParams*>*
OAIBTUpdateReleasePackageParams::getItems() {
    return items;
}
void
OAIBTUpdateReleasePackageParams::setItems(QList<OAIBTReleasePackageItemParams*>* items) {
    this->items = items;
    this->m_items_isSet = true;
}

QList<OAIBTPropertyValueParam*>*
OAIBTUpdateReleasePackageParams::getProperties() {
    return properties;
}
void
OAIBTUpdateReleasePackageParams::setProperties(QList<OAIBTPropertyValueParam*>* properties) {
    this->properties = properties;
    this->m_properties_isSet = true;
}


bool
OAIBTUpdateReleasePackageParams::isSet(){
    bool isObjectUpdated = false;
    do{
        if(m_empty_isSet){ isObjectUpdated = true; break;}
        if(item_ids->size() > 0){ isObjectUpdated = true; break;}
        if(items->size() > 0){ isObjectUpdated = true; break;}
        if(properties->size() > 0){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

