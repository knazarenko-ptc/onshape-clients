/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * OpenAPI spec version: 1.111
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIBTShareParams.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIBTShareParams::OAIBTShareParams(QString json) {
    init();
    this->fromJson(json);
}

OAIBTShareParams::OAIBTShareParams() {
    init();
}

OAIBTShareParams::~OAIBTShareParams() {
    this->cleanup();
}

void
OAIBTShareParams::init() {
    document_id = new QString("");
    m_document_id_isSet = false;
    element_id = new QString("");
    m_element_id_isSet = false;
    encoded_configuration = new QString("");
    m_encoded_configuration_isSet = false;
    entries = new QList<OAIBTShareEntryParams*>();
    m_entries_isSet = false;
    folder_id = new QString("");
    m_folder_id_isSet = false;
    message = new QString("");
    m_message_isSet = false;
    permission = 0L;
    m_permission_isSet = false;
    permission_set = new OAIBTPermissionSet();
    m_permission_set_isSet = false;
    update = false;
    m_update_isSet = false;
    workspace_id = new QString("");
    m_workspace_id_isSet = false;
}

void
OAIBTShareParams::cleanup() {
    if(document_id != nullptr) { 
        delete document_id;
    }
    if(element_id != nullptr) { 
        delete element_id;
    }
    if(encoded_configuration != nullptr) { 
        delete encoded_configuration;
    }
    if(entries != nullptr) { 
        auto arr = entries;
        for(auto o: *arr) { 
            delete o;
        }
        delete entries;
    }
    if(folder_id != nullptr) { 
        delete folder_id;
    }
    if(message != nullptr) { 
        delete message;
    }

    if(permission_set != nullptr) { 
        delete permission_set;
    }

    if(workspace_id != nullptr) { 
        delete workspace_id;
    }
}

OAIBTShareParams*
OAIBTShareParams::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIBTShareParams::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&document_id, pJson["documentId"], "QString", "QString");
    
    ::OpenAPI::setValue(&element_id, pJson["elementId"], "QString", "QString");
    
    ::OpenAPI::setValue(&encoded_configuration, pJson["encodedConfiguration"], "QString", "QString");
    
    
    ::OpenAPI::setValue(&entries, pJson["entries"], "QList", "OAIBTShareEntryParams");
    ::OpenAPI::setValue(&folder_id, pJson["folderId"], "QString", "QString");
    
    ::OpenAPI::setValue(&message, pJson["message"], "QString", "QString");
    
    ::OpenAPI::setValue(&permission, pJson["permission"], "qint64", "");
    
    ::OpenAPI::setValue(&permission_set, pJson["permissionSet"], "OAIBTPermissionSet", "OAIBTPermissionSet");
    
    ::OpenAPI::setValue(&update, pJson["update"], "bool", "");
    
    ::OpenAPI::setValue(&workspace_id, pJson["workspaceId"], "QString", "QString");
    
}

QString
OAIBTShareParams::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIBTShareParams::asJsonObject() {
    QJsonObject obj;
    if(document_id != nullptr && *document_id != QString("")){
        toJsonValue(QString("documentId"), document_id, obj, QString("QString"));
    }
    if(element_id != nullptr && *element_id != QString("")){
        toJsonValue(QString("elementId"), element_id, obj, QString("QString"));
    }
    if(encoded_configuration != nullptr && *encoded_configuration != QString("")){
        toJsonValue(QString("encodedConfiguration"), encoded_configuration, obj, QString("QString"));
    }
    if(entries->size() > 0){
        toJsonArray((QList<void*>*)entries, obj, "entries", "OAIBTShareEntryParams");
    }
    if(folder_id != nullptr && *folder_id != QString("")){
        toJsonValue(QString("folderId"), folder_id, obj, QString("QString"));
    }
    if(message != nullptr && *message != QString("")){
        toJsonValue(QString("message"), message, obj, QString("QString"));
    }
    if(m_permission_isSet){
        obj.insert("permission", QJsonValue(permission));
    }
    if((permission_set != nullptr) && (permission_set->isSet())){
        toJsonValue(QString("permissionSet"), permission_set, obj, QString("OAIBTPermissionSet"));
    }
    if(m_update_isSet){
        obj.insert("update", QJsonValue(update));
    }
    if(workspace_id != nullptr && *workspace_id != QString("")){
        toJsonValue(QString("workspaceId"), workspace_id, obj, QString("QString"));
    }

    return obj;
}

QString*
OAIBTShareParams::getDocumentId() {
    return document_id;
}
void
OAIBTShareParams::setDocumentId(QString* document_id) {
    this->document_id = document_id;
    this->m_document_id_isSet = true;
}

QString*
OAIBTShareParams::getElementId() {
    return element_id;
}
void
OAIBTShareParams::setElementId(QString* element_id) {
    this->element_id = element_id;
    this->m_element_id_isSet = true;
}

QString*
OAIBTShareParams::getEncodedConfiguration() {
    return encoded_configuration;
}
void
OAIBTShareParams::setEncodedConfiguration(QString* encoded_configuration) {
    this->encoded_configuration = encoded_configuration;
    this->m_encoded_configuration_isSet = true;
}

QList<OAIBTShareEntryParams*>*
OAIBTShareParams::getEntries() {
    return entries;
}
void
OAIBTShareParams::setEntries(QList<OAIBTShareEntryParams*>* entries) {
    this->entries = entries;
    this->m_entries_isSet = true;
}

QString*
OAIBTShareParams::getFolderId() {
    return folder_id;
}
void
OAIBTShareParams::setFolderId(QString* folder_id) {
    this->folder_id = folder_id;
    this->m_folder_id_isSet = true;
}

QString*
OAIBTShareParams::getMessage() {
    return message;
}
void
OAIBTShareParams::setMessage(QString* message) {
    this->message = message;
    this->m_message_isSet = true;
}

qint64
OAIBTShareParams::getPermission() {
    return permission;
}
void
OAIBTShareParams::setPermission(qint64 permission) {
    this->permission = permission;
    this->m_permission_isSet = true;
}

OAIBTPermissionSet*
OAIBTShareParams::getPermissionSet() {
    return permission_set;
}
void
OAIBTShareParams::setPermissionSet(OAIBTPermissionSet* permission_set) {
    this->permission_set = permission_set;
    this->m_permission_set_isSet = true;
}

bool
OAIBTShareParams::isUpdate() {
    return update;
}
void
OAIBTShareParams::setUpdate(bool update) {
    this->update = update;
    this->m_update_isSet = true;
}

QString*
OAIBTShareParams::getWorkspaceId() {
    return workspace_id;
}
void
OAIBTShareParams::setWorkspaceId(QString* workspace_id) {
    this->workspace_id = workspace_id;
    this->m_workspace_id_isSet = true;
}


bool
OAIBTShareParams::isSet(){
    bool isObjectUpdated = false;
    do{
        if(document_id != nullptr && *document_id != QString("")){ isObjectUpdated = true; break;}
        if(element_id != nullptr && *element_id != QString("")){ isObjectUpdated = true; break;}
        if(encoded_configuration != nullptr && *encoded_configuration != QString("")){ isObjectUpdated = true; break;}
        if(entries->size() > 0){ isObjectUpdated = true; break;}
        if(folder_id != nullptr && *folder_id != QString("")){ isObjectUpdated = true; break;}
        if(message != nullptr && *message != QString("")){ isObjectUpdated = true; break;}
        if(m_permission_isSet){ isObjectUpdated = true; break;}
        if(permission_set != nullptr && permission_set->isSet()){ isObjectUpdated = true; break;}
        if(m_update_isSet){ isObjectUpdated = true; break;}
        if(workspace_id != nullptr && *workspace_id != QString("")){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

