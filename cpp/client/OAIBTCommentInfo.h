/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * OpenAPI spec version: 1.111
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIBTCommentInfo.h
 *
 * 
 */

#ifndef OAIBTCommentInfo_H_
#define OAIBTCommentInfo_H_

#include <QJsonObject>


#include "OAIBTCommentAttachmentInfo.h"
#include "OAIBTUserSummaryInfo.h"
#include "OAIBTViewDataInfo.h"
#include <QDateTime>
#include <QList>
#include <QString>

#include "OAIObject.h"

namespace OpenAPI {

class OAIBTCommentInfo: public OAIObject {
public:
    OAIBTCommentInfo();
    OAIBTCommentInfo(QString json);
    ~OAIBTCommentInfo();
    void init();
    void cleanup();

    QString asJson () override;
    QJsonObject asJsonObject() override;
    void fromJsonObject(QJsonObject json) override;
    OAIBTCommentInfo* fromJson(QString jsonString) override;

    QList<QString*>* getAssemblyFeatures();
    void setAssemblyFeatures(QList<QString*>* assembly_features);

    QDateTime* getAssignedAt();
    void setAssignedAt(QDateTime* assigned_at);

    OAIBTUserSummaryInfo* getAssignee();
    void setAssignee(OAIBTUserSummaryInfo* assignee);

    OAIBTCommentAttachmentInfo* getAttachment();
    void setAttachment(OAIBTCommentAttachmentInfo* attachment);

    bool isCanDelete();
    void setCanDelete(bool can_delete);

    bool isCanResolveOrReopen();
    void setCanResolveOrReopen(bool can_resolve_or_reopen);

    QDateTime* getCreatedAt();
    void setCreatedAt(QDateTime* created_at);

    QString* getDocumentId();
    void setDocumentId(QString* document_id);

    QString* getElementFeature();
    void setElementFeature(QString* element_feature);

    QString* getElementId();
    void setElementId(QString* element_id);

    QList<QString*>* getElementOccurrences();
    void setElementOccurrences(QList<QString*>* element_occurrences);

    QString* getElementQuery();
    void setElementQuery(QString* element_query);

    QString* getHref();
    void setHref(QString* href);

    QString* getId();
    void setId(QString* id);

    QString* getMessage();
    void setMessage(QString* message);

    QString* getName();
    void setName(QString* name);

    QString* getParentId();
    void setParentId(QString* parent_id);

    QString* getReleasePackageId();
    void setReleasePackageId(QString* release_package_id);

    QDateTime* getReopenedAt();
    void setReopenedAt(QDateTime* reopened_at);

    OAIBTUserSummaryInfo* getReopenedBy();
    void setReopenedBy(OAIBTUserSummaryInfo* reopened_by);

    qint64 getReplyCount();
    void setReplyCount(qint64 reply_count);

    QDateTime* getResolvedAt();
    void setResolvedAt(QDateTime* resolved_at);

    OAIBTUserSummaryInfo* getResolvedBy();
    void setResolvedBy(OAIBTUserSummaryInfo* resolved_by);

    qint32 getState();
    void setState(qint32 state);

    OAIBTCommentAttachmentInfo* getThumbnail();
    void setThumbnail(OAIBTCommentAttachmentInfo* thumbnail);

    bool isTopLevel();
    void setTopLevel(bool top_level);

    OAIBTUserSummaryInfo* getUser();
    void setUser(OAIBTUserSummaryInfo* user);

    QString* getVersionId();
    void setVersionId(QString* version_id);

    OAIBTViewDataInfo* getViewData();
    void setViewData(OAIBTViewDataInfo* view_data);

    QString* getViewRef();
    void setViewRef(QString* view_ref);

    QString* getWorkspaceId();
    void setWorkspaceId(QString* workspace_id);


    virtual bool isSet() override;

private:
    QList<QString*>* assembly_features;
    bool m_assembly_features_isSet;

    QDateTime* assigned_at;
    bool m_assigned_at_isSet;

    OAIBTUserSummaryInfo* assignee;
    bool m_assignee_isSet;

    OAIBTCommentAttachmentInfo* attachment;
    bool m_attachment_isSet;

    bool can_delete;
    bool m_can_delete_isSet;

    bool can_resolve_or_reopen;
    bool m_can_resolve_or_reopen_isSet;

    QDateTime* created_at;
    bool m_created_at_isSet;

    QString* document_id;
    bool m_document_id_isSet;

    QString* element_feature;
    bool m_element_feature_isSet;

    QString* element_id;
    bool m_element_id_isSet;

    QList<QString*>* element_occurrences;
    bool m_element_occurrences_isSet;

    QString* element_query;
    bool m_element_query_isSet;

    QString* href;
    bool m_href_isSet;

    QString* id;
    bool m_id_isSet;

    QString* message;
    bool m_message_isSet;

    QString* name;
    bool m_name_isSet;

    QString* parent_id;
    bool m_parent_id_isSet;

    QString* release_package_id;
    bool m_release_package_id_isSet;

    QDateTime* reopened_at;
    bool m_reopened_at_isSet;

    OAIBTUserSummaryInfo* reopened_by;
    bool m_reopened_by_isSet;

    qint64 reply_count;
    bool m_reply_count_isSet;

    QDateTime* resolved_at;
    bool m_resolved_at_isSet;

    OAIBTUserSummaryInfo* resolved_by;
    bool m_resolved_by_isSet;

    qint32 state;
    bool m_state_isSet;

    OAIBTCommentAttachmentInfo* thumbnail;
    bool m_thumbnail_isSet;

    bool top_level;
    bool m_top_level_isSet;

    OAIBTUserSummaryInfo* user;
    bool m_user_isSet;

    QString* version_id;
    bool m_version_id_isSet;

    OAIBTViewDataInfo* view_data;
    bool m_view_data_isSet;

    QString* view_ref;
    bool m_view_ref_isSet;

    QString* workspace_id;
    bool m_workspace_id_isSet;

};

}

#endif /* OAIBTCommentInfo_H_ */
