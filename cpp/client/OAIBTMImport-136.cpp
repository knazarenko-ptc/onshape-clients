/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * OpenAPI spec version: 1.111
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIBTMImport-136.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIBTMImport-136::OAIBTMImport-136(QString json) {
    init();
    this->fromJson(json);
}

OAIBTMImport-136::OAIBTMImport-136() {
    init();
}

OAIBTMImport-136::~OAIBTMImport-136() {
    this->cleanup();
}

void
OAIBTMImport-136::init() {
    bt_type = new QString("");
    m_bt_type_isSet = false;
    element_import = false;
    m_element_import_isSet = false;
    import_microversion = new QString("");
    m_import_microversion_isSet = false;
    imported_external_document_id = new QString("");
    m_imported_external_document_id_isSet = false;
    _namespace = new QString("");
    m__namespace_isSet = false;
    node_id = new QString("");
    m_node_id_isSet = false;
    path = new QString("");
    m_path_isSet = false;
    version = new QString("");
    m_version_isSet = false;
}

void
OAIBTMImport-136::cleanup() {
    if(bt_type != nullptr) { 
        delete bt_type;
    }

    if(import_microversion != nullptr) { 
        delete import_microversion;
    }
    if(imported_external_document_id != nullptr) { 
        delete imported_external_document_id;
    }
    if(_namespace != nullptr) { 
        delete _namespace;
    }
    if(node_id != nullptr) { 
        delete node_id;
    }
    if(path != nullptr) { 
        delete path;
    }
    if(version != nullptr) { 
        delete version;
    }
}

OAIBTMImport-136*
OAIBTMImport-136::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIBTMImport-136::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&bt_type, pJson["btType"], "QString", "QString");
    
    ::OpenAPI::setValue(&element_import, pJson["elementImport"], "bool", "");
    
    ::OpenAPI::setValue(&import_microversion, pJson["importMicroversion"], "QString", "QString");
    
    ::OpenAPI::setValue(&imported_external_document_id, pJson["importedExternalDocumentId"], "QString", "QString");
    
    ::OpenAPI::setValue(&_namespace, pJson["namespace"], "QString", "QString");
    
    ::OpenAPI::setValue(&node_id, pJson["nodeId"], "QString", "QString");
    
    ::OpenAPI::setValue(&path, pJson["path"], "QString", "QString");
    
    ::OpenAPI::setValue(&version, pJson["version"], "QString", "QString");
    
}

QString
OAIBTMImport-136::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIBTMImport-136::asJsonObject() {
    QJsonObject obj;
    if(bt_type != nullptr && *bt_type != QString("")){
        toJsonValue(QString("btType"), bt_type, obj, QString("QString"));
    }
    if(m_element_import_isSet){
        obj.insert("elementImport", QJsonValue(element_import));
    }
    if(import_microversion != nullptr && *import_microversion != QString("")){
        toJsonValue(QString("importMicroversion"), import_microversion, obj, QString("QString"));
    }
    if(imported_external_document_id != nullptr && *imported_external_document_id != QString("")){
        toJsonValue(QString("importedExternalDocumentId"), imported_external_document_id, obj, QString("QString"));
    }
    if(_namespace != nullptr && *_namespace != QString("")){
        toJsonValue(QString("namespace"), _namespace, obj, QString("QString"));
    }
    if(node_id != nullptr && *node_id != QString("")){
        toJsonValue(QString("nodeId"), node_id, obj, QString("QString"));
    }
    if(path != nullptr && *path != QString("")){
        toJsonValue(QString("path"), path, obj, QString("QString"));
    }
    if(version != nullptr && *version != QString("")){
        toJsonValue(QString("version"), version, obj, QString("QString"));
    }

    return obj;
}

QString*
OAIBTMImport-136::getBtType() {
    return bt_type;
}
void
OAIBTMImport-136::setBtType(QString* bt_type) {
    this->bt_type = bt_type;
    this->m_bt_type_isSet = true;
}

bool
OAIBTMImport-136::isElementImport() {
    return element_import;
}
void
OAIBTMImport-136::setElementImport(bool element_import) {
    this->element_import = element_import;
    this->m_element_import_isSet = true;
}

QString*
OAIBTMImport-136::getImportMicroversion() {
    return import_microversion;
}
void
OAIBTMImport-136::setImportMicroversion(QString* import_microversion) {
    this->import_microversion = import_microversion;
    this->m_import_microversion_isSet = true;
}

QString*
OAIBTMImport-136::getImportedExternalDocumentId() {
    return imported_external_document_id;
}
void
OAIBTMImport-136::setImportedExternalDocumentId(QString* imported_external_document_id) {
    this->imported_external_document_id = imported_external_document_id;
    this->m_imported_external_document_id_isSet = true;
}

QString*
OAIBTMImport-136::getNamespace() {
    return _namespace;
}
void
OAIBTMImport-136::setNamespace(QString* _namespace) {
    this->_namespace = _namespace;
    this->m__namespace_isSet = true;
}

QString*
OAIBTMImport-136::getNodeId() {
    return node_id;
}
void
OAIBTMImport-136::setNodeId(QString* node_id) {
    this->node_id = node_id;
    this->m_node_id_isSet = true;
}

QString*
OAIBTMImport-136::getPath() {
    return path;
}
void
OAIBTMImport-136::setPath(QString* path) {
    this->path = path;
    this->m_path_isSet = true;
}

QString*
OAIBTMImport-136::getVersion() {
    return version;
}
void
OAIBTMImport-136::setVersion(QString* version) {
    this->version = version;
    this->m_version_isSet = true;
}


bool
OAIBTMImport-136::isSet(){
    bool isObjectUpdated = false;
    do{
        if(bt_type != nullptr && *bt_type != QString("")){ isObjectUpdated = true; break;}
        if(m_element_import_isSet){ isObjectUpdated = true; break;}
        if(import_microversion != nullptr && *import_microversion != QString("")){ isObjectUpdated = true; break;}
        if(imported_external_document_id != nullptr && *imported_external_document_id != QString("")){ isObjectUpdated = true; break;}
        if(_namespace != nullptr && *_namespace != QString("")){ isObjectUpdated = true; break;}
        if(node_id != nullptr && *node_id != QString("")){ isObjectUpdated = true; break;}
        if(path != nullptr && *path != QString("")){ isObjectUpdated = true; break;}
        if(version != nullptr && *version != QString("")){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

