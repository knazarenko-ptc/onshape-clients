/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * OpenAPI spec version: 1.111
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIBTExportTessellatedFacesFace-1192.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIBTExportTessellatedFacesFace-1192::OAIBTExportTessellatedFacesFace-1192(QString json) {
    init();
    this->fromJson(json);
}

OAIBTExportTessellatedFacesFace-1192::OAIBTExportTessellatedFacesFace-1192() {
    init();
}

OAIBTExportTessellatedFacesFace-1192::~OAIBTExportTessellatedFacesFace-1192() {
    this->cleanup();
}

void
OAIBTExportTessellatedFacesFace-1192::init() {
    appearance = new OAIBTGraphicsAppearance-1152();
    m_appearance_isSet = false;
    bt_type = new QString("");
    m_bt_type_isSet = false;
    error_message = new QString("");
    m_error_message_isSet = false;
    facets = new QList<OAIBTExportTessellatedFacesFacet-1417*>();
    m_facets_isSet = false;
    id = new QString("");
    m_id_isSet = false;
}

void
OAIBTExportTessellatedFacesFace-1192::cleanup() {
    if(appearance != nullptr) { 
        delete appearance;
    }
    if(bt_type != nullptr) { 
        delete bt_type;
    }
    if(error_message != nullptr) { 
        delete error_message;
    }
    if(facets != nullptr) { 
        auto arr = facets;
        for(auto o: *arr) { 
            delete o;
        }
        delete facets;
    }
    if(id != nullptr) { 
        delete id;
    }
}

OAIBTExportTessellatedFacesFace-1192*
OAIBTExportTessellatedFacesFace-1192::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIBTExportTessellatedFacesFace-1192::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&appearance, pJson["appearance"], "OAIBTGraphicsAppearance-1152", "OAIBTGraphicsAppearance-1152");
    
    ::OpenAPI::setValue(&bt_type, pJson["btType"], "QString", "QString");
    
    ::OpenAPI::setValue(&error_message, pJson["errorMessage"], "QString", "QString");
    
    
    ::OpenAPI::setValue(&facets, pJson["facets"], "QList", "OAIBTExportTessellatedFacesFacet-1417");
    ::OpenAPI::setValue(&id, pJson["id"], "QString", "QString");
    
}

QString
OAIBTExportTessellatedFacesFace-1192::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIBTExportTessellatedFacesFace-1192::asJsonObject() {
    QJsonObject obj;
    if((appearance != nullptr) && (appearance->isSet())){
        toJsonValue(QString("appearance"), appearance, obj, QString("OAIBTGraphicsAppearance-1152"));
    }
    if(bt_type != nullptr && *bt_type != QString("")){
        toJsonValue(QString("btType"), bt_type, obj, QString("QString"));
    }
    if(error_message != nullptr && *error_message != QString("")){
        toJsonValue(QString("errorMessage"), error_message, obj, QString("QString"));
    }
    if(facets->size() > 0){
        toJsonArray((QList<void*>*)facets, obj, "facets", "OAIBTExportTessellatedFacesFacet-1417");
    }
    if(id != nullptr && *id != QString("")){
        toJsonValue(QString("id"), id, obj, QString("QString"));
    }

    return obj;
}

OAIBTGraphicsAppearance-1152*
OAIBTExportTessellatedFacesFace-1192::getAppearance() {
    return appearance;
}
void
OAIBTExportTessellatedFacesFace-1192::setAppearance(OAIBTGraphicsAppearance-1152* appearance) {
    this->appearance = appearance;
    this->m_appearance_isSet = true;
}

QString*
OAIBTExportTessellatedFacesFace-1192::getBtType() {
    return bt_type;
}
void
OAIBTExportTessellatedFacesFace-1192::setBtType(QString* bt_type) {
    this->bt_type = bt_type;
    this->m_bt_type_isSet = true;
}

QString*
OAIBTExportTessellatedFacesFace-1192::getErrorMessage() {
    return error_message;
}
void
OAIBTExportTessellatedFacesFace-1192::setErrorMessage(QString* error_message) {
    this->error_message = error_message;
    this->m_error_message_isSet = true;
}

QList<OAIBTExportTessellatedFacesFacet-1417*>*
OAIBTExportTessellatedFacesFace-1192::getFacets() {
    return facets;
}
void
OAIBTExportTessellatedFacesFace-1192::setFacets(QList<OAIBTExportTessellatedFacesFacet-1417*>* facets) {
    this->facets = facets;
    this->m_facets_isSet = true;
}

QString*
OAIBTExportTessellatedFacesFace-1192::getId() {
    return id;
}
void
OAIBTExportTessellatedFacesFace-1192::setId(QString* id) {
    this->id = id;
    this->m_id_isSet = true;
}


bool
OAIBTExportTessellatedFacesFace-1192::isSet(){
    bool isObjectUpdated = false;
    do{
        if(appearance != nullptr && appearance->isSet()){ isObjectUpdated = true; break;}
        if(bt_type != nullptr && *bt_type != QString("")){ isObjectUpdated = true; break;}
        if(error_message != nullptr && *error_message != QString("")){ isObjectUpdated = true; break;}
        if(facets->size() > 0){ isObjectUpdated = true; break;}
        if(id != nullptr && *id != QString("")){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

