/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * OpenAPI spec version: 1.111
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIBTDocumentMergeInfo.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIBTDocumentMergeInfo::OAIBTDocumentMergeInfo(QString json) {
    init();
    this->fromJson(json);
}

OAIBTDocumentMergeInfo::OAIBTDocumentMergeInfo() {
    init();
}

OAIBTDocumentMergeInfo::~OAIBTDocumentMergeInfo() {
    this->cleanup();
}

void
OAIBTDocumentMergeInfo::init() {
    library_version_mismatch = false;
    m_library_version_mismatch_isSet = false;
    overwritten_elements = new QList<OAIBTDocumentElementInfo*>();
    m_overwritten_elements_isSet = false;
}

void
OAIBTDocumentMergeInfo::cleanup() {

    if(overwritten_elements != nullptr) { 
        auto arr = overwritten_elements;
        for(auto o: *arr) { 
            delete o;
        }
        delete overwritten_elements;
    }
}

OAIBTDocumentMergeInfo*
OAIBTDocumentMergeInfo::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIBTDocumentMergeInfo::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&library_version_mismatch, pJson["libraryVersionMismatch"], "bool", "");
    
    
    ::OpenAPI::setValue(&overwritten_elements, pJson["overwrittenElements"], "QList", "OAIBTDocumentElementInfo");
}

QString
OAIBTDocumentMergeInfo::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIBTDocumentMergeInfo::asJsonObject() {
    QJsonObject obj;
    if(m_library_version_mismatch_isSet){
        obj.insert("libraryVersionMismatch", QJsonValue(library_version_mismatch));
    }
    if(overwritten_elements->size() > 0){
        toJsonArray((QList<void*>*)overwritten_elements, obj, "overwrittenElements", "OAIBTDocumentElementInfo");
    }

    return obj;
}

bool
OAIBTDocumentMergeInfo::isLibraryVersionMismatch() {
    return library_version_mismatch;
}
void
OAIBTDocumentMergeInfo::setLibraryVersionMismatch(bool library_version_mismatch) {
    this->library_version_mismatch = library_version_mismatch;
    this->m_library_version_mismatch_isSet = true;
}

QList<OAIBTDocumentElementInfo*>*
OAIBTDocumentMergeInfo::getOverwrittenElements() {
    return overwritten_elements;
}
void
OAIBTDocumentMergeInfo::setOverwrittenElements(QList<OAIBTDocumentElementInfo*>* overwritten_elements) {
    this->overwritten_elements = overwritten_elements;
    this->m_overwritten_elements_isSet = true;
}


bool
OAIBTDocumentMergeInfo::isSet(){
    bool isObjectUpdated = false;
    do{
        if(m_library_version_mismatch_isSet){ isObjectUpdated = true; break;}
        if(overwritten_elements->size() > 0){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

