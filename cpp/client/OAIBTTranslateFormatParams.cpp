/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * OpenAPI spec version: 1.111
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIBTTranslateFormatParams.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIBTTranslateFormatParams::OAIBTTranslateFormatParams(QString json) {
    init();
    this->fromJson(json);
}

OAIBTTranslateFormatParams::OAIBTTranslateFormatParams() {
    init();
}

OAIBTTranslateFormatParams::~OAIBTTranslateFormatParams() {
    this->cleanup();
}

void
OAIBTTranslateFormatParams::init() {
    allow_faulty_parts = false;
    m_allow_faulty_parts_isSet = false;
    angular_tolerance = 0.0;
    m_angular_tolerance_isSet = false;
    blob_element_id = new QString("");
    m_blob_element_id_isSet = false;
    blob_microversion_id = new QString("");
    m_blob_microversion_id_isSet = false;
    cloud_object_id = new QString("");
    m_cloud_object_id_isSet = false;
    cloud_storage_account_id = new QString("");
    m_cloud_storage_account_id_isSet = false;
    color_method = new QString("");
    m_color_method_isSet = false;
    configuration = new QString("");
    m_configuration_isSet = false;
    connection_id = new QString("");
    m_connection_id_isSet = false;
    create_composite = false;
    m_create_composite_isSet = false;
    current_sheet_only = false;
    m_current_sheet_only_isSet = false;
    destination_name = new QString("");
    m_destination_name_isSet = false;
    distance_tolerance = 0.0;
    m_distance_tolerance_isSet = false;
    element_id = new QString("");
    m_element_id_isSet = false;
    email_link = false;
    m_email_link_isSet = false;
    email_message = new QString("");
    m_email_message_isSet = false;
    email_subject = new QString("");
    m_email_subject_isSet = false;
    email_to = new QList<QString*>();
    m_email_to_isSet = false;
    extract_assembly_hierarchy = false;
    m_extract_assembly_hierarchy_isSet = false;
    flatten = false;
    m_flatten_isSet = false;
    flatten_assemblies = false;
    m_flatten_assemblies_isSet = false;
    foreign_id = new QString("");
    m_foreign_id_isSet = false;
    format_name = new QString("");
    m_format_name_isSet = false;
    from_user_id = new QString("");
    m_from_user_id_isSet = false;
    gety_axis_is_up = false;
    m_gety_axis_is_up_isSet = false;
    grouping = false;
    m_grouping_isSet = false;
    image_height = 0;
    m_image_height_isSet = false;
    image_width = 0;
    m_image_width_isSet = false;
    import_in_background = false;
    m_import_in_background_isSet = false;
    import_within_document = false;
    m_import_within_document_isSet = false;
    include_export_ids = false;
    m_include_export_ids_isSet = false;
    join_adjacent_surfaces = false;
    m_join_adjacent_surfaces_isSet = false;
    link_document_id = new QString("");
    m_link_document_id_isSet = false;
    link_document_workspace_id = new QString("");
    m_link_document_workspace_id_isSet = false;
    maximum_chord_length = 0.0;
    m_maximum_chord_length_isSet = false;
    notify_user = false;
    m_notify_user_isSet = false;
    original_foreign_id = new QString("");
    m_original_foreign_id_isSet = false;
    parent_id = new QString("");
    m_parent_id_isSet = false;
    part_ids = new QString("");
    m_part_ids_isSet = false;
    password = new QString("");
    m_password_isSet = false;
    password_required = false;
    m_password_required_isSet = false;
    processed_foreign_id = new QString("");
    m_processed_foreign_id_isSet = false;
    project_id = new QString("");
    m_project_id_isSet = false;
    selectable_pdf_text = false;
    m_selectable_pdf_text_isSet = false;
    send_copy_to_me = false;
    m_send_copy_to_me_isSet = false;
    show_overridden_dimensions = false;
    m_show_overridden_dimensions_isSet = false;
    source_name = new QString("");
    m_source_name_isSet = false;
    specify_units = false;
    m_specify_units_isSet = false;
    splines_as_polylines = false;
    m_splines_as_polylines_isSet = false;
    split_assemblies_into_multiple_documents = false;
    m_split_assemblies_into_multiple_documents_isSet = false;
    store_in_document = false;
    m_store_in_document_isSet = false;
    text_as_geometry = false;
    m_text_as_geometry_isSet = false;
    trigger_auto_download = false;
    m_trigger_auto_download_isSet = false;
    unit = new QString("");
    m_unit_isSet = false;
    upload_id = new QString("");
    m_upload_id_isSet = false;
    valid_for_days = 0;
    m_valid_for_days_isSet = false;
    version_string = new QString("");
    m_version_string_isSet = false;
}

void
OAIBTTranslateFormatParams::cleanup() {


    if(blob_element_id != nullptr) { 
        delete blob_element_id;
    }
    if(blob_microversion_id != nullptr) { 
        delete blob_microversion_id;
    }
    if(cloud_object_id != nullptr) { 
        delete cloud_object_id;
    }
    if(cloud_storage_account_id != nullptr) { 
        delete cloud_storage_account_id;
    }
    if(color_method != nullptr) { 
        delete color_method;
    }
    if(configuration != nullptr) { 
        delete configuration;
    }
    if(connection_id != nullptr) { 
        delete connection_id;
    }


    if(destination_name != nullptr) { 
        delete destination_name;
    }

    if(element_id != nullptr) { 
        delete element_id;
    }

    if(email_message != nullptr) { 
        delete email_message;
    }
    if(email_subject != nullptr) { 
        delete email_subject;
    }
    if(email_to != nullptr) { 
        auto arr = email_to;
        for(auto o: *arr) { 
            delete o;
        }
        delete email_to;
    }



    if(foreign_id != nullptr) { 
        delete foreign_id;
    }
    if(format_name != nullptr) { 
        delete format_name;
    }
    if(from_user_id != nullptr) { 
        delete from_user_id;
    }








    if(link_document_id != nullptr) { 
        delete link_document_id;
    }
    if(link_document_workspace_id != nullptr) { 
        delete link_document_workspace_id;
    }


    if(original_foreign_id != nullptr) { 
        delete original_foreign_id;
    }
    if(parent_id != nullptr) { 
        delete parent_id;
    }
    if(part_ids != nullptr) { 
        delete part_ids;
    }
    if(password != nullptr) { 
        delete password;
    }

    if(processed_foreign_id != nullptr) { 
        delete processed_foreign_id;
    }
    if(project_id != nullptr) { 
        delete project_id;
    }



    if(source_name != nullptr) { 
        delete source_name;
    }






    if(unit != nullptr) { 
        delete unit;
    }
    if(upload_id != nullptr) { 
        delete upload_id;
    }

    if(version_string != nullptr) { 
        delete version_string;
    }
}

OAIBTTranslateFormatParams*
OAIBTTranslateFormatParams::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIBTTranslateFormatParams::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&allow_faulty_parts, pJson["allowFaultyParts"], "bool", "");
    
    ::OpenAPI::setValue(&angular_tolerance, pJson["angularTolerance"], "double", "");
    
    ::OpenAPI::setValue(&blob_element_id, pJson["blobElementId"], "QString", "QString");
    
    ::OpenAPI::setValue(&blob_microversion_id, pJson["blobMicroversionId"], "QString", "QString");
    
    ::OpenAPI::setValue(&cloud_object_id, pJson["cloudObjectId"], "QString", "QString");
    
    ::OpenAPI::setValue(&cloud_storage_account_id, pJson["cloudStorageAccountId"], "QString", "QString");
    
    ::OpenAPI::setValue(&color_method, pJson["colorMethod"], "QString", "QString");
    
    ::OpenAPI::setValue(&configuration, pJson["configuration"], "QString", "QString");
    
    ::OpenAPI::setValue(&connection_id, pJson["connectionId"], "QString", "QString");
    
    ::OpenAPI::setValue(&create_composite, pJson["createComposite"], "bool", "");
    
    ::OpenAPI::setValue(&current_sheet_only, pJson["currentSheetOnly"], "bool", "");
    
    ::OpenAPI::setValue(&destination_name, pJson["destinationName"], "QString", "QString");
    
    ::OpenAPI::setValue(&distance_tolerance, pJson["distanceTolerance"], "double", "");
    
    ::OpenAPI::setValue(&element_id, pJson["elementId"], "QString", "QString");
    
    ::OpenAPI::setValue(&email_link, pJson["emailLink"], "bool", "");
    
    ::OpenAPI::setValue(&email_message, pJson["emailMessage"], "QString", "QString");
    
    ::OpenAPI::setValue(&email_subject, pJson["emailSubject"], "QString", "QString");
    
    
    ::OpenAPI::setValue(&email_to, pJson["emailTo"], "QList", "QString");
    ::OpenAPI::setValue(&extract_assembly_hierarchy, pJson["extractAssemblyHierarchy"], "bool", "");
    
    ::OpenAPI::setValue(&flatten, pJson["flatten"], "bool", "");
    
    ::OpenAPI::setValue(&flatten_assemblies, pJson["flattenAssemblies"], "bool", "");
    
    ::OpenAPI::setValue(&foreign_id, pJson["foreignId"], "QString", "QString");
    
    ::OpenAPI::setValue(&format_name, pJson["formatName"], "QString", "QString");
    
    ::OpenAPI::setValue(&from_user_id, pJson["fromUserId"], "QString", "QString");
    
    ::OpenAPI::setValue(&gety_axis_is_up, pJson["getyAxisIsUp"], "bool", "");
    
    ::OpenAPI::setValue(&grouping, pJson["grouping"], "bool", "");
    
    ::OpenAPI::setValue(&image_height, pJson["imageHeight"], "qint32", "");
    
    ::OpenAPI::setValue(&image_width, pJson["imageWidth"], "qint32", "");
    
    ::OpenAPI::setValue(&import_in_background, pJson["importInBackground"], "bool", "");
    
    ::OpenAPI::setValue(&import_within_document, pJson["importWithinDocument"], "bool", "");
    
    ::OpenAPI::setValue(&include_export_ids, pJson["includeExportIds"], "bool", "");
    
    ::OpenAPI::setValue(&join_adjacent_surfaces, pJson["joinAdjacentSurfaces"], "bool", "");
    
    ::OpenAPI::setValue(&link_document_id, pJson["linkDocumentId"], "QString", "QString");
    
    ::OpenAPI::setValue(&link_document_workspace_id, pJson["linkDocumentWorkspaceId"], "QString", "QString");
    
    ::OpenAPI::setValue(&maximum_chord_length, pJson["maximumChordLength"], "double", "");
    
    ::OpenAPI::setValue(&notify_user, pJson["notifyUser"], "bool", "");
    
    ::OpenAPI::setValue(&original_foreign_id, pJson["originalForeignId"], "QString", "QString");
    
    ::OpenAPI::setValue(&parent_id, pJson["parentId"], "QString", "QString");
    
    ::OpenAPI::setValue(&part_ids, pJson["partIds"], "QString", "QString");
    
    ::OpenAPI::setValue(&password, pJson["password"], "QString", "QString");
    
    ::OpenAPI::setValue(&password_required, pJson["passwordRequired"], "bool", "");
    
    ::OpenAPI::setValue(&processed_foreign_id, pJson["processedForeignId"], "QString", "QString");
    
    ::OpenAPI::setValue(&project_id, pJson["projectId"], "QString", "QString");
    
    ::OpenAPI::setValue(&selectable_pdf_text, pJson["selectablePdfText"], "bool", "");
    
    ::OpenAPI::setValue(&send_copy_to_me, pJson["sendCopyToMe"], "bool", "");
    
    ::OpenAPI::setValue(&show_overridden_dimensions, pJson["showOverriddenDimensions"], "bool", "");
    
    ::OpenAPI::setValue(&source_name, pJson["sourceName"], "QString", "QString");
    
    ::OpenAPI::setValue(&specify_units, pJson["specifyUnits"], "bool", "");
    
    ::OpenAPI::setValue(&splines_as_polylines, pJson["splinesAsPolylines"], "bool", "");
    
    ::OpenAPI::setValue(&split_assemblies_into_multiple_documents, pJson["splitAssembliesIntoMultipleDocuments"], "bool", "");
    
    ::OpenAPI::setValue(&store_in_document, pJson["storeInDocument"], "bool", "");
    
    ::OpenAPI::setValue(&text_as_geometry, pJson["textAsGeometry"], "bool", "");
    
    ::OpenAPI::setValue(&trigger_auto_download, pJson["triggerAutoDownload"], "bool", "");
    
    ::OpenAPI::setValue(&unit, pJson["unit"], "QString", "QString");
    
    ::OpenAPI::setValue(&upload_id, pJson["uploadId"], "QString", "QString");
    
    ::OpenAPI::setValue(&valid_for_days, pJson["validForDays"], "qint32", "");
    
    ::OpenAPI::setValue(&version_string, pJson["versionString"], "QString", "QString");
    
}

QString
OAIBTTranslateFormatParams::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIBTTranslateFormatParams::asJsonObject() {
    QJsonObject obj;
    if(m_allow_faulty_parts_isSet){
        obj.insert("allowFaultyParts", QJsonValue(allow_faulty_parts));
    }
    if(m_angular_tolerance_isSet){
        obj.insert("angularTolerance", QJsonValue(angular_tolerance));
    }
    if(blob_element_id != nullptr && *blob_element_id != QString("")){
        toJsonValue(QString("blobElementId"), blob_element_id, obj, QString("QString"));
    }
    if(blob_microversion_id != nullptr && *blob_microversion_id != QString("")){
        toJsonValue(QString("blobMicroversionId"), blob_microversion_id, obj, QString("QString"));
    }
    if(cloud_object_id != nullptr && *cloud_object_id != QString("")){
        toJsonValue(QString("cloudObjectId"), cloud_object_id, obj, QString("QString"));
    }
    if(cloud_storage_account_id != nullptr && *cloud_storage_account_id != QString("")){
        toJsonValue(QString("cloudStorageAccountId"), cloud_storage_account_id, obj, QString("QString"));
    }
    if(color_method != nullptr && *color_method != QString("")){
        toJsonValue(QString("colorMethod"), color_method, obj, QString("QString"));
    }
    if(configuration != nullptr && *configuration != QString("")){
        toJsonValue(QString("configuration"), configuration, obj, QString("QString"));
    }
    if(connection_id != nullptr && *connection_id != QString("")){
        toJsonValue(QString("connectionId"), connection_id, obj, QString("QString"));
    }
    if(m_create_composite_isSet){
        obj.insert("createComposite", QJsonValue(create_composite));
    }
    if(m_current_sheet_only_isSet){
        obj.insert("currentSheetOnly", QJsonValue(current_sheet_only));
    }
    if(destination_name != nullptr && *destination_name != QString("")){
        toJsonValue(QString("destinationName"), destination_name, obj, QString("QString"));
    }
    if(m_distance_tolerance_isSet){
        obj.insert("distanceTolerance", QJsonValue(distance_tolerance));
    }
    if(element_id != nullptr && *element_id != QString("")){
        toJsonValue(QString("elementId"), element_id, obj, QString("QString"));
    }
    if(m_email_link_isSet){
        obj.insert("emailLink", QJsonValue(email_link));
    }
    if(email_message != nullptr && *email_message != QString("")){
        toJsonValue(QString("emailMessage"), email_message, obj, QString("QString"));
    }
    if(email_subject != nullptr && *email_subject != QString("")){
        toJsonValue(QString("emailSubject"), email_subject, obj, QString("QString"));
    }
    if(email_to->size() > 0){
        toJsonArray((QList<void*>*)email_to, obj, "emailTo", "QString");
    }
    if(m_extract_assembly_hierarchy_isSet){
        obj.insert("extractAssemblyHierarchy", QJsonValue(extract_assembly_hierarchy));
    }
    if(m_flatten_isSet){
        obj.insert("flatten", QJsonValue(flatten));
    }
    if(m_flatten_assemblies_isSet){
        obj.insert("flattenAssemblies", QJsonValue(flatten_assemblies));
    }
    if(foreign_id != nullptr && *foreign_id != QString("")){
        toJsonValue(QString("foreignId"), foreign_id, obj, QString("QString"));
    }
    if(format_name != nullptr && *format_name != QString("")){
        toJsonValue(QString("formatName"), format_name, obj, QString("QString"));
    }
    if(from_user_id != nullptr && *from_user_id != QString("")){
        toJsonValue(QString("fromUserId"), from_user_id, obj, QString("QString"));
    }
    if(m_gety_axis_is_up_isSet){
        obj.insert("getyAxisIsUp", QJsonValue(gety_axis_is_up));
    }
    if(m_grouping_isSet){
        obj.insert("grouping", QJsonValue(grouping));
    }
    if(m_image_height_isSet){
        obj.insert("imageHeight", QJsonValue(image_height));
    }
    if(m_image_width_isSet){
        obj.insert("imageWidth", QJsonValue(image_width));
    }
    if(m_import_in_background_isSet){
        obj.insert("importInBackground", QJsonValue(import_in_background));
    }
    if(m_import_within_document_isSet){
        obj.insert("importWithinDocument", QJsonValue(import_within_document));
    }
    if(m_include_export_ids_isSet){
        obj.insert("includeExportIds", QJsonValue(include_export_ids));
    }
    if(m_join_adjacent_surfaces_isSet){
        obj.insert("joinAdjacentSurfaces", QJsonValue(join_adjacent_surfaces));
    }
    if(link_document_id != nullptr && *link_document_id != QString("")){
        toJsonValue(QString("linkDocumentId"), link_document_id, obj, QString("QString"));
    }
    if(link_document_workspace_id != nullptr && *link_document_workspace_id != QString("")){
        toJsonValue(QString("linkDocumentWorkspaceId"), link_document_workspace_id, obj, QString("QString"));
    }
    if(m_maximum_chord_length_isSet){
        obj.insert("maximumChordLength", QJsonValue(maximum_chord_length));
    }
    if(m_notify_user_isSet){
        obj.insert("notifyUser", QJsonValue(notify_user));
    }
    if(original_foreign_id != nullptr && *original_foreign_id != QString("")){
        toJsonValue(QString("originalForeignId"), original_foreign_id, obj, QString("QString"));
    }
    if(parent_id != nullptr && *parent_id != QString("")){
        toJsonValue(QString("parentId"), parent_id, obj, QString("QString"));
    }
    if(part_ids != nullptr && *part_ids != QString("")){
        toJsonValue(QString("partIds"), part_ids, obj, QString("QString"));
    }
    if(password != nullptr && *password != QString("")){
        toJsonValue(QString("password"), password, obj, QString("QString"));
    }
    if(m_password_required_isSet){
        obj.insert("passwordRequired", QJsonValue(password_required));
    }
    if(processed_foreign_id != nullptr && *processed_foreign_id != QString("")){
        toJsonValue(QString("processedForeignId"), processed_foreign_id, obj, QString("QString"));
    }
    if(project_id != nullptr && *project_id != QString("")){
        toJsonValue(QString("projectId"), project_id, obj, QString("QString"));
    }
    if(m_selectable_pdf_text_isSet){
        obj.insert("selectablePdfText", QJsonValue(selectable_pdf_text));
    }
    if(m_send_copy_to_me_isSet){
        obj.insert("sendCopyToMe", QJsonValue(send_copy_to_me));
    }
    if(m_show_overridden_dimensions_isSet){
        obj.insert("showOverriddenDimensions", QJsonValue(show_overridden_dimensions));
    }
    if(source_name != nullptr && *source_name != QString("")){
        toJsonValue(QString("sourceName"), source_name, obj, QString("QString"));
    }
    if(m_specify_units_isSet){
        obj.insert("specifyUnits", QJsonValue(specify_units));
    }
    if(m_splines_as_polylines_isSet){
        obj.insert("splinesAsPolylines", QJsonValue(splines_as_polylines));
    }
    if(m_split_assemblies_into_multiple_documents_isSet){
        obj.insert("splitAssembliesIntoMultipleDocuments", QJsonValue(split_assemblies_into_multiple_documents));
    }
    if(m_store_in_document_isSet){
        obj.insert("storeInDocument", QJsonValue(store_in_document));
    }
    if(m_text_as_geometry_isSet){
        obj.insert("textAsGeometry", QJsonValue(text_as_geometry));
    }
    if(m_trigger_auto_download_isSet){
        obj.insert("triggerAutoDownload", QJsonValue(trigger_auto_download));
    }
    if(unit != nullptr && *unit != QString("")){
        toJsonValue(QString("unit"), unit, obj, QString("QString"));
    }
    if(upload_id != nullptr && *upload_id != QString("")){
        toJsonValue(QString("uploadId"), upload_id, obj, QString("QString"));
    }
    if(m_valid_for_days_isSet){
        obj.insert("validForDays", QJsonValue(valid_for_days));
    }
    if(version_string != nullptr && *version_string != QString("")){
        toJsonValue(QString("versionString"), version_string, obj, QString("QString"));
    }

    return obj;
}

bool
OAIBTTranslateFormatParams::isAllowFaultyParts() {
    return allow_faulty_parts;
}
void
OAIBTTranslateFormatParams::setAllowFaultyParts(bool allow_faulty_parts) {
    this->allow_faulty_parts = allow_faulty_parts;
    this->m_allow_faulty_parts_isSet = true;
}

double
OAIBTTranslateFormatParams::getAngularTolerance() {
    return angular_tolerance;
}
void
OAIBTTranslateFormatParams::setAngularTolerance(double angular_tolerance) {
    this->angular_tolerance = angular_tolerance;
    this->m_angular_tolerance_isSet = true;
}

QString*
OAIBTTranslateFormatParams::getBlobElementId() {
    return blob_element_id;
}
void
OAIBTTranslateFormatParams::setBlobElementId(QString* blob_element_id) {
    this->blob_element_id = blob_element_id;
    this->m_blob_element_id_isSet = true;
}

QString*
OAIBTTranslateFormatParams::getBlobMicroversionId() {
    return blob_microversion_id;
}
void
OAIBTTranslateFormatParams::setBlobMicroversionId(QString* blob_microversion_id) {
    this->blob_microversion_id = blob_microversion_id;
    this->m_blob_microversion_id_isSet = true;
}

QString*
OAIBTTranslateFormatParams::getCloudObjectId() {
    return cloud_object_id;
}
void
OAIBTTranslateFormatParams::setCloudObjectId(QString* cloud_object_id) {
    this->cloud_object_id = cloud_object_id;
    this->m_cloud_object_id_isSet = true;
}

QString*
OAIBTTranslateFormatParams::getCloudStorageAccountId() {
    return cloud_storage_account_id;
}
void
OAIBTTranslateFormatParams::setCloudStorageAccountId(QString* cloud_storage_account_id) {
    this->cloud_storage_account_id = cloud_storage_account_id;
    this->m_cloud_storage_account_id_isSet = true;
}

QString*
OAIBTTranslateFormatParams::getColorMethod() {
    return color_method;
}
void
OAIBTTranslateFormatParams::setColorMethod(QString* color_method) {
    this->color_method = color_method;
    this->m_color_method_isSet = true;
}

QString*
OAIBTTranslateFormatParams::getConfiguration() {
    return configuration;
}
void
OAIBTTranslateFormatParams::setConfiguration(QString* configuration) {
    this->configuration = configuration;
    this->m_configuration_isSet = true;
}

QString*
OAIBTTranslateFormatParams::getConnectionId() {
    return connection_id;
}
void
OAIBTTranslateFormatParams::setConnectionId(QString* connection_id) {
    this->connection_id = connection_id;
    this->m_connection_id_isSet = true;
}

bool
OAIBTTranslateFormatParams::isCreateComposite() {
    return create_composite;
}
void
OAIBTTranslateFormatParams::setCreateComposite(bool create_composite) {
    this->create_composite = create_composite;
    this->m_create_composite_isSet = true;
}

bool
OAIBTTranslateFormatParams::isCurrentSheetOnly() {
    return current_sheet_only;
}
void
OAIBTTranslateFormatParams::setCurrentSheetOnly(bool current_sheet_only) {
    this->current_sheet_only = current_sheet_only;
    this->m_current_sheet_only_isSet = true;
}

QString*
OAIBTTranslateFormatParams::getDestinationName() {
    return destination_name;
}
void
OAIBTTranslateFormatParams::setDestinationName(QString* destination_name) {
    this->destination_name = destination_name;
    this->m_destination_name_isSet = true;
}

double
OAIBTTranslateFormatParams::getDistanceTolerance() {
    return distance_tolerance;
}
void
OAIBTTranslateFormatParams::setDistanceTolerance(double distance_tolerance) {
    this->distance_tolerance = distance_tolerance;
    this->m_distance_tolerance_isSet = true;
}

QString*
OAIBTTranslateFormatParams::getElementId() {
    return element_id;
}
void
OAIBTTranslateFormatParams::setElementId(QString* element_id) {
    this->element_id = element_id;
    this->m_element_id_isSet = true;
}

bool
OAIBTTranslateFormatParams::isEmailLink() {
    return email_link;
}
void
OAIBTTranslateFormatParams::setEmailLink(bool email_link) {
    this->email_link = email_link;
    this->m_email_link_isSet = true;
}

QString*
OAIBTTranslateFormatParams::getEmailMessage() {
    return email_message;
}
void
OAIBTTranslateFormatParams::setEmailMessage(QString* email_message) {
    this->email_message = email_message;
    this->m_email_message_isSet = true;
}

QString*
OAIBTTranslateFormatParams::getEmailSubject() {
    return email_subject;
}
void
OAIBTTranslateFormatParams::setEmailSubject(QString* email_subject) {
    this->email_subject = email_subject;
    this->m_email_subject_isSet = true;
}

QList<QString*>*
OAIBTTranslateFormatParams::getEmailTo() {
    return email_to;
}
void
OAIBTTranslateFormatParams::setEmailTo(QList<QString*>* email_to) {
    this->email_to = email_to;
    this->m_email_to_isSet = true;
}

bool
OAIBTTranslateFormatParams::isExtractAssemblyHierarchy() {
    return extract_assembly_hierarchy;
}
void
OAIBTTranslateFormatParams::setExtractAssemblyHierarchy(bool extract_assembly_hierarchy) {
    this->extract_assembly_hierarchy = extract_assembly_hierarchy;
    this->m_extract_assembly_hierarchy_isSet = true;
}

bool
OAIBTTranslateFormatParams::isFlatten() {
    return flatten;
}
void
OAIBTTranslateFormatParams::setFlatten(bool flatten) {
    this->flatten = flatten;
    this->m_flatten_isSet = true;
}

bool
OAIBTTranslateFormatParams::isFlattenAssemblies() {
    return flatten_assemblies;
}
void
OAIBTTranslateFormatParams::setFlattenAssemblies(bool flatten_assemblies) {
    this->flatten_assemblies = flatten_assemblies;
    this->m_flatten_assemblies_isSet = true;
}

QString*
OAIBTTranslateFormatParams::getForeignId() {
    return foreign_id;
}
void
OAIBTTranslateFormatParams::setForeignId(QString* foreign_id) {
    this->foreign_id = foreign_id;
    this->m_foreign_id_isSet = true;
}

QString*
OAIBTTranslateFormatParams::getFormatName() {
    return format_name;
}
void
OAIBTTranslateFormatParams::setFormatName(QString* format_name) {
    this->format_name = format_name;
    this->m_format_name_isSet = true;
}

QString*
OAIBTTranslateFormatParams::getFromUserId() {
    return from_user_id;
}
void
OAIBTTranslateFormatParams::setFromUserId(QString* from_user_id) {
    this->from_user_id = from_user_id;
    this->m_from_user_id_isSet = true;
}

bool
OAIBTTranslateFormatParams::isGetyAxisIsUp() {
    return gety_axis_is_up;
}
void
OAIBTTranslateFormatParams::setGetyAxisIsUp(bool gety_axis_is_up) {
    this->gety_axis_is_up = gety_axis_is_up;
    this->m_gety_axis_is_up_isSet = true;
}

bool
OAIBTTranslateFormatParams::isGrouping() {
    return grouping;
}
void
OAIBTTranslateFormatParams::setGrouping(bool grouping) {
    this->grouping = grouping;
    this->m_grouping_isSet = true;
}

qint32
OAIBTTranslateFormatParams::getImageHeight() {
    return image_height;
}
void
OAIBTTranslateFormatParams::setImageHeight(qint32 image_height) {
    this->image_height = image_height;
    this->m_image_height_isSet = true;
}

qint32
OAIBTTranslateFormatParams::getImageWidth() {
    return image_width;
}
void
OAIBTTranslateFormatParams::setImageWidth(qint32 image_width) {
    this->image_width = image_width;
    this->m_image_width_isSet = true;
}

bool
OAIBTTranslateFormatParams::isImportInBackground() {
    return import_in_background;
}
void
OAIBTTranslateFormatParams::setImportInBackground(bool import_in_background) {
    this->import_in_background = import_in_background;
    this->m_import_in_background_isSet = true;
}

bool
OAIBTTranslateFormatParams::isImportWithinDocument() {
    return import_within_document;
}
void
OAIBTTranslateFormatParams::setImportWithinDocument(bool import_within_document) {
    this->import_within_document = import_within_document;
    this->m_import_within_document_isSet = true;
}

bool
OAIBTTranslateFormatParams::isIncludeExportIds() {
    return include_export_ids;
}
void
OAIBTTranslateFormatParams::setIncludeExportIds(bool include_export_ids) {
    this->include_export_ids = include_export_ids;
    this->m_include_export_ids_isSet = true;
}

bool
OAIBTTranslateFormatParams::isJoinAdjacentSurfaces() {
    return join_adjacent_surfaces;
}
void
OAIBTTranslateFormatParams::setJoinAdjacentSurfaces(bool join_adjacent_surfaces) {
    this->join_adjacent_surfaces = join_adjacent_surfaces;
    this->m_join_adjacent_surfaces_isSet = true;
}

QString*
OAIBTTranslateFormatParams::getLinkDocumentId() {
    return link_document_id;
}
void
OAIBTTranslateFormatParams::setLinkDocumentId(QString* link_document_id) {
    this->link_document_id = link_document_id;
    this->m_link_document_id_isSet = true;
}

QString*
OAIBTTranslateFormatParams::getLinkDocumentWorkspaceId() {
    return link_document_workspace_id;
}
void
OAIBTTranslateFormatParams::setLinkDocumentWorkspaceId(QString* link_document_workspace_id) {
    this->link_document_workspace_id = link_document_workspace_id;
    this->m_link_document_workspace_id_isSet = true;
}

double
OAIBTTranslateFormatParams::getMaximumChordLength() {
    return maximum_chord_length;
}
void
OAIBTTranslateFormatParams::setMaximumChordLength(double maximum_chord_length) {
    this->maximum_chord_length = maximum_chord_length;
    this->m_maximum_chord_length_isSet = true;
}

bool
OAIBTTranslateFormatParams::isNotifyUser() {
    return notify_user;
}
void
OAIBTTranslateFormatParams::setNotifyUser(bool notify_user) {
    this->notify_user = notify_user;
    this->m_notify_user_isSet = true;
}

QString*
OAIBTTranslateFormatParams::getOriginalForeignId() {
    return original_foreign_id;
}
void
OAIBTTranslateFormatParams::setOriginalForeignId(QString* original_foreign_id) {
    this->original_foreign_id = original_foreign_id;
    this->m_original_foreign_id_isSet = true;
}

QString*
OAIBTTranslateFormatParams::getParentId() {
    return parent_id;
}
void
OAIBTTranslateFormatParams::setParentId(QString* parent_id) {
    this->parent_id = parent_id;
    this->m_parent_id_isSet = true;
}

QString*
OAIBTTranslateFormatParams::getPartIds() {
    return part_ids;
}
void
OAIBTTranslateFormatParams::setPartIds(QString* part_ids) {
    this->part_ids = part_ids;
    this->m_part_ids_isSet = true;
}

QString*
OAIBTTranslateFormatParams::getPassword() {
    return password;
}
void
OAIBTTranslateFormatParams::setPassword(QString* password) {
    this->password = password;
    this->m_password_isSet = true;
}

bool
OAIBTTranslateFormatParams::isPasswordRequired() {
    return password_required;
}
void
OAIBTTranslateFormatParams::setPasswordRequired(bool password_required) {
    this->password_required = password_required;
    this->m_password_required_isSet = true;
}

QString*
OAIBTTranslateFormatParams::getProcessedForeignId() {
    return processed_foreign_id;
}
void
OAIBTTranslateFormatParams::setProcessedForeignId(QString* processed_foreign_id) {
    this->processed_foreign_id = processed_foreign_id;
    this->m_processed_foreign_id_isSet = true;
}

QString*
OAIBTTranslateFormatParams::getProjectId() {
    return project_id;
}
void
OAIBTTranslateFormatParams::setProjectId(QString* project_id) {
    this->project_id = project_id;
    this->m_project_id_isSet = true;
}

bool
OAIBTTranslateFormatParams::isSelectablePdfText() {
    return selectable_pdf_text;
}
void
OAIBTTranslateFormatParams::setSelectablePdfText(bool selectable_pdf_text) {
    this->selectable_pdf_text = selectable_pdf_text;
    this->m_selectable_pdf_text_isSet = true;
}

bool
OAIBTTranslateFormatParams::isSendCopyToMe() {
    return send_copy_to_me;
}
void
OAIBTTranslateFormatParams::setSendCopyToMe(bool send_copy_to_me) {
    this->send_copy_to_me = send_copy_to_me;
    this->m_send_copy_to_me_isSet = true;
}

bool
OAIBTTranslateFormatParams::isShowOverriddenDimensions() {
    return show_overridden_dimensions;
}
void
OAIBTTranslateFormatParams::setShowOverriddenDimensions(bool show_overridden_dimensions) {
    this->show_overridden_dimensions = show_overridden_dimensions;
    this->m_show_overridden_dimensions_isSet = true;
}

QString*
OAIBTTranslateFormatParams::getSourceName() {
    return source_name;
}
void
OAIBTTranslateFormatParams::setSourceName(QString* source_name) {
    this->source_name = source_name;
    this->m_source_name_isSet = true;
}

bool
OAIBTTranslateFormatParams::isSpecifyUnits() {
    return specify_units;
}
void
OAIBTTranslateFormatParams::setSpecifyUnits(bool specify_units) {
    this->specify_units = specify_units;
    this->m_specify_units_isSet = true;
}

bool
OAIBTTranslateFormatParams::isSplinesAsPolylines() {
    return splines_as_polylines;
}
void
OAIBTTranslateFormatParams::setSplinesAsPolylines(bool splines_as_polylines) {
    this->splines_as_polylines = splines_as_polylines;
    this->m_splines_as_polylines_isSet = true;
}

bool
OAIBTTranslateFormatParams::isSplitAssembliesIntoMultipleDocuments() {
    return split_assemblies_into_multiple_documents;
}
void
OAIBTTranslateFormatParams::setSplitAssembliesIntoMultipleDocuments(bool split_assemblies_into_multiple_documents) {
    this->split_assemblies_into_multiple_documents = split_assemblies_into_multiple_documents;
    this->m_split_assemblies_into_multiple_documents_isSet = true;
}

bool
OAIBTTranslateFormatParams::isStoreInDocument() {
    return store_in_document;
}
void
OAIBTTranslateFormatParams::setStoreInDocument(bool store_in_document) {
    this->store_in_document = store_in_document;
    this->m_store_in_document_isSet = true;
}

bool
OAIBTTranslateFormatParams::isTextAsGeometry() {
    return text_as_geometry;
}
void
OAIBTTranslateFormatParams::setTextAsGeometry(bool text_as_geometry) {
    this->text_as_geometry = text_as_geometry;
    this->m_text_as_geometry_isSet = true;
}

bool
OAIBTTranslateFormatParams::isTriggerAutoDownload() {
    return trigger_auto_download;
}
void
OAIBTTranslateFormatParams::setTriggerAutoDownload(bool trigger_auto_download) {
    this->trigger_auto_download = trigger_auto_download;
    this->m_trigger_auto_download_isSet = true;
}

QString*
OAIBTTranslateFormatParams::getUnit() {
    return unit;
}
void
OAIBTTranslateFormatParams::setUnit(QString* unit) {
    this->unit = unit;
    this->m_unit_isSet = true;
}

QString*
OAIBTTranslateFormatParams::getUploadId() {
    return upload_id;
}
void
OAIBTTranslateFormatParams::setUploadId(QString* upload_id) {
    this->upload_id = upload_id;
    this->m_upload_id_isSet = true;
}

qint32
OAIBTTranslateFormatParams::getValidForDays() {
    return valid_for_days;
}
void
OAIBTTranslateFormatParams::setValidForDays(qint32 valid_for_days) {
    this->valid_for_days = valid_for_days;
    this->m_valid_for_days_isSet = true;
}

QString*
OAIBTTranslateFormatParams::getVersionString() {
    return version_string;
}
void
OAIBTTranslateFormatParams::setVersionString(QString* version_string) {
    this->version_string = version_string;
    this->m_version_string_isSet = true;
}


bool
OAIBTTranslateFormatParams::isSet(){
    bool isObjectUpdated = false;
    do{
        if(m_allow_faulty_parts_isSet){ isObjectUpdated = true; break;}
        if(m_angular_tolerance_isSet){ isObjectUpdated = true; break;}
        if(blob_element_id != nullptr && *blob_element_id != QString("")){ isObjectUpdated = true; break;}
        if(blob_microversion_id != nullptr && *blob_microversion_id != QString("")){ isObjectUpdated = true; break;}
        if(cloud_object_id != nullptr && *cloud_object_id != QString("")){ isObjectUpdated = true; break;}
        if(cloud_storage_account_id != nullptr && *cloud_storage_account_id != QString("")){ isObjectUpdated = true; break;}
        if(color_method != nullptr && *color_method != QString("")){ isObjectUpdated = true; break;}
        if(configuration != nullptr && *configuration != QString("")){ isObjectUpdated = true; break;}
        if(connection_id != nullptr && *connection_id != QString("")){ isObjectUpdated = true; break;}
        if(m_create_composite_isSet){ isObjectUpdated = true; break;}
        if(m_current_sheet_only_isSet){ isObjectUpdated = true; break;}
        if(destination_name != nullptr && *destination_name != QString("")){ isObjectUpdated = true; break;}
        if(m_distance_tolerance_isSet){ isObjectUpdated = true; break;}
        if(element_id != nullptr && *element_id != QString("")){ isObjectUpdated = true; break;}
        if(m_email_link_isSet){ isObjectUpdated = true; break;}
        if(email_message != nullptr && *email_message != QString("")){ isObjectUpdated = true; break;}
        if(email_subject != nullptr && *email_subject != QString("")){ isObjectUpdated = true; break;}
        if(email_to->size() > 0){ isObjectUpdated = true; break;}
        if(m_extract_assembly_hierarchy_isSet){ isObjectUpdated = true; break;}
        if(m_flatten_isSet){ isObjectUpdated = true; break;}
        if(m_flatten_assemblies_isSet){ isObjectUpdated = true; break;}
        if(foreign_id != nullptr && *foreign_id != QString("")){ isObjectUpdated = true; break;}
        if(format_name != nullptr && *format_name != QString("")){ isObjectUpdated = true; break;}
        if(from_user_id != nullptr && *from_user_id != QString("")){ isObjectUpdated = true; break;}
        if(m_gety_axis_is_up_isSet){ isObjectUpdated = true; break;}
        if(m_grouping_isSet){ isObjectUpdated = true; break;}
        if(m_image_height_isSet){ isObjectUpdated = true; break;}
        if(m_image_width_isSet){ isObjectUpdated = true; break;}
        if(m_import_in_background_isSet){ isObjectUpdated = true; break;}
        if(m_import_within_document_isSet){ isObjectUpdated = true; break;}
        if(m_include_export_ids_isSet){ isObjectUpdated = true; break;}
        if(m_join_adjacent_surfaces_isSet){ isObjectUpdated = true; break;}
        if(link_document_id != nullptr && *link_document_id != QString("")){ isObjectUpdated = true; break;}
        if(link_document_workspace_id != nullptr && *link_document_workspace_id != QString("")){ isObjectUpdated = true; break;}
        if(m_maximum_chord_length_isSet){ isObjectUpdated = true; break;}
        if(m_notify_user_isSet){ isObjectUpdated = true; break;}
        if(original_foreign_id != nullptr && *original_foreign_id != QString("")){ isObjectUpdated = true; break;}
        if(parent_id != nullptr && *parent_id != QString("")){ isObjectUpdated = true; break;}
        if(part_ids != nullptr && *part_ids != QString("")){ isObjectUpdated = true; break;}
        if(password != nullptr && *password != QString("")){ isObjectUpdated = true; break;}
        if(m_password_required_isSet){ isObjectUpdated = true; break;}
        if(processed_foreign_id != nullptr && *processed_foreign_id != QString("")){ isObjectUpdated = true; break;}
        if(project_id != nullptr && *project_id != QString("")){ isObjectUpdated = true; break;}
        if(m_selectable_pdf_text_isSet){ isObjectUpdated = true; break;}
        if(m_send_copy_to_me_isSet){ isObjectUpdated = true; break;}
        if(m_show_overridden_dimensions_isSet){ isObjectUpdated = true; break;}
        if(source_name != nullptr && *source_name != QString("")){ isObjectUpdated = true; break;}
        if(m_specify_units_isSet){ isObjectUpdated = true; break;}
        if(m_splines_as_polylines_isSet){ isObjectUpdated = true; break;}
        if(m_split_assemblies_into_multiple_documents_isSet){ isObjectUpdated = true; break;}
        if(m_store_in_document_isSet){ isObjectUpdated = true; break;}
        if(m_text_as_geometry_isSet){ isObjectUpdated = true; break;}
        if(m_trigger_auto_download_isSet){ isObjectUpdated = true; break;}
        if(unit != nullptr && *unit != QString("")){ isObjectUpdated = true; break;}
        if(upload_id != nullptr && *upload_id != QString("")){ isObjectUpdated = true; break;}
        if(m_valid_for_days_isSet){ isObjectUpdated = true; break;}
        if(version_string != nullptr && *version_string != QString("")){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

