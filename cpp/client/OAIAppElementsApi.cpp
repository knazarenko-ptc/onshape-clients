/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * OpenAPI spec version: 1.111
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAppElementsApi.h"
#include "OAIHelpers.h"
#include "OAIModelFactory.h"
#include "OAIQObjectWrapper.h"

#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAIAppElementsApi::OAIAppElementsApi() {}

OAIAppElementsApi::~OAIAppElementsApi() {}

OAIAppElementsApi::OAIAppElementsApi(QString host, QString basePath) {
    this->host = host;
    this->basePath = basePath;
}

void
OAIAppElementsApi::commitTransaction(QString* did, QString* eid, QString* wid, QString* tid, OAIBTAppElementCommitTransactionParams& oaibt_app_element_commit_transaction_params) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/api/appelements/d/{did}/w/{wid}/e/{eid}/transactions/{tid}");

    QString didPathParam("{"); didPathParam.append("did").append("}");
    fullPath.replace(didPathParam, stringValue(did));
    QString eidPathParam("{"); eidPathParam.append("eid").append("}");
    fullPath.replace(eidPathParam, stringValue(eid));
    QString widPathParam("{"); widPathParam.append("wid").append("}");
    fullPath.replace(widPathParam, stringValue(wid));
    QString tidPathParam("{"); tidPathParam.append("tid").append("}");
    fullPath.replace(tidPathParam, stringValue(tid));


    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "POST");


    
    QString output = oaibt_app_element_commit_transaction_params.asJson();
    input.request_body.append(output);
    


    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIAppElementsApi::commitTransactionCallback);

    worker->execute(&input);
}

void
OAIAppElementsApi::commitTransactionCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QString json(worker->response);
    OAIBTAppElementModifyInfo* output = static_cast<OAIBTAppElementModifyInfo*>(create(json, QString("OAIBTAppElementModifyInfo")));
    auto wrapper = new OAIQObjectWrapper<OAIBTAppElementModifyInfo*> (output);
    wrapper->deleteLater();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit commitTransactionSignal(output);
    } else {
        emit commitTransactionSignalE(output, error_type, error_str);
        emit commitTransactionSignalEFull(worker, error_type, error_str);
    }
}

void
OAIAppElementsApi::createElement(QString* did, QString* wid, OAIBTAppElementParams& oaibt_app_element_params) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/api/appelements/d/{did}/w/{wid}");

    QString didPathParam("{"); didPathParam.append("did").append("}");
    fullPath.replace(didPathParam, stringValue(did));
    QString widPathParam("{"); widPathParam.append("wid").append("}");
    fullPath.replace(widPathParam, stringValue(wid));


    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "POST");


    
    QString output = oaibt_app_element_params.asJson();
    input.request_body.append(output);
    


    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIAppElementsApi::createElementCallback);

    worker->execute(&input);
}

void
OAIAppElementsApi::createElementCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QString json(worker->response);
    OAIBTAppElementModifyInfo* output = static_cast<OAIBTAppElementModifyInfo*>(create(json, QString("OAIBTAppElementModifyInfo")));
    auto wrapper = new OAIQObjectWrapper<OAIBTAppElementModifyInfo*> (output);
    wrapper->deleteLater();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit createElementSignal(output);
    } else {
        emit createElementSignalE(output, error_type, error_str);
        emit createElementSignalEFull(worker, error_type, error_str);
    }
}

void
OAIAppElementsApi::createReference(QString* did, QString* eid, QString* wvm, QString* wvmid, OAIBTAppElementReferenceParams& oaibt_app_element_reference_params) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/api/appelements/d/{did}/{wvm}/{wvmid}/e/{eid}/references");

    QString didPathParam("{"); didPathParam.append("did").append("}");
    fullPath.replace(didPathParam, stringValue(did));
    QString eidPathParam("{"); eidPathParam.append("eid").append("}");
    fullPath.replace(eidPathParam, stringValue(eid));
    QString wvmPathParam("{"); wvmPathParam.append("wvm").append("}");
    fullPath.replace(wvmPathParam, stringValue(wvm));
    QString wvmidPathParam("{"); wvmidPathParam.append("wvmid").append("}");
    fullPath.replace(wvmidPathParam, stringValue(wvmid));


    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "POST");


    
    QString output = oaibt_app_element_reference_params.asJson();
    input.request_body.append(output);
    


    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIAppElementsApi::createReferenceCallback);

    worker->execute(&input);
}

void
OAIAppElementsApi::createReferenceCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QString json(worker->response);
    OAIBTAppElementReferenceInfo* output = static_cast<OAIBTAppElementReferenceInfo*>(create(json, QString("OAIBTAppElementReferenceInfo")));
    auto wrapper = new OAIQObjectWrapper<OAIBTAppElementReferenceInfo*> (output);
    wrapper->deleteLater();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit createReferenceSignal(output);
    } else {
        emit createReferenceSignalE(output, error_type, error_str);
        emit createReferenceSignalEFull(worker, error_type, error_str);
    }
}

void
OAIAppElementsApi::deleteAppElementContent(QString* did, QString* eid, QString* wvm, QString* wvmid, QString* sid, QString* transaction_id, QString* parent_change_id, QString* description) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/api/appelements/d/{did}/{wvm}/{wvmid}/e/{eid}/content/subelements/{sid}");

    QString didPathParam("{"); didPathParam.append("did").append("}");
    fullPath.replace(didPathParam, stringValue(did));
    QString eidPathParam("{"); eidPathParam.append("eid").append("}");
    fullPath.replace(eidPathParam, stringValue(eid));
    QString wvmPathParam("{"); wvmPathParam.append("wvm").append("}");
    fullPath.replace(wvmPathParam, stringValue(wvm));
    QString wvmidPathParam("{"); wvmidPathParam.append("wvmid").append("}");
    fullPath.replace(wvmidPathParam, stringValue(wvmid));
    QString sidPathParam("{"); sidPathParam.append("sid").append("}");
    fullPath.replace(sidPathParam, stringValue(sid));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("transactionId"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(transaction_id)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("parentChangeId"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(parent_change_id)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("description"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(description)));


    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "DELETE");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIAppElementsApi::deleteAppElementContentCallback);

    worker->execute(&input);
}

void
OAIAppElementsApi::deleteAppElementContentCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QString json(worker->response);
    OAIBTAppElementModifyInfo* output = static_cast<OAIBTAppElementModifyInfo*>(create(json, QString("OAIBTAppElementModifyInfo")));
    auto wrapper = new OAIQObjectWrapper<OAIBTAppElementModifyInfo*> (output);
    wrapper->deleteLater();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit deleteAppElementContentSignal(output);
    } else {
        emit deleteAppElementContentSignalE(output, error_type, error_str);
        emit deleteAppElementContentSignalEFull(worker, error_type, error_str);
    }
}

void
OAIAppElementsApi::deleteReference(QString* did, QString* eid, QString* wvm, QString* wvmid, QString* rid, QString* transaction_id, QString* parent_change_id, QString* description) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/api/appelements/d/{did}/{wvm}/{wvmid}/e/{eid}/references/{rid}");

    QString didPathParam("{"); didPathParam.append("did").append("}");
    fullPath.replace(didPathParam, stringValue(did));
    QString eidPathParam("{"); eidPathParam.append("eid").append("}");
    fullPath.replace(eidPathParam, stringValue(eid));
    QString wvmPathParam("{"); wvmPathParam.append("wvm").append("}");
    fullPath.replace(wvmPathParam, stringValue(wvm));
    QString wvmidPathParam("{"); wvmidPathParam.append("wvmid").append("}");
    fullPath.replace(wvmidPathParam, stringValue(wvmid));
    QString ridPathParam("{"); ridPathParam.append("rid").append("}");
    fullPath.replace(ridPathParam, stringValue(rid));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("transactionId"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(transaction_id)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("parentChangeId"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(parent_change_id)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("description"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(description)));


    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "DELETE");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIAppElementsApi::deleteReferenceCallback);

    worker->execute(&input);
}

void
OAIAppElementsApi::deleteReferenceCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QString json(worker->response);
    OAIBTAppElementReferenceInfo* output = static_cast<OAIBTAppElementReferenceInfo*>(create(json, QString("OAIBTAppElementReferenceInfo")));
    auto wrapper = new OAIQObjectWrapper<OAIBTAppElementReferenceInfo*> (output);
    wrapper->deleteLater();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit deleteReferenceSignal(output);
    } else {
        emit deleteReferenceSignalE(output, error_type, error_str);
        emit deleteReferenceSignalEFull(worker, error_type, error_str);
    }
}

void
OAIAppElementsApi::getAppElementHistory(QString* did, QString* eid, QString* wvm, QString* wvmid) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/api/appelements/d/{did}/{wvm}/{wvmid}/e/{eid}/content/history");

    QString didPathParam("{"); didPathParam.append("did").append("}");
    fullPath.replace(didPathParam, stringValue(did));
    QString eidPathParam("{"); eidPathParam.append("eid").append("}");
    fullPath.replace(eidPathParam, stringValue(eid));
    QString wvmPathParam("{"); wvmPathParam.append("wvm").append("}");
    fullPath.replace(wvmPathParam, stringValue(wvm));
    QString wvmidPathParam("{"); wvmidPathParam.append("wvmid").append("}");
    fullPath.replace(wvmidPathParam, stringValue(wvmid));


    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIAppElementsApi::getAppElementHistoryCallback);

    worker->execute(&input);
}

void
OAIAppElementsApi::getAppElementHistoryCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QString json(worker->response);
    OAIBTAppElementHistoryInfo* output = static_cast<OAIBTAppElementHistoryInfo*>(create(json, QString("OAIBTAppElementHistoryInfo")));
    auto wrapper = new OAIQObjectWrapper<OAIBTAppElementHistoryInfo*> (output);
    wrapper->deleteLater();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit getAppElementHistorySignal(output);
    } else {
        emit getAppElementHistorySignalE(output, error_type, error_str);
        emit getAppElementHistorySignalEFull(worker, error_type, error_str);
    }
}

void
OAIAppElementsApi::getSubElementContent(QString* did, QString* eid, QString* wvm, QString* wvmid, QString* transaction_id, QString* change_id, QString* base_change_id, QString* subelement_id, QString* link_document_id) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/api/appelements/d/{did}/{wvm}/{wvmid}/e/{eid}/content");

    QString didPathParam("{"); didPathParam.append("did").append("}");
    fullPath.replace(didPathParam, stringValue(did));
    QString eidPathParam("{"); eidPathParam.append("eid").append("}");
    fullPath.replace(eidPathParam, stringValue(eid));
    QString wvmPathParam("{"); wvmPathParam.append("wvm").append("}");
    fullPath.replace(wvmPathParam, stringValue(wvm));
    QString wvmidPathParam("{"); wvmidPathParam.append("wvmid").append("}");
    fullPath.replace(wvmidPathParam, stringValue(wvmid));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("transactionId"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(transaction_id)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("changeId"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(change_id)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("baseChangeId"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(base_change_id)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("subelementId"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(subelement_id)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("linkDocumentId"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(link_document_id)));


    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIAppElementsApi::getSubElementContentCallback);

    worker->execute(&input);
}

void
OAIAppElementsApi::getSubElementContentCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QString json(worker->response);
    OAIBTAppElementContentInfo* output = static_cast<OAIBTAppElementContentInfo*>(create(json, QString("OAIBTAppElementContentInfo")));
    auto wrapper = new OAIQObjectWrapper<OAIBTAppElementContentInfo*> (output);
    wrapper->deleteLater();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit getSubElementContentSignal(output);
    } else {
        emit getSubElementContentSignalE(output, error_type, error_str);
        emit getSubElementContentSignalEFull(worker, error_type, error_str);
    }
}

void
OAIAppElementsApi::getSubelementIds(QString* did, QString* eid, QString* wvm, QString* wvmid, QString* transaction_id, QString* change_id) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/api/appelements/d/{did}/{wvm}/{wvmid}/e/{eid}/content/ids");

    QString didPathParam("{"); didPathParam.append("did").append("}");
    fullPath.replace(didPathParam, stringValue(did));
    QString eidPathParam("{"); eidPathParam.append("eid").append("}");
    fullPath.replace(eidPathParam, stringValue(eid));
    QString wvmPathParam("{"); wvmPathParam.append("wvm").append("}");
    fullPath.replace(wvmPathParam, stringValue(wvm));
    QString wvmidPathParam("{"); wvmidPathParam.append("wvmid").append("}");
    fullPath.replace(wvmidPathParam, stringValue(wvmid));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("transactionId"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(transaction_id)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("changeId"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(change_id)));


    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIAppElementsApi::getSubelementIdsCallback);

    worker->execute(&input);
}

void
OAIAppElementsApi::getSubelementIdsCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QString json(worker->response);
    OAIBTAppElementModifyInfo* output = static_cast<OAIBTAppElementModifyInfo*>(create(json, QString("OAIBTAppElementModifyInfo")));
    auto wrapper = new OAIQObjectWrapper<OAIBTAppElementModifyInfo*> (output);
    wrapper->deleteLater();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit getSubelementIdsSignal(output);
    } else {
        emit getSubelementIdsSignalE(output, error_type, error_str);
        emit getSubelementIdsSignalEFull(worker, error_type, error_str);
    }
}

void
OAIAppElementsApi::resolveReference(QString* did, QString* eid, QString* wvm, QString* wvmid, QString* rid, QString* transaction_id, QString* parent_change_id, bool include_internal, QString* link_document_id) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/api/appelements/d/{did}/{wvm}/{wvmid}/e/{eid}/references/{rid}");

    QString didPathParam("{"); didPathParam.append("did").append("}");
    fullPath.replace(didPathParam, stringValue(did));
    QString eidPathParam("{"); eidPathParam.append("eid").append("}");
    fullPath.replace(eidPathParam, stringValue(eid));
    QString wvmPathParam("{"); wvmPathParam.append("wvm").append("}");
    fullPath.replace(wvmPathParam, stringValue(wvm));
    QString wvmidPathParam("{"); wvmidPathParam.append("wvmid").append("}");
    fullPath.replace(wvmidPathParam, stringValue(wvmid));
    QString ridPathParam("{"); ridPathParam.append("rid").append("}");
    fullPath.replace(ridPathParam, stringValue(rid));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("transactionId"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(transaction_id)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("parentChangeId"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(parent_change_id)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("includeInternal"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(include_internal)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("linkDocumentId"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(link_document_id)));


    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIAppElementsApi::resolveReferenceCallback);

    worker->execute(&input);
}

void
OAIAppElementsApi::resolveReferenceCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QString json(worker->response);
    OAIBTAppElementReferenceResolveInfo* output = static_cast<OAIBTAppElementReferenceResolveInfo*>(create(json, QString("OAIBTAppElementReferenceResolveInfo")));
    auto wrapper = new OAIQObjectWrapper<OAIBTAppElementReferenceResolveInfo*> (output);
    wrapper->deleteLater();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit resolveReferenceSignal(output);
    } else {
        emit resolveReferenceSignalE(output, error_type, error_str);
        emit resolveReferenceSignalEFull(worker, error_type, error_str);
    }
}

void
OAIAppElementsApi::resolveReferences(QString* did, QString* eid, QString* wvm, QString* wvmid, QString* transaction_id, QString* parent_change_id, bool include_internal, QString* link_document_id, QString* reference_ids) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/api/appelements/d/{did}/{wvm}/{wvmid}/e/{eid}/resolvereferences");

    QString didPathParam("{"); didPathParam.append("did").append("}");
    fullPath.replace(didPathParam, stringValue(did));
    QString eidPathParam("{"); eidPathParam.append("eid").append("}");
    fullPath.replace(eidPathParam, stringValue(eid));
    QString wvmPathParam("{"); wvmPathParam.append("wvm").append("}");
    fullPath.replace(wvmPathParam, stringValue(wvm));
    QString wvmidPathParam("{"); wvmidPathParam.append("wvmid").append("}");
    fullPath.replace(wvmidPathParam, stringValue(wvmid));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("transactionId"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(transaction_id)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("parentChangeId"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(parent_change_id)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("includeInternal"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(include_internal)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("linkDocumentId"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(link_document_id)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("referenceIds"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(reference_ids)));


    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIAppElementsApi::resolveReferencesCallback);

    worker->execute(&input);
}

void
OAIAppElementsApi::resolveReferencesCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QString json(worker->response);
    OAIBTAppElementReferencesResolveInfo* output = static_cast<OAIBTAppElementReferencesResolveInfo*>(create(json, QString("OAIBTAppElementReferencesResolveInfo")));
    auto wrapper = new OAIQObjectWrapper<OAIBTAppElementReferencesResolveInfo*> (output);
    wrapper->deleteLater();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit resolveReferencesSignal(output);
    } else {
        emit resolveReferencesSignalE(output, error_type, error_str);
        emit resolveReferencesSignalEFull(worker, error_type, error_str);
    }
}

void
OAIAppElementsApi::startTransaction(QString* did, QString* eid, QString* wid, OAIBTAppElementStartTransactionParams& oaibt_app_element_start_transaction_params) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/api/appelements/d/{did}/w/{wid}/e/{eid}/transactions");

    QString didPathParam("{"); didPathParam.append("did").append("}");
    fullPath.replace(didPathParam, stringValue(did));
    QString eidPathParam("{"); eidPathParam.append("eid").append("}");
    fullPath.replace(eidPathParam, stringValue(eid));
    QString widPathParam("{"); widPathParam.append("wid").append("}");
    fullPath.replace(widPathParam, stringValue(wid));


    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "POST");


    
    QString output = oaibt_app_element_start_transaction_params.asJson();
    input.request_body.append(output);
    


    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIAppElementsApi::startTransactionCallback);

    worker->execute(&input);
}

void
OAIAppElementsApi::startTransactionCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QString json(worker->response);
    OAIBTAppElementModifyInfo* output = static_cast<OAIBTAppElementModifyInfo*>(create(json, QString("OAIBTAppElementModifyInfo")));
    auto wrapper = new OAIQObjectWrapper<OAIBTAppElementModifyInfo*> (output);
    wrapper->deleteLater();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit startTransactionSignal(output);
    } else {
        emit startTransactionSignalE(output, error_type, error_str);
        emit startTransactionSignalEFull(worker, error_type, error_str);
    }
}

void
OAIAppElementsApi::updateAppElement(QString* did, QString* eid, QString* wvm, QString* wvmid, OAIBTAppElementUpdateParams& oaibt_app_element_update_params) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/api/appelements/d/{did}/{wvm}/{wvmid}/e/{eid}/content");

    QString didPathParam("{"); didPathParam.append("did").append("}");
    fullPath.replace(didPathParam, stringValue(did));
    QString eidPathParam("{"); eidPathParam.append("eid").append("}");
    fullPath.replace(eidPathParam, stringValue(eid));
    QString wvmPathParam("{"); wvmPathParam.append("wvm").append("}");
    fullPath.replace(wvmPathParam, stringValue(wvm));
    QString wvmidPathParam("{"); wvmidPathParam.append("wvmid").append("}");
    fullPath.replace(wvmidPathParam, stringValue(wvmid));


    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "POST");


    
    QString output = oaibt_app_element_update_params.asJson();
    input.request_body.append(output);
    


    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIAppElementsApi::updateAppElementCallback);

    worker->execute(&input);
}

void
OAIAppElementsApi::updateAppElementCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QString json(worker->response);
    OAIBTAppElementModifyInfo* output = static_cast<OAIBTAppElementModifyInfo*>(create(json, QString("OAIBTAppElementModifyInfo")));
    auto wrapper = new OAIQObjectWrapper<OAIBTAppElementModifyInfo*> (output);
    wrapper->deleteLater();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit updateAppElementSignal(output);
    } else {
        emit updateAppElementSignalE(output, error_type, error_str);
        emit updateAppElementSignalEFull(worker, error_type, error_str);
    }
}

void
OAIAppElementsApi::updateReference(QString* did, QString* eid, QString* wvm, QString* wvmid, QString* rid, OAIBTAppElementReferenceParams& oaibt_app_element_reference_params) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/api/appelements/d/{did}/{wvm}/{wvmid}/e/{eid}/references/{rid}");

    QString didPathParam("{"); didPathParam.append("did").append("}");
    fullPath.replace(didPathParam, stringValue(did));
    QString eidPathParam("{"); eidPathParam.append("eid").append("}");
    fullPath.replace(eidPathParam, stringValue(eid));
    QString wvmPathParam("{"); wvmPathParam.append("wvm").append("}");
    fullPath.replace(wvmPathParam, stringValue(wvm));
    QString wvmidPathParam("{"); wvmidPathParam.append("wvmid").append("}");
    fullPath.replace(wvmidPathParam, stringValue(wvmid));
    QString ridPathParam("{"); ridPathParam.append("rid").append("}");
    fullPath.replace(ridPathParam, stringValue(rid));


    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "POST");


    
    QString output = oaibt_app_element_reference_params.asJson();
    input.request_body.append(output);
    


    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIAppElementsApi::updateReferenceCallback);

    worker->execute(&input);
}

void
OAIAppElementsApi::updateReferenceCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QString json(worker->response);
    OAIBTAppElementReferenceInfo* output = static_cast<OAIBTAppElementReferenceInfo*>(create(json, QString("OAIBTAppElementReferenceInfo")));
    auto wrapper = new OAIQObjectWrapper<OAIBTAppElementReferenceInfo*> (output);
    wrapper->deleteLater();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit updateReferenceSignal(output);
    } else {
        emit updateReferenceSignalE(output, error_type, error_str);
        emit updateReferenceSignalEFull(worker, error_type, error_str);
    }
}


}
