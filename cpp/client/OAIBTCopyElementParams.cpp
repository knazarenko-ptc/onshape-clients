/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * OpenAPI spec version: 1.111
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIBTCopyElementParams.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIBTCopyElementParams::OAIBTCopyElementParams(QString json) {
    init();
    this->fromJson(json);
}

OAIBTCopyElementParams::OAIBTCopyElementParams() {
    init();
}

OAIBTCopyElementParams::~OAIBTCopyElementParams() {
    this->cleanup();
}

void
OAIBTCopyElementParams::init() {
    anchor_element_id = new QString("");
    m_anchor_element_id_isSet = false;
    document_id_source = new QString("");
    m_document_id_source_isSet = false;
    element_id_source = new QString("");
    m_element_id_source_isSet = false;
    is_group_anchor = false;
    m_is_group_anchor_isSet = false;
    workspace_id_source = new QString("");
    m_workspace_id_source_isSet = false;
}

void
OAIBTCopyElementParams::cleanup() {
    if(anchor_element_id != nullptr) { 
        delete anchor_element_id;
    }
    if(document_id_source != nullptr) { 
        delete document_id_source;
    }
    if(element_id_source != nullptr) { 
        delete element_id_source;
    }

    if(workspace_id_source != nullptr) { 
        delete workspace_id_source;
    }
}

OAIBTCopyElementParams*
OAIBTCopyElementParams::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIBTCopyElementParams::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&anchor_element_id, pJson["anchorElementId"], "QString", "QString");
    
    ::OpenAPI::setValue(&document_id_source, pJson["documentIdSource"], "QString", "QString");
    
    ::OpenAPI::setValue(&element_id_source, pJson["elementIdSource"], "QString", "QString");
    
    ::OpenAPI::setValue(&is_group_anchor, pJson["isGroupAnchor"], "bool", "");
    
    ::OpenAPI::setValue(&workspace_id_source, pJson["workspaceIdSource"], "QString", "QString");
    
}

QString
OAIBTCopyElementParams::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIBTCopyElementParams::asJsonObject() {
    QJsonObject obj;
    if(anchor_element_id != nullptr && *anchor_element_id != QString("")){
        toJsonValue(QString("anchorElementId"), anchor_element_id, obj, QString("QString"));
    }
    if(document_id_source != nullptr && *document_id_source != QString("")){
        toJsonValue(QString("documentIdSource"), document_id_source, obj, QString("QString"));
    }
    if(element_id_source != nullptr && *element_id_source != QString("")){
        toJsonValue(QString("elementIdSource"), element_id_source, obj, QString("QString"));
    }
    if(m_is_group_anchor_isSet){
        obj.insert("isGroupAnchor", QJsonValue(is_group_anchor));
    }
    if(workspace_id_source != nullptr && *workspace_id_source != QString("")){
        toJsonValue(QString("workspaceIdSource"), workspace_id_source, obj, QString("QString"));
    }

    return obj;
}

QString*
OAIBTCopyElementParams::getAnchorElementId() {
    return anchor_element_id;
}
void
OAIBTCopyElementParams::setAnchorElementId(QString* anchor_element_id) {
    this->anchor_element_id = anchor_element_id;
    this->m_anchor_element_id_isSet = true;
}

QString*
OAIBTCopyElementParams::getDocumentIdSource() {
    return document_id_source;
}
void
OAIBTCopyElementParams::setDocumentIdSource(QString* document_id_source) {
    this->document_id_source = document_id_source;
    this->m_document_id_source_isSet = true;
}

QString*
OAIBTCopyElementParams::getElementIdSource() {
    return element_id_source;
}
void
OAIBTCopyElementParams::setElementIdSource(QString* element_id_source) {
    this->element_id_source = element_id_source;
    this->m_element_id_source_isSet = true;
}

bool
OAIBTCopyElementParams::isIsGroupAnchor() {
    return is_group_anchor;
}
void
OAIBTCopyElementParams::setIsGroupAnchor(bool is_group_anchor) {
    this->is_group_anchor = is_group_anchor;
    this->m_is_group_anchor_isSet = true;
}

QString*
OAIBTCopyElementParams::getWorkspaceIdSource() {
    return workspace_id_source;
}
void
OAIBTCopyElementParams::setWorkspaceIdSource(QString* workspace_id_source) {
    this->workspace_id_source = workspace_id_source;
    this->m_workspace_id_source_isSet = true;
}


bool
OAIBTCopyElementParams::isSet(){
    bool isObjectUpdated = false;
    do{
        if(anchor_element_id != nullptr && *anchor_element_id != QString("")){ isObjectUpdated = true; break;}
        if(document_id_source != nullptr && *document_id_source != QString("")){ isObjectUpdated = true; break;}
        if(element_id_source != nullptr && *element_id_source != QString("")){ isObjectUpdated = true; break;}
        if(m_is_group_anchor_isSet){ isObjectUpdated = true; break;}
        if(workspace_id_source != nullptr && *workspace_id_source != QString("")){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

