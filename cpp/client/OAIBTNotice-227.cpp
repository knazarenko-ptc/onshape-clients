/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * OpenAPI spec version: 1.111
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIBTNotice-227.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIBTNotice-227::OAIBTNotice-227(QString json) {
    init();
    this->fromJson(json);
}

OAIBTNotice-227::OAIBTNotice-227() {
    init();
}

OAIBTNotice-227::~OAIBTNotice-227() {
    this->cleanup();
}

void
OAIBTNotice-227::init() {
    level = new QString("");
    m_level_isSet = false;
    location_infos = new QList<OAIBTLocationInfo-226*>();
    m_location_infos_isSet = false;
    message = new QString("");
    m_message_isSet = false;
    node_id = new QString("");
    m_node_id_isSet = false;
    parameter_id = new QString("");
    m_parameter_id_isSet = false;
    stack_trace = new QList<OAIBTLocationInfo-226*>();
    m_stack_trace_isSet = false;
    try_node = new OAIBTNodeReference-21();
    m_try_node_isSet = false;
    type = new QString("");
    m_type_isSet = false;
}

void
OAIBTNotice-227::cleanup() {
    if(level != nullptr) { 
        delete level;
    }
    if(location_infos != nullptr) { 
        auto arr = location_infos;
        for(auto o: *arr) { 
            delete o;
        }
        delete location_infos;
    }
    if(message != nullptr) { 
        delete message;
    }
    if(node_id != nullptr) { 
        delete node_id;
    }
    if(parameter_id != nullptr) { 
        delete parameter_id;
    }
    if(stack_trace != nullptr) { 
        auto arr = stack_trace;
        for(auto o: *arr) { 
            delete o;
        }
        delete stack_trace;
    }
    if(try_node != nullptr) { 
        delete try_node;
    }
    if(type != nullptr) { 
        delete type;
    }
}

OAIBTNotice-227*
OAIBTNotice-227::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIBTNotice-227::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&level, pJson["level"], "QString", "QString");
    
    
    ::OpenAPI::setValue(&location_infos, pJson["locationInfos"], "QList", "OAIBTLocationInfo-226");
    ::OpenAPI::setValue(&message, pJson["message"], "QString", "QString");
    
    ::OpenAPI::setValue(&node_id, pJson["nodeId"], "QString", "QString");
    
    ::OpenAPI::setValue(&parameter_id, pJson["parameterId"], "QString", "QString");
    
    
    ::OpenAPI::setValue(&stack_trace, pJson["stackTrace"], "QList", "OAIBTLocationInfo-226");
    ::OpenAPI::setValue(&try_node, pJson["tryNode"], "OAIBTNodeReference-21", "OAIBTNodeReference-21");
    
    ::OpenAPI::setValue(&type, pJson["type"], "QString", "QString");
    
}

QString
OAIBTNotice-227::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIBTNotice-227::asJsonObject() {
    QJsonObject obj;
    if(level != nullptr && *level != QString("")){
        toJsonValue(QString("level"), level, obj, QString("QString"));
    }
    if(location_infos->size() > 0){
        toJsonArray((QList<void*>*)location_infos, obj, "locationInfos", "OAIBTLocationInfo-226");
    }
    if(message != nullptr && *message != QString("")){
        toJsonValue(QString("message"), message, obj, QString("QString"));
    }
    if(node_id != nullptr && *node_id != QString("")){
        toJsonValue(QString("nodeId"), node_id, obj, QString("QString"));
    }
    if(parameter_id != nullptr && *parameter_id != QString("")){
        toJsonValue(QString("parameterId"), parameter_id, obj, QString("QString"));
    }
    if(stack_trace->size() > 0){
        toJsonArray((QList<void*>*)stack_trace, obj, "stackTrace", "OAIBTLocationInfo-226");
    }
    if((try_node != nullptr) && (try_node->isSet())){
        toJsonValue(QString("tryNode"), try_node, obj, QString("OAIBTNodeReference-21"));
    }
    if(type != nullptr && *type != QString("")){
        toJsonValue(QString("type"), type, obj, QString("QString"));
    }

    return obj;
}

QString*
OAIBTNotice-227::getLevel() {
    return level;
}
void
OAIBTNotice-227::setLevel(QString* level) {
    this->level = level;
    this->m_level_isSet = true;
}

QList<OAIBTLocationInfo-226*>*
OAIBTNotice-227::getLocationInfos() {
    return location_infos;
}
void
OAIBTNotice-227::setLocationInfos(QList<OAIBTLocationInfo-226*>* location_infos) {
    this->location_infos = location_infos;
    this->m_location_infos_isSet = true;
}

QString*
OAIBTNotice-227::getMessage() {
    return message;
}
void
OAIBTNotice-227::setMessage(QString* message) {
    this->message = message;
    this->m_message_isSet = true;
}

QString*
OAIBTNotice-227::getNodeId() {
    return node_id;
}
void
OAIBTNotice-227::setNodeId(QString* node_id) {
    this->node_id = node_id;
    this->m_node_id_isSet = true;
}

QString*
OAIBTNotice-227::getParameterId() {
    return parameter_id;
}
void
OAIBTNotice-227::setParameterId(QString* parameter_id) {
    this->parameter_id = parameter_id;
    this->m_parameter_id_isSet = true;
}

QList<OAIBTLocationInfo-226*>*
OAIBTNotice-227::getStackTrace() {
    return stack_trace;
}
void
OAIBTNotice-227::setStackTrace(QList<OAIBTLocationInfo-226*>* stack_trace) {
    this->stack_trace = stack_trace;
    this->m_stack_trace_isSet = true;
}

OAIBTNodeReference-21*
OAIBTNotice-227::getTryNode() {
    return try_node;
}
void
OAIBTNotice-227::setTryNode(OAIBTNodeReference-21* try_node) {
    this->try_node = try_node;
    this->m_try_node_isSet = true;
}

QString*
OAIBTNotice-227::getType() {
    return type;
}
void
OAIBTNotice-227::setType(QString* type) {
    this->type = type;
    this->m_type_isSet = true;
}


bool
OAIBTNotice-227::isSet(){
    bool isObjectUpdated = false;
    do{
        if(level != nullptr && *level != QString("")){ isObjectUpdated = true; break;}
        if(location_infos->size() > 0){ isObjectUpdated = true; break;}
        if(message != nullptr && *message != QString("")){ isObjectUpdated = true; break;}
        if(node_id != nullptr && *node_id != QString("")){ isObjectUpdated = true; break;}
        if(parameter_id != nullptr && *parameter_id != QString("")){ isObjectUpdated = true; break;}
        if(stack_trace->size() > 0){ isObjectUpdated = true; break;}
        if(try_node != nullptr && try_node->isSet()){ isObjectUpdated = true; break;}
        if(type != nullptr && *type != QString("")){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

