/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * OpenAPI spec version: 1.111
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIBTPTopLevelImport-285.h
 *
 * 
 */

#ifndef OAIBTPTopLevelImport-285_H_
#define OAIBTPTopLevelImport-285_H_

#include <QJsonObject>


#include "OAIBTPAnnotation-231.h"
#include "OAIBTPArgumentDeclaration-232.h"
#include "OAIBTPIdentifier-8.h"
#include "OAIBTPModuleId-235.h"
#include "OAIBTPSpace-10.h"
#include "OAIBTPTopLevelNode-286.h"
#include <QList>
#include <QString>

#include "OAIObject.h"

namespace OpenAPI {

class OAIBTPTopLevelImport-285: public OAIObject {
public:
    OAIBTPTopLevelImport-285();
    OAIBTPTopLevelImport-285(QString json);
    ~OAIBTPTopLevelImport-285();
    void init();
    void cleanup();

    QString asJson () override;
    QJsonObject asJsonObject() override;
    void fromJsonObject(QJsonObject json) override;
    OAIBTPTopLevelImport-285* fromJson(QString jsonString) override;

    bool isAtomic();
    void setAtomic(bool atomic);

    QString* getBtType();
    void setBtType(QString* bt_type);

    QString* getDocumentationType();
    void setDocumentationType(QString* documentation_type);

    qint32 getEndSourceLocation();
    void setEndSourceLocation(qint32 end_source_location);

    QString* getNodeId();
    void setNodeId(QString* node_id);

    QString* getShortDescriptor();
    void setShortDescriptor(QString* short_descriptor);

    OAIBTPSpace-10* getSpaceAfter();
    void setSpaceAfter(OAIBTPSpace-10* space_after);

    OAIBTPSpace-10* getSpaceBefore();
    void setSpaceBefore(OAIBTPSpace-10* space_before);

    bool isSpaceDefault();
    void setSpaceDefault(bool space_default);

    qint32 getStartSourceLocation();
    void setStartSourceLocation(qint32 start_source_location);

    bool isDeprecated();
    void setDeprecated(bool deprecated);

    OAIBTPIdentifier-8* getSymbolName();
    void setSymbolName(OAIBTPIdentifier-8* symbol_name);

    QList<OAIBTPArgumentDeclaration-232*>* getArgumentsToDocument();
    void setArgumentsToDocument(QList<OAIBTPArgumentDeclaration-232*>* arguments_to_document);

    QString* getDeprecatedExplanation();
    void setDeprecatedExplanation(QString* deprecated_explanation);

    bool isForExport();
    void setForExport(bool for_export);

    OAIBTPSpace-10* getSpaceAfterExport();
    void setSpaceAfterExport(OAIBTPSpace-10* space_after_export);

    OAIBTPAnnotation-231* getAnnotation();
    void setAnnotation(OAIBTPAnnotation-231* annotation);

    QString* getImportMicroversion();
    void setImportMicroversion(QString* import_microversion);

    QString* getNamespaceString();
    void setNamespaceString(QString* namespace_string);

    QString* getCombinedNamespacePathAndVersion();
    void setCombinedNamespacePathAndVersion(QString* combined_namespace_path_and_version);

    OAIBTPModuleId-235* getModuleId();
    void setModuleId(OAIBTPModuleId-235* module_id);

    OAIBTPSpace-10* getSpaceBeforeImport();
    void setSpaceBeforeImport(OAIBTPSpace-10* space_before_import);

    QList<OAIBTPIdentifier-8*>* getNamespace();
    void setNamespace(QList<OAIBTPIdentifier-8*>* _namespace);


    virtual bool isSet() override;

private:
    bool atomic;
    bool m_atomic_isSet;

    QString* bt_type;
    bool m_bt_type_isSet;

    QString* documentation_type;
    bool m_documentation_type_isSet;

    qint32 end_source_location;
    bool m_end_source_location_isSet;

    QString* node_id;
    bool m_node_id_isSet;

    QString* short_descriptor;
    bool m_short_descriptor_isSet;

    OAIBTPSpace-10* space_after;
    bool m_space_after_isSet;

    OAIBTPSpace-10* space_before;
    bool m_space_before_isSet;

    bool space_default;
    bool m_space_default_isSet;

    qint32 start_source_location;
    bool m_start_source_location_isSet;

    bool deprecated;
    bool m_deprecated_isSet;

    OAIBTPIdentifier-8* symbol_name;
    bool m_symbol_name_isSet;

    QList<OAIBTPArgumentDeclaration-232*>* arguments_to_document;
    bool m_arguments_to_document_isSet;

    QString* deprecated_explanation;
    bool m_deprecated_explanation_isSet;

    bool for_export;
    bool m_for_export_isSet;

    OAIBTPSpace-10* space_after_export;
    bool m_space_after_export_isSet;

    OAIBTPAnnotation-231* annotation;
    bool m_annotation_isSet;

    QString* import_microversion;
    bool m_import_microversion_isSet;

    QString* namespace_string;
    bool m_namespace_string_isSet;

    QString* combined_namespace_path_and_version;
    bool m_combined_namespace_path_and_version_isSet;

    OAIBTPModuleId-235* module_id;
    bool m_module_id_isSet;

    OAIBTPSpace-10* space_before_import;
    bool m_space_before_import_isSet;

    QList<OAIBTPIdentifier-8*>* _namespace;
    bool m__namespace_isSet;

};

}

#endif /* OAIBTPTopLevelImport-285_H_ */
