/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * OpenAPI spec version: 1.111
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAICustomer.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAICustomer::OAICustomer(QString json) {
    init();
    this->fromJson(json);
}

OAICustomer::OAICustomer() {
    init();
}

OAICustomer::~OAICustomer() {
    this->cleanup();
}

void
OAICustomer::init() {
    account_balance = 0L;
    m_account_balance_isSet = false;
    business_vat_id = new QString("");
    m_business_vat_id_isSet = false;
    cards = new OAICustomerCardCollection();
    m_cards_isSet = false;
    created = 0L;
    m_created_isSet = false;
    currency = new QString("");
    m_currency_isSet = false;
    default_card = new QString("");
    m_default_card_isSet = false;
    default_source = new QString("");
    m_default_source_isSet = false;
    default_source_object = new OAIExternalAccount();
    m_default_source_object_isSet = false;
    deleted = false;
    m_deleted_isSet = false;
    delinquent = false;
    m_delinquent_isSet = false;
    description = new QString("");
    m_description_isSet = false;
    discount = new OAIDiscount();
    m_discount_isSet = false;
    email = new QString("");
    m_email_isSet = false;
    id = new QString("");
    m_id_isSet = false;
    livemode = false;
    m_livemode_isSet = false;
    metadata = new QMap<QString, QString*>();
    m_metadata_isSet = false;
    next_recurring_charge = new OAINextRecurringCharge();
    m_next_recurring_charge_isSet = false;
    object = new QString("");
    m_object_isSet = false;
    shipping = new OAIShippingDetails();
    m_shipping_isSet = false;
    sources = new OAIExternalAccountCollection();
    m_sources_isSet = false;
    subscription = new OAISubscription();
    m_subscription_isSet = false;
    subscriptions = new OAICustomerSubscriptionCollection();
    m_subscriptions_isSet = false;
    trial_end = 0L;
    m_trial_end_isSet = false;
}

void
OAICustomer::cleanup() {

    if(business_vat_id != nullptr) { 
        delete business_vat_id;
    }
    if(cards != nullptr) { 
        delete cards;
    }

    if(currency != nullptr) { 
        delete currency;
    }
    if(default_card != nullptr) { 
        delete default_card;
    }
    if(default_source != nullptr) { 
        delete default_source;
    }
    if(default_source_object != nullptr) { 
        delete default_source_object;
    }


    if(description != nullptr) { 
        delete description;
    }
    if(discount != nullptr) { 
        delete discount;
    }
    if(email != nullptr) { 
        delete email;
    }
    if(id != nullptr) { 
        delete id;
    }

    if(metadata != nullptr) { 
        auto arr = metadata;
        for(auto o: *arr) { 
            delete o;
        }
        delete metadata;
    }
    if(next_recurring_charge != nullptr) { 
        delete next_recurring_charge;
    }
    if(object != nullptr) { 
        delete object;
    }
    if(shipping != nullptr) { 
        delete shipping;
    }
    if(sources != nullptr) { 
        delete sources;
    }
    if(subscription != nullptr) { 
        delete subscription;
    }
    if(subscriptions != nullptr) { 
        delete subscriptions;
    }

}

OAICustomer*
OAICustomer::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAICustomer::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&account_balance, pJson["accountBalance"], "qint64", "");
    
    ::OpenAPI::setValue(&business_vat_id, pJson["businessVatId"], "QString", "QString");
    
    ::OpenAPI::setValue(&cards, pJson["cards"], "OAICustomerCardCollection", "OAICustomerCardCollection");
    
    ::OpenAPI::setValue(&created, pJson["created"], "qint64", "");
    
    ::OpenAPI::setValue(&currency, pJson["currency"], "QString", "QString");
    
    ::OpenAPI::setValue(&default_card, pJson["defaultCard"], "QString", "QString");
    
    ::OpenAPI::setValue(&default_source, pJson["defaultSource"], "QString", "QString");
    
    ::OpenAPI::setValue(&default_source_object, pJson["defaultSourceObject"], "OAIExternalAccount", "OAIExternalAccount");
    
    ::OpenAPI::setValue(&deleted, pJson["deleted"], "bool", "");
    
    ::OpenAPI::setValue(&delinquent, pJson["delinquent"], "bool", "");
    
    ::OpenAPI::setValue(&description, pJson["description"], "QString", "QString");
    
    ::OpenAPI::setValue(&discount, pJson["discount"], "OAIDiscount", "OAIDiscount");
    
    ::OpenAPI::setValue(&email, pJson["email"], "QString", "QString");
    
    ::OpenAPI::setValue(&id, pJson["id"], "QString", "QString");
    
    ::OpenAPI::setValue(&livemode, pJson["livemode"], "bool", "");
    
    
    ::OpenAPI::setValue(&metadata, pJson["metadata"], "QMap", "QString");
    ::OpenAPI::setValue(&next_recurring_charge, pJson["nextRecurringCharge"], "OAINextRecurringCharge", "OAINextRecurringCharge");
    
    ::OpenAPI::setValue(&object, pJson["object"], "QString", "QString");
    
    ::OpenAPI::setValue(&shipping, pJson["shipping"], "OAIShippingDetails", "OAIShippingDetails");
    
    ::OpenAPI::setValue(&sources, pJson["sources"], "OAIExternalAccountCollection", "OAIExternalAccountCollection");
    
    ::OpenAPI::setValue(&subscription, pJson["subscription"], "OAISubscription", "OAISubscription");
    
    ::OpenAPI::setValue(&subscriptions, pJson["subscriptions"], "OAICustomerSubscriptionCollection", "OAICustomerSubscriptionCollection");
    
    ::OpenAPI::setValue(&trial_end, pJson["trialEnd"], "qint64", "");
    
}

QString
OAICustomer::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAICustomer::asJsonObject() {
    QJsonObject obj;
    if(m_account_balance_isSet){
        obj.insert("accountBalance", QJsonValue(account_balance));
    }
    if(business_vat_id != nullptr && *business_vat_id != QString("")){
        toJsonValue(QString("businessVatId"), business_vat_id, obj, QString("QString"));
    }
    if((cards != nullptr) && (cards->isSet())){
        toJsonValue(QString("cards"), cards, obj, QString("OAICustomerCardCollection"));
    }
    if(m_created_isSet){
        obj.insert("created", QJsonValue(created));
    }
    if(currency != nullptr && *currency != QString("")){
        toJsonValue(QString("currency"), currency, obj, QString("QString"));
    }
    if(default_card != nullptr && *default_card != QString("")){
        toJsonValue(QString("defaultCard"), default_card, obj, QString("QString"));
    }
    if(default_source != nullptr && *default_source != QString("")){
        toJsonValue(QString("defaultSource"), default_source, obj, QString("QString"));
    }
    if((default_source_object != nullptr) && (default_source_object->isSet())){
        toJsonValue(QString("defaultSourceObject"), default_source_object, obj, QString("OAIExternalAccount"));
    }
    if(m_deleted_isSet){
        obj.insert("deleted", QJsonValue(deleted));
    }
    if(m_delinquent_isSet){
        obj.insert("delinquent", QJsonValue(delinquent));
    }
    if(description != nullptr && *description != QString("")){
        toJsonValue(QString("description"), description, obj, QString("QString"));
    }
    if((discount != nullptr) && (discount->isSet())){
        toJsonValue(QString("discount"), discount, obj, QString("OAIDiscount"));
    }
    if(email != nullptr && *email != QString("")){
        toJsonValue(QString("email"), email, obj, QString("QString"));
    }
    if(id != nullptr && *id != QString("")){
        toJsonValue(QString("id"), id, obj, QString("QString"));
    }
    if(m_livemode_isSet){
        obj.insert("livemode", QJsonValue(livemode));
    }
    if(metadata->size() > 0){
        toJsonMap((QMap<QString, void*>*) metadata, obj, "metadata", "QString");
    }
    if((next_recurring_charge != nullptr) && (next_recurring_charge->isSet())){
        toJsonValue(QString("nextRecurringCharge"), next_recurring_charge, obj, QString("OAINextRecurringCharge"));
    }
    if(object != nullptr && *object != QString("")){
        toJsonValue(QString("object"), object, obj, QString("QString"));
    }
    if((shipping != nullptr) && (shipping->isSet())){
        toJsonValue(QString("shipping"), shipping, obj, QString("OAIShippingDetails"));
    }
    if((sources != nullptr) && (sources->isSet())){
        toJsonValue(QString("sources"), sources, obj, QString("OAIExternalAccountCollection"));
    }
    if((subscription != nullptr) && (subscription->isSet())){
        toJsonValue(QString("subscription"), subscription, obj, QString("OAISubscription"));
    }
    if((subscriptions != nullptr) && (subscriptions->isSet())){
        toJsonValue(QString("subscriptions"), subscriptions, obj, QString("OAICustomerSubscriptionCollection"));
    }
    if(m_trial_end_isSet){
        obj.insert("trialEnd", QJsonValue(trial_end));
    }

    return obj;
}

qint64
OAICustomer::getAccountBalance() {
    return account_balance;
}
void
OAICustomer::setAccountBalance(qint64 account_balance) {
    this->account_balance = account_balance;
    this->m_account_balance_isSet = true;
}

QString*
OAICustomer::getBusinessVatId() {
    return business_vat_id;
}
void
OAICustomer::setBusinessVatId(QString* business_vat_id) {
    this->business_vat_id = business_vat_id;
    this->m_business_vat_id_isSet = true;
}

OAICustomerCardCollection*
OAICustomer::getCards() {
    return cards;
}
void
OAICustomer::setCards(OAICustomerCardCollection* cards) {
    this->cards = cards;
    this->m_cards_isSet = true;
}

qint64
OAICustomer::getCreated() {
    return created;
}
void
OAICustomer::setCreated(qint64 created) {
    this->created = created;
    this->m_created_isSet = true;
}

QString*
OAICustomer::getCurrency() {
    return currency;
}
void
OAICustomer::setCurrency(QString* currency) {
    this->currency = currency;
    this->m_currency_isSet = true;
}

QString*
OAICustomer::getDefaultCard() {
    return default_card;
}
void
OAICustomer::setDefaultCard(QString* default_card) {
    this->default_card = default_card;
    this->m_default_card_isSet = true;
}

QString*
OAICustomer::getDefaultSource() {
    return default_source;
}
void
OAICustomer::setDefaultSource(QString* default_source) {
    this->default_source = default_source;
    this->m_default_source_isSet = true;
}

OAIExternalAccount*
OAICustomer::getDefaultSourceObject() {
    return default_source_object;
}
void
OAICustomer::setDefaultSourceObject(OAIExternalAccount* default_source_object) {
    this->default_source_object = default_source_object;
    this->m_default_source_object_isSet = true;
}

bool
OAICustomer::isDeleted() {
    return deleted;
}
void
OAICustomer::setDeleted(bool deleted) {
    this->deleted = deleted;
    this->m_deleted_isSet = true;
}

bool
OAICustomer::isDelinquent() {
    return delinquent;
}
void
OAICustomer::setDelinquent(bool delinquent) {
    this->delinquent = delinquent;
    this->m_delinquent_isSet = true;
}

QString*
OAICustomer::getDescription() {
    return description;
}
void
OAICustomer::setDescription(QString* description) {
    this->description = description;
    this->m_description_isSet = true;
}

OAIDiscount*
OAICustomer::getDiscount() {
    return discount;
}
void
OAICustomer::setDiscount(OAIDiscount* discount) {
    this->discount = discount;
    this->m_discount_isSet = true;
}

QString*
OAICustomer::getEmail() {
    return email;
}
void
OAICustomer::setEmail(QString* email) {
    this->email = email;
    this->m_email_isSet = true;
}

QString*
OAICustomer::getId() {
    return id;
}
void
OAICustomer::setId(QString* id) {
    this->id = id;
    this->m_id_isSet = true;
}

bool
OAICustomer::isLivemode() {
    return livemode;
}
void
OAICustomer::setLivemode(bool livemode) {
    this->livemode = livemode;
    this->m_livemode_isSet = true;
}

QMap<QString, QString*>*
OAICustomer::getMetadata() {
    return metadata;
}
void
OAICustomer::setMetadata(QMap<QString, QString*>* metadata) {
    this->metadata = metadata;
    this->m_metadata_isSet = true;
}

OAINextRecurringCharge*
OAICustomer::getNextRecurringCharge() {
    return next_recurring_charge;
}
void
OAICustomer::setNextRecurringCharge(OAINextRecurringCharge* next_recurring_charge) {
    this->next_recurring_charge = next_recurring_charge;
    this->m_next_recurring_charge_isSet = true;
}

QString*
OAICustomer::getObject() {
    return object;
}
void
OAICustomer::setObject(QString* object) {
    this->object = object;
    this->m_object_isSet = true;
}

OAIShippingDetails*
OAICustomer::getShipping() {
    return shipping;
}
void
OAICustomer::setShipping(OAIShippingDetails* shipping) {
    this->shipping = shipping;
    this->m_shipping_isSet = true;
}

OAIExternalAccountCollection*
OAICustomer::getSources() {
    return sources;
}
void
OAICustomer::setSources(OAIExternalAccountCollection* sources) {
    this->sources = sources;
    this->m_sources_isSet = true;
}

OAISubscription*
OAICustomer::getSubscription() {
    return subscription;
}
void
OAICustomer::setSubscription(OAISubscription* subscription) {
    this->subscription = subscription;
    this->m_subscription_isSet = true;
}

OAICustomerSubscriptionCollection*
OAICustomer::getSubscriptions() {
    return subscriptions;
}
void
OAICustomer::setSubscriptions(OAICustomerSubscriptionCollection* subscriptions) {
    this->subscriptions = subscriptions;
    this->m_subscriptions_isSet = true;
}

qint64
OAICustomer::getTrialEnd() {
    return trial_end;
}
void
OAICustomer::setTrialEnd(qint64 trial_end) {
    this->trial_end = trial_end;
    this->m_trial_end_isSet = true;
}


bool
OAICustomer::isSet(){
    bool isObjectUpdated = false;
    do{
        if(m_account_balance_isSet){ isObjectUpdated = true; break;}
        if(business_vat_id != nullptr && *business_vat_id != QString("")){ isObjectUpdated = true; break;}
        if(cards != nullptr && cards->isSet()){ isObjectUpdated = true; break;}
        if(m_created_isSet){ isObjectUpdated = true; break;}
        if(currency != nullptr && *currency != QString("")){ isObjectUpdated = true; break;}
        if(default_card != nullptr && *default_card != QString("")){ isObjectUpdated = true; break;}
        if(default_source != nullptr && *default_source != QString("")){ isObjectUpdated = true; break;}
        if(default_source_object != nullptr && default_source_object->isSet()){ isObjectUpdated = true; break;}
        if(m_deleted_isSet){ isObjectUpdated = true; break;}
        if(m_delinquent_isSet){ isObjectUpdated = true; break;}
        if(description != nullptr && *description != QString("")){ isObjectUpdated = true; break;}
        if(discount != nullptr && discount->isSet()){ isObjectUpdated = true; break;}
        if(email != nullptr && *email != QString("")){ isObjectUpdated = true; break;}
        if(id != nullptr && *id != QString("")){ isObjectUpdated = true; break;}
        if(m_livemode_isSet){ isObjectUpdated = true; break;}
        if(metadata->size() > 0){ isObjectUpdated = true; break;}
        if(next_recurring_charge != nullptr && next_recurring_charge->isSet()){ isObjectUpdated = true; break;}
        if(object != nullptr && *object != QString("")){ isObjectUpdated = true; break;}
        if(shipping != nullptr && shipping->isSet()){ isObjectUpdated = true; break;}
        if(sources != nullptr && sources->isSet()){ isObjectUpdated = true; break;}
        if(subscription != nullptr && subscription->isSet()){ isObjectUpdated = true; break;}
        if(subscriptions != nullptr && subscriptions->isSet()){ isObjectUpdated = true; break;}
        if(m_trial_end_isSet){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

