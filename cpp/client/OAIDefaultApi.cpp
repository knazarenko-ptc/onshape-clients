/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * OpenAPI spec version: 1.111
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDefaultApi.h"
#include "OAIHelpers.h"
#include "OAIModelFactory.h"
#include "OAIQObjectWrapper.h"

#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAIDefaultApi::OAIDefaultApi() {}

OAIDefaultApi::~OAIDefaultApi() {}

OAIDefaultApi::OAIDefaultApi(QString host, QString basePath) {
    this->host = host;
    this->basePath = basePath;
}

void
OAIDefaultApi::createWorkflowableTestObject(QString* wfid) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/api/workflowabletestobject/testobject/{wfid}");

    QString wfidPathParam("{"); wfidPathParam.append("wfid").append("}");
    fullPath.replace(wfidPathParam, stringValue(wfid));


    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "POST");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIDefaultApi::createWorkflowableTestObjectCallback);

    worker->execute(&input);
}

void
OAIDefaultApi::createWorkflowableTestObjectCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QString json(worker->response);
    OAIBTWorkflowableTestObjectInfo* output = static_cast<OAIBTWorkflowableTestObjectInfo*>(create(json, QString("OAIBTWorkflowableTestObjectInfo")));
    auto wrapper = new OAIQObjectWrapper<OAIBTWorkflowableTestObjectInfo*> (output);
    wrapper->deleteLater();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit createWorkflowableTestObjectSignal(output);
    } else {
        emit createWorkflowableTestObjectSignalE(output, error_type, error_str);
        emit createWorkflowableTestObjectSignalEFull(worker, error_type, error_str);
    }
}

void
OAIDefaultApi::deleteApplicationThumbnails(QString* did, QString* wv, QString* wvid, QString* eid) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/api/thumbnails/d/{did}/{wv}/{wvid}/e/{eid}");

    QString didPathParam("{"); didPathParam.append("did").append("}");
    fullPath.replace(didPathParam, stringValue(did));
    QString wvPathParam("{"); wvPathParam.append("wv").append("}");
    fullPath.replace(wvPathParam, stringValue(wv));
    QString wvidPathParam("{"); wvidPathParam.append("wvid").append("}");
    fullPath.replace(wvidPathParam, stringValue(wvid));
    QString eidPathParam("{"); eidPathParam.append("eid").append("}");
    fullPath.replace(eidPathParam, stringValue(eid));


    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "DELETE");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIDefaultApi::deleteApplicationThumbnailsCallback);

    worker->execute(&input);
}

void
OAIDefaultApi::deleteApplicationThumbnailsCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit deleteApplicationThumbnailsSignal();
    } else {
        emit deleteApplicationThumbnailsSignalE(error_type, error_str);
        emit deleteApplicationThumbnailsSignalEFull(worker, error_type, error_str);
    }
}

void
OAIDefaultApi::deleteAssociativeData(QString* did, QString* eid, QString* wvm, QString* wvmid, QString* transaction_id, QString* parent_change_id, QList<QString*>* associative_data_id, QString* element_id, QString* view_id, QString* microversion_id, QString* document_microversion, QString* deterministic_id, QString* feature_id, QString* entity_id, QString* occurrence_id) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/api/appelements/d/{did}/{wvm}/{wvmid}/e/{eid}/associativedata");

    QString didPathParam("{"); didPathParam.append("did").append("}");
    fullPath.replace(didPathParam, stringValue(did));
    QString eidPathParam("{"); eidPathParam.append("eid").append("}");
    fullPath.replace(eidPathParam, stringValue(eid));
    QString wvmPathParam("{"); wvmPathParam.append("wvm").append("}");
    fullPath.replace(wvmPathParam, stringValue(wvm));
    QString wvmidPathParam("{"); wvmidPathParam.append("wvmid").append("}");
    fullPath.replace(wvmidPathParam, stringValue(wvmid));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("transactionId"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(transaction_id)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("parentChangeId"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(parent_change_id)));



    if (associative_data_id->size() > 0) {
      if (QString("multi").indexOf("multi") == 0) {
        foreach(QString* t, *associative_data_id) {
          if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
          else
            fullPath.append("?");
          fullPath.append("associativeDataId=").append(stringValue(t));
        }
      }
      else if (QString("multi").indexOf("ssv") == 0) {
        if (fullPath.indexOf("?") > 0)
          fullPath.append("&");
        else
          fullPath.append("?");
        fullPath.append("associativeDataId=");
        qint32 count = 0;
        foreach(QString* t, *associative_data_id) {
          if (count > 0) {
            fullPath.append(" ");
          }
          fullPath.append(stringValue(t));
        }
      }
      else if (QString("multi").indexOf("tsv") == 0) {
        if (fullPath.indexOf("?") > 0)
          fullPath.append("&");
        else
          fullPath.append("?");
        fullPath.append("associativeDataId=");
        qint32 count = 0;
        foreach(QString* t, *associative_data_id) {
          if (count > 0) {
            fullPath.append("\t");
          }
          fullPath.append(stringValue(t));
        }
      }
    }

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("elementId"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(element_id)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("viewId"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(view_id)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("microversionId"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(microversion_id)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("documentMicroversion"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(document_microversion)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("deterministicId"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(deterministic_id)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("featureId"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(feature_id)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("entityId"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(entity_id)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("occurrenceId"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(occurrence_id)));


    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "DELETE");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIDefaultApi::deleteAssociativeDataCallback);

    worker->execute(&input);
}

void
OAIDefaultApi::deleteAssociativeDataCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QString json(worker->response);
    OAIBTAppElementBasicInfo* output = static_cast<OAIBTAppElementBasicInfo*>(create(json, QString("OAIBTAppElementBasicInfo")));
    auto wrapper = new OAIQObjectWrapper<OAIBTAppElementBasicInfo*> (output);
    wrapper->deleteLater();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit deleteAssociativeDataSignal(output);
    } else {
        emit deleteAssociativeDataSignalE(output, error_type, error_str);
        emit deleteAssociativeDataSignalEFull(worker, error_type, error_str);
    }
}

void
OAIDefaultApi::getAssociativeData(QString* did, QString* wvm, QString* wvmid, QString* eid, QString* transaction_id, QString* change_id, QList<QString*>* associative_data_id, QString* element_id, QString* view_id, QString* microversion_id, QString* document_microversion, QString* deterministic_id, QString* feature_id, QString* entity_id, QString* occurrence_id, bool return_id_tags) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/api/appelements/d/{did}/{wvm}/{wvmid}/e/{eid}/associativedata");

    QString didPathParam("{"); didPathParam.append("did").append("}");
    fullPath.replace(didPathParam, stringValue(did));
    QString wvmPathParam("{"); wvmPathParam.append("wvm").append("}");
    fullPath.replace(wvmPathParam, stringValue(wvm));
    QString wvmidPathParam("{"); wvmidPathParam.append("wvmid").append("}");
    fullPath.replace(wvmidPathParam, stringValue(wvmid));
    QString eidPathParam("{"); eidPathParam.append("eid").append("}");
    fullPath.replace(eidPathParam, stringValue(eid));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("transactionId"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(transaction_id)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("changeId"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(change_id)));



    if (associative_data_id->size() > 0) {
      if (QString("multi").indexOf("multi") == 0) {
        foreach(QString* t, *associative_data_id) {
          if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
          else
            fullPath.append("?");
          fullPath.append("associativeDataId=").append(stringValue(t));
        }
      }
      else if (QString("multi").indexOf("ssv") == 0) {
        if (fullPath.indexOf("?") > 0)
          fullPath.append("&");
        else
          fullPath.append("?");
        fullPath.append("associativeDataId=");
        qint32 count = 0;
        foreach(QString* t, *associative_data_id) {
          if (count > 0) {
            fullPath.append(" ");
          }
          fullPath.append(stringValue(t));
        }
      }
      else if (QString("multi").indexOf("tsv") == 0) {
        if (fullPath.indexOf("?") > 0)
          fullPath.append("&");
        else
          fullPath.append("?");
        fullPath.append("associativeDataId=");
        qint32 count = 0;
        foreach(QString* t, *associative_data_id) {
          if (count > 0) {
            fullPath.append("\t");
          }
          fullPath.append(stringValue(t));
        }
      }
    }

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("elementId"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(element_id)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("viewId"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(view_id)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("microversionId"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(microversion_id)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("documentMicroversion"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(document_microversion)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("deterministicId"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(deterministic_id)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("featureId"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(feature_id)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("entityId"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(entity_id)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("occurrenceId"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(occurrence_id)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("returnIdTags"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(return_id_tags)));


    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIDefaultApi::getAssociativeDataCallback);

    worker->execute(&input);
}

void
OAIDefaultApi::getAssociativeDataCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QString json(worker->response);
    OAIBTAppAssociativeDataInfoArray* output = static_cast<OAIBTAppAssociativeDataInfoArray*>(create(json, QString("OAIBTAppAssociativeDataInfoArray")));
    auto wrapper = new OAIQObjectWrapper<OAIBTAppAssociativeDataInfoArray*> (output);
    wrapper->deleteLater();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit getAssociativeDataSignal(output);
    } else {
        emit getAssociativeDataSignalE(output, error_type, error_str);
        emit getAssociativeDataSignalEFull(worker, error_type, error_str);
    }
}

void
OAIDefaultApi::getConfiguredElementThumbnailWithSize(QString* did, QString* wid, QString* eid, QString* cid, QString* sz, QString* t, bool reject_empty) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/api/thumbnails/d/{did}/w/{wid}/e/{eid}/c/{cid}/s/{sz}");

    QString didPathParam("{"); didPathParam.append("did").append("}");
    fullPath.replace(didPathParam, stringValue(did));
    QString widPathParam("{"); widPathParam.append("wid").append("}");
    fullPath.replace(widPathParam, stringValue(wid));
    QString eidPathParam("{"); eidPathParam.append("eid").append("}");
    fullPath.replace(eidPathParam, stringValue(eid));
    QString cidPathParam("{"); cidPathParam.append("cid").append("}");
    fullPath.replace(cidPathParam, stringValue(cid));
    QString szPathParam("{"); szPathParam.append("sz").append("}");
    fullPath.replace(szPathParam, stringValue(sz));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("t"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(t)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("rejectEmpty"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(reject_empty)));


    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIDefaultApi::getConfiguredElementThumbnailWithSizeCallback);

    worker->execute(&input);
}

void
OAIDefaultApi::getConfiguredElementThumbnailWithSizeCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit getConfiguredElementThumbnailWithSizeSignal();
    } else {
        emit getConfiguredElementThumbnailWithSizeSignalE(error_type, error_str);
        emit getConfiguredElementThumbnailWithSizeSignalEFull(worker, error_type, error_str);
    }
}

void
OAIDefaultApi::getDocumentThumbnail(QString* did, QString* wid) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/api/thumbnails/d/{did}/w/{wid}");

    QString didPathParam("{"); didPathParam.append("did").append("}");
    fullPath.replace(didPathParam, stringValue(did));
    QString widPathParam("{"); widPathParam.append("wid").append("}");
    fullPath.replace(widPathParam, stringValue(wid));


    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIDefaultApi::getDocumentThumbnailCallback);

    worker->execute(&input);
}

void
OAIDefaultApi::getDocumentThumbnailCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QString json(worker->response);
    OAIBTThumbnailInfo* output = static_cast<OAIBTThumbnailInfo*>(create(json, QString("OAIBTThumbnailInfo")));
    auto wrapper = new OAIQObjectWrapper<OAIBTThumbnailInfo*> (output);
    wrapper->deleteLater();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit getDocumentThumbnailSignal(output);
    } else {
        emit getDocumentThumbnailSignalE(output, error_type, error_str);
        emit getDocumentThumbnailSignalEFull(worker, error_type, error_str);
    }
}

void
OAIDefaultApi::getDocumentThumbnailWithSize(QString* did, QString* wid, QString* sz, QString* t) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/api/thumbnails/d/{did}/w/{wid}/s/{sz}");

    QString didPathParam("{"); didPathParam.append("did").append("}");
    fullPath.replace(didPathParam, stringValue(did));
    QString widPathParam("{"); widPathParam.append("wid").append("}");
    fullPath.replace(widPathParam, stringValue(wid));
    QString szPathParam("{"); szPathParam.append("sz").append("}");
    fullPath.replace(szPathParam, stringValue(sz));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("t"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(t)));


    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIDefaultApi::getDocumentThumbnailWithSizeCallback);

    worker->execute(&input);
}

void
OAIDefaultApi::getDocumentThumbnailWithSizeCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit getDocumentThumbnailWithSizeSignal();
    } else {
        emit getDocumentThumbnailWithSizeSignalE(error_type, error_str);
        emit getDocumentThumbnailWithSizeSignalEFull(worker, error_type, error_str);
    }
}

void
OAIDefaultApi::getElementThumbnail(QString* did, QString* wv, QString* wvid, QString* eid, QString* link_document_id) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/api/thumbnails/d/{did}/{wv}/{wvid}/e/{eid}");

    QString didPathParam("{"); didPathParam.append("did").append("}");
    fullPath.replace(didPathParam, stringValue(did));
    QString wvPathParam("{"); wvPathParam.append("wv").append("}");
    fullPath.replace(wvPathParam, stringValue(wv));
    QString wvidPathParam("{"); wvidPathParam.append("wvid").append("}");
    fullPath.replace(wvidPathParam, stringValue(wvid));
    QString eidPathParam("{"); eidPathParam.append("eid").append("}");
    fullPath.replace(eidPathParam, stringValue(eid));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("linkDocumentId"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(link_document_id)));


    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIDefaultApi::getElementThumbnailCallback);

    worker->execute(&input);
}

void
OAIDefaultApi::getElementThumbnailCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QString json(worker->response);
    OAIBTThumbnailInfo* output = static_cast<OAIBTThumbnailInfo*>(create(json, QString("OAIBTThumbnailInfo")));
    auto wrapper = new OAIQObjectWrapper<OAIBTThumbnailInfo*> (output);
    wrapper->deleteLater();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit getElementThumbnailSignal(output);
    } else {
        emit getElementThumbnailSignalE(output, error_type, error_str);
        emit getElementThumbnailSignalEFull(worker, error_type, error_str);
    }
}

void
OAIDefaultApi::getElementThumbnailWithApiConfiguration(QString* did, QString* wid, QString* eid, QString* cid, QString* sz, QString* t, bool reject_empty) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/api/thumbnails/d/{did}/w/{wid}/e/{eid}/ac/{cid}/s/{sz}");

    QString didPathParam("{"); didPathParam.append("did").append("}");
    fullPath.replace(didPathParam, stringValue(did));
    QString widPathParam("{"); widPathParam.append("wid").append("}");
    fullPath.replace(widPathParam, stringValue(wid));
    QString eidPathParam("{"); eidPathParam.append("eid").append("}");
    fullPath.replace(eidPathParam, stringValue(eid));
    QString cidPathParam("{"); cidPathParam.append("cid").append("}");
    fullPath.replace(cidPathParam, stringValue(cid));
    QString szPathParam("{"); szPathParam.append("sz").append("}");
    fullPath.replace(szPathParam, stringValue(sz));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("t"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(t)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("rejectEmpty"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(reject_empty)));


    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIDefaultApi::getElementThumbnailWithApiConfigurationCallback);

    worker->execute(&input);
}

void
OAIDefaultApi::getElementThumbnailWithApiConfigurationCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit getElementThumbnailWithApiConfigurationSignal();
    } else {
        emit getElementThumbnailWithApiConfigurationSignalE(error_type, error_str);
        emit getElementThumbnailWithApiConfigurationSignalEFull(worker, error_type, error_str);
    }
}

void
OAIDefaultApi::getElementThumbnailWithSize(QString* did, QString* wid, QString* eid, QString* sz, QString* t, bool reject_empty) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/api/thumbnails/d/{did}/w/{wid}/e/{eid}/s/{sz}");

    QString didPathParam("{"); didPathParam.append("did").append("}");
    fullPath.replace(didPathParam, stringValue(did));
    QString widPathParam("{"); widPathParam.append("wid").append("}");
    fullPath.replace(widPathParam, stringValue(wid));
    QString eidPathParam("{"); eidPathParam.append("eid").append("}");
    fullPath.replace(eidPathParam, stringValue(eid));
    QString szPathParam("{"); szPathParam.append("sz").append("}");
    fullPath.replace(szPathParam, stringValue(sz));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("t"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(t)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("rejectEmpty"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(reject_empty)));


    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIDefaultApi::getElementThumbnailWithSizeCallback);

    worker->execute(&input);
}

void
OAIDefaultApi::getElementThumbnailWithSizeCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit getElementThumbnailWithSizeSignal();
    } else {
        emit getElementThumbnailWithSizeSignalE(error_type, error_str);
        emit getElementThumbnailWithSizeSignalEFull(worker, error_type, error_str);
    }
}

void
OAIDefaultApi::getLatestInDocument(QString* did, QList<QString*>* beta_capability_ids, bool include_parts, bool include_surfaces, bool include_wires, bool include_sketches, bool include_reference_features, bool include_assemblies, bool include_features, bool include_feature_studios, bool include_part_studios, bool include_blobs, bool include_meshes, bool include_flattened_bodies, QString* allowed_blob_mime_types, qint32 max_feature_script_version, bool include_applications, QString* allowed_application_mime_types, bool include_composite_parts, bool include_fs_tables) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/api/insertables/d/{did}/latest");

    QString didPathParam("{"); didPathParam.append("did").append("}");
    fullPath.replace(didPathParam, stringValue(did));



    if (beta_capability_ids->size() > 0) {
      if (QString("multi").indexOf("multi") == 0) {
        foreach(QString* t, *beta_capability_ids) {
          if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
          else
            fullPath.append("?");
          fullPath.append("betaCapabilityIds=").append(stringValue(t));
        }
      }
      else if (QString("multi").indexOf("ssv") == 0) {
        if (fullPath.indexOf("?") > 0)
          fullPath.append("&");
        else
          fullPath.append("?");
        fullPath.append("betaCapabilityIds=");
        qint32 count = 0;
        foreach(QString* t, *beta_capability_ids) {
          if (count > 0) {
            fullPath.append(" ");
          }
          fullPath.append(stringValue(t));
        }
      }
      else if (QString("multi").indexOf("tsv") == 0) {
        if (fullPath.indexOf("?") > 0)
          fullPath.append("&");
        else
          fullPath.append("?");
        fullPath.append("betaCapabilityIds=");
        qint32 count = 0;
        foreach(QString* t, *beta_capability_ids) {
          if (count > 0) {
            fullPath.append("\t");
          }
          fullPath.append(stringValue(t));
        }
      }
    }

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("includeParts"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(include_parts)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("includeSurfaces"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(include_surfaces)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("includeWires"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(include_wires)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("includeSketches"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(include_sketches)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("includeReferenceFeatures"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(include_reference_features)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("includeAssemblies"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(include_assemblies)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("includeFeatures"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(include_features)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("includeFeatureStudios"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(include_feature_studios)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("includePartStudios"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(include_part_studios)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("includeBlobs"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(include_blobs)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("includeMeshes"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(include_meshes)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("includeFlattenedBodies"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(include_flattened_bodies)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("allowedBlobMimeTypes"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(allowed_blob_mime_types)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("maxFeatureScriptVersion"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(max_feature_script_version)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("includeApplications"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(include_applications)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("allowedApplicationMimeTypes"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(allowed_application_mime_types)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("includeCompositeParts"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(include_composite_parts)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("includeFSTables"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(include_fs_tables)));


    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIDefaultApi::getLatestInDocumentCallback);

    worker->execute(&input);
}

void
OAIDefaultApi::getLatestInDocumentCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QString json(worker->response);
    OAIBTListResponseBTInsertableInfo* output = static_cast<OAIBTListResponseBTInsertableInfo*>(create(json, QString("OAIBTListResponseBTInsertableInfo")));
    auto wrapper = new OAIQObjectWrapper<OAIBTListResponseBTInsertableInfo*> (output);
    wrapper->deleteLater();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit getLatestInDocumentSignal(output);
    } else {
        emit getLatestInDocumentSignalE(output, error_type, error_str);
        emit getLatestInDocumentSignalEFull(worker, error_type, error_str);
    }
}

void
OAIDefaultApi::getMetadataSchema(qint32 object_type, QString* owner_id, QString* document_id, qint32 owner_type) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/api/metadataschema");


    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("ownerId"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(owner_id)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("documentId"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(document_id)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("ownerType"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(owner_type)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("objectType"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(object_type)));


    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIDefaultApi::getMetadataSchemaCallback);

    worker->execute(&input);
}

void
OAIDefaultApi::getMetadataSchemaCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QString json(worker->response);
    OAIBTMetadataSchemaInfo* output = static_cast<OAIBTMetadataSchemaInfo*>(create(json, QString("OAIBTMetadataSchemaInfo")));
    auto wrapper = new OAIQObjectWrapper<OAIBTMetadataSchemaInfo*> (output);
    wrapper->deleteLater();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit getMetadataSchemaSignal(output);
    } else {
        emit getMetadataSchemaSignalE(output, error_type, error_str);
        emit getMetadataSchemaSignalEFull(worker, error_type, error_str);
    }
}

void
OAIDefaultApi::getProperties(QString* schema_id, QString* owner_id, QString* document_id, qint32 owner_type, qint32 object_type, bool strict, bool active_only, qint32 offset, qint32 limit) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/api/metadataschema/properties");


    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("schemaId"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(schema_id)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("ownerId"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(owner_id)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("documentId"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(document_id)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("ownerType"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(owner_type)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("objectType"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(object_type)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("strict"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(strict)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("activeOnly"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(active_only)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("offset"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(offset)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("limit"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(limit)));


    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIDefaultApi::getPropertiesCallback);

    worker->execute(&input);
}

void
OAIDefaultApi::getPropertiesCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QString json(worker->response);
    OAIBTListResponseBTMetadataPropertySummaryInfo* output = static_cast<OAIBTListResponseBTMetadataPropertySummaryInfo*>(create(json, QString("OAIBTListResponseBTMetadataPropertySummaryInfo")));
    auto wrapper = new OAIQObjectWrapper<OAIBTListResponseBTMetadataPropertySummaryInfo*> (output);
    wrapper->deleteLater();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit getPropertiesSignal(output);
    } else {
        emit getPropertiesSignalE(output, error_type, error_str);
        emit getPropertiesSignalEFull(worker, error_type, error_str);
    }
}

void
OAIDefaultApi::getPropertyInfo(QString* pid, QString* document_id, QString* schema_id, QString* owner_id, qint32 owner_type, qint32 object_type) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/api/metadataschema/propertyinfo/{pid}");

    QString pidPathParam("{"); pidPathParam.append("pid").append("}");
    fullPath.replace(pidPathParam, stringValue(pid));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("documentId"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(document_id)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("schemaId"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(schema_id)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("ownerId"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(owner_id)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("ownerType"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(owner_type)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("objectType"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(object_type)));


    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIDefaultApi::getPropertyInfoCallback);

    worker->execute(&input);
}

void
OAIDefaultApi::getPropertyInfoCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QString json(worker->response);
    OAIBTMetadataPropertyInfo* output = static_cast<OAIBTMetadataPropertyInfo*>(create(json, QString("OAIBTMetadataPropertyInfo")));
    auto wrapper = new OAIQObjectWrapper<OAIBTMetadataPropertyInfo*> (output);
    wrapper->deleteLater();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit getPropertyInfoSignal(output);
    } else {
        emit getPropertyInfoSignalE(output, error_type, error_str);
        emit getPropertyInfoSignalEFull(worker, error_type, error_str);
    }
}

void
OAIDefaultApi::getSchema(QString* sid, QString* document_id) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/api/metadataschema/{sid}");

    QString sidPathParam("{"); sidPathParam.append("sid").append("}");
    fullPath.replace(sidPathParam, stringValue(sid));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("documentId"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(document_id)));


    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIDefaultApi::getSchemaCallback);

    worker->execute(&input);
}

void
OAIDefaultApi::getSchemaCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QString json(worker->response);
    OAIBTMetadataSchemaInfo* output = static_cast<OAIBTMetadataSchemaInfo*>(create(json, QString("OAIBTMetadataSchemaInfo")));
    auto wrapper = new OAIQObjectWrapper<OAIBTMetadataSchemaInfo*> (output);
    wrapper->deleteLater();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit getSchemaSignal(output);
    } else {
        emit getSchemaSignalE(output, error_type, error_str);
        emit getSchemaSignalEFull(worker, error_type, error_str);
    }
}

void
OAIDefaultApi::getSketchBoundingBoxes(QString* did, QString* wvm, QString* wvmid, QString* eid, QString* sid, QString* configuration, QString* link_document_id) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/api/partstudios/d/{did}/{wvm}/{wvmid}/e/{eid}/sketches/{sid}/boundingboxes");

    QString didPathParam("{"); didPathParam.append("did").append("}");
    fullPath.replace(didPathParam, stringValue(did));
    QString wvmPathParam("{"); wvmPathParam.append("wvm").append("}");
    fullPath.replace(wvmPathParam, stringValue(wvm));
    QString wvmidPathParam("{"); wvmidPathParam.append("wvmid").append("}");
    fullPath.replace(wvmidPathParam, stringValue(wvmid));
    QString eidPathParam("{"); eidPathParam.append("eid").append("}");
    fullPath.replace(eidPathParam, stringValue(eid));
    QString sidPathParam("{"); sidPathParam.append("sid").append("}");
    fullPath.replace(sidPathParam, stringValue(sid));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("configuration"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(configuration)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("linkDocumentId"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(link_document_id)));


    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIDefaultApi::getSketchBoundingBoxesCallback);

    worker->execute(&input);
}

void
OAIDefaultApi::getSketchBoundingBoxesCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QString json(worker->response);
    OAIBTBoundingBoxInfo* output = static_cast<OAIBTBoundingBoxInfo*>(create(json, QString("OAIBTBoundingBoxInfo")));
    auto wrapper = new OAIQObjectWrapper<OAIBTBoundingBoxInfo*> (output);
    wrapper->deleteLater();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit getSketchBoundingBoxesSignal(output);
    } else {
        emit getSketchBoundingBoxesSignalE(output, error_type, error_str);
        emit getSketchBoundingBoxesSignalEFull(worker, error_type, error_str);
    }
}

void
OAIDefaultApi::getSketchInfo(QString* did, QString* wvm, QString* wvmid, QString* eid, QString* configuration, QList<QString*>* sketch_id, bool output3_d, bool curve_points, bool include_geometry, QString* link_document_id) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/api/partstudios/d/{did}/{wvm}/{wvmid}/e/{eid}/sketches");

    QString didPathParam("{"); didPathParam.append("did").append("}");
    fullPath.replace(didPathParam, stringValue(did));
    QString wvmPathParam("{"); wvmPathParam.append("wvm").append("}");
    fullPath.replace(wvmPathParam, stringValue(wvm));
    QString wvmidPathParam("{"); wvmidPathParam.append("wvmid").append("}");
    fullPath.replace(wvmidPathParam, stringValue(wvmid));
    QString eidPathParam("{"); eidPathParam.append("eid").append("}");
    fullPath.replace(eidPathParam, stringValue(eid));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("configuration"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(configuration)));



    if (sketch_id->size() > 0) {
      if (QString("multi").indexOf("multi") == 0) {
        foreach(QString* t, *sketch_id) {
          if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
          else
            fullPath.append("?");
          fullPath.append("sketchId=").append(stringValue(t));
        }
      }
      else if (QString("multi").indexOf("ssv") == 0) {
        if (fullPath.indexOf("?") > 0)
          fullPath.append("&");
        else
          fullPath.append("?");
        fullPath.append("sketchId=");
        qint32 count = 0;
        foreach(QString* t, *sketch_id) {
          if (count > 0) {
            fullPath.append(" ");
          }
          fullPath.append(stringValue(t));
        }
      }
      else if (QString("multi").indexOf("tsv") == 0) {
        if (fullPath.indexOf("?") > 0)
          fullPath.append("&");
        else
          fullPath.append("?");
        fullPath.append("sketchId=");
        qint32 count = 0;
        foreach(QString* t, *sketch_id) {
          if (count > 0) {
            fullPath.append("\t");
          }
          fullPath.append(stringValue(t));
        }
      }
    }

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("output3D"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(output3_d)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("curvePoints"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(curve_points)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("includeGeometry"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(include_geometry)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("linkDocumentId"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(link_document_id)));


    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIDefaultApi::getSketchInfoCallback);

    worker->execute(&input);
}

void
OAIDefaultApi::getSketchInfoCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit getSketchInfoSignal();
    } else {
        emit getSketchInfoSignalE(error_type, error_str);
        emit getSketchInfoSignalEFull(worker, error_type, error_str);
    }
}

void
OAIDefaultApi::getTessellatedEntities(QString* did, QString* wvm, QString* wvmid, QString* eid, QString* sid, QString* configuration, QList<QString*>* entity_id, double angle_tolerance, double chord_tolerance, QString* link_document_id) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/api/partstudios/d/{did}/{wvm}/{wvmid}/e/{eid}/sketches/{sid}/tessellatedentities");

    QString didPathParam("{"); didPathParam.append("did").append("}");
    fullPath.replace(didPathParam, stringValue(did));
    QString wvmPathParam("{"); wvmPathParam.append("wvm").append("}");
    fullPath.replace(wvmPathParam, stringValue(wvm));
    QString wvmidPathParam("{"); wvmidPathParam.append("wvmid").append("}");
    fullPath.replace(wvmidPathParam, stringValue(wvmid));
    QString eidPathParam("{"); eidPathParam.append("eid").append("}");
    fullPath.replace(eidPathParam, stringValue(eid));
    QString sidPathParam("{"); sidPathParam.append("sid").append("}");
    fullPath.replace(sidPathParam, stringValue(sid));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("configuration"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(configuration)));



    if (entity_id->size() > 0) {
      if (QString("multi").indexOf("multi") == 0) {
        foreach(QString* t, *entity_id) {
          if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
          else
            fullPath.append("?");
          fullPath.append("entityId=").append(stringValue(t));
        }
      }
      else if (QString("multi").indexOf("ssv") == 0) {
        if (fullPath.indexOf("?") > 0)
          fullPath.append("&");
        else
          fullPath.append("?");
        fullPath.append("entityId=");
        qint32 count = 0;
        foreach(QString* t, *entity_id) {
          if (count > 0) {
            fullPath.append(" ");
          }
          fullPath.append(stringValue(t));
        }
      }
      else if (QString("multi").indexOf("tsv") == 0) {
        if (fullPath.indexOf("?") > 0)
          fullPath.append("&");
        else
          fullPath.append("?");
        fullPath.append("entityId=");
        qint32 count = 0;
        foreach(QString* t, *entity_id) {
          if (count > 0) {
            fullPath.append("\t");
          }
          fullPath.append(stringValue(t));
        }
      }
    }

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("angleTolerance"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(angle_tolerance)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("chordTolerance"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(chord_tolerance)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("linkDocumentId"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(link_document_id)));


    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIDefaultApi::getTessellatedEntitiesCallback);

    worker->execute(&input);
}

void
OAIDefaultApi::getTessellatedEntitiesCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit getTessellatedEntitiesSignal();
    } else {
        emit getTessellatedEntitiesSignalE(error_type, error_str);
        emit getTessellatedEntitiesSignalEFull(worker, error_type, error_str);
    }
}

void
OAIDefaultApi::getThumbnailForDocument(QString* did) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/api/thumbnails/d/{did}");

    QString didPathParam("{"); didPathParam.append("did").append("}");
    fullPath.replace(didPathParam, stringValue(did));


    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIDefaultApi::getThumbnailForDocumentCallback);

    worker->execute(&input);
}

void
OAIDefaultApi::getThumbnailForDocumentCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QString json(worker->response);
    OAIBTThumbnailInfo* output = static_cast<OAIBTThumbnailInfo*>(create(json, QString("OAIBTThumbnailInfo")));
    auto wrapper = new OAIQObjectWrapper<OAIBTThumbnailInfo*> (output);
    wrapper->deleteLater();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit getThumbnailForDocumentSignal(output);
    } else {
        emit getThumbnailForDocumentSignalE(output, error_type, error_str);
        emit getThumbnailForDocumentSignalEFull(worker, error_type, error_str);
    }
}

void
OAIDefaultApi::getThumbnailForDocumentAndVersion(QString* did, QString* vid, QString* link_document_id) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/api/thumbnails/d/{did}/v/{vid}");

    QString didPathParam("{"); didPathParam.append("did").append("}");
    fullPath.replace(didPathParam, stringValue(did));
    QString vidPathParam("{"); vidPathParam.append("vid").append("}");
    fullPath.replace(vidPathParam, stringValue(vid));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("linkDocumentId"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(link_document_id)));


    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIDefaultApi::getThumbnailForDocumentAndVersionCallback);

    worker->execute(&input);
}

void
OAIDefaultApi::getThumbnailForDocumentAndVersionCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit getThumbnailForDocumentAndVersionSignal();
    } else {
        emit getThumbnailForDocumentAndVersionSignalE(error_type, error_str);
        emit getThumbnailForDocumentAndVersionSignalEFull(worker, error_type, error_str);
    }
}

void
OAIDefaultApi::getThumbnailForDocumentAndVersionOld(QString* did, QString* vid) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/api/thumbnails/document/{did}/version/{vid}");

    QString didPathParam("{"); didPathParam.append("did").append("}");
    fullPath.replace(didPathParam, stringValue(did));
    QString vidPathParam("{"); vidPathParam.append("vid").append("}");
    fullPath.replace(vidPathParam, stringValue(vid));


    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIDefaultApi::getThumbnailForDocumentAndVersionOldCallback);

    worker->execute(&input);
}

void
OAIDefaultApi::getThumbnailForDocumentAndVersionOldCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit getThumbnailForDocumentAndVersionOldSignal();
    } else {
        emit getThumbnailForDocumentAndVersionOldSignalE(error_type, error_str);
        emit getThumbnailForDocumentAndVersionOldSignalEFull(worker, error_type, error_str);
    }
}

void
OAIDefaultApi::getThumbnailForDocumentOld(QString* did) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/api/thumbnails/document/{did}");

    QString didPathParam("{"); didPathParam.append("did").append("}");
    fullPath.replace(didPathParam, stringValue(did));


    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIDefaultApi::getThumbnailForDocumentOldCallback);

    worker->execute(&input);
}

void
OAIDefaultApi::getThumbnailForDocumentOldCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QString json(worker->response);
    OAIBTThumbnailInfo* output = static_cast<OAIBTThumbnailInfo*>(create(json, QString("OAIBTThumbnailInfo")));
    auto wrapper = new OAIQObjectWrapper<OAIBTThumbnailInfo*> (output);
    wrapper->deleteLater();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit getThumbnailForDocumentOldSignal(output);
    } else {
        emit getThumbnailForDocumentOldSignalE(output, error_type, error_str);
        emit getThumbnailForDocumentOldSignalEFull(worker, error_type, error_str);
    }
}

void
OAIDefaultApi::getWorkflowableTestObject(QString* oid) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/api/workflowabletestobject/{oid}");

    QString oidPathParam("{"); oidPathParam.append("oid").append("}");
    fullPath.replace(oidPathParam, stringValue(oid));


    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIDefaultApi::getWorkflowableTestObjectCallback);

    worker->execute(&input);
}

void
OAIDefaultApi::getWorkflowableTestObjectCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QString json(worker->response);
    OAIBTWorkflowableTestObjectInfo* output = static_cast<OAIBTWorkflowableTestObjectInfo*>(create(json, QString("OAIBTWorkflowableTestObjectInfo")));
    auto wrapper = new OAIQObjectWrapper<OAIBTWorkflowableTestObjectInfo*> (output);
    wrapper->deleteLater();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit getWorkflowableTestObjectSignal(output);
    } else {
        emit getWorkflowableTestObjectSignalE(output, error_type, error_str);
        emit getWorkflowableTestObjectSignalEFull(worker, error_type, error_str);
    }
}

void
OAIDefaultApi::postAssociativeData(QString* did, QString* eid, QString* wvm, QString* wvmid, QString*& body) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/api/appelements/d/{did}/{wvm}/{wvmid}/e/{eid}/associativedata");

    QString didPathParam("{"); didPathParam.append("did").append("}");
    fullPath.replace(didPathParam, stringValue(did));
    QString eidPathParam("{"); eidPathParam.append("eid").append("}");
    fullPath.replace(eidPathParam, stringValue(eid));
    QString wvmPathParam("{"); wvmPathParam.append("wvm").append("}");
    fullPath.replace(wvmPathParam, stringValue(wvm));
    QString wvmidPathParam("{"); wvmidPathParam.append("wvmid").append("}");
    fullPath.replace(wvmidPathParam, stringValue(wvmid));


    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "POST");


    
    QString output(*body);
    input.request_body.append(output);
    


    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIDefaultApi::postAssociativeDataCallback);

    worker->execute(&input);
}

void
OAIDefaultApi::postAssociativeDataCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QString json(worker->response);
    OAIBTAppAssociativeDataInfoArray* output = static_cast<OAIBTAppAssociativeDataInfoArray*>(create(json, QString("OAIBTAppAssociativeDataInfoArray")));
    auto wrapper = new OAIQObjectWrapper<OAIBTAppAssociativeDataInfoArray*> (output);
    wrapper->deleteLater();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit postAssociativeDataSignal(output);
    } else {
        emit postAssociativeDataSignalE(output, error_type, error_str);
        emit postAssociativeDataSignalEFull(worker, error_type, error_str);
    }
}

void
OAIDefaultApi::setApplicationElementThumbnail(QString* did, QString* wv, QString* wvid, QString* eid, OAIBTApplicationElementThumbnailParamsArray& oaibt_application_element_thumbnail_params_array, bool overwrite) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/api/thumbnails/d/{did}/{wv}/{wvid}/e/{eid}");

    QString didPathParam("{"); didPathParam.append("did").append("}");
    fullPath.replace(didPathParam, stringValue(did));
    QString wvPathParam("{"); wvPathParam.append("wv").append("}");
    fullPath.replace(wvPathParam, stringValue(wv));
    QString wvidPathParam("{"); wvidPathParam.append("wvid").append("}");
    fullPath.replace(wvidPathParam, stringValue(wvid));
    QString eidPathParam("{"); eidPathParam.append("eid").append("}");
    fullPath.replace(eidPathParam, stringValue(eid));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("overwrite"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(overwrite)));


    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "POST");


    
    QString output = oaibt_application_element_thumbnail_params_array.asJson();
    input.request_body.append(output);
    


    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIDefaultApi::setApplicationElementThumbnailCallback);

    worker->execute(&input);
}

void
OAIDefaultApi::setApplicationElementThumbnailCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit setApplicationElementThumbnailSignal();
    } else {
        emit setApplicationElementThumbnailSignalE(error_type, error_str);
        emit setApplicationElementThumbnailSignalEFull(worker, error_type, error_str);
    }
}

void
OAIDefaultApi::transitionWorkflowableTestObject(QString* oid, QString* transition) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/api/workflowabletestobject/{oid}/{transition}");

    QString oidPathParam("{"); oidPathParam.append("oid").append("}");
    fullPath.replace(oidPathParam, stringValue(oid));
    QString transitionPathParam("{"); transitionPathParam.append("transition").append("}");
    fullPath.replace(transitionPathParam, stringValue(transition));


    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "POST");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIDefaultApi::transitionWorkflowableTestObjectCallback);

    worker->execute(&input);
}

void
OAIDefaultApi::transitionWorkflowableTestObjectCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QString json(worker->response);
    OAIBTWorkflowableTestObjectInfo* output = static_cast<OAIBTWorkflowableTestObjectInfo*>(create(json, QString("OAIBTWorkflowableTestObjectInfo")));
    auto wrapper = new OAIQObjectWrapper<OAIBTWorkflowableTestObjectInfo*> (output);
    wrapper->deleteLater();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit transitionWorkflowableTestObjectSignal(output);
    } else {
        emit transitionWorkflowableTestObjectSignalE(output, error_type, error_str);
        emit transitionWorkflowableTestObjectSignalEFull(worker, error_type, error_str);
    }
}

void
OAIDefaultApi::updateWorkflowableTestObject(QString* oid, OAIBTUpdateWorkflowableTestObjectParams& oaibt_update_workflowable_test_object_params) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/api/workflowabletestobject/{oid}");

    QString oidPathParam("{"); oidPathParam.append("oid").append("}");
    fullPath.replace(oidPathParam, stringValue(oid));


    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "POST");


    
    QString output = oaibt_update_workflowable_test_object_params.asJson();
    input.request_body.append(output);
    


    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIDefaultApi::updateWorkflowableTestObjectCallback);

    worker->execute(&input);
}

void
OAIDefaultApi::updateWorkflowableTestObjectCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QString json(worker->response);
    OAIBTWorkflowableTestObjectInfo* output = static_cast<OAIBTWorkflowableTestObjectInfo*>(create(json, QString("OAIBTWorkflowableTestObjectInfo")));
    auto wrapper = new OAIQObjectWrapper<OAIBTWorkflowableTestObjectInfo*> (output);
    wrapper->deleteLater();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit updateWorkflowableTestObjectSignal(output);
    } else {
        emit updateWorkflowableTestObjectSignalE(output, error_type, error_str);
        emit updateWorkflowableTestObjectSignalEFull(worker, error_type, error_str);
    }
}


}
