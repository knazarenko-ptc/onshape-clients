/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * OpenAPI spec version: 1.111
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIBTDocumentElementInfo.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIBTDocumentElementInfo::OAIBTDocumentElementInfo(QString json) {
    init();
    this->fromJson(json);
}

OAIBTDocumentElementInfo::OAIBTDocumentElementInfo() {
    init();
}

OAIBTDocumentElementInfo::~OAIBTDocumentElementInfo() {
    this->cleanup();
}

void
OAIBTDocumentElementInfo::init() {
    angle_units = new QString("");
    m_angle_units_isSet = false;
    data_type = new QString("");
    m_data_type_isSet = false;
    element_type = new QString("");
    m_element_type_isSet = false;
    filename = new QString("");
    m_filename_isSet = false;
    foreign_data_id = new QString("");
    m_foreign_data_id_isSet = false;
    id = new QString("");
    m_id_isSet = false;
    length_units = new QString("");
    m_length_units_isSet = false;
    mass_units = new QString("");
    m_mass_units_isSet = false;
    microversion_id = new QString("");
    m_microversion_id_isSet = false;
    name = new QString("");
    m_name_isSet = false;
    specified_unit = new QString("");
    m_specified_unit_isSet = false;
    thumbnail_info = new OAIBTThumbnailInfo();
    m_thumbnail_info_isSet = false;
    thumbnails = new QString("");
    m_thumbnails_isSet = false;
    type = new QString("");
    m_type_isSet = false;
    unupdatable = false;
    m_unupdatable_isSet = false;
}

void
OAIBTDocumentElementInfo::cleanup() {
    if(angle_units != nullptr) { 
        delete angle_units;
    }
    if(data_type != nullptr) { 
        delete data_type;
    }
    if(element_type != nullptr) { 
        delete element_type;
    }
    if(filename != nullptr) { 
        delete filename;
    }
    if(foreign_data_id != nullptr) { 
        delete foreign_data_id;
    }
    if(id != nullptr) { 
        delete id;
    }
    if(length_units != nullptr) { 
        delete length_units;
    }
    if(mass_units != nullptr) { 
        delete mass_units;
    }
    if(microversion_id != nullptr) { 
        delete microversion_id;
    }
    if(name != nullptr) { 
        delete name;
    }
    if(specified_unit != nullptr) { 
        delete specified_unit;
    }
    if(thumbnail_info != nullptr) { 
        delete thumbnail_info;
    }
    if(thumbnails != nullptr) { 
        delete thumbnails;
    }
    if(type != nullptr) { 
        delete type;
    }

}

OAIBTDocumentElementInfo*
OAIBTDocumentElementInfo::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIBTDocumentElementInfo::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&angle_units, pJson["angleUnits"], "QString", "QString");
    
    ::OpenAPI::setValue(&data_type, pJson["dataType"], "QString", "QString");
    
    ::OpenAPI::setValue(&element_type, pJson["elementType"], "QString", "QString");
    
    ::OpenAPI::setValue(&filename, pJson["filename"], "QString", "QString");
    
    ::OpenAPI::setValue(&foreign_data_id, pJson["foreignDataId"], "QString", "QString");
    
    ::OpenAPI::setValue(&id, pJson["id"], "QString", "QString");
    
    ::OpenAPI::setValue(&length_units, pJson["lengthUnits"], "QString", "QString");
    
    ::OpenAPI::setValue(&mass_units, pJson["massUnits"], "QString", "QString");
    
    ::OpenAPI::setValue(&microversion_id, pJson["microversionId"], "QString", "QString");
    
    ::OpenAPI::setValue(&name, pJson["name"], "QString", "QString");
    
    ::OpenAPI::setValue(&specified_unit, pJson["specifiedUnit"], "QString", "QString");
    
    ::OpenAPI::setValue(&thumbnail_info, pJson["thumbnailInfo"], "OAIBTThumbnailInfo", "OAIBTThumbnailInfo");
    
    ::OpenAPI::setValue(&thumbnails, pJson["thumbnails"], "QString", "QString");
    
    ::OpenAPI::setValue(&type, pJson["type"], "QString", "QString");
    
    ::OpenAPI::setValue(&unupdatable, pJson["unupdatable"], "bool", "");
    
}

QString
OAIBTDocumentElementInfo::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIBTDocumentElementInfo::asJsonObject() {
    QJsonObject obj;
    if(angle_units != nullptr && *angle_units != QString("")){
        toJsonValue(QString("angleUnits"), angle_units, obj, QString("QString"));
    }
    if(data_type != nullptr && *data_type != QString("")){
        toJsonValue(QString("dataType"), data_type, obj, QString("QString"));
    }
    if(element_type != nullptr && *element_type != QString("")){
        toJsonValue(QString("elementType"), element_type, obj, QString("QString"));
    }
    if(filename != nullptr && *filename != QString("")){
        toJsonValue(QString("filename"), filename, obj, QString("QString"));
    }
    if(foreign_data_id != nullptr && *foreign_data_id != QString("")){
        toJsonValue(QString("foreignDataId"), foreign_data_id, obj, QString("QString"));
    }
    if(id != nullptr && *id != QString("")){
        toJsonValue(QString("id"), id, obj, QString("QString"));
    }
    if(length_units != nullptr && *length_units != QString("")){
        toJsonValue(QString("lengthUnits"), length_units, obj, QString("QString"));
    }
    if(mass_units != nullptr && *mass_units != QString("")){
        toJsonValue(QString("massUnits"), mass_units, obj, QString("QString"));
    }
    if(microversion_id != nullptr && *microversion_id != QString("")){
        toJsonValue(QString("microversionId"), microversion_id, obj, QString("QString"));
    }
    if(name != nullptr && *name != QString("")){
        toJsonValue(QString("name"), name, obj, QString("QString"));
    }
    if(specified_unit != nullptr && *specified_unit != QString("")){
        toJsonValue(QString("specifiedUnit"), specified_unit, obj, QString("QString"));
    }
    if((thumbnail_info != nullptr) && (thumbnail_info->isSet())){
        toJsonValue(QString("thumbnailInfo"), thumbnail_info, obj, QString("OAIBTThumbnailInfo"));
    }
    if(thumbnails != nullptr && *thumbnails != QString("")){
        toJsonValue(QString("thumbnails"), thumbnails, obj, QString("QString"));
    }
    if(type != nullptr && *type != QString("")){
        toJsonValue(QString("type"), type, obj, QString("QString"));
    }
    if(m_unupdatable_isSet){
        obj.insert("unupdatable", QJsonValue(unupdatable));
    }

    return obj;
}

QString*
OAIBTDocumentElementInfo::getAngleUnits() {
    return angle_units;
}
void
OAIBTDocumentElementInfo::setAngleUnits(QString* angle_units) {
    this->angle_units = angle_units;
    this->m_angle_units_isSet = true;
}

QString*
OAIBTDocumentElementInfo::getDataType() {
    return data_type;
}
void
OAIBTDocumentElementInfo::setDataType(QString* data_type) {
    this->data_type = data_type;
    this->m_data_type_isSet = true;
}

QString*
OAIBTDocumentElementInfo::getElementType() {
    return element_type;
}
void
OAIBTDocumentElementInfo::setElementType(QString* element_type) {
    this->element_type = element_type;
    this->m_element_type_isSet = true;
}

QString*
OAIBTDocumentElementInfo::getFilename() {
    return filename;
}
void
OAIBTDocumentElementInfo::setFilename(QString* filename) {
    this->filename = filename;
    this->m_filename_isSet = true;
}

QString*
OAIBTDocumentElementInfo::getForeignDataId() {
    return foreign_data_id;
}
void
OAIBTDocumentElementInfo::setForeignDataId(QString* foreign_data_id) {
    this->foreign_data_id = foreign_data_id;
    this->m_foreign_data_id_isSet = true;
}

QString*
OAIBTDocumentElementInfo::getId() {
    return id;
}
void
OAIBTDocumentElementInfo::setId(QString* id) {
    this->id = id;
    this->m_id_isSet = true;
}

QString*
OAIBTDocumentElementInfo::getLengthUnits() {
    return length_units;
}
void
OAIBTDocumentElementInfo::setLengthUnits(QString* length_units) {
    this->length_units = length_units;
    this->m_length_units_isSet = true;
}

QString*
OAIBTDocumentElementInfo::getMassUnits() {
    return mass_units;
}
void
OAIBTDocumentElementInfo::setMassUnits(QString* mass_units) {
    this->mass_units = mass_units;
    this->m_mass_units_isSet = true;
}

QString*
OAIBTDocumentElementInfo::getMicroversionId() {
    return microversion_id;
}
void
OAIBTDocumentElementInfo::setMicroversionId(QString* microversion_id) {
    this->microversion_id = microversion_id;
    this->m_microversion_id_isSet = true;
}

QString*
OAIBTDocumentElementInfo::getName() {
    return name;
}
void
OAIBTDocumentElementInfo::setName(QString* name) {
    this->name = name;
    this->m_name_isSet = true;
}

QString*
OAIBTDocumentElementInfo::getSpecifiedUnit() {
    return specified_unit;
}
void
OAIBTDocumentElementInfo::setSpecifiedUnit(QString* specified_unit) {
    this->specified_unit = specified_unit;
    this->m_specified_unit_isSet = true;
}

OAIBTThumbnailInfo*
OAIBTDocumentElementInfo::getThumbnailInfo() {
    return thumbnail_info;
}
void
OAIBTDocumentElementInfo::setThumbnailInfo(OAIBTThumbnailInfo* thumbnail_info) {
    this->thumbnail_info = thumbnail_info;
    this->m_thumbnail_info_isSet = true;
}

QString*
OAIBTDocumentElementInfo::getThumbnails() {
    return thumbnails;
}
void
OAIBTDocumentElementInfo::setThumbnails(QString* thumbnails) {
    this->thumbnails = thumbnails;
    this->m_thumbnails_isSet = true;
}

QString*
OAIBTDocumentElementInfo::getType() {
    return type;
}
void
OAIBTDocumentElementInfo::setType(QString* type) {
    this->type = type;
    this->m_type_isSet = true;
}

bool
OAIBTDocumentElementInfo::isUnupdatable() {
    return unupdatable;
}
void
OAIBTDocumentElementInfo::setUnupdatable(bool unupdatable) {
    this->unupdatable = unupdatable;
    this->m_unupdatable_isSet = true;
}


bool
OAIBTDocumentElementInfo::isSet(){
    bool isObjectUpdated = false;
    do{
        if(angle_units != nullptr && *angle_units != QString("")){ isObjectUpdated = true; break;}
        if(data_type != nullptr && *data_type != QString("")){ isObjectUpdated = true; break;}
        if(element_type != nullptr && *element_type != QString("")){ isObjectUpdated = true; break;}
        if(filename != nullptr && *filename != QString("")){ isObjectUpdated = true; break;}
        if(foreign_data_id != nullptr && *foreign_data_id != QString("")){ isObjectUpdated = true; break;}
        if(id != nullptr && *id != QString("")){ isObjectUpdated = true; break;}
        if(length_units != nullptr && *length_units != QString("")){ isObjectUpdated = true; break;}
        if(mass_units != nullptr && *mass_units != QString("")){ isObjectUpdated = true; break;}
        if(microversion_id != nullptr && *microversion_id != QString("")){ isObjectUpdated = true; break;}
        if(name != nullptr && *name != QString("")){ isObjectUpdated = true; break;}
        if(specified_unit != nullptr && *specified_unit != QString("")){ isObjectUpdated = true; break;}
        if(thumbnail_info != nullptr && thumbnail_info->isSet()){ isObjectUpdated = true; break;}
        if(thumbnails != nullptr && *thumbnails != QString("")){ isObjectUpdated = true; break;}
        if(type != nullptr && *type != QString("")){ isObjectUpdated = true; break;}
        if(m_unupdatable_isSet){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

