/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * OpenAPI spec version: 1.111
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIHeader.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIHeader::OAIHeader(QString json) {
    init();
    this->fromJson(json);
}

OAIHeader::OAIHeader() {
    init();
}

OAIHeader::~OAIHeader() {
    this->cleanup();
}

void
OAIHeader::init() {
    deprecated = false;
    m_deprecated_isSet = false;
    description = new QString("");
    m_description_isSet = false;
    example = NULL;
    m_example_isSet = false;
    examples = new QMap<QString, OAIExample*>();
    m_examples_isSet = false;
    explode = false;
    m_explode_isSet = false;
    extensions = new QMap<QString, OAIObject*>();
    m_extensions_isSet = false;
    getref = new QString("");
    m_getref_isSet = false;
    required = false;
    m_required_isSet = false;
    schema = new OAISchema();
    m_schema_isSet = false;
    style = new QString("");
    m_style_isSet = false;
}

void
OAIHeader::cleanup() {

    if(description != nullptr) { 
        delete description;
    }
    if(example != nullptr) { 
        delete example;
    }
    if(examples != nullptr) { 
        auto arr = examples;
        for(auto o: *arr) { 
            delete o;
        }
        delete examples;
    }

    if(extensions != nullptr) { 
        auto arr = extensions;
        for(auto o: *arr) { 
            delete o;
        }
        delete extensions;
    }
    if(getref != nullptr) { 
        delete getref;
    }

    if(schema != nullptr) { 
        delete schema;
    }
    if(style != nullptr) { 
        delete style;
    }
}

OAIHeader*
OAIHeader::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIHeader::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&deprecated, pJson["deprecated"], "bool", "");
    
    ::OpenAPI::setValue(&description, pJson["description"], "QString", "QString");
    
    ::OpenAPI::setValue(&example, pJson["example"], "OAIObject", "OAIObject");
    
    
    ::OpenAPI::setValue(&examples, pJson["examples"], "QMap", "OAIExample");
    ::OpenAPI::setValue(&explode, pJson["explode"], "bool", "");
    
    
    ::OpenAPI::setValue(&extensions, pJson["extensions"], "QMap", "OAIObject");
    ::OpenAPI::setValue(&getref, pJson["get$ref"], "QString", "QString");
    
    ::OpenAPI::setValue(&required, pJson["required"], "bool", "");
    
    ::OpenAPI::setValue(&schema, pJson["schema"], "OAISchema", "OAISchema");
    
    ::OpenAPI::setValue(&style, pJson["style"], "QString", "QString");
    
}

QString
OAIHeader::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIHeader::asJsonObject() {
    QJsonObject obj;
    if(m_deprecated_isSet){
        obj.insert("deprecated", QJsonValue(deprecated));
    }
    if(description != nullptr && *description != QString("")){
        toJsonValue(QString("description"), description, obj, QString("QString"));
    }
    if((example != nullptr) && (example->isSet())){
        toJsonValue(QString("example"), example, obj, QString("OAIObject"));
    }
    if(examples->size() > 0){
        toJsonMap((QMap<QString, void*>*) examples, obj, "examples", "OAIExample");
    }
    if(m_explode_isSet){
        obj.insert("explode", QJsonValue(explode));
    }
    if(extensions->size() > 0){
        toJsonMap((QMap<QString, void*>*) extensions, obj, "extensions", "OAIObject");
    }
    if(getref != nullptr && *getref != QString("")){
        toJsonValue(QString("get$ref"), getref, obj, QString("QString"));
    }
    if(m_required_isSet){
        obj.insert("required", QJsonValue(required));
    }
    if((schema != nullptr) && (schema->isSet())){
        toJsonValue(QString("schema"), schema, obj, QString("OAISchema"));
    }
    if(style != nullptr && *style != QString("")){
        toJsonValue(QString("style"), style, obj, QString("QString"));
    }

    return obj;
}

bool
OAIHeader::isDeprecated() {
    return deprecated;
}
void
OAIHeader::setDeprecated(bool deprecated) {
    this->deprecated = deprecated;
    this->m_deprecated_isSet = true;
}

QString*
OAIHeader::getDescription() {
    return description;
}
void
OAIHeader::setDescription(QString* description) {
    this->description = description;
    this->m_description_isSet = true;
}

OAIObject*
OAIHeader::getExample() {
    return example;
}
void
OAIHeader::setExample(OAIObject* example) {
    this->example = example;
    this->m_example_isSet = true;
}

QMap<QString, OAIExample*>*
OAIHeader::getExamples() {
    return examples;
}
void
OAIHeader::setExamples(QMap<QString, OAIExample*>* examples) {
    this->examples = examples;
    this->m_examples_isSet = true;
}

bool
OAIHeader::isExplode() {
    return explode;
}
void
OAIHeader::setExplode(bool explode) {
    this->explode = explode;
    this->m_explode_isSet = true;
}

QMap<QString, OAIObject*>*
OAIHeader::getExtensions() {
    return extensions;
}
void
OAIHeader::setExtensions(QMap<QString, OAIObject*>* extensions) {
    this->extensions = extensions;
    this->m_extensions_isSet = true;
}

QString*
OAIHeader::getGetref() {
    return getref;
}
void
OAIHeader::setGetref(QString* getref) {
    this->getref = getref;
    this->m_getref_isSet = true;
}

bool
OAIHeader::isRequired() {
    return required;
}
void
OAIHeader::setRequired(bool required) {
    this->required = required;
    this->m_required_isSet = true;
}

OAISchema*
OAIHeader::getSchema() {
    return schema;
}
void
OAIHeader::setSchema(OAISchema* schema) {
    this->schema = schema;
    this->m_schema_isSet = true;
}

QString*
OAIHeader::getStyle() {
    return style;
}
void
OAIHeader::setStyle(QString* style) {
    this->style = style;
    this->m_style_isSet = true;
}


bool
OAIHeader::isSet(){
    bool isObjectUpdated = false;
    do{
        if(m_deprecated_isSet){ isObjectUpdated = true; break;}
        if(description != nullptr && *description != QString("")){ isObjectUpdated = true; break;}
        if(example != nullptr && example->isSet()){ isObjectUpdated = true; break;}
        if(examples->size() > 0){ isObjectUpdated = true; break;}
        if(m_explode_isSet){ isObjectUpdated = true; break;}
        if(extensions->size() > 0){ isObjectUpdated = true; break;}
        if(getref != nullptr && *getref != QString("")){ isObjectUpdated = true; break;}
        if(m_required_isSet){ isObjectUpdated = true; break;}
        if(schema != nullptr && schema->isSet()){ isObjectUpdated = true; break;}
        if(style != nullptr && *style != QString("")){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

