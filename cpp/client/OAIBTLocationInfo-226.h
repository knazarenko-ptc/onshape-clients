/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * OpenAPI spec version: 1.111
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIBTLocationInfo-226.h
 *
 * 
 */

#ifndef OAIBTLocationInfo-226_H_
#define OAIBTLocationInfo-226_H_

#include <QJsonObject>


#include "OAIBTDocumentVersionElementIds-1897.h"
#include "OAIBTObjectId.h"
#include "OAIBTPNode-7.h"
#include <QString>

#include "OAIObject.h"

namespace OpenAPI {

class OAIBTLocationInfo-226: public OAIObject {
public:
    OAIBTLocationInfo-226();
    OAIBTLocationInfo-226(QString json);
    ~OAIBTLocationInfo-226();
    void init();
    void cleanup();

    QString asJson () override;
    QJsonObject asJsonObject() override;
    void fromJsonObject(QJsonObject json) override;
    OAIBTLocationInfo-226* fromJson(QString jsonString) override;

    QString* getBtType();
    void setBtType(QString* bt_type);

    qint32 getCharacter();
    void setCharacter(qint32 character);

    qint32 getColumn();
    void setColumn(qint32 column);

    QString* getDocument();
    void setDocument(QString* document);

    QString* getElementMicroversion();
    void setElementMicroversion(QString* element_microversion);

    qint32 getEndCharacter();
    void setEndCharacter(qint32 end_character);

    qint32 getEndColumn();
    void setEndColumn(qint32 end_column);

    qint32 getEndLine();
    void setEndLine(qint32 end_line);

    OAIBTPNode-7* getFromNode();
    void setFromNode(OAIBTPNode-7* from_node);

    qint32 getLanguageVersion();
    void setLanguageVersion(qint32 language_version);

    qint32 getLine();
    void setLine(qint32 line);

    OAIBTDocumentVersionElementIds-1897* getModuleIds();
    void setModuleIds(OAIBTDocumentVersionElementIds-1897* module_ids);

    QString* getNodeId();
    void setNodeId(QString* node_id);

    QString* getParseNodeId();
    void setParseNodeId(QString* parse_node_id);

    OAIBTObjectId* getParseNodeIdRaw();
    void setParseNodeIdRaw(OAIBTObjectId* parse_node_id_raw);

    QString* getTopLevel();
    void setTopLevel(QString* top_level);

    QString* getVersion();
    void setVersion(QString* version);


    virtual bool isSet() override;

private:
    QString* bt_type;
    bool m_bt_type_isSet;

    qint32 character;
    bool m_character_isSet;

    qint32 column;
    bool m_column_isSet;

    QString* document;
    bool m_document_isSet;

    QString* element_microversion;
    bool m_element_microversion_isSet;

    qint32 end_character;
    bool m_end_character_isSet;

    qint32 end_column;
    bool m_end_column_isSet;

    qint32 end_line;
    bool m_end_line_isSet;

    OAIBTPNode-7* from_node;
    bool m_from_node_isSet;

    qint32 language_version;
    bool m_language_version_isSet;

    qint32 line;
    bool m_line_isSet;

    OAIBTDocumentVersionElementIds-1897* module_ids;
    bool m_module_ids_isSet;

    QString* node_id;
    bool m_node_id_isSet;

    QString* parse_node_id;
    bool m_parse_node_id_isSet;

    OAIBTObjectId* parse_node_id_raw;
    bool m_parse_node_id_raw_isSet;

    QString* top_level;
    bool m_top_level_isSet;

    QString* version;
    bool m_version_isSet;

};

}

#endif /* OAIBTLocationInfo-226_H_ */
