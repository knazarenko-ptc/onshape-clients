/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * OpenAPI spec version: 1.111
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIOpenAPI.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIOpenAPI::OAIOpenAPI(QString json) {
    init();
    this->fromJson(json);
}

OAIOpenAPI::OAIOpenAPI() {
    init();
}

OAIOpenAPI::~OAIOpenAPI() {
    this->cleanup();
}

void
OAIOpenAPI::init() {
    components = new OAIComponents();
    m_components_isSet = false;
    extensions = new QMap<QString, OAIObject*>();
    m_extensions_isSet = false;
    external_docs = new OAIExternalDocumentation();
    m_external_docs_isSet = false;
    info = new OAIInfo();
    m_info_isSet = false;
    openapi = new QString("");
    m_openapi_isSet = false;
    paths = new OAIOAuthFlow_scopes();
    m_paths_isSet = false;
    security = new QList<QMap*>();
    m_security_isSet = false;
    servers = new QList<OAIServer*>();
    m_servers_isSet = false;
    tags = new QList<OAITag*>();
    m_tags_isSet = false;
}

void
OAIOpenAPI::cleanup() {
    if(components != nullptr) { 
        delete components;
    }
    if(extensions != nullptr) { 
        auto arr = extensions;
        for(auto o: *arr) { 
            delete o;
        }
        delete extensions;
    }
    if(external_docs != nullptr) { 
        delete external_docs;
    }
    if(info != nullptr) { 
        delete info;
    }
    if(openapi != nullptr) { 
        delete openapi;
    }
    if(paths != nullptr) { 
        delete paths;
    }
    if(security != nullptr) { 
        auto arr = security;
        for(auto o: *arr) { 
            delete o;
        }
        delete security;
    }
    if(servers != nullptr) { 
        auto arr = servers;
        for(auto o: *arr) { 
            delete o;
        }
        delete servers;
    }
    if(tags != nullptr) { 
        auto arr = tags;
        for(auto o: *arr) { 
            delete o;
        }
        delete tags;
    }
}

OAIOpenAPI*
OAIOpenAPI::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIOpenAPI::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&components, pJson["components"], "OAIComponents", "OAIComponents");
    
    
    ::OpenAPI::setValue(&extensions, pJson["extensions"], "QMap", "OAIObject");
    ::OpenAPI::setValue(&external_docs, pJson["externalDocs"], "OAIExternalDocumentation", "OAIExternalDocumentation");
    
    ::OpenAPI::setValue(&info, pJson["info"], "OAIInfo", "OAIInfo");
    
    ::OpenAPI::setValue(&openapi, pJson["openapi"], "QString", "QString");
    
    ::OpenAPI::setValue(&paths, pJson["paths"], "OAIOAuthFlow_scopes", "OAIOAuthFlow_scopes");
    
    
    ::OpenAPI::setValue(&security, pJson["security"], "QList", "QMap");
    
    ::OpenAPI::setValue(&servers, pJson["servers"], "QList", "OAIServer");
    
    ::OpenAPI::setValue(&tags, pJson["tags"], "QList", "OAITag");
}

QString
OAIOpenAPI::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIOpenAPI::asJsonObject() {
    QJsonObject obj;
    if((components != nullptr) && (components->isSet())){
        toJsonValue(QString("components"), components, obj, QString("OAIComponents"));
    }
    if(extensions->size() > 0){
        toJsonMap((QMap<QString, void*>*) extensions, obj, "extensions", "OAIObject");
    }
    if((external_docs != nullptr) && (external_docs->isSet())){
        toJsonValue(QString("externalDocs"), external_docs, obj, QString("OAIExternalDocumentation"));
    }
    if((info != nullptr) && (info->isSet())){
        toJsonValue(QString("info"), info, obj, QString("OAIInfo"));
    }
    if(openapi != nullptr && *openapi != QString("")){
        toJsonValue(QString("openapi"), openapi, obj, QString("QString"));
    }
    if((paths != nullptr) && (paths->isSet())){
        toJsonValue(QString("paths"), paths, obj, QString("OAIOAuthFlow_scopes"));
    }
    if(security->size() > 0){
        toJsonArray((QList<void*>*)security, obj, "security", "QMap");
    }
    if(servers->size() > 0){
        toJsonArray((QList<void*>*)servers, obj, "servers", "OAIServer");
    }
    if(tags->size() > 0){
        toJsonArray((QList<void*>*)tags, obj, "tags", "OAITag");
    }

    return obj;
}

OAIComponents*
OAIOpenAPI::getComponents() {
    return components;
}
void
OAIOpenAPI::setComponents(OAIComponents* components) {
    this->components = components;
    this->m_components_isSet = true;
}

QMap<QString, OAIObject*>*
OAIOpenAPI::getExtensions() {
    return extensions;
}
void
OAIOpenAPI::setExtensions(QMap<QString, OAIObject*>* extensions) {
    this->extensions = extensions;
    this->m_extensions_isSet = true;
}

OAIExternalDocumentation*
OAIOpenAPI::getExternalDocs() {
    return external_docs;
}
void
OAIOpenAPI::setExternalDocs(OAIExternalDocumentation* external_docs) {
    this->external_docs = external_docs;
    this->m_external_docs_isSet = true;
}

OAIInfo*
OAIOpenAPI::getInfo() {
    return info;
}
void
OAIOpenAPI::setInfo(OAIInfo* info) {
    this->info = info;
    this->m_info_isSet = true;
}

QString*
OAIOpenAPI::getOpenapi() {
    return openapi;
}
void
OAIOpenAPI::setOpenapi(QString* openapi) {
    this->openapi = openapi;
    this->m_openapi_isSet = true;
}

OAIOAuthFlow_scopes*
OAIOpenAPI::getPaths() {
    return paths;
}
void
OAIOpenAPI::setPaths(OAIOAuthFlow_scopes* paths) {
    this->paths = paths;
    this->m_paths_isSet = true;
}

QList<QMap*>*
OAIOpenAPI::getSecurity() {
    return security;
}
void
OAIOpenAPI::setSecurity(QList<QMap*>* security) {
    this->security = security;
    this->m_security_isSet = true;
}

QList<OAIServer*>*
OAIOpenAPI::getServers() {
    return servers;
}
void
OAIOpenAPI::setServers(QList<OAIServer*>* servers) {
    this->servers = servers;
    this->m_servers_isSet = true;
}

QList<OAITag*>*
OAIOpenAPI::getTags() {
    return tags;
}
void
OAIOpenAPI::setTags(QList<OAITag*>* tags) {
    this->tags = tags;
    this->m_tags_isSet = true;
}


bool
OAIOpenAPI::isSet(){
    bool isObjectUpdated = false;
    do{
        if(components != nullptr && components->isSet()){ isObjectUpdated = true; break;}
        if(extensions->size() > 0){ isObjectUpdated = true; break;}
        if(external_docs != nullptr && external_docs->isSet()){ isObjectUpdated = true; break;}
        if(info != nullptr && info->isSet()){ isObjectUpdated = true; break;}
        if(openapi != nullptr && *openapi != QString("")){ isObjectUpdated = true; break;}
        if(paths != nullptr && paths->isSet()){ isObjectUpdated = true; break;}
        if(security->size() > 0){ isObjectUpdated = true; break;}
        if(servers->size() > 0){ isObjectUpdated = true; break;}
        if(tags->size() > 0){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

