/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * OpenAPI spec version: 1.111
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIBTCopyDocumentInfo.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIBTCopyDocumentInfo::OAIBTCopyDocumentInfo(QString json) {
    init();
    this->fromJson(json);
}

OAIBTCopyDocumentInfo::OAIBTCopyDocumentInfo() {
    init();
}

OAIBTCopyDocumentInfo::~OAIBTCopyDocumentInfo() {
    this->cleanup();
}

void
OAIBTCopyDocumentInfo::init() {
    new_document_id = new QString("");
    m_new_document_id_isSet = false;
    new_document_name = new QString("");
    m_new_document_name_isSet = false;
    new_owner = new OAIBTOwnerInfo();
    m_new_owner_isSet = false;
    new_parent_id = new QString("");
    m_new_parent_id_isSet = false;
    new_project_id = new QString("");
    m_new_project_id_isSet = false;
    new_workspace_id = new QString("");
    m_new_workspace_id_isSet = false;
}

void
OAIBTCopyDocumentInfo::cleanup() {
    if(new_document_id != nullptr) { 
        delete new_document_id;
    }
    if(new_document_name != nullptr) { 
        delete new_document_name;
    }
    if(new_owner != nullptr) { 
        delete new_owner;
    }
    if(new_parent_id != nullptr) { 
        delete new_parent_id;
    }
    if(new_project_id != nullptr) { 
        delete new_project_id;
    }
    if(new_workspace_id != nullptr) { 
        delete new_workspace_id;
    }
}

OAIBTCopyDocumentInfo*
OAIBTCopyDocumentInfo::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIBTCopyDocumentInfo::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&new_document_id, pJson["newDocumentId"], "QString", "QString");
    
    ::OpenAPI::setValue(&new_document_name, pJson["newDocumentName"], "QString", "QString");
    
    ::OpenAPI::setValue(&new_owner, pJson["newOwner"], "OAIBTOwnerInfo", "OAIBTOwnerInfo");
    
    ::OpenAPI::setValue(&new_parent_id, pJson["newParentId"], "QString", "QString");
    
    ::OpenAPI::setValue(&new_project_id, pJson["newProjectId"], "QString", "QString");
    
    ::OpenAPI::setValue(&new_workspace_id, pJson["newWorkspaceId"], "QString", "QString");
    
}

QString
OAIBTCopyDocumentInfo::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIBTCopyDocumentInfo::asJsonObject() {
    QJsonObject obj;
    if(new_document_id != nullptr && *new_document_id != QString("")){
        toJsonValue(QString("newDocumentId"), new_document_id, obj, QString("QString"));
    }
    if(new_document_name != nullptr && *new_document_name != QString("")){
        toJsonValue(QString("newDocumentName"), new_document_name, obj, QString("QString"));
    }
    if((new_owner != nullptr) && (new_owner->isSet())){
        toJsonValue(QString("newOwner"), new_owner, obj, QString("OAIBTOwnerInfo"));
    }
    if(new_parent_id != nullptr && *new_parent_id != QString("")){
        toJsonValue(QString("newParentId"), new_parent_id, obj, QString("QString"));
    }
    if(new_project_id != nullptr && *new_project_id != QString("")){
        toJsonValue(QString("newProjectId"), new_project_id, obj, QString("QString"));
    }
    if(new_workspace_id != nullptr && *new_workspace_id != QString("")){
        toJsonValue(QString("newWorkspaceId"), new_workspace_id, obj, QString("QString"));
    }

    return obj;
}

QString*
OAIBTCopyDocumentInfo::getNewDocumentId() {
    return new_document_id;
}
void
OAIBTCopyDocumentInfo::setNewDocumentId(QString* new_document_id) {
    this->new_document_id = new_document_id;
    this->m_new_document_id_isSet = true;
}

QString*
OAIBTCopyDocumentInfo::getNewDocumentName() {
    return new_document_name;
}
void
OAIBTCopyDocumentInfo::setNewDocumentName(QString* new_document_name) {
    this->new_document_name = new_document_name;
    this->m_new_document_name_isSet = true;
}

OAIBTOwnerInfo*
OAIBTCopyDocumentInfo::getNewOwner() {
    return new_owner;
}
void
OAIBTCopyDocumentInfo::setNewOwner(OAIBTOwnerInfo* new_owner) {
    this->new_owner = new_owner;
    this->m_new_owner_isSet = true;
}

QString*
OAIBTCopyDocumentInfo::getNewParentId() {
    return new_parent_id;
}
void
OAIBTCopyDocumentInfo::setNewParentId(QString* new_parent_id) {
    this->new_parent_id = new_parent_id;
    this->m_new_parent_id_isSet = true;
}

QString*
OAIBTCopyDocumentInfo::getNewProjectId() {
    return new_project_id;
}
void
OAIBTCopyDocumentInfo::setNewProjectId(QString* new_project_id) {
    this->new_project_id = new_project_id;
    this->m_new_project_id_isSet = true;
}

QString*
OAIBTCopyDocumentInfo::getNewWorkspaceId() {
    return new_workspace_id;
}
void
OAIBTCopyDocumentInfo::setNewWorkspaceId(QString* new_workspace_id) {
    this->new_workspace_id = new_workspace_id;
    this->m_new_workspace_id_isSet = true;
}


bool
OAIBTCopyDocumentInfo::isSet(){
    bool isObjectUpdated = false;
    do{
        if(new_document_id != nullptr && *new_document_id != QString("")){ isObjectUpdated = true; break;}
        if(new_document_name != nullptr && *new_document_name != QString("")){ isObjectUpdated = true; break;}
        if(new_owner != nullptr && new_owner->isSet()){ isObjectUpdated = true; break;}
        if(new_parent_id != nullptr && *new_parent_id != QString("")){ isObjectUpdated = true; break;}
        if(new_project_id != nullptr && *new_project_id != QString("")){ isObjectUpdated = true; break;}
        if(new_workspace_id != nullptr && *new_workspace_id != QString("")){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

