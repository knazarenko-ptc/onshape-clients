/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * OpenAPI spec version: 1.111
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIBTPExpressionFunction-1325.h
 *
 * 
 */

#ifndef OAIBTPExpressionFunction-1325_H_
#define OAIBTPExpressionFunction-1325_H_

#include <QJsonObject>


#include "OAIBTPArgumentDeclaration-232.h"
#include "OAIBTPExpression-9.h"
#include "OAIBTPSpace-10.h"
#include "OAIBTPStatement-269.h"
#include "OAIBTPStatementBlock-271.h"
#include "OAIBTPTypeName-290.h"
#include <QList>
#include <QString>

#include "OAIObject.h"

namespace OpenAPI {

class OAIBTPExpressionFunction-1325: public OAIObject {
public:
    OAIBTPExpressionFunction-1325();
    OAIBTPExpressionFunction-1325(QString json);
    ~OAIBTPExpressionFunction-1325();
    void init();
    void cleanup();

    QString asJson () override;
    QJsonObject asJsonObject() override;
    void fromJsonObject(QJsonObject json) override;
    OAIBTPExpressionFunction-1325* fromJson(QString jsonString) override;

    bool isAtomic();
    void setAtomic(bool atomic);

    QString* getBtType();
    void setBtType(QString* bt_type);

    QString* getDocumentationType();
    void setDocumentationType(QString* documentation_type);

    qint32 getEndSourceLocation();
    void setEndSourceLocation(qint32 end_source_location);

    QString* getNodeId();
    void setNodeId(QString* node_id);

    QString* getShortDescriptor();
    void setShortDescriptor(QString* short_descriptor);

    OAIBTPSpace-10* getSpaceAfter();
    void setSpaceAfter(OAIBTPSpace-10* space_after);

    OAIBTPSpace-10* getSpaceBefore();
    void setSpaceBefore(OAIBTPSpace-10* space_before);

    bool isSpaceDefault();
    void setSpaceDefault(bool space_default);

    qint32 getStartSourceLocation();
    void setStartSourceLocation(qint32 start_source_location);

    OAIBTPStatementBlock-271* getBody();
    void setBody(OAIBTPStatementBlock-271* body);

    QList<OAIBTPArgumentDeclaration-232*>* getArguments();
    void setArguments(QList<OAIBTPArgumentDeclaration-232*>* arguments);

    OAIBTPSpace-10* getSpaceAfterFunction();
    void setSpaceAfterFunction(OAIBTPSpace-10* space_after_function);

    OAIBTPStatement-269* getPrecondition();
    void setPrecondition(OAIBTPStatement-269* precondition);

    OAIBTPSpace-10* getSpaceAfterArglist();
    void setSpaceAfterArglist(OAIBTPSpace-10* space_after_arglist);

    OAIBTPSpace-10* getSpaceInEmptyList();
    void setSpaceInEmptyList(OAIBTPSpace-10* space_in_empty_list);

    OAIBTPTypeName-290* getReturnType();
    void setReturnType(OAIBTPTypeName-290* return_type);


    virtual bool isSet() override;

private:
    bool atomic;
    bool m_atomic_isSet;

    QString* bt_type;
    bool m_bt_type_isSet;

    QString* documentation_type;
    bool m_documentation_type_isSet;

    qint32 end_source_location;
    bool m_end_source_location_isSet;

    QString* node_id;
    bool m_node_id_isSet;

    QString* short_descriptor;
    bool m_short_descriptor_isSet;

    OAIBTPSpace-10* space_after;
    bool m_space_after_isSet;

    OAIBTPSpace-10* space_before;
    bool m_space_before_isSet;

    bool space_default;
    bool m_space_default_isSet;

    qint32 start_source_location;
    bool m_start_source_location_isSet;

    OAIBTPStatementBlock-271* body;
    bool m_body_isSet;

    QList<OAIBTPArgumentDeclaration-232*>* arguments;
    bool m_arguments_isSet;

    OAIBTPSpace-10* space_after_function;
    bool m_space_after_function_isSet;

    OAIBTPStatement-269* precondition;
    bool m_precondition_isSet;

    OAIBTPSpace-10* space_after_arglist;
    bool m_space_after_arglist_isSet;

    OAIBTPSpace-10* space_in_empty_list;
    bool m_space_in_empty_list_isSet;

    OAIBTPTypeName-290* return_type;
    bool m_return_type_isSet;

};

}

#endif /* OAIBTPExpressionFunction-1325_H_ */
