/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * OpenAPI spec version: 1.111
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIBTWorkflowActionInfo.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIBTWorkflowActionInfo::OAIBTWorkflowActionInfo(QString json) {
    init();
    this->fromJson(json);
}

OAIBTWorkflowActionInfo::OAIBTWorkflowActionInfo() {
    init();
}

OAIBTWorkflowActionInfo::~OAIBTWorkflowActionInfo() {
    this->cleanup();
}

void
OAIBTWorkflowActionInfo::init() {
    action = new QString("");
    m_action_isSet = false;
    allow_if_approvers = false;
    m_allow_if_approvers_isSet = false;
    allow_if_no_approvers = false;
    m_allow_if_no_approvers_isSet = false;
    always_allow = false;
    m_always_allow_isSet = false;
    is_admin_override = false;
    m_is_admin_override_isSet = false;
    is_approver_action = false;
    m_is_approver_action_isSet = false;
    label = new QString("");
    m_label_isSet = false;
    required_properties = new QList<QString*>();
    m_required_properties_isSet = false;
    tooltip = new QString("");
    m_tooltip_isSet = false;
    ui_hint = new QString("");
    m_ui_hint_isSet = false;
}

void
OAIBTWorkflowActionInfo::cleanup() {
    if(action != nullptr) { 
        delete action;
    }





    if(label != nullptr) { 
        delete label;
    }
    if(required_properties != nullptr) { 
        auto arr = required_properties;
        for(auto o: *arr) { 
            delete o;
        }
        delete required_properties;
    }
    if(tooltip != nullptr) { 
        delete tooltip;
    }
    if(ui_hint != nullptr) { 
        delete ui_hint;
    }
}

OAIBTWorkflowActionInfo*
OAIBTWorkflowActionInfo::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIBTWorkflowActionInfo::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&action, pJson["action"], "QString", "QString");
    
    ::OpenAPI::setValue(&allow_if_approvers, pJson["allowIfApprovers"], "bool", "");
    
    ::OpenAPI::setValue(&allow_if_no_approvers, pJson["allowIfNoApprovers"], "bool", "");
    
    ::OpenAPI::setValue(&always_allow, pJson["alwaysAllow"], "bool", "");
    
    ::OpenAPI::setValue(&is_admin_override, pJson["isAdminOverride"], "bool", "");
    
    ::OpenAPI::setValue(&is_approver_action, pJson["isApproverAction"], "bool", "");
    
    ::OpenAPI::setValue(&label, pJson["label"], "QString", "QString");
    
    
    ::OpenAPI::setValue(&required_properties, pJson["requiredProperties"], "QList", "QString");
    ::OpenAPI::setValue(&tooltip, pJson["tooltip"], "QString", "QString");
    
    ::OpenAPI::setValue(&ui_hint, pJson["uiHint"], "QString", "QString");
    
}

QString
OAIBTWorkflowActionInfo::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIBTWorkflowActionInfo::asJsonObject() {
    QJsonObject obj;
    if(action != nullptr && *action != QString("")){
        toJsonValue(QString("action"), action, obj, QString("QString"));
    }
    if(m_allow_if_approvers_isSet){
        obj.insert("allowIfApprovers", QJsonValue(allow_if_approvers));
    }
    if(m_allow_if_no_approvers_isSet){
        obj.insert("allowIfNoApprovers", QJsonValue(allow_if_no_approvers));
    }
    if(m_always_allow_isSet){
        obj.insert("alwaysAllow", QJsonValue(always_allow));
    }
    if(m_is_admin_override_isSet){
        obj.insert("isAdminOverride", QJsonValue(is_admin_override));
    }
    if(m_is_approver_action_isSet){
        obj.insert("isApproverAction", QJsonValue(is_approver_action));
    }
    if(label != nullptr && *label != QString("")){
        toJsonValue(QString("label"), label, obj, QString("QString"));
    }
    if(required_properties->size() > 0){
        toJsonArray((QList<void*>*)required_properties, obj, "requiredProperties", "QString");
    }
    if(tooltip != nullptr && *tooltip != QString("")){
        toJsonValue(QString("tooltip"), tooltip, obj, QString("QString"));
    }
    if(ui_hint != nullptr && *ui_hint != QString("")){
        toJsonValue(QString("uiHint"), ui_hint, obj, QString("QString"));
    }

    return obj;
}

QString*
OAIBTWorkflowActionInfo::getAction() {
    return action;
}
void
OAIBTWorkflowActionInfo::setAction(QString* action) {
    this->action = action;
    this->m_action_isSet = true;
}

bool
OAIBTWorkflowActionInfo::isAllowIfApprovers() {
    return allow_if_approvers;
}
void
OAIBTWorkflowActionInfo::setAllowIfApprovers(bool allow_if_approvers) {
    this->allow_if_approvers = allow_if_approvers;
    this->m_allow_if_approvers_isSet = true;
}

bool
OAIBTWorkflowActionInfo::isAllowIfNoApprovers() {
    return allow_if_no_approvers;
}
void
OAIBTWorkflowActionInfo::setAllowIfNoApprovers(bool allow_if_no_approvers) {
    this->allow_if_no_approvers = allow_if_no_approvers;
    this->m_allow_if_no_approvers_isSet = true;
}

bool
OAIBTWorkflowActionInfo::isAlwaysAllow() {
    return always_allow;
}
void
OAIBTWorkflowActionInfo::setAlwaysAllow(bool always_allow) {
    this->always_allow = always_allow;
    this->m_always_allow_isSet = true;
}

bool
OAIBTWorkflowActionInfo::isIsAdminOverride() {
    return is_admin_override;
}
void
OAIBTWorkflowActionInfo::setIsAdminOverride(bool is_admin_override) {
    this->is_admin_override = is_admin_override;
    this->m_is_admin_override_isSet = true;
}

bool
OAIBTWorkflowActionInfo::isIsApproverAction() {
    return is_approver_action;
}
void
OAIBTWorkflowActionInfo::setIsApproverAction(bool is_approver_action) {
    this->is_approver_action = is_approver_action;
    this->m_is_approver_action_isSet = true;
}

QString*
OAIBTWorkflowActionInfo::getLabel() {
    return label;
}
void
OAIBTWorkflowActionInfo::setLabel(QString* label) {
    this->label = label;
    this->m_label_isSet = true;
}

QList<QString*>*
OAIBTWorkflowActionInfo::getRequiredProperties() {
    return required_properties;
}
void
OAIBTWorkflowActionInfo::setRequiredProperties(QList<QString*>* required_properties) {
    this->required_properties = required_properties;
    this->m_required_properties_isSet = true;
}

QString*
OAIBTWorkflowActionInfo::getTooltip() {
    return tooltip;
}
void
OAIBTWorkflowActionInfo::setTooltip(QString* tooltip) {
    this->tooltip = tooltip;
    this->m_tooltip_isSet = true;
}

QString*
OAIBTWorkflowActionInfo::getUiHint() {
    return ui_hint;
}
void
OAIBTWorkflowActionInfo::setUiHint(QString* ui_hint) {
    this->ui_hint = ui_hint;
    this->m_ui_hint_isSet = true;
}


bool
OAIBTWorkflowActionInfo::isSet(){
    bool isObjectUpdated = false;
    do{
        if(action != nullptr && *action != QString("")){ isObjectUpdated = true; break;}
        if(m_allow_if_approvers_isSet){ isObjectUpdated = true; break;}
        if(m_allow_if_no_approvers_isSet){ isObjectUpdated = true; break;}
        if(m_always_allow_isSet){ isObjectUpdated = true; break;}
        if(m_is_admin_override_isSet){ isObjectUpdated = true; break;}
        if(m_is_approver_action_isSet){ isObjectUpdated = true; break;}
        if(label != nullptr && *label != QString("")){ isObjectUpdated = true; break;}
        if(required_properties->size() > 0){ isObjectUpdated = true; break;}
        if(tooltip != nullptr && *tooltip != QString("")){ isObjectUpdated = true; break;}
        if(ui_hint != nullptr && *ui_hint != QString("")){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

