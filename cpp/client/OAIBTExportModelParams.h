/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * OpenAPI spec version: 1.111
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIBTExportModelParams.h
 *
 * 
 */

#ifndef OAIBTExportModelParams_H_
#define OAIBTExportModelParams_H_

#include <QJsonObject>


#include <QString>

#include "OAIObject.h"

namespace OpenAPI {

class OAIBTExportModelParams: public OAIObject {
public:
    OAIBTExportModelParams();
    OAIBTExportModelParams(QString json);
    ~OAIBTExportModelParams();
    void init();
    void cleanup();

    QString asJson () override;
    QJsonObject asJsonObject() override;
    void fromJsonObject(QJsonObject json) override;
    OAIBTExportModelParams* fromJson(QString jsonString) override;

    double getAngleTolerance();
    void setAngleTolerance(double angle_tolerance);

    bool isBatchFlatPatterns();
    void setBatchFlatPatterns(bool batch_flat_patterns);

    double getChordTolerance();
    void setChordTolerance(double chord_tolerance);

    QString* getCloudObjectId();
    void setCloudObjectId(QString* cloud_object_id);

    QString* getCloudStorageAccountId();
    void setCloudStorageAccountId(QString* cloud_storage_account_id);

    QString* getConfiguration();
    void setConfiguration(QString* configuration);

    bool isDeepSearchForForeignData();
    void setDeepSearchForForeignData(bool deep_search_for_foreign_data);

    QString* getDestinationName();
    void setDestinationName(QString* destination_name);

    QString* getDocumentId();
    void setDocumentId(QString* document_id);

    QString* getDocumentVersionId();
    void setDocumentVersionId(QString* document_version_id);

    QString* getElementId();
    void setElementId(QString* element_id);

    QString* getElementIds();
    void setElementIds(QString* element_ids);

    bool isEmailLink();
    void setEmailLink(bool email_link);

    QString* getEmailMessage();
    void setEmailMessage(QString* email_message);

    QString* getEmailSubject();
    void setEmailSubject(QString* email_subject);

    QString* getEmailTo();
    void setEmailTo(QString* email_to);

    bool isExtractToS3();
    void setExtractToS3(bool extract_to_s3);

    QString* getFeatureIds();
    void setFeatureIds(QString* feature_ids);

    bool isFlatten();
    void setFlatten(bool flatten);

    QString* getFormat();
    void setFormat(QString* format);

    QString* getFromUserId();
    void setFromUserId(QString* from_user_id);

    QString* getGrouping();
    void setGrouping(QString* grouping);

    bool isIncludeBendCenterlines();
    void setIncludeBendCenterlines(bool include_bend_centerlines);

    bool isIncludeBendLines();
    void setIncludeBendLines(bool include_bend_lines);

    bool isIncludeCustomProperties();
    void setIncludeCustomProperties(bool include_custom_properties);

    bool isIncludeCustomPropertiesData();
    void setIncludeCustomPropertiesData(bool include_custom_properties_data);

    bool isIncludeExportIds();
    void setIncludeExportIds(bool include_export_ids);

    bool isIncludeForeignData();
    void setIncludeForeignData(bool include_foreign_data);

    bool isIncludeItemsData();
    void setIncludeItemsData(bool include_items_data);

    bool isIncludeLinkedDocuments();
    void setIncludeLinkedDocuments(bool include_linked_documents);

    bool isIncludeReleaseManagementData();
    void setIncludeReleaseManagementData(bool include_release_management_data);

    bool isIncludeSketches();
    void setIncludeSketches(bool include_sketches);

    bool isIncludeStd();
    void setIncludeStd(bool include_std);

    bool isIsPartingOut();
    void setIsPartingOut(bool is_parting_out);

    QString* getLinkDocumentId();
    void setLinkDocumentId(QString* link_document_id);

    QString* getLinkDocumentWorkspaceId();
    void setLinkDocumentWorkspaceId(QString* link_document_workspace_id);

    double getMaxFacetWidth();
    void setMaxFacetWidth(double max_facet_width);

    QString* getMicroversion();
    void setMicroversion(QString* microversion);

    double getMinFacetWidth();
    void setMinFacetWidth(double min_facet_width);

    QString* getMode();
    void setMode(QString* mode);

    QString* getPartIds();
    void setPartIds(QString* part_ids);

    QString* getPartQuery();
    void setPartQuery(QString* part_query);

    QString* getPassword();
    void setPassword(QString* password);

    bool isPasswordRequired();
    void setPasswordRequired(bool password_required);

    QString* getResolution();
    void setResolution(QString* resolution);

    double getScale();
    void setScale(double scale);

    bool isSendCopyToMe();
    void setSendCopyToMe(bool send_copy_to_me);

    bool isSheetMetalFlat();
    void setSheetMetalFlat(bool sheet_metal_flat);

    bool isSplinesAsPolylines();
    void setSplinesAsPolylines(bool splines_as_polylines);

    bool isStoreInDocument();
    void setStoreInDocument(bool store_in_document);

    bool isTriggerAutoDownload();
    void setTriggerAutoDownload(bool trigger_auto_download);

    QString* getUnits();
    void setUnits(QString* units);

    QString* getUserId();
    void setUserId(QString* user_id);

    qint32 getValidForDays();
    void setValidForDays(qint32 valid_for_days);

    QString* getVersion();
    void setVersion(QString* version);

    QString* getView();
    void setView(QString* view);

    QString* getWorkspaceId();
    void setWorkspaceId(QString* workspace_id);

    bool isZipSingleFileOutput();
    void setZipSingleFileOutput(bool zip_single_file_output);


    virtual bool isSet() override;

private:
    double angle_tolerance;
    bool m_angle_tolerance_isSet;

    bool batch_flat_patterns;
    bool m_batch_flat_patterns_isSet;

    double chord_tolerance;
    bool m_chord_tolerance_isSet;

    QString* cloud_object_id;
    bool m_cloud_object_id_isSet;

    QString* cloud_storage_account_id;
    bool m_cloud_storage_account_id_isSet;

    QString* configuration;
    bool m_configuration_isSet;

    bool deep_search_for_foreign_data;
    bool m_deep_search_for_foreign_data_isSet;

    QString* destination_name;
    bool m_destination_name_isSet;

    QString* document_id;
    bool m_document_id_isSet;

    QString* document_version_id;
    bool m_document_version_id_isSet;

    QString* element_id;
    bool m_element_id_isSet;

    QString* element_ids;
    bool m_element_ids_isSet;

    bool email_link;
    bool m_email_link_isSet;

    QString* email_message;
    bool m_email_message_isSet;

    QString* email_subject;
    bool m_email_subject_isSet;

    QString* email_to;
    bool m_email_to_isSet;

    bool extract_to_s3;
    bool m_extract_to_s3_isSet;

    QString* feature_ids;
    bool m_feature_ids_isSet;

    bool flatten;
    bool m_flatten_isSet;

    QString* format;
    bool m_format_isSet;

    QString* from_user_id;
    bool m_from_user_id_isSet;

    QString* grouping;
    bool m_grouping_isSet;

    bool include_bend_centerlines;
    bool m_include_bend_centerlines_isSet;

    bool include_bend_lines;
    bool m_include_bend_lines_isSet;

    bool include_custom_properties;
    bool m_include_custom_properties_isSet;

    bool include_custom_properties_data;
    bool m_include_custom_properties_data_isSet;

    bool include_export_ids;
    bool m_include_export_ids_isSet;

    bool include_foreign_data;
    bool m_include_foreign_data_isSet;

    bool include_items_data;
    bool m_include_items_data_isSet;

    bool include_linked_documents;
    bool m_include_linked_documents_isSet;

    bool include_release_management_data;
    bool m_include_release_management_data_isSet;

    bool include_sketches;
    bool m_include_sketches_isSet;

    bool include_std;
    bool m_include_std_isSet;

    bool is_parting_out;
    bool m_is_parting_out_isSet;

    QString* link_document_id;
    bool m_link_document_id_isSet;

    QString* link_document_workspace_id;
    bool m_link_document_workspace_id_isSet;

    double max_facet_width;
    bool m_max_facet_width_isSet;

    QString* microversion;
    bool m_microversion_isSet;

    double min_facet_width;
    bool m_min_facet_width_isSet;

    QString* mode;
    bool m_mode_isSet;

    QString* part_ids;
    bool m_part_ids_isSet;

    QString* part_query;
    bool m_part_query_isSet;

    QString* password;
    bool m_password_isSet;

    bool password_required;
    bool m_password_required_isSet;

    QString* resolution;
    bool m_resolution_isSet;

    double scale;
    bool m_scale_isSet;

    bool send_copy_to_me;
    bool m_send_copy_to_me_isSet;

    bool sheet_metal_flat;
    bool m_sheet_metal_flat_isSet;

    bool splines_as_polylines;
    bool m_splines_as_polylines_isSet;

    bool store_in_document;
    bool m_store_in_document_isSet;

    bool trigger_auto_download;
    bool m_trigger_auto_download_isSet;

    QString* units;
    bool m_units_isSet;

    QString* user_id;
    bool m_user_id_isSet;

    qint32 valid_for_days;
    bool m_valid_for_days_isSet;

    QString* version;
    bool m_version_isSet;

    QString* view;
    bool m_view_isSet;

    QString* workspace_id;
    bool m_workspace_id_isSet;

    bool zip_single_file_output;
    bool m_zip_single_file_output_isSet;

};

}

#endif /* OAIBTExportModelParams_H_ */
