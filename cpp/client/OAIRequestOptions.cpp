/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * OpenAPI spec version: 1.111
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIRequestOptions.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIRequestOptions::OAIRequestOptions(QString json) {
    init();
    this->fromJson(json);
}

OAIRequestOptions::OAIRequestOptions() {
    init();
}

OAIRequestOptions::~OAIRequestOptions() {
    this->cleanup();
}

void
OAIRequestOptions::init() {
    api_key = new QString("");
    m_api_key_isSet = false;
    connect_timeout = 0;
    m_connect_timeout_isSet = false;
    idempotency_key = new QString("");
    m_idempotency_key_isSet = false;
    read_timeout = 0;
    m_read_timeout_isSet = false;
    stripe_account = new QString("");
    m_stripe_account_isSet = false;
    stripe_version = new QString("");
    m_stripe_version_isSet = false;
}

void
OAIRequestOptions::cleanup() {
    if(api_key != nullptr) { 
        delete api_key;
    }

    if(idempotency_key != nullptr) { 
        delete idempotency_key;
    }

    if(stripe_account != nullptr) { 
        delete stripe_account;
    }
    if(stripe_version != nullptr) { 
        delete stripe_version;
    }
}

OAIRequestOptions*
OAIRequestOptions::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIRequestOptions::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&api_key, pJson["apiKey"], "QString", "QString");
    
    ::OpenAPI::setValue(&connect_timeout, pJson["connectTimeout"], "qint32", "");
    
    ::OpenAPI::setValue(&idempotency_key, pJson["idempotencyKey"], "QString", "QString");
    
    ::OpenAPI::setValue(&read_timeout, pJson["readTimeout"], "qint32", "");
    
    ::OpenAPI::setValue(&stripe_account, pJson["stripeAccount"], "QString", "QString");
    
    ::OpenAPI::setValue(&stripe_version, pJson["stripeVersion"], "QString", "QString");
    
}

QString
OAIRequestOptions::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIRequestOptions::asJsonObject() {
    QJsonObject obj;
    if(api_key != nullptr && *api_key != QString("")){
        toJsonValue(QString("apiKey"), api_key, obj, QString("QString"));
    }
    if(m_connect_timeout_isSet){
        obj.insert("connectTimeout", QJsonValue(connect_timeout));
    }
    if(idempotency_key != nullptr && *idempotency_key != QString("")){
        toJsonValue(QString("idempotencyKey"), idempotency_key, obj, QString("QString"));
    }
    if(m_read_timeout_isSet){
        obj.insert("readTimeout", QJsonValue(read_timeout));
    }
    if(stripe_account != nullptr && *stripe_account != QString("")){
        toJsonValue(QString("stripeAccount"), stripe_account, obj, QString("QString"));
    }
    if(stripe_version != nullptr && *stripe_version != QString("")){
        toJsonValue(QString("stripeVersion"), stripe_version, obj, QString("QString"));
    }

    return obj;
}

QString*
OAIRequestOptions::getApiKey() {
    return api_key;
}
void
OAIRequestOptions::setApiKey(QString* api_key) {
    this->api_key = api_key;
    this->m_api_key_isSet = true;
}

qint32
OAIRequestOptions::getConnectTimeout() {
    return connect_timeout;
}
void
OAIRequestOptions::setConnectTimeout(qint32 connect_timeout) {
    this->connect_timeout = connect_timeout;
    this->m_connect_timeout_isSet = true;
}

QString*
OAIRequestOptions::getIdempotencyKey() {
    return idempotency_key;
}
void
OAIRequestOptions::setIdempotencyKey(QString* idempotency_key) {
    this->idempotency_key = idempotency_key;
    this->m_idempotency_key_isSet = true;
}

qint32
OAIRequestOptions::getReadTimeout() {
    return read_timeout;
}
void
OAIRequestOptions::setReadTimeout(qint32 read_timeout) {
    this->read_timeout = read_timeout;
    this->m_read_timeout_isSet = true;
}

QString*
OAIRequestOptions::getStripeAccount() {
    return stripe_account;
}
void
OAIRequestOptions::setStripeAccount(QString* stripe_account) {
    this->stripe_account = stripe_account;
    this->m_stripe_account_isSet = true;
}

QString*
OAIRequestOptions::getStripeVersion() {
    return stripe_version;
}
void
OAIRequestOptions::setStripeVersion(QString* stripe_version) {
    this->stripe_version = stripe_version;
    this->m_stripe_version_isSet = true;
}


bool
OAIRequestOptions::isSet(){
    bool isObjectUpdated = false;
    do{
        if(api_key != nullptr && *api_key != QString("")){ isObjectUpdated = true; break;}
        if(m_connect_timeout_isSet){ isObjectUpdated = true; break;}
        if(idempotency_key != nullptr && *idempotency_key != QString("")){ isObjectUpdated = true; break;}
        if(m_read_timeout_isSet){ isObjectUpdated = true; break;}
        if(stripe_account != nullptr && *stripe_account != QString("")){ isObjectUpdated = true; break;}
        if(stripe_version != nullptr && *stripe_version != QString("")){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

