/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * OpenAPI spec version: 1.111
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIBTSweepDescription-1473.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIBTSweepDescription-1473::OAIBTSweepDescription-1473(QString json) {
    init();
    this->fromJson(json);
}

OAIBTSweepDescription-1473::OAIBTSweepDescription-1473() {
    init();
}

OAIBTSweepDescription-1473::~OAIBTSweepDescription-1473() {
    this->cleanup();
}

void
OAIBTSweepDescription-1473::init() {
    bt_type = new QString("");
    m_bt_type_isSet = false;
    type = new QString("");
    m_type_isSet = false;
    direction = new OAIBTVector3d-389();
    m_direction_isSet = false;
    profile = new OAIBTSplineDescription-2118();
    m_profile_isSet = false;
}

void
OAIBTSweepDescription-1473::cleanup() {
    if(bt_type != nullptr) { 
        delete bt_type;
    }
    if(type != nullptr) { 
        delete type;
    }
    if(direction != nullptr) { 
        delete direction;
    }
    if(profile != nullptr) { 
        delete profile;
    }
}

OAIBTSweepDescription-1473*
OAIBTSweepDescription-1473::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIBTSweepDescription-1473::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&bt_type, pJson["btType"], "QString", "QString");
    
    ::OpenAPI::setValue(&type, pJson["type"], "QString", "QString");
    
    ::OpenAPI::setValue(&direction, pJson["direction"], "OAIBTVector3d-389", "OAIBTVector3d-389");
    
    ::OpenAPI::setValue(&profile, pJson["profile"], "OAIBTSplineDescription-2118", "OAIBTSplineDescription-2118");
    
}

QString
OAIBTSweepDescription-1473::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIBTSweepDescription-1473::asJsonObject() {
    QJsonObject obj;
    if(bt_type != nullptr && *bt_type != QString("")){
        toJsonValue(QString("btType"), bt_type, obj, QString("QString"));
    }
    if(type != nullptr && *type != QString("")){
        toJsonValue(QString("type"), type, obj, QString("QString"));
    }
    if((direction != nullptr) && (direction->isSet())){
        toJsonValue(QString("direction"), direction, obj, QString("OAIBTVector3d-389"));
    }
    if((profile != nullptr) && (profile->isSet())){
        toJsonValue(QString("profile"), profile, obj, QString("OAIBTSplineDescription-2118"));
    }

    return obj;
}

QString*
OAIBTSweepDescription-1473::getBtType() {
    return bt_type;
}
void
OAIBTSweepDescription-1473::setBtType(QString* bt_type) {
    this->bt_type = bt_type;
    this->m_bt_type_isSet = true;
}

QString*
OAIBTSweepDescription-1473::getType() {
    return type;
}
void
OAIBTSweepDescription-1473::setType(QString* type) {
    this->type = type;
    this->m_type_isSet = true;
}

OAIBTVector3d-389*
OAIBTSweepDescription-1473::getDirection() {
    return direction;
}
void
OAIBTSweepDescription-1473::setDirection(OAIBTVector3d-389* direction) {
    this->direction = direction;
    this->m_direction_isSet = true;
}

OAIBTSplineDescription-2118*
OAIBTSweepDescription-1473::getProfile() {
    return profile;
}
void
OAIBTSweepDescription-1473::setProfile(OAIBTSplineDescription-2118* profile) {
    this->profile = profile;
    this->m_profile_isSet = true;
}


bool
OAIBTSweepDescription-1473::isSet(){
    bool isObjectUpdated = false;
    do{
        if(bt_type != nullptr && *bt_type != QString("")){ isObjectUpdated = true; break;}
        if(type != nullptr && *type != QString("")){ isObjectUpdated = true; break;}
        if(direction != nullptr && direction->isSet()){ isObjectUpdated = true; break;}
        if(profile != nullptr && profile->isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

