/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * OpenAPI spec version: 1.111
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIBTCommentAttachmentInfo.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIBTCommentAttachmentInfo::OAIBTCommentAttachmentInfo(QString json) {
    init();
    this->fromJson(json);
}

OAIBTCommentAttachmentInfo::OAIBTCommentAttachmentInfo() {
    init();
}

OAIBTCommentAttachmentInfo::~OAIBTCommentAttachmentInfo() {
    this->cleanup();
}

void
OAIBTCommentAttachmentInfo::init() {
    file_name = new QString("");
    m_file_name_isSet = false;
    href = new QString("");
    m_href_isSet = false;
    id = new QString("");
    m_id_isSet = false;
    mime_type = new QString("");
    m_mime_type_isSet = false;
    name = new QString("");
    m_name_isSet = false;
    thumbnail_for = new QString("");
    m_thumbnail_for_isSet = false;
    view_ref = new QString("");
    m_view_ref_isSet = false;
}

void
OAIBTCommentAttachmentInfo::cleanup() {
    if(file_name != nullptr) { 
        delete file_name;
    }
    if(href != nullptr) { 
        delete href;
    }
    if(id != nullptr) { 
        delete id;
    }
    if(mime_type != nullptr) { 
        delete mime_type;
    }
    if(name != nullptr) { 
        delete name;
    }
    if(thumbnail_for != nullptr) { 
        delete thumbnail_for;
    }
    if(view_ref != nullptr) { 
        delete view_ref;
    }
}

OAIBTCommentAttachmentInfo*
OAIBTCommentAttachmentInfo::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIBTCommentAttachmentInfo::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&file_name, pJson["fileName"], "QString", "QString");
    
    ::OpenAPI::setValue(&href, pJson["href"], "QString", "QString");
    
    ::OpenAPI::setValue(&id, pJson["id"], "QString", "QString");
    
    ::OpenAPI::setValue(&mime_type, pJson["mimeType"], "QString", "QString");
    
    ::OpenAPI::setValue(&name, pJson["name"], "QString", "QString");
    
    ::OpenAPI::setValue(&thumbnail_for, pJson["thumbnailFor"], "QString", "QString");
    
    ::OpenAPI::setValue(&view_ref, pJson["viewRef"], "QString", "QString");
    
}

QString
OAIBTCommentAttachmentInfo::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIBTCommentAttachmentInfo::asJsonObject() {
    QJsonObject obj;
    if(file_name != nullptr && *file_name != QString("")){
        toJsonValue(QString("fileName"), file_name, obj, QString("QString"));
    }
    if(href != nullptr && *href != QString("")){
        toJsonValue(QString("href"), href, obj, QString("QString"));
    }
    if(id != nullptr && *id != QString("")){
        toJsonValue(QString("id"), id, obj, QString("QString"));
    }
    if(mime_type != nullptr && *mime_type != QString("")){
        toJsonValue(QString("mimeType"), mime_type, obj, QString("QString"));
    }
    if(name != nullptr && *name != QString("")){
        toJsonValue(QString("name"), name, obj, QString("QString"));
    }
    if(thumbnail_for != nullptr && *thumbnail_for != QString("")){
        toJsonValue(QString("thumbnailFor"), thumbnail_for, obj, QString("QString"));
    }
    if(view_ref != nullptr && *view_ref != QString("")){
        toJsonValue(QString("viewRef"), view_ref, obj, QString("QString"));
    }

    return obj;
}

QString*
OAIBTCommentAttachmentInfo::getFileName() {
    return file_name;
}
void
OAIBTCommentAttachmentInfo::setFileName(QString* file_name) {
    this->file_name = file_name;
    this->m_file_name_isSet = true;
}

QString*
OAIBTCommentAttachmentInfo::getHref() {
    return href;
}
void
OAIBTCommentAttachmentInfo::setHref(QString* href) {
    this->href = href;
    this->m_href_isSet = true;
}

QString*
OAIBTCommentAttachmentInfo::getId() {
    return id;
}
void
OAIBTCommentAttachmentInfo::setId(QString* id) {
    this->id = id;
    this->m_id_isSet = true;
}

QString*
OAIBTCommentAttachmentInfo::getMimeType() {
    return mime_type;
}
void
OAIBTCommentAttachmentInfo::setMimeType(QString* mime_type) {
    this->mime_type = mime_type;
    this->m_mime_type_isSet = true;
}

QString*
OAIBTCommentAttachmentInfo::getName() {
    return name;
}
void
OAIBTCommentAttachmentInfo::setName(QString* name) {
    this->name = name;
    this->m_name_isSet = true;
}

QString*
OAIBTCommentAttachmentInfo::getThumbnailFor() {
    return thumbnail_for;
}
void
OAIBTCommentAttachmentInfo::setThumbnailFor(QString* thumbnail_for) {
    this->thumbnail_for = thumbnail_for;
    this->m_thumbnail_for_isSet = true;
}

QString*
OAIBTCommentAttachmentInfo::getViewRef() {
    return view_ref;
}
void
OAIBTCommentAttachmentInfo::setViewRef(QString* view_ref) {
    this->view_ref = view_ref;
    this->m_view_ref_isSet = true;
}


bool
OAIBTCommentAttachmentInfo::isSet(){
    bool isObjectUpdated = false;
    do{
        if(file_name != nullptr && *file_name != QString("")){ isObjectUpdated = true; break;}
        if(href != nullptr && *href != QString("")){ isObjectUpdated = true; break;}
        if(id != nullptr && *id != QString("")){ isObjectUpdated = true; break;}
        if(mime_type != nullptr && *mime_type != QString("")){ isObjectUpdated = true; break;}
        if(name != nullptr && *name != QString("")){ isObjectUpdated = true; break;}
        if(thumbnail_for != nullptr && *thumbnail_for != QString("")){ isObjectUpdated = true; break;}
        if(view_ref != nullptr && *view_ref != QString("")){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

