/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * OpenAPI spec version: 1.111
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIComponents.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIComponents::OAIComponents(QString json) {
    init();
    this->fromJson(json);
}

OAIComponents::OAIComponents() {
    init();
}

OAIComponents::~OAIComponents() {
    this->cleanup();
}

void
OAIComponents::init() {
    callbacks = new QMap<QString, QMap*>();
    m_callbacks_isSet = false;
    examples = new QMap<QString, OAIExample*>();
    m_examples_isSet = false;
    extensions = new QMap<QString, OAIObject*>();
    m_extensions_isSet = false;
    headers = new QMap<QString, OAIHeader*>();
    m_headers_isSet = false;
    links = new QMap<QString, OAILink*>();
    m_links_isSet = false;
    parameters = new QMap<QString, OAIParameter*>();
    m_parameters_isSet = false;
    request_bodies = new QMap<QString, OAIRequestBody*>();
    m_request_bodies_isSet = false;
    responses = new QMap<QString, OAIApiResponse*>();
    m_responses_isSet = false;
    schemas = new QMap<QString, OAISchema*>();
    m_schemas_isSet = false;
    security_schemes = new QMap<QString, OAISecurityScheme*>();
    m_security_schemes_isSet = false;
}

void
OAIComponents::cleanup() {
    if(callbacks != nullptr) { 
        auto arr = callbacks;
        for(auto o: *arr) { 
            delete o;
        }
        delete callbacks;
    }
    if(examples != nullptr) { 
        auto arr = examples;
        for(auto o: *arr) { 
            delete o;
        }
        delete examples;
    }
    if(extensions != nullptr) { 
        auto arr = extensions;
        for(auto o: *arr) { 
            delete o;
        }
        delete extensions;
    }
    if(headers != nullptr) { 
        auto arr = headers;
        for(auto o: *arr) { 
            delete o;
        }
        delete headers;
    }
    if(links != nullptr) { 
        auto arr = links;
        for(auto o: *arr) { 
            delete o;
        }
        delete links;
    }
    if(parameters != nullptr) { 
        auto arr = parameters;
        for(auto o: *arr) { 
            delete o;
        }
        delete parameters;
    }
    if(request_bodies != nullptr) { 
        auto arr = request_bodies;
        for(auto o: *arr) { 
            delete o;
        }
        delete request_bodies;
    }
    if(responses != nullptr) { 
        auto arr = responses;
        for(auto o: *arr) { 
            delete o;
        }
        delete responses;
    }
    if(schemas != nullptr) { 
        auto arr = schemas;
        for(auto o: *arr) { 
            delete o;
        }
        delete schemas;
    }
    if(security_schemes != nullptr) { 
        auto arr = security_schemes;
        for(auto o: *arr) { 
            delete o;
        }
        delete security_schemes;
    }
}

OAIComponents*
OAIComponents::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIComponents::fromJsonObject(QJsonObject pJson) {
    
    ::OpenAPI::setValue(&callbacks, pJson["callbacks"], "QMap", "QMap");
    
    ::OpenAPI::setValue(&examples, pJson["examples"], "QMap", "OAIExample");
    
    ::OpenAPI::setValue(&extensions, pJson["extensions"], "QMap", "OAIObject");
    
    ::OpenAPI::setValue(&headers, pJson["headers"], "QMap", "OAIHeader");
    
    ::OpenAPI::setValue(&links, pJson["links"], "QMap", "OAILink");
    
    ::OpenAPI::setValue(&parameters, pJson["parameters"], "QMap", "OAIParameter");
    
    ::OpenAPI::setValue(&request_bodies, pJson["requestBodies"], "QMap", "OAIRequestBody");
    
    ::OpenAPI::setValue(&responses, pJson["responses"], "QMap", "OAIApiResponse");
    
    ::OpenAPI::setValue(&schemas, pJson["schemas"], "QMap", "OAISchema");
    
    ::OpenAPI::setValue(&security_schemes, pJson["securitySchemes"], "QMap", "OAISecurityScheme");
}

QString
OAIComponents::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIComponents::asJsonObject() {
    QJsonObject obj;
    if(callbacks->size() > 0){
        toJsonMap((QMap<QString, void*>*) callbacks, obj, "callbacks", "QMap");
    }
    if(examples->size() > 0){
        toJsonMap((QMap<QString, void*>*) examples, obj, "examples", "OAIExample");
    }
    if(extensions->size() > 0){
        toJsonMap((QMap<QString, void*>*) extensions, obj, "extensions", "OAIObject");
    }
    if(headers->size() > 0){
        toJsonMap((QMap<QString, void*>*) headers, obj, "headers", "OAIHeader");
    }
    if(links->size() > 0){
        toJsonMap((QMap<QString, void*>*) links, obj, "links", "OAILink");
    }
    if(parameters->size() > 0){
        toJsonMap((QMap<QString, void*>*) parameters, obj, "parameters", "OAIParameter");
    }
    if(request_bodies->size() > 0){
        toJsonMap((QMap<QString, void*>*) request_bodies, obj, "requestBodies", "OAIRequestBody");
    }
    if(responses->size() > 0){
        toJsonMap((QMap<QString, void*>*) responses, obj, "responses", "OAIApiResponse");
    }
    if(schemas->size() > 0){
        toJsonMap((QMap<QString, void*>*) schemas, obj, "schemas", "OAISchema");
    }
    if(security_schemes->size() > 0){
        toJsonMap((QMap<QString, void*>*) security_schemes, obj, "securitySchemes", "OAISecurityScheme");
    }

    return obj;
}

QMap<QString, QMap*>*
OAIComponents::getCallbacks() {
    return callbacks;
}
void
OAIComponents::setCallbacks(QMap<QString, QMap*>* callbacks) {
    this->callbacks = callbacks;
    this->m_callbacks_isSet = true;
}

QMap<QString, OAIExample*>*
OAIComponents::getExamples() {
    return examples;
}
void
OAIComponents::setExamples(QMap<QString, OAIExample*>* examples) {
    this->examples = examples;
    this->m_examples_isSet = true;
}

QMap<QString, OAIObject*>*
OAIComponents::getExtensions() {
    return extensions;
}
void
OAIComponents::setExtensions(QMap<QString, OAIObject*>* extensions) {
    this->extensions = extensions;
    this->m_extensions_isSet = true;
}

QMap<QString, OAIHeader*>*
OAIComponents::getHeaders() {
    return headers;
}
void
OAIComponents::setHeaders(QMap<QString, OAIHeader*>* headers) {
    this->headers = headers;
    this->m_headers_isSet = true;
}

QMap<QString, OAILink*>*
OAIComponents::getLinks() {
    return links;
}
void
OAIComponents::setLinks(QMap<QString, OAILink*>* links) {
    this->links = links;
    this->m_links_isSet = true;
}

QMap<QString, OAIParameter*>*
OAIComponents::getParameters() {
    return parameters;
}
void
OAIComponents::setParameters(QMap<QString, OAIParameter*>* parameters) {
    this->parameters = parameters;
    this->m_parameters_isSet = true;
}

QMap<QString, OAIRequestBody*>*
OAIComponents::getRequestBodies() {
    return request_bodies;
}
void
OAIComponents::setRequestBodies(QMap<QString, OAIRequestBody*>* request_bodies) {
    this->request_bodies = request_bodies;
    this->m_request_bodies_isSet = true;
}

QMap<QString, OAIApiResponse*>*
OAIComponents::getResponses() {
    return responses;
}
void
OAIComponents::setResponses(QMap<QString, OAIApiResponse*>* responses) {
    this->responses = responses;
    this->m_responses_isSet = true;
}

QMap<QString, OAISchema*>*
OAIComponents::getSchemas() {
    return schemas;
}
void
OAIComponents::setSchemas(QMap<QString, OAISchema*>* schemas) {
    this->schemas = schemas;
    this->m_schemas_isSet = true;
}

QMap<QString, OAISecurityScheme*>*
OAIComponents::getSecuritySchemes() {
    return security_schemes;
}
void
OAIComponents::setSecuritySchemes(QMap<QString, OAISecurityScheme*>* security_schemes) {
    this->security_schemes = security_schemes;
    this->m_security_schemes_isSet = true;
}


bool
OAIComponents::isSet(){
    bool isObjectUpdated = false;
    do{
        if(callbacks->size() > 0){ isObjectUpdated = true; break;}
        if(examples->size() > 0){ isObjectUpdated = true; break;}
        if(extensions->size() > 0){ isObjectUpdated = true; break;}
        if(headers->size() > 0){ isObjectUpdated = true; break;}
        if(links->size() > 0){ isObjectUpdated = true; break;}
        if(parameters->size() > 0){ isObjectUpdated = true; break;}
        if(request_bodies->size() > 0){ isObjectUpdated = true; break;}
        if(responses->size() > 0){ isObjectUpdated = true; break;}
        if(schemas->size() > 0){ isObjectUpdated = true; break;}
        if(security_schemes->size() > 0){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

