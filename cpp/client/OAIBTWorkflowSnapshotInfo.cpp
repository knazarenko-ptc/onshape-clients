/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * OpenAPI spec version: 1.111
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIBTWorkflowSnapshotInfo.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIBTWorkflowSnapshotInfo::OAIBTWorkflowSnapshotInfo(QString json) {
    init();
    this->fromJson(json);
}

OAIBTWorkflowSnapshotInfo::OAIBTWorkflowSnapshotInfo() {
    init();
}

OAIBTWorkflowSnapshotInfo::~OAIBTWorkflowSnapshotInfo() {
    this->cleanup();
}

void
OAIBTWorkflowSnapshotInfo::init() {
    actions = new QList<OAIBTWorkflowActionInfo*>();
    m_actions_isSet = false;
    approver_ids = new QList<QString*>();
    m_approver_ids_isSet = false;
    is_discarded = false;
    m_is_discarded_isSet = false;
    is_frozen = false;
    m_is_frozen_isSet = false;
    is_setup = false;
    m_is_setup_isSet = false;
    metadata_state = new QString("");
    m_metadata_state_isSet = false;
    notifier_ids = new QList<QString*>();
    m_notifier_ids_isSet = false;
    state = new OAIBTWorkflowStateInfo();
    m_state_isSet = false;
}

void
OAIBTWorkflowSnapshotInfo::cleanup() {
    if(actions != nullptr) { 
        auto arr = actions;
        for(auto o: *arr) { 
            delete o;
        }
        delete actions;
    }
    if(approver_ids != nullptr) { 
        auto arr = approver_ids;
        for(auto o: *arr) { 
            delete o;
        }
        delete approver_ids;
    }



    if(metadata_state != nullptr) { 
        delete metadata_state;
    }
    if(notifier_ids != nullptr) { 
        auto arr = notifier_ids;
        for(auto o: *arr) { 
            delete o;
        }
        delete notifier_ids;
    }
    if(state != nullptr) { 
        delete state;
    }
}

OAIBTWorkflowSnapshotInfo*
OAIBTWorkflowSnapshotInfo::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIBTWorkflowSnapshotInfo::fromJsonObject(QJsonObject pJson) {
    
    ::OpenAPI::setValue(&actions, pJson["actions"], "QList", "OAIBTWorkflowActionInfo");
    
    ::OpenAPI::setValue(&approver_ids, pJson["approverIds"], "QList", "QString");
    ::OpenAPI::setValue(&is_discarded, pJson["isDiscarded"], "bool", "");
    
    ::OpenAPI::setValue(&is_frozen, pJson["isFrozen"], "bool", "");
    
    ::OpenAPI::setValue(&is_setup, pJson["isSetup"], "bool", "");
    
    ::OpenAPI::setValue(&metadata_state, pJson["metadataState"], "QString", "QString");
    
    
    ::OpenAPI::setValue(&notifier_ids, pJson["notifierIds"], "QList", "QString");
    ::OpenAPI::setValue(&state, pJson["state"], "OAIBTWorkflowStateInfo", "OAIBTWorkflowStateInfo");
    
}

QString
OAIBTWorkflowSnapshotInfo::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIBTWorkflowSnapshotInfo::asJsonObject() {
    QJsonObject obj;
    if(actions->size() > 0){
        toJsonArray((QList<void*>*)actions, obj, "actions", "OAIBTWorkflowActionInfo");
    }
    if(approver_ids->size() > 0){
        toJsonArray((QList<void*>*)approver_ids, obj, "approverIds", "QString");
    }
    if(m_is_discarded_isSet){
        obj.insert("isDiscarded", QJsonValue(is_discarded));
    }
    if(m_is_frozen_isSet){
        obj.insert("isFrozen", QJsonValue(is_frozen));
    }
    if(m_is_setup_isSet){
        obj.insert("isSetup", QJsonValue(is_setup));
    }
    if(metadata_state != nullptr && *metadata_state != QString("")){
        toJsonValue(QString("metadataState"), metadata_state, obj, QString("QString"));
    }
    if(notifier_ids->size() > 0){
        toJsonArray((QList<void*>*)notifier_ids, obj, "notifierIds", "QString");
    }
    if((state != nullptr) && (state->isSet())){
        toJsonValue(QString("state"), state, obj, QString("OAIBTWorkflowStateInfo"));
    }

    return obj;
}

QList<OAIBTWorkflowActionInfo*>*
OAIBTWorkflowSnapshotInfo::getActions() {
    return actions;
}
void
OAIBTWorkflowSnapshotInfo::setActions(QList<OAIBTWorkflowActionInfo*>* actions) {
    this->actions = actions;
    this->m_actions_isSet = true;
}

QList<QString*>*
OAIBTWorkflowSnapshotInfo::getApproverIds() {
    return approver_ids;
}
void
OAIBTWorkflowSnapshotInfo::setApproverIds(QList<QString*>* approver_ids) {
    this->approver_ids = approver_ids;
    this->m_approver_ids_isSet = true;
}

bool
OAIBTWorkflowSnapshotInfo::isIsDiscarded() {
    return is_discarded;
}
void
OAIBTWorkflowSnapshotInfo::setIsDiscarded(bool is_discarded) {
    this->is_discarded = is_discarded;
    this->m_is_discarded_isSet = true;
}

bool
OAIBTWorkflowSnapshotInfo::isIsFrozen() {
    return is_frozen;
}
void
OAIBTWorkflowSnapshotInfo::setIsFrozen(bool is_frozen) {
    this->is_frozen = is_frozen;
    this->m_is_frozen_isSet = true;
}

bool
OAIBTWorkflowSnapshotInfo::isIsSetup() {
    return is_setup;
}
void
OAIBTWorkflowSnapshotInfo::setIsSetup(bool is_setup) {
    this->is_setup = is_setup;
    this->m_is_setup_isSet = true;
}

QString*
OAIBTWorkflowSnapshotInfo::getMetadataState() {
    return metadata_state;
}
void
OAIBTWorkflowSnapshotInfo::setMetadataState(QString* metadata_state) {
    this->metadata_state = metadata_state;
    this->m_metadata_state_isSet = true;
}

QList<QString*>*
OAIBTWorkflowSnapshotInfo::getNotifierIds() {
    return notifier_ids;
}
void
OAIBTWorkflowSnapshotInfo::setNotifierIds(QList<QString*>* notifier_ids) {
    this->notifier_ids = notifier_ids;
    this->m_notifier_ids_isSet = true;
}

OAIBTWorkflowStateInfo*
OAIBTWorkflowSnapshotInfo::getState() {
    return state;
}
void
OAIBTWorkflowSnapshotInfo::setState(OAIBTWorkflowStateInfo* state) {
    this->state = state;
    this->m_state_isSet = true;
}


bool
OAIBTWorkflowSnapshotInfo::isSet(){
    bool isObjectUpdated = false;
    do{
        if(actions->size() > 0){ isObjectUpdated = true; break;}
        if(approver_ids->size() > 0){ isObjectUpdated = true; break;}
        if(m_is_discarded_isSet){ isObjectUpdated = true; break;}
        if(m_is_frozen_isSet){ isObjectUpdated = true; break;}
        if(m_is_setup_isSet){ isObjectUpdated = true; break;}
        if(metadata_state != nullptr && *metadata_state != QString("")){ isObjectUpdated = true; break;}
        if(notifier_ids->size() > 0){ isObjectUpdated = true; break;}
        if(state != nullptr && state->isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

