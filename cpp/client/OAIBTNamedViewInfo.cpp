/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * OpenAPI spec version: 1.111
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIBTNamedViewInfo.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIBTNamedViewInfo::OAIBTNamedViewInfo(QString json) {
    init();
    this->fromJson(json);
}

OAIBTNamedViewInfo::OAIBTNamedViewInfo() {
    init();
}

OAIBTNamedViewInfo::~OAIBTNamedViewInfo() {
    this->cleanup();
}

void
OAIBTNamedViewInfo::init() {
    angle = 0.0;
    m_angle_isSet = false;
    camera_viewport = new QList<double>();
    m_camera_viewport_isSet = false;
    perspective = false;
    m_perspective_isSet = false;
    section_planes = new QList<OAIBTSectionPlaneInfo*>();
    m_section_planes_isSet = false;
    view_matrix = new QList<double>();
    m_view_matrix_isSet = false;
}

void
OAIBTNamedViewInfo::cleanup() {


    if(camera_viewport != nullptr) { 
        delete camera_viewport;
    }

    if(section_planes != nullptr) { 
        auto arr = section_planes;
        for(auto o: *arr) { 
            delete o;
        }
        delete section_planes;
    }

    if(view_matrix != nullptr) { 
        delete view_matrix;
    }
}

OAIBTNamedViewInfo*
OAIBTNamedViewInfo::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIBTNamedViewInfo::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&angle, pJson["angle"], "double", "");
    
    
    ::OpenAPI::setValue(&camera_viewport, pJson["cameraViewport"], "QList", "double");
    ::OpenAPI::setValue(&perspective, pJson["perspective"], "bool", "");
    
    
    ::OpenAPI::setValue(&section_planes, pJson["sectionPlanes"], "QList", "OAIBTSectionPlaneInfo");
    
    ::OpenAPI::setValue(&view_matrix, pJson["viewMatrix"], "QList", "double");
}

QString
OAIBTNamedViewInfo::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIBTNamedViewInfo::asJsonObject() {
    QJsonObject obj;
    if(m_angle_isSet){
        obj.insert("angle", QJsonValue(angle));
    }
    if(camera_viewport->size() > 0){
        toJsonArray((QList<void*>*)camera_viewport, obj, "cameraViewport", "");
    }
    if(m_perspective_isSet){
        obj.insert("perspective", QJsonValue(perspective));
    }
    if(section_planes->size() > 0){
        toJsonArray((QList<void*>*)section_planes, obj, "sectionPlanes", "OAIBTSectionPlaneInfo");
    }
    if(view_matrix->size() > 0){
        toJsonArray((QList<void*>*)view_matrix, obj, "viewMatrix", "");
    }

    return obj;
}

double
OAIBTNamedViewInfo::getAngle() {
    return angle;
}
void
OAIBTNamedViewInfo::setAngle(double angle) {
    this->angle = angle;
    this->m_angle_isSet = true;
}

QList<double>*
OAIBTNamedViewInfo::getCameraViewport() {
    return camera_viewport;
}
void
OAIBTNamedViewInfo::setCameraViewport(QList<double>* camera_viewport) {
    this->camera_viewport = camera_viewport;
    this->m_camera_viewport_isSet = true;
}

bool
OAIBTNamedViewInfo::isPerspective() {
    return perspective;
}
void
OAIBTNamedViewInfo::setPerspective(bool perspective) {
    this->perspective = perspective;
    this->m_perspective_isSet = true;
}

QList<OAIBTSectionPlaneInfo*>*
OAIBTNamedViewInfo::getSectionPlanes() {
    return section_planes;
}
void
OAIBTNamedViewInfo::setSectionPlanes(QList<OAIBTSectionPlaneInfo*>* section_planes) {
    this->section_planes = section_planes;
    this->m_section_planes_isSet = true;
}

QList<double>*
OAIBTNamedViewInfo::getViewMatrix() {
    return view_matrix;
}
void
OAIBTNamedViewInfo::setViewMatrix(QList<double>* view_matrix) {
    this->view_matrix = view_matrix;
    this->m_view_matrix_isSet = true;
}


bool
OAIBTNamedViewInfo::isSet(){
    bool isObjectUpdated = false;
    do{
        if(m_angle_isSet){ isObjectUpdated = true; break;}
        if(m_camera_viewport_isSet){ isObjectUpdated = true; break;}
        if(camera_viewport->size() > 0){ isObjectUpdated = true; break;}
        if(m_perspective_isSet){ isObjectUpdated = true; break;}
        if(section_planes->size() > 0){ isObjectUpdated = true; break;}
        if(m_view_matrix_isSet){ isObjectUpdated = true; break;}
        if(view_matrix->size() > 0){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

