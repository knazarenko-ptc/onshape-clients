/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * OpenAPI spec version: 1.111
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIBTInsertableInfo.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIBTInsertableInfo::OAIBTInsertableInfo(QString json) {
    init();
    this->fromJson(json);
}

OAIBTInsertableInfo::OAIBTInsertableInfo() {
    init();
}

OAIBTInsertableInfo::~OAIBTInsertableInfo() {
    this->cleanup();
}

void
OAIBTInsertableInfo::init() {
    body_type = new QString("");
    m_body_type_isSet = false;
    class_type = 0;
    m_class_type_isSet = false;
    configuration_id = new QString("");
    m_configuration_id_isSet = false;
    configuration_parameter_values = new QList<QByteArray*>();
    m_configuration_parameter_values_isSet = false;
    configuration_parameters = new QList<QByteArray*>();
    m_configuration_parameters_isSet = false;
    data_type = new QString("");
    m_data_type_isSet = false;
    deterministic_id = new QString("");
    m_deterministic_id_isSet = false;
    document_id = new QString("");
    m_document_id_isSet = false;
    element_id = new QString("");
    m_element_id_isSet = false;
    element_name = new QString("");
    m_element_name_isSet = false;
    element_type = new QString("");
    m_element_type_isSet = false;
    feature_id = new QString("");
    m_feature_id_isSet = false;
    feature_name = new QString("");
    m_feature_name_isSet = false;
    feature_spec = new QList<QByteArray*>();
    m_feature_spec_isSet = false;
    feature_type = new QString("");
    m_feature_type_isSet = false;
    fs_table_spec = new QList<QByteArray*>();
    m_fs_table_spec_isSet = false;
    has_faults = false;
    m_has_faults_isSet = false;
    href = new QString("");
    m_href_isSet = false;
    id = new QString("");
    m_id_isSet = false;
    insertable_query = new QString("");
    m_insertable_query_isSet = false;
    is_flattened_body = false;
    m_is_flattened_body_isSet = false;
    is_mesh = false;
    m_is_mesh_isSet = false;
    microversion_id = new QString("");
    m_microversion_id_isSet = false;
    name = new QString("");
    m_name_isSet = false;
    parent_id = new QString("");
    m_parent_id_isSet = false;
    part_name = new QString("");
    m_part_name_isSet = false;
    predictable_id = new QString("");
    m_predictable_id_isSet = false;
    thumbnail_uri = new QString("");
    m_thumbnail_uri_isSet = false;
    unflattened_part_deterministic_id = new QString("");
    m_unflattened_part_deterministic_id_isSet = false;
    version_id = new QString("");
    m_version_id_isSet = false;
    version_name = new QString("");
    m_version_name_isSet = false;
    view_ref = new QString("");
    m_view_ref_isSet = false;
}

void
OAIBTInsertableInfo::cleanup() {
    if(body_type != nullptr) { 
        delete body_type;
    }

    if(configuration_id != nullptr) { 
        delete configuration_id;
    }
    if(configuration_parameter_values != nullptr) { 
        auto arr = configuration_parameter_values;
        for(auto o: *arr) { 
            delete o;
        }
        delete configuration_parameter_values;
    }
    if(configuration_parameters != nullptr) { 
        auto arr = configuration_parameters;
        for(auto o: *arr) { 
            delete o;
        }
        delete configuration_parameters;
    }
    if(data_type != nullptr) { 
        delete data_type;
    }
    if(deterministic_id != nullptr) { 
        delete deterministic_id;
    }
    if(document_id != nullptr) { 
        delete document_id;
    }
    if(element_id != nullptr) { 
        delete element_id;
    }
    if(element_name != nullptr) { 
        delete element_name;
    }
    if(element_type != nullptr) { 
        delete element_type;
    }
    if(feature_id != nullptr) { 
        delete feature_id;
    }
    if(feature_name != nullptr) { 
        delete feature_name;
    }
    if(feature_spec != nullptr) { 
        auto arr = feature_spec;
        for(auto o: *arr) { 
            delete o;
        }
        delete feature_spec;
    }
    if(feature_type != nullptr) { 
        delete feature_type;
    }
    if(fs_table_spec != nullptr) { 
        auto arr = fs_table_spec;
        for(auto o: *arr) { 
            delete o;
        }
        delete fs_table_spec;
    }

    if(href != nullptr) { 
        delete href;
    }
    if(id != nullptr) { 
        delete id;
    }
    if(insertable_query != nullptr) { 
        delete insertable_query;
    }


    if(microversion_id != nullptr) { 
        delete microversion_id;
    }
    if(name != nullptr) { 
        delete name;
    }
    if(parent_id != nullptr) { 
        delete parent_id;
    }
    if(part_name != nullptr) { 
        delete part_name;
    }
    if(predictable_id != nullptr) { 
        delete predictable_id;
    }
    if(thumbnail_uri != nullptr) { 
        delete thumbnail_uri;
    }
    if(unflattened_part_deterministic_id != nullptr) { 
        delete unflattened_part_deterministic_id;
    }
    if(version_id != nullptr) { 
        delete version_id;
    }
    if(version_name != nullptr) { 
        delete version_name;
    }
    if(view_ref != nullptr) { 
        delete view_ref;
    }
}

OAIBTInsertableInfo*
OAIBTInsertableInfo::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIBTInsertableInfo::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&body_type, pJson["bodyType"], "QString", "QString");
    
    ::OpenAPI::setValue(&class_type, pJson["classType"], "qint32", "");
    
    ::OpenAPI::setValue(&configuration_id, pJson["configurationId"], "QString", "QString");
    
    
    ::OpenAPI::setValue(&configuration_parameter_values, pJson["configurationParameterValues"], "QList", "QByteArray");
    
    ::OpenAPI::setValue(&configuration_parameters, pJson["configurationParameters"], "QList", "QByteArray");
    ::OpenAPI::setValue(&data_type, pJson["dataType"], "QString", "QString");
    
    ::OpenAPI::setValue(&deterministic_id, pJson["deterministicId"], "QString", "QString");
    
    ::OpenAPI::setValue(&document_id, pJson["documentId"], "QString", "QString");
    
    ::OpenAPI::setValue(&element_id, pJson["elementId"], "QString", "QString");
    
    ::OpenAPI::setValue(&element_name, pJson["elementName"], "QString", "QString");
    
    ::OpenAPI::setValue(&element_type, pJson["elementType"], "QString", "QString");
    
    ::OpenAPI::setValue(&feature_id, pJson["featureId"], "QString", "QString");
    
    ::OpenAPI::setValue(&feature_name, pJson["featureName"], "QString", "QString");
    
    
    ::OpenAPI::setValue(&feature_spec, pJson["featureSpec"], "QList", "QByteArray");
    ::OpenAPI::setValue(&feature_type, pJson["featureType"], "QString", "QString");
    
    
    ::OpenAPI::setValue(&fs_table_spec, pJson["fsTableSpec"], "QList", "QByteArray");
    ::OpenAPI::setValue(&has_faults, pJson["hasFaults"], "bool", "");
    
    ::OpenAPI::setValue(&href, pJson["href"], "QString", "QString");
    
    ::OpenAPI::setValue(&id, pJson["id"], "QString", "QString");
    
    ::OpenAPI::setValue(&insertable_query, pJson["insertableQuery"], "QString", "QString");
    
    ::OpenAPI::setValue(&is_flattened_body, pJson["isFlattenedBody"], "bool", "");
    
    ::OpenAPI::setValue(&is_mesh, pJson["isMesh"], "bool", "");
    
    ::OpenAPI::setValue(&microversion_id, pJson["microversionId"], "QString", "QString");
    
    ::OpenAPI::setValue(&name, pJson["name"], "QString", "QString");
    
    ::OpenAPI::setValue(&parent_id, pJson["parentId"], "QString", "QString");
    
    ::OpenAPI::setValue(&part_name, pJson["partName"], "QString", "QString");
    
    ::OpenAPI::setValue(&predictable_id, pJson["predictableId"], "QString", "QString");
    
    ::OpenAPI::setValue(&thumbnail_uri, pJson["thumbnailUri"], "QString", "QString");
    
    ::OpenAPI::setValue(&unflattened_part_deterministic_id, pJson["unflattenedPartDeterministicId"], "QString", "QString");
    
    ::OpenAPI::setValue(&version_id, pJson["versionId"], "QString", "QString");
    
    ::OpenAPI::setValue(&version_name, pJson["versionName"], "QString", "QString");
    
    ::OpenAPI::setValue(&view_ref, pJson["viewRef"], "QString", "QString");
    
}

QString
OAIBTInsertableInfo::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIBTInsertableInfo::asJsonObject() {
    QJsonObject obj;
    if(body_type != nullptr && *body_type != QString("")){
        toJsonValue(QString("bodyType"), body_type, obj, QString("QString"));
    }
    if(m_class_type_isSet){
        obj.insert("classType", QJsonValue(class_type));
    }
    if(configuration_id != nullptr && *configuration_id != QString("")){
        toJsonValue(QString("configurationId"), configuration_id, obj, QString("QString"));
    }
    if(configuration_parameter_values->size() > 0){
        toJsonArray((QList<void*>*)configuration_parameter_values, obj, "configurationParameterValues", "QByteArray");
    }
    if(configuration_parameters->size() > 0){
        toJsonArray((QList<void*>*)configuration_parameters, obj, "configurationParameters", "QByteArray");
    }
    if(data_type != nullptr && *data_type != QString("")){
        toJsonValue(QString("dataType"), data_type, obj, QString("QString"));
    }
    if(deterministic_id != nullptr && *deterministic_id != QString("")){
        toJsonValue(QString("deterministicId"), deterministic_id, obj, QString("QString"));
    }
    if(document_id != nullptr && *document_id != QString("")){
        toJsonValue(QString("documentId"), document_id, obj, QString("QString"));
    }
    if(element_id != nullptr && *element_id != QString("")){
        toJsonValue(QString("elementId"), element_id, obj, QString("QString"));
    }
    if(element_name != nullptr && *element_name != QString("")){
        toJsonValue(QString("elementName"), element_name, obj, QString("QString"));
    }
    if(element_type != nullptr && *element_type != QString("")){
        toJsonValue(QString("elementType"), element_type, obj, QString("QString"));
    }
    if(feature_id != nullptr && *feature_id != QString("")){
        toJsonValue(QString("featureId"), feature_id, obj, QString("QString"));
    }
    if(feature_name != nullptr && *feature_name != QString("")){
        toJsonValue(QString("featureName"), feature_name, obj, QString("QString"));
    }
    if(feature_spec->size() > 0){
        toJsonArray((QList<void*>*)feature_spec, obj, "featureSpec", "QByteArray");
    }
    if(feature_type != nullptr && *feature_type != QString("")){
        toJsonValue(QString("featureType"), feature_type, obj, QString("QString"));
    }
    if(fs_table_spec->size() > 0){
        toJsonArray((QList<void*>*)fs_table_spec, obj, "fsTableSpec", "QByteArray");
    }
    if(m_has_faults_isSet){
        obj.insert("hasFaults", QJsonValue(has_faults));
    }
    if(href != nullptr && *href != QString("")){
        toJsonValue(QString("href"), href, obj, QString("QString"));
    }
    if(id != nullptr && *id != QString("")){
        toJsonValue(QString("id"), id, obj, QString("QString"));
    }
    if(insertable_query != nullptr && *insertable_query != QString("")){
        toJsonValue(QString("insertableQuery"), insertable_query, obj, QString("QString"));
    }
    if(m_is_flattened_body_isSet){
        obj.insert("isFlattenedBody", QJsonValue(is_flattened_body));
    }
    if(m_is_mesh_isSet){
        obj.insert("isMesh", QJsonValue(is_mesh));
    }
    if(microversion_id != nullptr && *microversion_id != QString("")){
        toJsonValue(QString("microversionId"), microversion_id, obj, QString("QString"));
    }
    if(name != nullptr && *name != QString("")){
        toJsonValue(QString("name"), name, obj, QString("QString"));
    }
    if(parent_id != nullptr && *parent_id != QString("")){
        toJsonValue(QString("parentId"), parent_id, obj, QString("QString"));
    }
    if(part_name != nullptr && *part_name != QString("")){
        toJsonValue(QString("partName"), part_name, obj, QString("QString"));
    }
    if(predictable_id != nullptr && *predictable_id != QString("")){
        toJsonValue(QString("predictableId"), predictable_id, obj, QString("QString"));
    }
    if(thumbnail_uri != nullptr && *thumbnail_uri != QString("")){
        toJsonValue(QString("thumbnailUri"), thumbnail_uri, obj, QString("QString"));
    }
    if(unflattened_part_deterministic_id != nullptr && *unflattened_part_deterministic_id != QString("")){
        toJsonValue(QString("unflattenedPartDeterministicId"), unflattened_part_deterministic_id, obj, QString("QString"));
    }
    if(version_id != nullptr && *version_id != QString("")){
        toJsonValue(QString("versionId"), version_id, obj, QString("QString"));
    }
    if(version_name != nullptr && *version_name != QString("")){
        toJsonValue(QString("versionName"), version_name, obj, QString("QString"));
    }
    if(view_ref != nullptr && *view_ref != QString("")){
        toJsonValue(QString("viewRef"), view_ref, obj, QString("QString"));
    }

    return obj;
}

QString*
OAIBTInsertableInfo::getBodyType() {
    return body_type;
}
void
OAIBTInsertableInfo::setBodyType(QString* body_type) {
    this->body_type = body_type;
    this->m_body_type_isSet = true;
}

qint32
OAIBTInsertableInfo::getClassType() {
    return class_type;
}
void
OAIBTInsertableInfo::setClassType(qint32 class_type) {
    this->class_type = class_type;
    this->m_class_type_isSet = true;
}

QString*
OAIBTInsertableInfo::getConfigurationId() {
    return configuration_id;
}
void
OAIBTInsertableInfo::setConfigurationId(QString* configuration_id) {
    this->configuration_id = configuration_id;
    this->m_configuration_id_isSet = true;
}

QList<QByteArray*>*
OAIBTInsertableInfo::getConfigurationParameterValues() {
    return configuration_parameter_values;
}
void
OAIBTInsertableInfo::setConfigurationParameterValues(QList<QByteArray*>* configuration_parameter_values) {
    this->configuration_parameter_values = configuration_parameter_values;
    this->m_configuration_parameter_values_isSet = true;
}

QList<QByteArray*>*
OAIBTInsertableInfo::getConfigurationParameters() {
    return configuration_parameters;
}
void
OAIBTInsertableInfo::setConfigurationParameters(QList<QByteArray*>* configuration_parameters) {
    this->configuration_parameters = configuration_parameters;
    this->m_configuration_parameters_isSet = true;
}

QString*
OAIBTInsertableInfo::getDataType() {
    return data_type;
}
void
OAIBTInsertableInfo::setDataType(QString* data_type) {
    this->data_type = data_type;
    this->m_data_type_isSet = true;
}

QString*
OAIBTInsertableInfo::getDeterministicId() {
    return deterministic_id;
}
void
OAIBTInsertableInfo::setDeterministicId(QString* deterministic_id) {
    this->deterministic_id = deterministic_id;
    this->m_deterministic_id_isSet = true;
}

QString*
OAIBTInsertableInfo::getDocumentId() {
    return document_id;
}
void
OAIBTInsertableInfo::setDocumentId(QString* document_id) {
    this->document_id = document_id;
    this->m_document_id_isSet = true;
}

QString*
OAIBTInsertableInfo::getElementId() {
    return element_id;
}
void
OAIBTInsertableInfo::setElementId(QString* element_id) {
    this->element_id = element_id;
    this->m_element_id_isSet = true;
}

QString*
OAIBTInsertableInfo::getElementName() {
    return element_name;
}
void
OAIBTInsertableInfo::setElementName(QString* element_name) {
    this->element_name = element_name;
    this->m_element_name_isSet = true;
}

QString*
OAIBTInsertableInfo::getElementType() {
    return element_type;
}
void
OAIBTInsertableInfo::setElementType(QString* element_type) {
    this->element_type = element_type;
    this->m_element_type_isSet = true;
}

QString*
OAIBTInsertableInfo::getFeatureId() {
    return feature_id;
}
void
OAIBTInsertableInfo::setFeatureId(QString* feature_id) {
    this->feature_id = feature_id;
    this->m_feature_id_isSet = true;
}

QString*
OAIBTInsertableInfo::getFeatureName() {
    return feature_name;
}
void
OAIBTInsertableInfo::setFeatureName(QString* feature_name) {
    this->feature_name = feature_name;
    this->m_feature_name_isSet = true;
}

QList<QByteArray*>*
OAIBTInsertableInfo::getFeatureSpec() {
    return feature_spec;
}
void
OAIBTInsertableInfo::setFeatureSpec(QList<QByteArray*>* feature_spec) {
    this->feature_spec = feature_spec;
    this->m_feature_spec_isSet = true;
}

QString*
OAIBTInsertableInfo::getFeatureType() {
    return feature_type;
}
void
OAIBTInsertableInfo::setFeatureType(QString* feature_type) {
    this->feature_type = feature_type;
    this->m_feature_type_isSet = true;
}

QList<QByteArray*>*
OAIBTInsertableInfo::getFsTableSpec() {
    return fs_table_spec;
}
void
OAIBTInsertableInfo::setFsTableSpec(QList<QByteArray*>* fs_table_spec) {
    this->fs_table_spec = fs_table_spec;
    this->m_fs_table_spec_isSet = true;
}

bool
OAIBTInsertableInfo::isHasFaults() {
    return has_faults;
}
void
OAIBTInsertableInfo::setHasFaults(bool has_faults) {
    this->has_faults = has_faults;
    this->m_has_faults_isSet = true;
}

QString*
OAIBTInsertableInfo::getHref() {
    return href;
}
void
OAIBTInsertableInfo::setHref(QString* href) {
    this->href = href;
    this->m_href_isSet = true;
}

QString*
OAIBTInsertableInfo::getId() {
    return id;
}
void
OAIBTInsertableInfo::setId(QString* id) {
    this->id = id;
    this->m_id_isSet = true;
}

QString*
OAIBTInsertableInfo::getInsertableQuery() {
    return insertable_query;
}
void
OAIBTInsertableInfo::setInsertableQuery(QString* insertable_query) {
    this->insertable_query = insertable_query;
    this->m_insertable_query_isSet = true;
}

bool
OAIBTInsertableInfo::isIsFlattenedBody() {
    return is_flattened_body;
}
void
OAIBTInsertableInfo::setIsFlattenedBody(bool is_flattened_body) {
    this->is_flattened_body = is_flattened_body;
    this->m_is_flattened_body_isSet = true;
}

bool
OAIBTInsertableInfo::isIsMesh() {
    return is_mesh;
}
void
OAIBTInsertableInfo::setIsMesh(bool is_mesh) {
    this->is_mesh = is_mesh;
    this->m_is_mesh_isSet = true;
}

QString*
OAIBTInsertableInfo::getMicroversionId() {
    return microversion_id;
}
void
OAIBTInsertableInfo::setMicroversionId(QString* microversion_id) {
    this->microversion_id = microversion_id;
    this->m_microversion_id_isSet = true;
}

QString*
OAIBTInsertableInfo::getName() {
    return name;
}
void
OAIBTInsertableInfo::setName(QString* name) {
    this->name = name;
    this->m_name_isSet = true;
}

QString*
OAIBTInsertableInfo::getParentId() {
    return parent_id;
}
void
OAIBTInsertableInfo::setParentId(QString* parent_id) {
    this->parent_id = parent_id;
    this->m_parent_id_isSet = true;
}

QString*
OAIBTInsertableInfo::getPartName() {
    return part_name;
}
void
OAIBTInsertableInfo::setPartName(QString* part_name) {
    this->part_name = part_name;
    this->m_part_name_isSet = true;
}

QString*
OAIBTInsertableInfo::getPredictableId() {
    return predictable_id;
}
void
OAIBTInsertableInfo::setPredictableId(QString* predictable_id) {
    this->predictable_id = predictable_id;
    this->m_predictable_id_isSet = true;
}

QString*
OAIBTInsertableInfo::getThumbnailUri() {
    return thumbnail_uri;
}
void
OAIBTInsertableInfo::setThumbnailUri(QString* thumbnail_uri) {
    this->thumbnail_uri = thumbnail_uri;
    this->m_thumbnail_uri_isSet = true;
}

QString*
OAIBTInsertableInfo::getUnflattenedPartDeterministicId() {
    return unflattened_part_deterministic_id;
}
void
OAIBTInsertableInfo::setUnflattenedPartDeterministicId(QString* unflattened_part_deterministic_id) {
    this->unflattened_part_deterministic_id = unflattened_part_deterministic_id;
    this->m_unflattened_part_deterministic_id_isSet = true;
}

QString*
OAIBTInsertableInfo::getVersionId() {
    return version_id;
}
void
OAIBTInsertableInfo::setVersionId(QString* version_id) {
    this->version_id = version_id;
    this->m_version_id_isSet = true;
}

QString*
OAIBTInsertableInfo::getVersionName() {
    return version_name;
}
void
OAIBTInsertableInfo::setVersionName(QString* version_name) {
    this->version_name = version_name;
    this->m_version_name_isSet = true;
}

QString*
OAIBTInsertableInfo::getViewRef() {
    return view_ref;
}
void
OAIBTInsertableInfo::setViewRef(QString* view_ref) {
    this->view_ref = view_ref;
    this->m_view_ref_isSet = true;
}


bool
OAIBTInsertableInfo::isSet(){
    bool isObjectUpdated = false;
    do{
        if(body_type != nullptr && *body_type != QString("")){ isObjectUpdated = true; break;}
        if(m_class_type_isSet){ isObjectUpdated = true; break;}
        if(configuration_id != nullptr && *configuration_id != QString("")){ isObjectUpdated = true; break;}
        if(configuration_parameter_values->size() > 0){ isObjectUpdated = true; break;}
        if(configuration_parameters->size() > 0){ isObjectUpdated = true; break;}
        if(data_type != nullptr && *data_type != QString("")){ isObjectUpdated = true; break;}
        if(deterministic_id != nullptr && *deterministic_id != QString("")){ isObjectUpdated = true; break;}
        if(document_id != nullptr && *document_id != QString("")){ isObjectUpdated = true; break;}
        if(element_id != nullptr && *element_id != QString("")){ isObjectUpdated = true; break;}
        if(element_name != nullptr && *element_name != QString("")){ isObjectUpdated = true; break;}
        if(element_type != nullptr && *element_type != QString("")){ isObjectUpdated = true; break;}
        if(feature_id != nullptr && *feature_id != QString("")){ isObjectUpdated = true; break;}
        if(feature_name != nullptr && *feature_name != QString("")){ isObjectUpdated = true; break;}
        if(feature_spec->size() > 0){ isObjectUpdated = true; break;}
        if(feature_type != nullptr && *feature_type != QString("")){ isObjectUpdated = true; break;}
        if(fs_table_spec->size() > 0){ isObjectUpdated = true; break;}
        if(m_has_faults_isSet){ isObjectUpdated = true; break;}
        if(href != nullptr && *href != QString("")){ isObjectUpdated = true; break;}
        if(id != nullptr && *id != QString("")){ isObjectUpdated = true; break;}
        if(insertable_query != nullptr && *insertable_query != QString("")){ isObjectUpdated = true; break;}
        if(m_is_flattened_body_isSet){ isObjectUpdated = true; break;}
        if(m_is_mesh_isSet){ isObjectUpdated = true; break;}
        if(microversion_id != nullptr && *microversion_id != QString("")){ isObjectUpdated = true; break;}
        if(name != nullptr && *name != QString("")){ isObjectUpdated = true; break;}
        if(parent_id != nullptr && *parent_id != QString("")){ isObjectUpdated = true; break;}
        if(part_name != nullptr && *part_name != QString("")){ isObjectUpdated = true; break;}
        if(predictable_id != nullptr && *predictable_id != QString("")){ isObjectUpdated = true; break;}
        if(thumbnail_uri != nullptr && *thumbnail_uri != QString("")){ isObjectUpdated = true; break;}
        if(unflattened_part_deterministic_id != nullptr && *unflattened_part_deterministic_id != QString("")){ isObjectUpdated = true; break;}
        if(version_id != nullptr && *version_id != QString("")){ isObjectUpdated = true; break;}
        if(version_name != nullptr && *version_name != QString("")){ isObjectUpdated = true; break;}
        if(view_ref != nullptr && *view_ref != QString("")){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

