/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * OpenAPI spec version: 1.111
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIBTForeignDataResponse-1070.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIBTForeignDataResponse-1070::OAIBTForeignDataResponse-1070(QString json) {
    init();
    this->fromJson(json);
}

OAIBTForeignDataResponse-1070::OAIBTForeignDataResponse-1070() {
    init();
}

OAIBTForeignDataResponse-1070::~OAIBTForeignDataResponse-1070() {
    this->cleanup();
}

void
OAIBTForeignDataResponse-1070::init() {
    bt_type = new QString("");
    m_bt_type_isSet = false;
    bucket_name = new QString("");
    m_bucket_name_isSet = false;
    bucket_path = new QString("");
    m_bucket_path_isSet = false;
    cache_chunk_list = new QList<QString*>();
    m_cache_chunk_list_isSet = false;
    data_id = new QString("");
    m_data_id_isSet = false;
    format = new QString("");
    m_format_isSet = false;
    name = new QString("");
    m_name_isSet = false;
    region = new QString("");
    m_region_isSet = false;
    size = 0;
    m_size_isSet = false;
    use_local_storage = false;
    m_use_local_storage_isSet = false;
}

void
OAIBTForeignDataResponse-1070::cleanup() {
    if(bt_type != nullptr) { 
        delete bt_type;
    }
    if(bucket_name != nullptr) { 
        delete bucket_name;
    }
    if(bucket_path != nullptr) { 
        delete bucket_path;
    }
    if(cache_chunk_list != nullptr) { 
        auto arr = cache_chunk_list;
        for(auto o: *arr) { 
            delete o;
        }
        delete cache_chunk_list;
    }
    if(data_id != nullptr) { 
        delete data_id;
    }
    if(format != nullptr) { 
        delete format;
    }
    if(name != nullptr) { 
        delete name;
    }
    if(region != nullptr) { 
        delete region;
    }


}

OAIBTForeignDataResponse-1070*
OAIBTForeignDataResponse-1070::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIBTForeignDataResponse-1070::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&bt_type, pJson["btType"], "QString", "QString");
    
    ::OpenAPI::setValue(&bucket_name, pJson["bucketName"], "QString", "QString");
    
    ::OpenAPI::setValue(&bucket_path, pJson["bucketPath"], "QString", "QString");
    
    
    ::OpenAPI::setValue(&cache_chunk_list, pJson["cacheChunkList"], "QList", "QString");
    ::OpenAPI::setValue(&data_id, pJson["dataId"], "QString", "QString");
    
    ::OpenAPI::setValue(&format, pJson["format"], "QString", "QString");
    
    ::OpenAPI::setValue(&name, pJson["name"], "QString", "QString");
    
    ::OpenAPI::setValue(&region, pJson["region"], "QString", "QString");
    
    ::OpenAPI::setValue(&size, pJson["size"], "qint32", "");
    
    ::OpenAPI::setValue(&use_local_storage, pJson["useLocalStorage"], "bool", "");
    
}

QString
OAIBTForeignDataResponse-1070::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIBTForeignDataResponse-1070::asJsonObject() {
    QJsonObject obj;
    if(bt_type != nullptr && *bt_type != QString("")){
        toJsonValue(QString("btType"), bt_type, obj, QString("QString"));
    }
    if(bucket_name != nullptr && *bucket_name != QString("")){
        toJsonValue(QString("bucketName"), bucket_name, obj, QString("QString"));
    }
    if(bucket_path != nullptr && *bucket_path != QString("")){
        toJsonValue(QString("bucketPath"), bucket_path, obj, QString("QString"));
    }
    if(cache_chunk_list->size() > 0){
        toJsonArray((QList<void*>*)cache_chunk_list, obj, "cacheChunkList", "QString");
    }
    if(data_id != nullptr && *data_id != QString("")){
        toJsonValue(QString("dataId"), data_id, obj, QString("QString"));
    }
    if(format != nullptr && *format != QString("")){
        toJsonValue(QString("format"), format, obj, QString("QString"));
    }
    if(name != nullptr && *name != QString("")){
        toJsonValue(QString("name"), name, obj, QString("QString"));
    }
    if(region != nullptr && *region != QString("")){
        toJsonValue(QString("region"), region, obj, QString("QString"));
    }
    if(m_size_isSet){
        obj.insert("size", QJsonValue(size));
    }
    if(m_use_local_storage_isSet){
        obj.insert("useLocalStorage", QJsonValue(use_local_storage));
    }

    return obj;
}

QString*
OAIBTForeignDataResponse-1070::getBtType() {
    return bt_type;
}
void
OAIBTForeignDataResponse-1070::setBtType(QString* bt_type) {
    this->bt_type = bt_type;
    this->m_bt_type_isSet = true;
}

QString*
OAIBTForeignDataResponse-1070::getBucketName() {
    return bucket_name;
}
void
OAIBTForeignDataResponse-1070::setBucketName(QString* bucket_name) {
    this->bucket_name = bucket_name;
    this->m_bucket_name_isSet = true;
}

QString*
OAIBTForeignDataResponse-1070::getBucketPath() {
    return bucket_path;
}
void
OAIBTForeignDataResponse-1070::setBucketPath(QString* bucket_path) {
    this->bucket_path = bucket_path;
    this->m_bucket_path_isSet = true;
}

QList<QString*>*
OAIBTForeignDataResponse-1070::getCacheChunkList() {
    return cache_chunk_list;
}
void
OAIBTForeignDataResponse-1070::setCacheChunkList(QList<QString*>* cache_chunk_list) {
    this->cache_chunk_list = cache_chunk_list;
    this->m_cache_chunk_list_isSet = true;
}

QString*
OAIBTForeignDataResponse-1070::getDataId() {
    return data_id;
}
void
OAIBTForeignDataResponse-1070::setDataId(QString* data_id) {
    this->data_id = data_id;
    this->m_data_id_isSet = true;
}

QString*
OAIBTForeignDataResponse-1070::getFormat() {
    return format;
}
void
OAIBTForeignDataResponse-1070::setFormat(QString* format) {
    this->format = format;
    this->m_format_isSet = true;
}

QString*
OAIBTForeignDataResponse-1070::getName() {
    return name;
}
void
OAIBTForeignDataResponse-1070::setName(QString* name) {
    this->name = name;
    this->m_name_isSet = true;
}

QString*
OAIBTForeignDataResponse-1070::getRegion() {
    return region;
}
void
OAIBTForeignDataResponse-1070::setRegion(QString* region) {
    this->region = region;
    this->m_region_isSet = true;
}

qint32
OAIBTForeignDataResponse-1070::getSize() {
    return size;
}
void
OAIBTForeignDataResponse-1070::setSize(qint32 size) {
    this->size = size;
    this->m_size_isSet = true;
}

bool
OAIBTForeignDataResponse-1070::isUseLocalStorage() {
    return use_local_storage;
}
void
OAIBTForeignDataResponse-1070::setUseLocalStorage(bool use_local_storage) {
    this->use_local_storage = use_local_storage;
    this->m_use_local_storage_isSet = true;
}


bool
OAIBTForeignDataResponse-1070::isSet(){
    bool isObjectUpdated = false;
    do{
        if(bt_type != nullptr && *bt_type != QString("")){ isObjectUpdated = true; break;}
        if(bucket_name != nullptr && *bucket_name != QString("")){ isObjectUpdated = true; break;}
        if(bucket_path != nullptr && *bucket_path != QString("")){ isObjectUpdated = true; break;}
        if(cache_chunk_list->size() > 0){ isObjectUpdated = true; break;}
        if(data_id != nullptr && *data_id != QString("")){ isObjectUpdated = true; break;}
        if(format != nullptr && *format != QString("")){ isObjectUpdated = true; break;}
        if(name != nullptr && *name != QString("")){ isObjectUpdated = true; break;}
        if(region != nullptr && *region != QString("")){ isObjectUpdated = true; break;}
        if(m_size_isSet){ isObjectUpdated = true; break;}
        if(m_use_local_storage_isSet){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

