/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * OpenAPI spec version: 1.111
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIBTDocumentSearchParams.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIBTDocumentSearchParams::OAIBTDocumentSearchParams(QString json) {
    init();
    this->fromJson(json);
}

OAIBTDocumentSearchParams::OAIBTDocumentSearchParams() {
    init();
}

OAIBTDocumentSearchParams::~OAIBTDocumentSearchParams() {
    this->cleanup();
}

void
OAIBTDocumentSearchParams::init() {
    document_filter = 0;
    m_document_filter_isSet = false;
    found_in = new QString("");
    m_found_in_isSet = false;
    limit = 0;
    m_limit_isSet = false;
    offset = 0;
    m_offset_isSet = false;
    owner_id = new QString("");
    m_owner_id_isSet = false;
    parent_id = new QString("");
    m_parent_id_isSet = false;
    raw_query = new QString("");
    m_raw_query_isSet = false;
    sort_column = new QString("");
    m_sort_column_isSet = false;
    sort_order = new QString("");
    m_sort_order_isSet = false;
    type = new QString("");
    m_type_isSet = false;
    when = new QString("");
    m_when_isSet = false;
}

void
OAIBTDocumentSearchParams::cleanup() {

    if(found_in != nullptr) { 
        delete found_in;
    }


    if(owner_id != nullptr) { 
        delete owner_id;
    }
    if(parent_id != nullptr) { 
        delete parent_id;
    }
    if(raw_query != nullptr) { 
        delete raw_query;
    }
    if(sort_column != nullptr) { 
        delete sort_column;
    }
    if(sort_order != nullptr) { 
        delete sort_order;
    }
    if(type != nullptr) { 
        delete type;
    }
    if(when != nullptr) { 
        delete when;
    }
}

OAIBTDocumentSearchParams*
OAIBTDocumentSearchParams::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIBTDocumentSearchParams::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&document_filter, pJson["documentFilter"], "qint32", "");
    
    ::OpenAPI::setValue(&found_in, pJson["foundIn"], "QString", "QString");
    
    ::OpenAPI::setValue(&limit, pJson["limit"], "qint32", "");
    
    ::OpenAPI::setValue(&offset, pJson["offset"], "qint32", "");
    
    ::OpenAPI::setValue(&owner_id, pJson["ownerId"], "QString", "QString");
    
    ::OpenAPI::setValue(&parent_id, pJson["parentId"], "QString", "QString");
    
    ::OpenAPI::setValue(&raw_query, pJson["rawQuery"], "QString", "QString");
    
    ::OpenAPI::setValue(&sort_column, pJson["sortColumn"], "QString", "QString");
    
    ::OpenAPI::setValue(&sort_order, pJson["sortOrder"], "QString", "QString");
    
    ::OpenAPI::setValue(&type, pJson["type"], "QString", "QString");
    
    ::OpenAPI::setValue(&when, pJson["when"], "QString", "QString");
    
}

QString
OAIBTDocumentSearchParams::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIBTDocumentSearchParams::asJsonObject() {
    QJsonObject obj;
    if(m_document_filter_isSet){
        obj.insert("documentFilter", QJsonValue(document_filter));
    }
    if(found_in != nullptr && *found_in != QString("")){
        toJsonValue(QString("foundIn"), found_in, obj, QString("QString"));
    }
    if(m_limit_isSet){
        obj.insert("limit", QJsonValue(limit));
    }
    if(m_offset_isSet){
        obj.insert("offset", QJsonValue(offset));
    }
    if(owner_id != nullptr && *owner_id != QString("")){
        toJsonValue(QString("ownerId"), owner_id, obj, QString("QString"));
    }
    if(parent_id != nullptr && *parent_id != QString("")){
        toJsonValue(QString("parentId"), parent_id, obj, QString("QString"));
    }
    if(raw_query != nullptr && *raw_query != QString("")){
        toJsonValue(QString("rawQuery"), raw_query, obj, QString("QString"));
    }
    if(sort_column != nullptr && *sort_column != QString("")){
        toJsonValue(QString("sortColumn"), sort_column, obj, QString("QString"));
    }
    if(sort_order != nullptr && *sort_order != QString("")){
        toJsonValue(QString("sortOrder"), sort_order, obj, QString("QString"));
    }
    if(type != nullptr && *type != QString("")){
        toJsonValue(QString("type"), type, obj, QString("QString"));
    }
    if(when != nullptr && *when != QString("")){
        toJsonValue(QString("when"), when, obj, QString("QString"));
    }

    return obj;
}

qint32
OAIBTDocumentSearchParams::getDocumentFilter() {
    return document_filter;
}
void
OAIBTDocumentSearchParams::setDocumentFilter(qint32 document_filter) {
    this->document_filter = document_filter;
    this->m_document_filter_isSet = true;
}

QString*
OAIBTDocumentSearchParams::getFoundIn() {
    return found_in;
}
void
OAIBTDocumentSearchParams::setFoundIn(QString* found_in) {
    this->found_in = found_in;
    this->m_found_in_isSet = true;
}

qint32
OAIBTDocumentSearchParams::getLimit() {
    return limit;
}
void
OAIBTDocumentSearchParams::setLimit(qint32 limit) {
    this->limit = limit;
    this->m_limit_isSet = true;
}

qint32
OAIBTDocumentSearchParams::getOffset() {
    return offset;
}
void
OAIBTDocumentSearchParams::setOffset(qint32 offset) {
    this->offset = offset;
    this->m_offset_isSet = true;
}

QString*
OAIBTDocumentSearchParams::getOwnerId() {
    return owner_id;
}
void
OAIBTDocumentSearchParams::setOwnerId(QString* owner_id) {
    this->owner_id = owner_id;
    this->m_owner_id_isSet = true;
}

QString*
OAIBTDocumentSearchParams::getParentId() {
    return parent_id;
}
void
OAIBTDocumentSearchParams::setParentId(QString* parent_id) {
    this->parent_id = parent_id;
    this->m_parent_id_isSet = true;
}

QString*
OAIBTDocumentSearchParams::getRawQuery() {
    return raw_query;
}
void
OAIBTDocumentSearchParams::setRawQuery(QString* raw_query) {
    this->raw_query = raw_query;
    this->m_raw_query_isSet = true;
}

QString*
OAIBTDocumentSearchParams::getSortColumn() {
    return sort_column;
}
void
OAIBTDocumentSearchParams::setSortColumn(QString* sort_column) {
    this->sort_column = sort_column;
    this->m_sort_column_isSet = true;
}

QString*
OAIBTDocumentSearchParams::getSortOrder() {
    return sort_order;
}
void
OAIBTDocumentSearchParams::setSortOrder(QString* sort_order) {
    this->sort_order = sort_order;
    this->m_sort_order_isSet = true;
}

QString*
OAIBTDocumentSearchParams::getType() {
    return type;
}
void
OAIBTDocumentSearchParams::setType(QString* type) {
    this->type = type;
    this->m_type_isSet = true;
}

QString*
OAIBTDocumentSearchParams::getWhen() {
    return when;
}
void
OAIBTDocumentSearchParams::setWhen(QString* when) {
    this->when = when;
    this->m_when_isSet = true;
}


bool
OAIBTDocumentSearchParams::isSet(){
    bool isObjectUpdated = false;
    do{
        if(m_document_filter_isSet){ isObjectUpdated = true; break;}
        if(found_in != nullptr && *found_in != QString("")){ isObjectUpdated = true; break;}
        if(m_limit_isSet){ isObjectUpdated = true; break;}
        if(m_offset_isSet){ isObjectUpdated = true; break;}
        if(owner_id != nullptr && *owner_id != QString("")){ isObjectUpdated = true; break;}
        if(parent_id != nullptr && *parent_id != QString("")){ isObjectUpdated = true; break;}
        if(raw_query != nullptr && *raw_query != QString("")){ isObjectUpdated = true; break;}
        if(sort_column != nullptr && *sort_column != QString("")){ isObjectUpdated = true; break;}
        if(sort_order != nullptr && *sort_order != QString("")){ isObjectUpdated = true; break;}
        if(type != nullptr && *type != QString("")){ isObjectUpdated = true; break;}
        if(when != nullptr && *when != QString("")){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

