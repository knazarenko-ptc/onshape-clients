/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * OpenAPI spec version: 1.111
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIBTOccurrenceFilter-166.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIBTOccurrenceFilter-166::OAIBTOccurrenceFilter-166(QString json) {
    init();
    this->fromJson(json);
}

OAIBTOccurrenceFilter-166::OAIBTOccurrenceFilter-166() {
    init();
}

OAIBTOccurrenceFilter-166::~OAIBTOccurrenceFilter-166() {
    this->cleanup();
}

void
OAIBTOccurrenceFilter-166::init() {
    bt_type = new QString("");
    m_bt_type_isSet = false;
    top_level_only = false;
    m_top_level_only_isSet = false;
    include_pattern_occurrence = false;
    m_include_pattern_occurrence_isSet = false;
    solid_or_composite_body_only = false;
    m_solid_or_composite_body_only_isSet = false;
    exclude_suppressed = false;
    m_exclude_suppressed_isSet = false;
    exclude_studio_inserts = false;
    m_exclude_studio_inserts_isSet = false;
    exclude_sub_assemblies = false;
    m_exclude_sub_assemblies_isSet = false;
    exclude_flattened_parts = false;
    m_exclude_flattened_parts_isSet = false;
    exclude_pattern_instances = false;
    m_exclude_pattern_instances_isSet = false;
    exclude_standard_content = false;
    m_exclude_standard_content_isSet = false;
    include_assembly_root = false;
    m_include_assembly_root_isSet = false;
    exclude_sketch = false;
    m_exclude_sketch_isSet = false;
}

void
OAIBTOccurrenceFilter-166::cleanup() {
    if(bt_type != nullptr) { 
        delete bt_type;
    }











}

OAIBTOccurrenceFilter-166*
OAIBTOccurrenceFilter-166::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIBTOccurrenceFilter-166::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&bt_type, pJson["btType"], "QString", "QString");
    
    ::OpenAPI::setValue(&top_level_only, pJson["topLevelOnly"], "bool", "");
    
    ::OpenAPI::setValue(&include_pattern_occurrence, pJson["includePatternOccurrence"], "bool", "");
    
    ::OpenAPI::setValue(&solid_or_composite_body_only, pJson["solidOrCompositeBodyOnly"], "bool", "");
    
    ::OpenAPI::setValue(&exclude_suppressed, pJson["excludeSuppressed"], "bool", "");
    
    ::OpenAPI::setValue(&exclude_studio_inserts, pJson["excludeStudioInserts"], "bool", "");
    
    ::OpenAPI::setValue(&exclude_sub_assemblies, pJson["excludeSubAssemblies"], "bool", "");
    
    ::OpenAPI::setValue(&exclude_flattened_parts, pJson["excludeFlattenedParts"], "bool", "");
    
    ::OpenAPI::setValue(&exclude_pattern_instances, pJson["excludePatternInstances"], "bool", "");
    
    ::OpenAPI::setValue(&exclude_standard_content, pJson["excludeStandardContent"], "bool", "");
    
    ::OpenAPI::setValue(&include_assembly_root, pJson["includeAssemblyRoot"], "bool", "");
    
    ::OpenAPI::setValue(&exclude_sketch, pJson["excludeSketch"], "bool", "");
    
}

QString
OAIBTOccurrenceFilter-166::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIBTOccurrenceFilter-166::asJsonObject() {
    QJsonObject obj;
    if(bt_type != nullptr && *bt_type != QString("")){
        toJsonValue(QString("btType"), bt_type, obj, QString("QString"));
    }
    if(m_top_level_only_isSet){
        obj.insert("topLevelOnly", QJsonValue(top_level_only));
    }
    if(m_include_pattern_occurrence_isSet){
        obj.insert("includePatternOccurrence", QJsonValue(include_pattern_occurrence));
    }
    if(m_solid_or_composite_body_only_isSet){
        obj.insert("solidOrCompositeBodyOnly", QJsonValue(solid_or_composite_body_only));
    }
    if(m_exclude_suppressed_isSet){
        obj.insert("excludeSuppressed", QJsonValue(exclude_suppressed));
    }
    if(m_exclude_studio_inserts_isSet){
        obj.insert("excludeStudioInserts", QJsonValue(exclude_studio_inserts));
    }
    if(m_exclude_sub_assemblies_isSet){
        obj.insert("excludeSubAssemblies", QJsonValue(exclude_sub_assemblies));
    }
    if(m_exclude_flattened_parts_isSet){
        obj.insert("excludeFlattenedParts", QJsonValue(exclude_flattened_parts));
    }
    if(m_exclude_pattern_instances_isSet){
        obj.insert("excludePatternInstances", QJsonValue(exclude_pattern_instances));
    }
    if(m_exclude_standard_content_isSet){
        obj.insert("excludeStandardContent", QJsonValue(exclude_standard_content));
    }
    if(m_include_assembly_root_isSet){
        obj.insert("includeAssemblyRoot", QJsonValue(include_assembly_root));
    }
    if(m_exclude_sketch_isSet){
        obj.insert("excludeSketch", QJsonValue(exclude_sketch));
    }

    return obj;
}

QString*
OAIBTOccurrenceFilter-166::getBtType() {
    return bt_type;
}
void
OAIBTOccurrenceFilter-166::setBtType(QString* bt_type) {
    this->bt_type = bt_type;
    this->m_bt_type_isSet = true;
}

bool
OAIBTOccurrenceFilter-166::isTopLevelOnly() {
    return top_level_only;
}
void
OAIBTOccurrenceFilter-166::setTopLevelOnly(bool top_level_only) {
    this->top_level_only = top_level_only;
    this->m_top_level_only_isSet = true;
}

bool
OAIBTOccurrenceFilter-166::isIncludePatternOccurrence() {
    return include_pattern_occurrence;
}
void
OAIBTOccurrenceFilter-166::setIncludePatternOccurrence(bool include_pattern_occurrence) {
    this->include_pattern_occurrence = include_pattern_occurrence;
    this->m_include_pattern_occurrence_isSet = true;
}

bool
OAIBTOccurrenceFilter-166::isSolidOrCompositeBodyOnly() {
    return solid_or_composite_body_only;
}
void
OAIBTOccurrenceFilter-166::setSolidOrCompositeBodyOnly(bool solid_or_composite_body_only) {
    this->solid_or_composite_body_only = solid_or_composite_body_only;
    this->m_solid_or_composite_body_only_isSet = true;
}

bool
OAIBTOccurrenceFilter-166::isExcludeSuppressed() {
    return exclude_suppressed;
}
void
OAIBTOccurrenceFilter-166::setExcludeSuppressed(bool exclude_suppressed) {
    this->exclude_suppressed = exclude_suppressed;
    this->m_exclude_suppressed_isSet = true;
}

bool
OAIBTOccurrenceFilter-166::isExcludeStudioInserts() {
    return exclude_studio_inserts;
}
void
OAIBTOccurrenceFilter-166::setExcludeStudioInserts(bool exclude_studio_inserts) {
    this->exclude_studio_inserts = exclude_studio_inserts;
    this->m_exclude_studio_inserts_isSet = true;
}

bool
OAIBTOccurrenceFilter-166::isExcludeSubAssemblies() {
    return exclude_sub_assemblies;
}
void
OAIBTOccurrenceFilter-166::setExcludeSubAssemblies(bool exclude_sub_assemblies) {
    this->exclude_sub_assemblies = exclude_sub_assemblies;
    this->m_exclude_sub_assemblies_isSet = true;
}

bool
OAIBTOccurrenceFilter-166::isExcludeFlattenedParts() {
    return exclude_flattened_parts;
}
void
OAIBTOccurrenceFilter-166::setExcludeFlattenedParts(bool exclude_flattened_parts) {
    this->exclude_flattened_parts = exclude_flattened_parts;
    this->m_exclude_flattened_parts_isSet = true;
}

bool
OAIBTOccurrenceFilter-166::isExcludePatternInstances() {
    return exclude_pattern_instances;
}
void
OAIBTOccurrenceFilter-166::setExcludePatternInstances(bool exclude_pattern_instances) {
    this->exclude_pattern_instances = exclude_pattern_instances;
    this->m_exclude_pattern_instances_isSet = true;
}

bool
OAIBTOccurrenceFilter-166::isExcludeStandardContent() {
    return exclude_standard_content;
}
void
OAIBTOccurrenceFilter-166::setExcludeStandardContent(bool exclude_standard_content) {
    this->exclude_standard_content = exclude_standard_content;
    this->m_exclude_standard_content_isSet = true;
}

bool
OAIBTOccurrenceFilter-166::isIncludeAssemblyRoot() {
    return include_assembly_root;
}
void
OAIBTOccurrenceFilter-166::setIncludeAssemblyRoot(bool include_assembly_root) {
    this->include_assembly_root = include_assembly_root;
    this->m_include_assembly_root_isSet = true;
}

bool
OAIBTOccurrenceFilter-166::isExcludeSketch() {
    return exclude_sketch;
}
void
OAIBTOccurrenceFilter-166::setExcludeSketch(bool exclude_sketch) {
    this->exclude_sketch = exclude_sketch;
    this->m_exclude_sketch_isSet = true;
}


bool
OAIBTOccurrenceFilter-166::isSet(){
    bool isObjectUpdated = false;
    do{
        if(bt_type != nullptr && *bt_type != QString("")){ isObjectUpdated = true; break;}
        if(m_top_level_only_isSet){ isObjectUpdated = true; break;}
        if(m_include_pattern_occurrence_isSet){ isObjectUpdated = true; break;}
        if(m_solid_or_composite_body_only_isSet){ isObjectUpdated = true; break;}
        if(m_exclude_suppressed_isSet){ isObjectUpdated = true; break;}
        if(m_exclude_studio_inserts_isSet){ isObjectUpdated = true; break;}
        if(m_exclude_sub_assemblies_isSet){ isObjectUpdated = true; break;}
        if(m_exclude_flattened_parts_isSet){ isObjectUpdated = true; break;}
        if(m_exclude_pattern_instances_isSet){ isObjectUpdated = true; break;}
        if(m_exclude_standard_content_isSet){ isObjectUpdated = true; break;}
        if(m_include_assembly_root_isSet){ isObjectUpdated = true; break;}
        if(m_exclude_sketch_isSet){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

