/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * OpenAPI spec version: 1.111
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIBTMSketchConstraint-2.h
 *
 * 
 */

#ifndef OAIBTMSketchConstraint-2_H_
#define OAIBTMSketchConstraint-2_H_

#include <QJsonObject>


#include "OAIBTMParameter-1.h"
#include <QList>
#include <QString>

#include "OAIObject.h"

namespace OpenAPI {

class OAIBTMSketchConstraint-2: public OAIObject {
public:
    OAIBTMSketchConstraint-2();
    OAIBTMSketchConstraint-2(QString json);
    ~OAIBTMSketchConstraint-2();
    void init();
    void cleanup();

    QString asJson () override;
    QJsonObject asJsonObject() override;
    void fromJsonObject(QJsonObject json) override;
    OAIBTMSketchConstraint-2* fromJson(QString jsonString) override;

    QString* getBtType();
    void setBtType(QString* bt_type);

    QString* getConstraintType();
    void setConstraintType(QString* constraint_type);

    bool isDrivenDimension();
    void setDrivenDimension(bool driven_dimension);

    QString* getEntityId();
    void setEntityId(QString* entity_id);

    QString* getEntityIdAndReplaceInDependentFields();
    void setEntityIdAndReplaceInDependentFields(QString* entity_id_and_replace_in_dependent_fields);

    bool isHasOffsetData1();
    void setHasOffsetData1(bool has_offset_data1);

    bool isHasOffsetData2();
    void setHasOffsetData2(bool has_offset_data2);

    bool isHasPierceParameter();
    void setHasPierceParameter(bool has_pierce_parameter);

    QList<double>* getHelpParameters();
    void setHelpParameters(QList<double>* help_parameters);

    QString* getImportMicroversion();
    void setImportMicroversion(QString* import_microversion);

    QString* getNamespace();
    void setNamespace(QString* _namespace);

    QString* getNodeId();
    void setNodeId(QString* node_id);

    double getOffsetDistance1();
    void setOffsetDistance1(double offset_distance1);

    double getOffsetDistance2();
    void setOffsetDistance2(double offset_distance2);

    bool isOffsetOrientation1();
    void setOffsetOrientation1(bool offset_orientation1);

    bool isOffsetOrientation2();
    void setOffsetOrientation2(bool offset_orientation2);

    QList<OAIBTMParameter-1*>* getParameters();
    void setParameters(QList<OAIBTMParameter-1*>* parameters);

    double getPierceParameter();
    void setPierceParameter(double pierce_parameter);


    virtual bool isSet() override;

private:
    QString* bt_type;
    bool m_bt_type_isSet;

    QString* constraint_type;
    bool m_constraint_type_isSet;

    bool driven_dimension;
    bool m_driven_dimension_isSet;

    QString* entity_id;
    bool m_entity_id_isSet;

    QString* entity_id_and_replace_in_dependent_fields;
    bool m_entity_id_and_replace_in_dependent_fields_isSet;

    bool has_offset_data1;
    bool m_has_offset_data1_isSet;

    bool has_offset_data2;
    bool m_has_offset_data2_isSet;

    bool has_pierce_parameter;
    bool m_has_pierce_parameter_isSet;

    QList<double>* help_parameters;
    bool m_help_parameters_isSet;

    QString* import_microversion;
    bool m_import_microversion_isSet;

    QString* _namespace;
    bool m__namespace_isSet;

    QString* node_id;
    bool m_node_id_isSet;

    double offset_distance1;
    bool m_offset_distance1_isSet;

    double offset_distance2;
    bool m_offset_distance2_isSet;

    bool offset_orientation1;
    bool m_offset_orientation1_isSet;

    bool offset_orientation2;
    bool m_offset_orientation2_isSet;

    QList<OAIBTMParameter-1*>* parameters;
    bool m_parameters_isSet;

    double pierce_parameter;
    bool m_pierce_parameter_isSet;

};

}

#endif /* OAIBTMSketchConstraint-2_H_ */
