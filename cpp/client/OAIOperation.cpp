/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * OpenAPI spec version: 1.111
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIOperation.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIOperation::OAIOperation(QString json) {
    init();
    this->fromJson(json);
}

OAIOperation::OAIOperation() {
    init();
}

OAIOperation::~OAIOperation() {
    this->cleanup();
}

void
OAIOperation::init() {
    callbacks = new QMap<QString, QMap*>();
    m_callbacks_isSet = false;
    deprecated = false;
    m_deprecated_isSet = false;
    description = new QString("");
    m_description_isSet = false;
    extensions = new QMap<QString, OAIObject*>();
    m_extensions_isSet = false;
    external_docs = new OAIExternalDocumentation();
    m_external_docs_isSet = false;
    operation_id = new QString("");
    m_operation_id_isSet = false;
    parameters = new QList<OAIParameter*>();
    m_parameters_isSet = false;
    request_body = new OAIRequestBody();
    m_request_body_isSet = false;
    responses = new OAIOperation_responses();
    m_responses_isSet = false;
    security = new QList<QMap*>();
    m_security_isSet = false;
    servers = new QList<OAIServer*>();
    m_servers_isSet = false;
    summary = new QString("");
    m_summary_isSet = false;
    tags = new QList<QString*>();
    m_tags_isSet = false;
}

void
OAIOperation::cleanup() {
    if(callbacks != nullptr) { 
        auto arr = callbacks;
        for(auto o: *arr) { 
            delete o;
        }
        delete callbacks;
    }

    if(description != nullptr) { 
        delete description;
    }
    if(extensions != nullptr) { 
        auto arr = extensions;
        for(auto o: *arr) { 
            delete o;
        }
        delete extensions;
    }
    if(external_docs != nullptr) { 
        delete external_docs;
    }
    if(operation_id != nullptr) { 
        delete operation_id;
    }
    if(parameters != nullptr) { 
        auto arr = parameters;
        for(auto o: *arr) { 
            delete o;
        }
        delete parameters;
    }
    if(request_body != nullptr) { 
        delete request_body;
    }
    if(responses != nullptr) { 
        delete responses;
    }
    if(security != nullptr) { 
        auto arr = security;
        for(auto o: *arr) { 
            delete o;
        }
        delete security;
    }
    if(servers != nullptr) { 
        auto arr = servers;
        for(auto o: *arr) { 
            delete o;
        }
        delete servers;
    }
    if(summary != nullptr) { 
        delete summary;
    }
    if(tags != nullptr) { 
        auto arr = tags;
        for(auto o: *arr) { 
            delete o;
        }
        delete tags;
    }
}

OAIOperation*
OAIOperation::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIOperation::fromJsonObject(QJsonObject pJson) {
    
    ::OpenAPI::setValue(&callbacks, pJson["callbacks"], "QMap", "QMap");
    ::OpenAPI::setValue(&deprecated, pJson["deprecated"], "bool", "");
    
    ::OpenAPI::setValue(&description, pJson["description"], "QString", "QString");
    
    
    ::OpenAPI::setValue(&extensions, pJson["extensions"], "QMap", "OAIObject");
    ::OpenAPI::setValue(&external_docs, pJson["externalDocs"], "OAIExternalDocumentation", "OAIExternalDocumentation");
    
    ::OpenAPI::setValue(&operation_id, pJson["operationId"], "QString", "QString");
    
    
    ::OpenAPI::setValue(&parameters, pJson["parameters"], "QList", "OAIParameter");
    ::OpenAPI::setValue(&request_body, pJson["requestBody"], "OAIRequestBody", "OAIRequestBody");
    
    ::OpenAPI::setValue(&responses, pJson["responses"], "OAIOperation_responses", "OAIOperation_responses");
    
    
    ::OpenAPI::setValue(&security, pJson["security"], "QList", "QMap");
    
    ::OpenAPI::setValue(&servers, pJson["servers"], "QList", "OAIServer");
    ::OpenAPI::setValue(&summary, pJson["summary"], "QString", "QString");
    
    
    ::OpenAPI::setValue(&tags, pJson["tags"], "QList", "QString");
}

QString
OAIOperation::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIOperation::asJsonObject() {
    QJsonObject obj;
    if(callbacks->size() > 0){
        toJsonMap((QMap<QString, void*>*) callbacks, obj, "callbacks", "QMap");
    }
    if(m_deprecated_isSet){
        obj.insert("deprecated", QJsonValue(deprecated));
    }
    if(description != nullptr && *description != QString("")){
        toJsonValue(QString("description"), description, obj, QString("QString"));
    }
    if(extensions->size() > 0){
        toJsonMap((QMap<QString, void*>*) extensions, obj, "extensions", "OAIObject");
    }
    if((external_docs != nullptr) && (external_docs->isSet())){
        toJsonValue(QString("externalDocs"), external_docs, obj, QString("OAIExternalDocumentation"));
    }
    if(operation_id != nullptr && *operation_id != QString("")){
        toJsonValue(QString("operationId"), operation_id, obj, QString("QString"));
    }
    if(parameters->size() > 0){
        toJsonArray((QList<void*>*)parameters, obj, "parameters", "OAIParameter");
    }
    if((request_body != nullptr) && (request_body->isSet())){
        toJsonValue(QString("requestBody"), request_body, obj, QString("OAIRequestBody"));
    }
    if((responses != nullptr) && (responses->isSet())){
        toJsonValue(QString("responses"), responses, obj, QString("OAIOperation_responses"));
    }
    if(security->size() > 0){
        toJsonArray((QList<void*>*)security, obj, "security", "QMap");
    }
    if(servers->size() > 0){
        toJsonArray((QList<void*>*)servers, obj, "servers", "OAIServer");
    }
    if(summary != nullptr && *summary != QString("")){
        toJsonValue(QString("summary"), summary, obj, QString("QString"));
    }
    if(tags->size() > 0){
        toJsonArray((QList<void*>*)tags, obj, "tags", "QString");
    }

    return obj;
}

QMap<QString, QMap*>*
OAIOperation::getCallbacks() {
    return callbacks;
}
void
OAIOperation::setCallbacks(QMap<QString, QMap*>* callbacks) {
    this->callbacks = callbacks;
    this->m_callbacks_isSet = true;
}

bool
OAIOperation::isDeprecated() {
    return deprecated;
}
void
OAIOperation::setDeprecated(bool deprecated) {
    this->deprecated = deprecated;
    this->m_deprecated_isSet = true;
}

QString*
OAIOperation::getDescription() {
    return description;
}
void
OAIOperation::setDescription(QString* description) {
    this->description = description;
    this->m_description_isSet = true;
}

QMap<QString, OAIObject*>*
OAIOperation::getExtensions() {
    return extensions;
}
void
OAIOperation::setExtensions(QMap<QString, OAIObject*>* extensions) {
    this->extensions = extensions;
    this->m_extensions_isSet = true;
}

OAIExternalDocumentation*
OAIOperation::getExternalDocs() {
    return external_docs;
}
void
OAIOperation::setExternalDocs(OAIExternalDocumentation* external_docs) {
    this->external_docs = external_docs;
    this->m_external_docs_isSet = true;
}

QString*
OAIOperation::getOperationId() {
    return operation_id;
}
void
OAIOperation::setOperationId(QString* operation_id) {
    this->operation_id = operation_id;
    this->m_operation_id_isSet = true;
}

QList<OAIParameter*>*
OAIOperation::getParameters() {
    return parameters;
}
void
OAIOperation::setParameters(QList<OAIParameter*>* parameters) {
    this->parameters = parameters;
    this->m_parameters_isSet = true;
}

OAIRequestBody*
OAIOperation::getRequestBody() {
    return request_body;
}
void
OAIOperation::setRequestBody(OAIRequestBody* request_body) {
    this->request_body = request_body;
    this->m_request_body_isSet = true;
}

OAIOperation_responses*
OAIOperation::getResponses() {
    return responses;
}
void
OAIOperation::setResponses(OAIOperation_responses* responses) {
    this->responses = responses;
    this->m_responses_isSet = true;
}

QList<QMap*>*
OAIOperation::getSecurity() {
    return security;
}
void
OAIOperation::setSecurity(QList<QMap*>* security) {
    this->security = security;
    this->m_security_isSet = true;
}

QList<OAIServer*>*
OAIOperation::getServers() {
    return servers;
}
void
OAIOperation::setServers(QList<OAIServer*>* servers) {
    this->servers = servers;
    this->m_servers_isSet = true;
}

QString*
OAIOperation::getSummary() {
    return summary;
}
void
OAIOperation::setSummary(QString* summary) {
    this->summary = summary;
    this->m_summary_isSet = true;
}

QList<QString*>*
OAIOperation::getTags() {
    return tags;
}
void
OAIOperation::setTags(QList<QString*>* tags) {
    this->tags = tags;
    this->m_tags_isSet = true;
}


bool
OAIOperation::isSet(){
    bool isObjectUpdated = false;
    do{
        if(callbacks->size() > 0){ isObjectUpdated = true; break;}
        if(m_deprecated_isSet){ isObjectUpdated = true; break;}
        if(description != nullptr && *description != QString("")){ isObjectUpdated = true; break;}
        if(extensions->size() > 0){ isObjectUpdated = true; break;}
        if(external_docs != nullptr && external_docs->isSet()){ isObjectUpdated = true; break;}
        if(operation_id != nullptr && *operation_id != QString("")){ isObjectUpdated = true; break;}
        if(parameters->size() > 0){ isObjectUpdated = true; break;}
        if(request_body != nullptr && request_body->isSet()){ isObjectUpdated = true; break;}
        if(responses != nullptr && responses->isSet()){ isObjectUpdated = true; break;}
        if(security->size() > 0){ isObjectUpdated = true; break;}
        if(servers->size() > 0){ isObjectUpdated = true; break;}
        if(summary != nullptr && *summary != QString("")){ isObjectUpdated = true; break;}
        if(tags->size() > 0){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

