/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * OpenAPI spec version: 1.111
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIBTGraphicsAppearance-1152.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIBTGraphicsAppearance-1152::OAIBTGraphicsAppearance-1152(QString json) {
    init();
    this->fromJson(json);
}

OAIBTGraphicsAppearance-1152::OAIBTGraphicsAppearance-1152() {
    init();
}

OAIBTGraphicsAppearance-1152::~OAIBTGraphicsAppearance-1152() {
    this->cleanup();
}

void
OAIBTGraphicsAppearance-1152::init() {
    bt_type = new QString("");
    m_bt_type_isSet = false;
    color = new QList<QByteArray*>();
    m_color_isSet = false;
    non_trivial = false;
    m_non_trivial_isSet = false;
    opacity = 0;
    m_opacity_isSet = false;
    reset = false;
    m_reset_isSet = false;
    rgba_color = new QList<QByteArray*>();
    m_rgba_color_isSet = false;
    usable_appearance = false;
    m_usable_appearance_isSet = false;
}

void
OAIBTGraphicsAppearance-1152::cleanup() {
    if(bt_type != nullptr) { 
        delete bt_type;
    }
    if(color != nullptr) { 
        auto arr = color;
        for(auto o: *arr) { 
            delete o;
        }
        delete color;
    }



    if(rgba_color != nullptr) { 
        auto arr = rgba_color;
        for(auto o: *arr) { 
            delete o;
        }
        delete rgba_color;
    }

}

OAIBTGraphicsAppearance-1152*
OAIBTGraphicsAppearance-1152::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIBTGraphicsAppearance-1152::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&bt_type, pJson["btType"], "QString", "QString");
    
    
    ::OpenAPI::setValue(&color, pJson["color"], "QList", "QByteArray");
    ::OpenAPI::setValue(&non_trivial, pJson["nonTrivial"], "bool", "");
    
    ::OpenAPI::setValue(&opacity, pJson["opacity"], "qint32", "");
    
    ::OpenAPI::setValue(&reset, pJson["reset"], "bool", "");
    
    
    ::OpenAPI::setValue(&rgba_color, pJson["rgbaColor"], "QList", "QByteArray");
    ::OpenAPI::setValue(&usable_appearance, pJson["usableAppearance"], "bool", "");
    
}

QString
OAIBTGraphicsAppearance-1152::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIBTGraphicsAppearance-1152::asJsonObject() {
    QJsonObject obj;
    if(bt_type != nullptr && *bt_type != QString("")){
        toJsonValue(QString("btType"), bt_type, obj, QString("QString"));
    }
    if(color->size() > 0){
        toJsonArray((QList<void*>*)color, obj, "color", "QByteArray");
    }
    if(m_non_trivial_isSet){
        obj.insert("nonTrivial", QJsonValue(non_trivial));
    }
    if(m_opacity_isSet){
        obj.insert("opacity", QJsonValue(opacity));
    }
    if(m_reset_isSet){
        obj.insert("reset", QJsonValue(reset));
    }
    if(rgba_color->size() > 0){
        toJsonArray((QList<void*>*)rgba_color, obj, "rgbaColor", "QByteArray");
    }
    if(m_usable_appearance_isSet){
        obj.insert("usableAppearance", QJsonValue(usable_appearance));
    }

    return obj;
}

QString*
OAIBTGraphicsAppearance-1152::getBtType() {
    return bt_type;
}
void
OAIBTGraphicsAppearance-1152::setBtType(QString* bt_type) {
    this->bt_type = bt_type;
    this->m_bt_type_isSet = true;
}

QList<QByteArray*>*
OAIBTGraphicsAppearance-1152::getColor() {
    return color;
}
void
OAIBTGraphicsAppearance-1152::setColor(QList<QByteArray*>* color) {
    this->color = color;
    this->m_color_isSet = true;
}

bool
OAIBTGraphicsAppearance-1152::isNonTrivial() {
    return non_trivial;
}
void
OAIBTGraphicsAppearance-1152::setNonTrivial(bool non_trivial) {
    this->non_trivial = non_trivial;
    this->m_non_trivial_isSet = true;
}

qint32
OAIBTGraphicsAppearance-1152::getOpacity() {
    return opacity;
}
void
OAIBTGraphicsAppearance-1152::setOpacity(qint32 opacity) {
    this->opacity = opacity;
    this->m_opacity_isSet = true;
}

bool
OAIBTGraphicsAppearance-1152::isReset() {
    return reset;
}
void
OAIBTGraphicsAppearance-1152::setReset(bool reset) {
    this->reset = reset;
    this->m_reset_isSet = true;
}

QList<QByteArray*>*
OAIBTGraphicsAppearance-1152::getRgbaColor() {
    return rgba_color;
}
void
OAIBTGraphicsAppearance-1152::setRgbaColor(QList<QByteArray*>* rgba_color) {
    this->rgba_color = rgba_color;
    this->m_rgba_color_isSet = true;
}

bool
OAIBTGraphicsAppearance-1152::isUsableAppearance() {
    return usable_appearance;
}
void
OAIBTGraphicsAppearance-1152::setUsableAppearance(bool usable_appearance) {
    this->usable_appearance = usable_appearance;
    this->m_usable_appearance_isSet = true;
}


bool
OAIBTGraphicsAppearance-1152::isSet(){
    bool isObjectUpdated = false;
    do{
        if(bt_type != nullptr && *bt_type != QString("")){ isObjectUpdated = true; break;}
        if(color->size() > 0){ isObjectUpdated = true; break;}
        if(m_non_trivial_isSet){ isObjectUpdated = true; break;}
        if(m_opacity_isSet){ isObjectUpdated = true; break;}
        if(m_reset_isSet){ isObjectUpdated = true; break;}
        if(rgba_color->size() > 0){ isObjectUpdated = true; break;}
        if(m_usable_appearance_isSet){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

