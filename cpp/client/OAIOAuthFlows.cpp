/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * OpenAPI spec version: 1.111
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIOAuthFlows.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIOAuthFlows::OAIOAuthFlows(QString json) {
    init();
    this->fromJson(json);
}

OAIOAuthFlows::OAIOAuthFlows() {
    init();
}

OAIOAuthFlows::~OAIOAuthFlows() {
    this->cleanup();
}

void
OAIOAuthFlows::init() {
    authorization_code = new OAIOAuthFlow();
    m_authorization_code_isSet = false;
    client_credentials = new OAIOAuthFlow();
    m_client_credentials_isSet = false;
    extensions = new QMap<QString, OAIObject*>();
    m_extensions_isSet = false;
    implicit = new OAIOAuthFlow();
    m_implicit_isSet = false;
    password = new OAIOAuthFlow();
    m_password_isSet = false;
}

void
OAIOAuthFlows::cleanup() {
    if(authorization_code != nullptr) { 
        delete authorization_code;
    }
    if(client_credentials != nullptr) { 
        delete client_credentials;
    }
    if(extensions != nullptr) { 
        auto arr = extensions;
        for(auto o: *arr) { 
            delete o;
        }
        delete extensions;
    }
    if(implicit != nullptr) { 
        delete implicit;
    }
    if(password != nullptr) { 
        delete password;
    }
}

OAIOAuthFlows*
OAIOAuthFlows::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIOAuthFlows::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&authorization_code, pJson["authorizationCode"], "OAIOAuthFlow", "OAIOAuthFlow");
    
    ::OpenAPI::setValue(&client_credentials, pJson["clientCredentials"], "OAIOAuthFlow", "OAIOAuthFlow");
    
    
    ::OpenAPI::setValue(&extensions, pJson["extensions"], "QMap", "OAIObject");
    ::OpenAPI::setValue(&implicit, pJson["implicit"], "OAIOAuthFlow", "OAIOAuthFlow");
    
    ::OpenAPI::setValue(&password, pJson["password"], "OAIOAuthFlow", "OAIOAuthFlow");
    
}

QString
OAIOAuthFlows::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIOAuthFlows::asJsonObject() {
    QJsonObject obj;
    if((authorization_code != nullptr) && (authorization_code->isSet())){
        toJsonValue(QString("authorizationCode"), authorization_code, obj, QString("OAIOAuthFlow"));
    }
    if((client_credentials != nullptr) && (client_credentials->isSet())){
        toJsonValue(QString("clientCredentials"), client_credentials, obj, QString("OAIOAuthFlow"));
    }
    if(extensions->size() > 0){
        toJsonMap((QMap<QString, void*>*) extensions, obj, "extensions", "OAIObject");
    }
    if((implicit != nullptr) && (implicit->isSet())){
        toJsonValue(QString("implicit"), implicit, obj, QString("OAIOAuthFlow"));
    }
    if((password != nullptr) && (password->isSet())){
        toJsonValue(QString("password"), password, obj, QString("OAIOAuthFlow"));
    }

    return obj;
}

OAIOAuthFlow*
OAIOAuthFlows::getAuthorizationCode() {
    return authorization_code;
}
void
OAIOAuthFlows::setAuthorizationCode(OAIOAuthFlow* authorization_code) {
    this->authorization_code = authorization_code;
    this->m_authorization_code_isSet = true;
}

OAIOAuthFlow*
OAIOAuthFlows::getClientCredentials() {
    return client_credentials;
}
void
OAIOAuthFlows::setClientCredentials(OAIOAuthFlow* client_credentials) {
    this->client_credentials = client_credentials;
    this->m_client_credentials_isSet = true;
}

QMap<QString, OAIObject*>*
OAIOAuthFlows::getExtensions() {
    return extensions;
}
void
OAIOAuthFlows::setExtensions(QMap<QString, OAIObject*>* extensions) {
    this->extensions = extensions;
    this->m_extensions_isSet = true;
}

OAIOAuthFlow*
OAIOAuthFlows::getImplicit() {
    return implicit;
}
void
OAIOAuthFlows::setImplicit(OAIOAuthFlow* implicit) {
    this->implicit = implicit;
    this->m_implicit_isSet = true;
}

OAIOAuthFlow*
OAIOAuthFlows::getPassword() {
    return password;
}
void
OAIOAuthFlows::setPassword(OAIOAuthFlow* password) {
    this->password = password;
    this->m_password_isSet = true;
}


bool
OAIOAuthFlows::isSet(){
    bool isObjectUpdated = false;
    do{
        if(authorization_code != nullptr && authorization_code->isSet()){ isObjectUpdated = true; break;}
        if(client_credentials != nullptr && client_credentials->isSet()){ isObjectUpdated = true; break;}
        if(extensions->size() > 0){ isObjectUpdated = true; break;}
        if(implicit != nullptr && implicit->isSet()){ isObjectUpdated = true; break;}
        if(password != nullptr && password->isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

