/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * OpenAPI spec version: 1.111
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIBTMSketchCurve-4.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIBTMSketchCurve-4::OAIBTMSketchCurve-4(QString json) {
    init();
    this->fromJson(json);
}

OAIBTMSketchCurve-4::OAIBTMSketchCurve-4() {
    init();
}

OAIBTMSketchCurve-4::~OAIBTMSketchCurve-4() {
    this->cleanup();
}

void
OAIBTMSketchCurve-4::init() {
    bt_type = new QString("");
    m_bt_type_isSet = false;
    control_box_ids = new QList<QString*>();
    m_control_box_ids_isSet = false;
    entity_id = new QString("");
    m_entity_id_isSet = false;
    entity_id_and_replace_in_dependent_fields = new QString("");
    m_entity_id_and_replace_in_dependent_fields_isSet = false;
    import_microversion = new QString("");
    m_import_microversion_isSet = false;
    is_construction = false;
    m_is_construction_isSet = false;
    _namespace = new QString("");
    m__namespace_isSet = false;
    node_id = new QString("");
    m_node_id_isSet = false;
    parameters = new QList<OAIBTMParameter-1*>();
    m_parameters_isSet = false;
    geometry = new OAIBTCurveGeometry-114();
    m_geometry_isSet = false;
    center_id = new QString("");
    m_center_id_isSet = false;
    internal_ids = new QList<QString*>();
    m_internal_ids_isSet = false;
}

void
OAIBTMSketchCurve-4::cleanup() {
    if(bt_type != nullptr) { 
        delete bt_type;
    }
    if(control_box_ids != nullptr) { 
        auto arr = control_box_ids;
        for(auto o: *arr) { 
            delete o;
        }
        delete control_box_ids;
    }
    if(entity_id != nullptr) { 
        delete entity_id;
    }
    if(entity_id_and_replace_in_dependent_fields != nullptr) { 
        delete entity_id_and_replace_in_dependent_fields;
    }
    if(import_microversion != nullptr) { 
        delete import_microversion;
    }

    if(_namespace != nullptr) { 
        delete _namespace;
    }
    if(node_id != nullptr) { 
        delete node_id;
    }
    if(parameters != nullptr) { 
        auto arr = parameters;
        for(auto o: *arr) { 
            delete o;
        }
        delete parameters;
    }
    if(geometry != nullptr) { 
        delete geometry;
    }
    if(center_id != nullptr) { 
        delete center_id;
    }
    if(internal_ids != nullptr) { 
        auto arr = internal_ids;
        for(auto o: *arr) { 
            delete o;
        }
        delete internal_ids;
    }
}

OAIBTMSketchCurve-4*
OAIBTMSketchCurve-4::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIBTMSketchCurve-4::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&bt_type, pJson["btType"], "QString", "QString");
    
    
    ::OpenAPI::setValue(&control_box_ids, pJson["controlBoxIds"], "QList", "QString");
    ::OpenAPI::setValue(&entity_id, pJson["entityId"], "QString", "QString");
    
    ::OpenAPI::setValue(&entity_id_and_replace_in_dependent_fields, pJson["entityIdAndReplaceInDependentFields"], "QString", "QString");
    
    ::OpenAPI::setValue(&import_microversion, pJson["importMicroversion"], "QString", "QString");
    
    ::OpenAPI::setValue(&is_construction, pJson["isConstruction"], "bool", "");
    
    ::OpenAPI::setValue(&_namespace, pJson["namespace"], "QString", "QString");
    
    ::OpenAPI::setValue(&node_id, pJson["nodeId"], "QString", "QString");
    
    
    ::OpenAPI::setValue(&parameters, pJson["parameters"], "QList", "OAIBTMParameter-1");
    ::OpenAPI::setValue(&geometry, pJson["geometry"], "OAIBTCurveGeometry-114", "OAIBTCurveGeometry-114");
    
    ::OpenAPI::setValue(&center_id, pJson["centerId"], "QString", "QString");
    
    
    ::OpenAPI::setValue(&internal_ids, pJson["internalIds"], "QList", "QString");
}

QString
OAIBTMSketchCurve-4::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIBTMSketchCurve-4::asJsonObject() {
    QJsonObject obj;
    if(bt_type != nullptr && *bt_type != QString("")){
        toJsonValue(QString("btType"), bt_type, obj, QString("QString"));
    }
    if(control_box_ids->size() > 0){
        toJsonArray((QList<void*>*)control_box_ids, obj, "controlBoxIds", "QString");
    }
    if(entity_id != nullptr && *entity_id != QString("")){
        toJsonValue(QString("entityId"), entity_id, obj, QString("QString"));
    }
    if(entity_id_and_replace_in_dependent_fields != nullptr && *entity_id_and_replace_in_dependent_fields != QString("")){
        toJsonValue(QString("entityIdAndReplaceInDependentFields"), entity_id_and_replace_in_dependent_fields, obj, QString("QString"));
    }
    if(import_microversion != nullptr && *import_microversion != QString("")){
        toJsonValue(QString("importMicroversion"), import_microversion, obj, QString("QString"));
    }
    if(m_is_construction_isSet){
        obj.insert("isConstruction", QJsonValue(is_construction));
    }
    if(_namespace != nullptr && *_namespace != QString("")){
        toJsonValue(QString("namespace"), _namespace, obj, QString("QString"));
    }
    if(node_id != nullptr && *node_id != QString("")){
        toJsonValue(QString("nodeId"), node_id, obj, QString("QString"));
    }
    if(parameters->size() > 0){
        toJsonArray((QList<void*>*)parameters, obj, "parameters", "OAIBTMParameter-1");
    }
    if((geometry != nullptr) && (geometry->isSet())){
        toJsonValue(QString("geometry"), geometry, obj, QString("OAIBTCurveGeometry-114"));
    }
    if(center_id != nullptr && *center_id != QString("")){
        toJsonValue(QString("centerId"), center_id, obj, QString("QString"));
    }
    if(internal_ids->size() > 0){
        toJsonArray((QList<void*>*)internal_ids, obj, "internalIds", "QString");
    }

    return obj;
}

QString*
OAIBTMSketchCurve-4::getBtType() {
    return bt_type;
}
void
OAIBTMSketchCurve-4::setBtType(QString* bt_type) {
    this->bt_type = bt_type;
    this->m_bt_type_isSet = true;
}

QList<QString*>*
OAIBTMSketchCurve-4::getControlBoxIds() {
    return control_box_ids;
}
void
OAIBTMSketchCurve-4::setControlBoxIds(QList<QString*>* control_box_ids) {
    this->control_box_ids = control_box_ids;
    this->m_control_box_ids_isSet = true;
}

QString*
OAIBTMSketchCurve-4::getEntityId() {
    return entity_id;
}
void
OAIBTMSketchCurve-4::setEntityId(QString* entity_id) {
    this->entity_id = entity_id;
    this->m_entity_id_isSet = true;
}

QString*
OAIBTMSketchCurve-4::getEntityIdAndReplaceInDependentFields() {
    return entity_id_and_replace_in_dependent_fields;
}
void
OAIBTMSketchCurve-4::setEntityIdAndReplaceInDependentFields(QString* entity_id_and_replace_in_dependent_fields) {
    this->entity_id_and_replace_in_dependent_fields = entity_id_and_replace_in_dependent_fields;
    this->m_entity_id_and_replace_in_dependent_fields_isSet = true;
}

QString*
OAIBTMSketchCurve-4::getImportMicroversion() {
    return import_microversion;
}
void
OAIBTMSketchCurve-4::setImportMicroversion(QString* import_microversion) {
    this->import_microversion = import_microversion;
    this->m_import_microversion_isSet = true;
}

bool
OAIBTMSketchCurve-4::isIsConstruction() {
    return is_construction;
}
void
OAIBTMSketchCurve-4::setIsConstruction(bool is_construction) {
    this->is_construction = is_construction;
    this->m_is_construction_isSet = true;
}

QString*
OAIBTMSketchCurve-4::getNamespace() {
    return _namespace;
}
void
OAIBTMSketchCurve-4::setNamespace(QString* _namespace) {
    this->_namespace = _namespace;
    this->m__namespace_isSet = true;
}

QString*
OAIBTMSketchCurve-4::getNodeId() {
    return node_id;
}
void
OAIBTMSketchCurve-4::setNodeId(QString* node_id) {
    this->node_id = node_id;
    this->m_node_id_isSet = true;
}

QList<OAIBTMParameter-1*>*
OAIBTMSketchCurve-4::getParameters() {
    return parameters;
}
void
OAIBTMSketchCurve-4::setParameters(QList<OAIBTMParameter-1*>* parameters) {
    this->parameters = parameters;
    this->m_parameters_isSet = true;
}

OAIBTCurveGeometry-114*
OAIBTMSketchCurve-4::getGeometry() {
    return geometry;
}
void
OAIBTMSketchCurve-4::setGeometry(OAIBTCurveGeometry-114* geometry) {
    this->geometry = geometry;
    this->m_geometry_isSet = true;
}

QString*
OAIBTMSketchCurve-4::getCenterId() {
    return center_id;
}
void
OAIBTMSketchCurve-4::setCenterId(QString* center_id) {
    this->center_id = center_id;
    this->m_center_id_isSet = true;
}

QList<QString*>*
OAIBTMSketchCurve-4::getInternalIds() {
    return internal_ids;
}
void
OAIBTMSketchCurve-4::setInternalIds(QList<QString*>* internal_ids) {
    this->internal_ids = internal_ids;
    this->m_internal_ids_isSet = true;
}


bool
OAIBTMSketchCurve-4::isSet(){
    bool isObjectUpdated = false;
    do{
        if(bt_type != nullptr && *bt_type != QString("")){ isObjectUpdated = true; break;}
        if(control_box_ids->size() > 0){ isObjectUpdated = true; break;}
        if(entity_id != nullptr && *entity_id != QString("")){ isObjectUpdated = true; break;}
        if(entity_id_and_replace_in_dependent_fields != nullptr && *entity_id_and_replace_in_dependent_fields != QString("")){ isObjectUpdated = true; break;}
        if(import_microversion != nullptr && *import_microversion != QString("")){ isObjectUpdated = true; break;}
        if(m_is_construction_isSet){ isObjectUpdated = true; break;}
        if(_namespace != nullptr && *_namespace != QString("")){ isObjectUpdated = true; break;}
        if(node_id != nullptr && *node_id != QString("")){ isObjectUpdated = true; break;}
        if(parameters->size() > 0){ isObjectUpdated = true; break;}
        if(geometry != nullptr && geometry->isSet()){ isObjectUpdated = true; break;}
        if(center_id != nullptr && *center_id != QString("")){ isObjectUpdated = true; break;}
        if(internal_ids->size() > 0){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

