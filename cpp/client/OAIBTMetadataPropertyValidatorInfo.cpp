/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * OpenAPI spec version: 1.111
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIBTMetadataPropertyValidatorInfo.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIBTMetadataPropertyValidatorInfo::OAIBTMetadataPropertyValidatorInfo(QString json) {
    init();
    this->fromJson(json);
}

OAIBTMetadataPropertyValidatorInfo::OAIBTMetadataPropertyValidatorInfo() {
    init();
}

OAIBTMetadataPropertyValidatorInfo::~OAIBTMetadataPropertyValidatorInfo() {
    this->cleanup();
}

void
OAIBTMetadataPropertyValidatorInfo::init() {
    max = 0.0;
    m_max_isSet = false;
    max_count = 0;
    m_max_count_isSet = false;
    max_date = NULL;
    m_max_date_isSet = false;
    max_length = 0;
    m_max_length_isSet = false;
    min = 0.0;
    m_min_isSet = false;
    min_count = 0;
    m_min_count_isSet = false;
    min_date = NULL;
    m_min_date_isSet = false;
    min_length = 0;
    m_min_length_isSet = false;
    pattern = new QString("");
    m_pattern_isSet = false;
}

void
OAIBTMetadataPropertyValidatorInfo::cleanup() {
    if(max != nullptr) { 
        delete max;
    }

    if(max_date != nullptr) { 
        delete max_date;
    }

    if(min != nullptr) { 
        delete min;
    }

    if(min_date != nullptr) { 
        delete min_date;
    }

    if(pattern != nullptr) { 
        delete pattern;
    }
}

OAIBTMetadataPropertyValidatorInfo*
OAIBTMetadataPropertyValidatorInfo::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIBTMetadataPropertyValidatorInfo::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&max, pJson["max"], "OAINumber", "OAINumber");
    
    ::OpenAPI::setValue(&max_count, pJson["maxCount"], "qint32", "");
    
    ::OpenAPI::setValue(&max_date, pJson["maxDate"], "QDateTime", "QDateTime");
    
    ::OpenAPI::setValue(&max_length, pJson["maxLength"], "qint32", "");
    
    ::OpenAPI::setValue(&min, pJson["min"], "OAINumber", "OAINumber");
    
    ::OpenAPI::setValue(&min_count, pJson["minCount"], "qint32", "");
    
    ::OpenAPI::setValue(&min_date, pJson["minDate"], "QDateTime", "QDateTime");
    
    ::OpenAPI::setValue(&min_length, pJson["minLength"], "qint32", "");
    
    ::OpenAPI::setValue(&pattern, pJson["pattern"], "QString", "QString");
    
}

QString
OAIBTMetadataPropertyValidatorInfo::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIBTMetadataPropertyValidatorInfo::asJsonObject() {
    QJsonObject obj;
    if((max != nullptr) && (max->isSet())){
        toJsonValue(QString("max"), max, obj, QString("OAINumber"));
    }
    if(m_max_count_isSet){
        obj.insert("maxCount", QJsonValue(max_count));
    }
    if(max_date != nullptr) { 
        toJsonValue(QString("maxDate"), max_date, obj, QString("QDateTime"));
    }
    if(m_max_length_isSet){
        obj.insert("maxLength", QJsonValue(max_length));
    }
    if((min != nullptr) && (min->isSet())){
        toJsonValue(QString("min"), min, obj, QString("OAINumber"));
    }
    if(m_min_count_isSet){
        obj.insert("minCount", QJsonValue(min_count));
    }
    if(min_date != nullptr) { 
        toJsonValue(QString("minDate"), min_date, obj, QString("QDateTime"));
    }
    if(m_min_length_isSet){
        obj.insert("minLength", QJsonValue(min_length));
    }
    if(pattern != nullptr && *pattern != QString("")){
        toJsonValue(QString("pattern"), pattern, obj, QString("QString"));
    }

    return obj;
}

OAINumber*
OAIBTMetadataPropertyValidatorInfo::getMax() {
    return max;
}
void
OAIBTMetadataPropertyValidatorInfo::setMax(OAINumber* max) {
    this->max = max;
    this->m_max_isSet = true;
}

qint32
OAIBTMetadataPropertyValidatorInfo::getMaxCount() {
    return max_count;
}
void
OAIBTMetadataPropertyValidatorInfo::setMaxCount(qint32 max_count) {
    this->max_count = max_count;
    this->m_max_count_isSet = true;
}

QDateTime*
OAIBTMetadataPropertyValidatorInfo::getMaxDate() {
    return max_date;
}
void
OAIBTMetadataPropertyValidatorInfo::setMaxDate(QDateTime* max_date) {
    this->max_date = max_date;
    this->m_max_date_isSet = true;
}

qint32
OAIBTMetadataPropertyValidatorInfo::getMaxLength() {
    return max_length;
}
void
OAIBTMetadataPropertyValidatorInfo::setMaxLength(qint32 max_length) {
    this->max_length = max_length;
    this->m_max_length_isSet = true;
}

OAINumber*
OAIBTMetadataPropertyValidatorInfo::getMin() {
    return min;
}
void
OAIBTMetadataPropertyValidatorInfo::setMin(OAINumber* min) {
    this->min = min;
    this->m_min_isSet = true;
}

qint32
OAIBTMetadataPropertyValidatorInfo::getMinCount() {
    return min_count;
}
void
OAIBTMetadataPropertyValidatorInfo::setMinCount(qint32 min_count) {
    this->min_count = min_count;
    this->m_min_count_isSet = true;
}

QDateTime*
OAIBTMetadataPropertyValidatorInfo::getMinDate() {
    return min_date;
}
void
OAIBTMetadataPropertyValidatorInfo::setMinDate(QDateTime* min_date) {
    this->min_date = min_date;
    this->m_min_date_isSet = true;
}

qint32
OAIBTMetadataPropertyValidatorInfo::getMinLength() {
    return min_length;
}
void
OAIBTMetadataPropertyValidatorInfo::setMinLength(qint32 min_length) {
    this->min_length = min_length;
    this->m_min_length_isSet = true;
}

QString*
OAIBTMetadataPropertyValidatorInfo::getPattern() {
    return pattern;
}
void
OAIBTMetadataPropertyValidatorInfo::setPattern(QString* pattern) {
    this->pattern = pattern;
    this->m_pattern_isSet = true;
}


bool
OAIBTMetadataPropertyValidatorInfo::isSet(){
    bool isObjectUpdated = false;
    do{
        if(max != nullptr && max->isSet()){ isObjectUpdated = true; break;}
        if(m_max_count_isSet){ isObjectUpdated = true; break;}
        if(m_max_length_isSet){ isObjectUpdated = true; break;}
        if(min != nullptr && min->isSet()){ isObjectUpdated = true; break;}
        if(m_min_count_isSet){ isObjectUpdated = true; break;}
        if(m_min_length_isSet){ isObjectUpdated = true; break;}
        if(pattern != nullptr && *pattern != QString("")){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

