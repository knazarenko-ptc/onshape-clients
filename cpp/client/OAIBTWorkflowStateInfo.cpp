/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * OpenAPI spec version: 1.111
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIBTWorkflowStateInfo.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIBTWorkflowStateInfo::OAIBTWorkflowStateInfo(QString json) {
    init();
    this->fromJson(json);
}

OAIBTWorkflowStateInfo::OAIBTWorkflowStateInfo() {
    init();
}

OAIBTWorkflowStateInfo::~OAIBTWorkflowStateInfo() {
    this->cleanup();
}

void
OAIBTWorkflowStateInfo::init() {
    approver_source_property = new QString("");
    m_approver_source_property_isSet = false;
    display_name = new QString("");
    m_display_name_isSet = false;
    editable_properties = new QList<QString*>();
    m_editable_properties_isSet = false;
    name = new QString("");
    m_name_isSet = false;
    notifier_source_property = new QString("");
    m_notifier_source_property_isSet = false;
    required_item_properties = new QList<QString*>();
    m_required_item_properties_isSet = false;
    required_properties = new QList<QString*>();
    m_required_properties_isSet = false;
}

void
OAIBTWorkflowStateInfo::cleanup() {
    if(approver_source_property != nullptr) { 
        delete approver_source_property;
    }
    if(display_name != nullptr) { 
        delete display_name;
    }
    if(editable_properties != nullptr) { 
        auto arr = editable_properties;
        for(auto o: *arr) { 
            delete o;
        }
        delete editable_properties;
    }
    if(name != nullptr) { 
        delete name;
    }
    if(notifier_source_property != nullptr) { 
        delete notifier_source_property;
    }
    if(required_item_properties != nullptr) { 
        auto arr = required_item_properties;
        for(auto o: *arr) { 
            delete o;
        }
        delete required_item_properties;
    }
    if(required_properties != nullptr) { 
        auto arr = required_properties;
        for(auto o: *arr) { 
            delete o;
        }
        delete required_properties;
    }
}

OAIBTWorkflowStateInfo*
OAIBTWorkflowStateInfo::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIBTWorkflowStateInfo::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&approver_source_property, pJson["approverSourceProperty"], "QString", "QString");
    
    ::OpenAPI::setValue(&display_name, pJson["displayName"], "QString", "QString");
    
    
    ::OpenAPI::setValue(&editable_properties, pJson["editableProperties"], "QList", "QString");
    ::OpenAPI::setValue(&name, pJson["name"], "QString", "QString");
    
    ::OpenAPI::setValue(&notifier_source_property, pJson["notifierSourceProperty"], "QString", "QString");
    
    
    ::OpenAPI::setValue(&required_item_properties, pJson["requiredItemProperties"], "QList", "QString");
    
    ::OpenAPI::setValue(&required_properties, pJson["requiredProperties"], "QList", "QString");
}

QString
OAIBTWorkflowStateInfo::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIBTWorkflowStateInfo::asJsonObject() {
    QJsonObject obj;
    if(approver_source_property != nullptr && *approver_source_property != QString("")){
        toJsonValue(QString("approverSourceProperty"), approver_source_property, obj, QString("QString"));
    }
    if(display_name != nullptr && *display_name != QString("")){
        toJsonValue(QString("displayName"), display_name, obj, QString("QString"));
    }
    if(editable_properties->size() > 0){
        toJsonArray((QList<void*>*)editable_properties, obj, "editableProperties", "QString");
    }
    if(name != nullptr && *name != QString("")){
        toJsonValue(QString("name"), name, obj, QString("QString"));
    }
    if(notifier_source_property != nullptr && *notifier_source_property != QString("")){
        toJsonValue(QString("notifierSourceProperty"), notifier_source_property, obj, QString("QString"));
    }
    if(required_item_properties->size() > 0){
        toJsonArray((QList<void*>*)required_item_properties, obj, "requiredItemProperties", "QString");
    }
    if(required_properties->size() > 0){
        toJsonArray((QList<void*>*)required_properties, obj, "requiredProperties", "QString");
    }

    return obj;
}

QString*
OAIBTWorkflowStateInfo::getApproverSourceProperty() {
    return approver_source_property;
}
void
OAIBTWorkflowStateInfo::setApproverSourceProperty(QString* approver_source_property) {
    this->approver_source_property = approver_source_property;
    this->m_approver_source_property_isSet = true;
}

QString*
OAIBTWorkflowStateInfo::getDisplayName() {
    return display_name;
}
void
OAIBTWorkflowStateInfo::setDisplayName(QString* display_name) {
    this->display_name = display_name;
    this->m_display_name_isSet = true;
}

QList<QString*>*
OAIBTWorkflowStateInfo::getEditableProperties() {
    return editable_properties;
}
void
OAIBTWorkflowStateInfo::setEditableProperties(QList<QString*>* editable_properties) {
    this->editable_properties = editable_properties;
    this->m_editable_properties_isSet = true;
}

QString*
OAIBTWorkflowStateInfo::getName() {
    return name;
}
void
OAIBTWorkflowStateInfo::setName(QString* name) {
    this->name = name;
    this->m_name_isSet = true;
}

QString*
OAIBTWorkflowStateInfo::getNotifierSourceProperty() {
    return notifier_source_property;
}
void
OAIBTWorkflowStateInfo::setNotifierSourceProperty(QString* notifier_source_property) {
    this->notifier_source_property = notifier_source_property;
    this->m_notifier_source_property_isSet = true;
}

QList<QString*>*
OAIBTWorkflowStateInfo::getRequiredItemProperties() {
    return required_item_properties;
}
void
OAIBTWorkflowStateInfo::setRequiredItemProperties(QList<QString*>* required_item_properties) {
    this->required_item_properties = required_item_properties;
    this->m_required_item_properties_isSet = true;
}

QList<QString*>*
OAIBTWorkflowStateInfo::getRequiredProperties() {
    return required_properties;
}
void
OAIBTWorkflowStateInfo::setRequiredProperties(QList<QString*>* required_properties) {
    this->required_properties = required_properties;
    this->m_required_properties_isSet = true;
}


bool
OAIBTWorkflowStateInfo::isSet(){
    bool isObjectUpdated = false;
    do{
        if(approver_source_property != nullptr && *approver_source_property != QString("")){ isObjectUpdated = true; break;}
        if(display_name != nullptr && *display_name != QString("")){ isObjectUpdated = true; break;}
        if(editable_properties->size() > 0){ isObjectUpdated = true; break;}
        if(name != nullptr && *name != QString("")){ isObjectUpdated = true; break;}
        if(notifier_source_property != nullptr && *notifier_source_property != QString("")){ isObjectUpdated = true; break;}
        if(required_item_properties->size() > 0){ isObjectUpdated = true; break;}
        if(required_properties->size() > 0){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

