/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * OpenAPI spec version: 1.111
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIBTAppElementReferenceParams.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIBTAppElementReferenceParams::OAIBTAppElementReferenceParams(QString json) {
    init();
    this->fromJson(json);
}

OAIBTAppElementReferenceParams::OAIBTAppElementReferenceParams() {
    init();
}

OAIBTAppElementReferenceParams::~OAIBTAppElementReferenceParams() {
    this->cleanup();
}

void
OAIBTAppElementReferenceParams::init() {
    has_document_microversions = false;
    m_has_document_microversions_isSet = false;
    id_tag = new QString("");
    m_id_tag_isSet = false;
    id_tag_microversion_id = new QString("");
    m_id_tag_microversion_id_isSet = false;
    is_sketch_only = false;
    m_is_sketch_only_isSet = false;
    parent_change_id = new QString("");
    m_parent_change_id_isSet = false;
    part_number = new QString("");
    m_part_number_isSet = false;
    pure_sketch = false;
    m_pure_sketch_isSet = false;
    reference_type = 0;
    m_reference_type_isSet = false;
    return_error = false;
    m_return_error_isSet = false;
    revision = new QString("");
    m_revision_isSet = false;
    sketch_ids = new QList<QString*>();
    m_sketch_ids_isSet = false;
    target_configuration = new QString("");
    m_target_configuration_isSet = false;
    target_document_id = new QString("");
    m_target_document_id_isSet = false;
    target_element_id = new QString("");
    m_target_element_id_isSet = false;
    target_microversion_id = new QString("");
    m_target_microversion_id_isSet = false;
    target_version_id = new QString("");
    m_target_version_id_isSet = false;
    track_new_versions = false;
    m_track_new_versions_isSet = false;
    transaction_id = new QString("");
    m_transaction_id_isSet = false;
    update_sketch_info = false;
    m_update_sketch_info_isSet = false;
}

void
OAIBTAppElementReferenceParams::cleanup() {

    if(id_tag != nullptr) { 
        delete id_tag;
    }
    if(id_tag_microversion_id != nullptr) { 
        delete id_tag_microversion_id;
    }

    if(parent_change_id != nullptr) { 
        delete parent_change_id;
    }
    if(part_number != nullptr) { 
        delete part_number;
    }



    if(revision != nullptr) { 
        delete revision;
    }
    if(sketch_ids != nullptr) { 
        auto arr = sketch_ids;
        for(auto o: *arr) { 
            delete o;
        }
        delete sketch_ids;
    }
    if(target_configuration != nullptr) { 
        delete target_configuration;
    }
    if(target_document_id != nullptr) { 
        delete target_document_id;
    }
    if(target_element_id != nullptr) { 
        delete target_element_id;
    }
    if(target_microversion_id != nullptr) { 
        delete target_microversion_id;
    }
    if(target_version_id != nullptr) { 
        delete target_version_id;
    }

    if(transaction_id != nullptr) { 
        delete transaction_id;
    }

}

OAIBTAppElementReferenceParams*
OAIBTAppElementReferenceParams::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIBTAppElementReferenceParams::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&has_document_microversions, pJson["hasDocumentMicroversions"], "bool", "");
    
    ::OpenAPI::setValue(&id_tag, pJson["idTag"], "QString", "QString");
    
    ::OpenAPI::setValue(&id_tag_microversion_id, pJson["idTagMicroversionId"], "QString", "QString");
    
    ::OpenAPI::setValue(&is_sketch_only, pJson["isSketchOnly"], "bool", "");
    
    ::OpenAPI::setValue(&parent_change_id, pJson["parentChangeId"], "QString", "QString");
    
    ::OpenAPI::setValue(&part_number, pJson["partNumber"], "QString", "QString");
    
    ::OpenAPI::setValue(&pure_sketch, pJson["pureSketch"], "bool", "");
    
    ::OpenAPI::setValue(&reference_type, pJson["referenceType"], "qint32", "");
    
    ::OpenAPI::setValue(&return_error, pJson["returnError"], "bool", "");
    
    ::OpenAPI::setValue(&revision, pJson["revision"], "QString", "QString");
    
    
    ::OpenAPI::setValue(&sketch_ids, pJson["sketchIds"], "QList", "QString");
    ::OpenAPI::setValue(&target_configuration, pJson["targetConfiguration"], "QString", "QString");
    
    ::OpenAPI::setValue(&target_document_id, pJson["targetDocumentId"], "QString", "QString");
    
    ::OpenAPI::setValue(&target_element_id, pJson["targetElementId"], "QString", "QString");
    
    ::OpenAPI::setValue(&target_microversion_id, pJson["targetMicroversionId"], "QString", "QString");
    
    ::OpenAPI::setValue(&target_version_id, pJson["targetVersionId"], "QString", "QString");
    
    ::OpenAPI::setValue(&track_new_versions, pJson["trackNewVersions"], "bool", "");
    
    ::OpenAPI::setValue(&transaction_id, pJson["transactionId"], "QString", "QString");
    
    ::OpenAPI::setValue(&update_sketch_info, pJson["updateSketchInfo"], "bool", "");
    
}

QString
OAIBTAppElementReferenceParams::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIBTAppElementReferenceParams::asJsonObject() {
    QJsonObject obj;
    if(m_has_document_microversions_isSet){
        obj.insert("hasDocumentMicroversions", QJsonValue(has_document_microversions));
    }
    if(id_tag != nullptr && *id_tag != QString("")){
        toJsonValue(QString("idTag"), id_tag, obj, QString("QString"));
    }
    if(id_tag_microversion_id != nullptr && *id_tag_microversion_id != QString("")){
        toJsonValue(QString("idTagMicroversionId"), id_tag_microversion_id, obj, QString("QString"));
    }
    if(m_is_sketch_only_isSet){
        obj.insert("isSketchOnly", QJsonValue(is_sketch_only));
    }
    if(parent_change_id != nullptr && *parent_change_id != QString("")){
        toJsonValue(QString("parentChangeId"), parent_change_id, obj, QString("QString"));
    }
    if(part_number != nullptr && *part_number != QString("")){
        toJsonValue(QString("partNumber"), part_number, obj, QString("QString"));
    }
    if(m_pure_sketch_isSet){
        obj.insert("pureSketch", QJsonValue(pure_sketch));
    }
    if(m_reference_type_isSet){
        obj.insert("referenceType", QJsonValue(reference_type));
    }
    if(m_return_error_isSet){
        obj.insert("returnError", QJsonValue(return_error));
    }
    if(revision != nullptr && *revision != QString("")){
        toJsonValue(QString("revision"), revision, obj, QString("QString"));
    }
    if(sketch_ids->size() > 0){
        toJsonArray((QList<void*>*)sketch_ids, obj, "sketchIds", "QString");
    }
    if(target_configuration != nullptr && *target_configuration != QString("")){
        toJsonValue(QString("targetConfiguration"), target_configuration, obj, QString("QString"));
    }
    if(target_document_id != nullptr && *target_document_id != QString("")){
        toJsonValue(QString("targetDocumentId"), target_document_id, obj, QString("QString"));
    }
    if(target_element_id != nullptr && *target_element_id != QString("")){
        toJsonValue(QString("targetElementId"), target_element_id, obj, QString("QString"));
    }
    if(target_microversion_id != nullptr && *target_microversion_id != QString("")){
        toJsonValue(QString("targetMicroversionId"), target_microversion_id, obj, QString("QString"));
    }
    if(target_version_id != nullptr && *target_version_id != QString("")){
        toJsonValue(QString("targetVersionId"), target_version_id, obj, QString("QString"));
    }
    if(m_track_new_versions_isSet){
        obj.insert("trackNewVersions", QJsonValue(track_new_versions));
    }
    if(transaction_id != nullptr && *transaction_id != QString("")){
        toJsonValue(QString("transactionId"), transaction_id, obj, QString("QString"));
    }
    if(m_update_sketch_info_isSet){
        obj.insert("updateSketchInfo", QJsonValue(update_sketch_info));
    }

    return obj;
}

bool
OAIBTAppElementReferenceParams::isHasDocumentMicroversions() {
    return has_document_microversions;
}
void
OAIBTAppElementReferenceParams::setHasDocumentMicroversions(bool has_document_microversions) {
    this->has_document_microversions = has_document_microversions;
    this->m_has_document_microversions_isSet = true;
}

QString*
OAIBTAppElementReferenceParams::getIdTag() {
    return id_tag;
}
void
OAIBTAppElementReferenceParams::setIdTag(QString* id_tag) {
    this->id_tag = id_tag;
    this->m_id_tag_isSet = true;
}

QString*
OAIBTAppElementReferenceParams::getIdTagMicroversionId() {
    return id_tag_microversion_id;
}
void
OAIBTAppElementReferenceParams::setIdTagMicroversionId(QString* id_tag_microversion_id) {
    this->id_tag_microversion_id = id_tag_microversion_id;
    this->m_id_tag_microversion_id_isSet = true;
}

bool
OAIBTAppElementReferenceParams::isIsSketchOnly() {
    return is_sketch_only;
}
void
OAIBTAppElementReferenceParams::setIsSketchOnly(bool is_sketch_only) {
    this->is_sketch_only = is_sketch_only;
    this->m_is_sketch_only_isSet = true;
}

QString*
OAIBTAppElementReferenceParams::getParentChangeId() {
    return parent_change_id;
}
void
OAIBTAppElementReferenceParams::setParentChangeId(QString* parent_change_id) {
    this->parent_change_id = parent_change_id;
    this->m_parent_change_id_isSet = true;
}

QString*
OAIBTAppElementReferenceParams::getPartNumber() {
    return part_number;
}
void
OAIBTAppElementReferenceParams::setPartNumber(QString* part_number) {
    this->part_number = part_number;
    this->m_part_number_isSet = true;
}

bool
OAIBTAppElementReferenceParams::isPureSketch() {
    return pure_sketch;
}
void
OAIBTAppElementReferenceParams::setPureSketch(bool pure_sketch) {
    this->pure_sketch = pure_sketch;
    this->m_pure_sketch_isSet = true;
}

qint32
OAIBTAppElementReferenceParams::getReferenceType() {
    return reference_type;
}
void
OAIBTAppElementReferenceParams::setReferenceType(qint32 reference_type) {
    this->reference_type = reference_type;
    this->m_reference_type_isSet = true;
}

bool
OAIBTAppElementReferenceParams::isReturnError() {
    return return_error;
}
void
OAIBTAppElementReferenceParams::setReturnError(bool return_error) {
    this->return_error = return_error;
    this->m_return_error_isSet = true;
}

QString*
OAIBTAppElementReferenceParams::getRevision() {
    return revision;
}
void
OAIBTAppElementReferenceParams::setRevision(QString* revision) {
    this->revision = revision;
    this->m_revision_isSet = true;
}

QList<QString*>*
OAIBTAppElementReferenceParams::getSketchIds() {
    return sketch_ids;
}
void
OAIBTAppElementReferenceParams::setSketchIds(QList<QString*>* sketch_ids) {
    this->sketch_ids = sketch_ids;
    this->m_sketch_ids_isSet = true;
}

QString*
OAIBTAppElementReferenceParams::getTargetConfiguration() {
    return target_configuration;
}
void
OAIBTAppElementReferenceParams::setTargetConfiguration(QString* target_configuration) {
    this->target_configuration = target_configuration;
    this->m_target_configuration_isSet = true;
}

QString*
OAIBTAppElementReferenceParams::getTargetDocumentId() {
    return target_document_id;
}
void
OAIBTAppElementReferenceParams::setTargetDocumentId(QString* target_document_id) {
    this->target_document_id = target_document_id;
    this->m_target_document_id_isSet = true;
}

QString*
OAIBTAppElementReferenceParams::getTargetElementId() {
    return target_element_id;
}
void
OAIBTAppElementReferenceParams::setTargetElementId(QString* target_element_id) {
    this->target_element_id = target_element_id;
    this->m_target_element_id_isSet = true;
}

QString*
OAIBTAppElementReferenceParams::getTargetMicroversionId() {
    return target_microversion_id;
}
void
OAIBTAppElementReferenceParams::setTargetMicroversionId(QString* target_microversion_id) {
    this->target_microversion_id = target_microversion_id;
    this->m_target_microversion_id_isSet = true;
}

QString*
OAIBTAppElementReferenceParams::getTargetVersionId() {
    return target_version_id;
}
void
OAIBTAppElementReferenceParams::setTargetVersionId(QString* target_version_id) {
    this->target_version_id = target_version_id;
    this->m_target_version_id_isSet = true;
}

bool
OAIBTAppElementReferenceParams::isTrackNewVersions() {
    return track_new_versions;
}
void
OAIBTAppElementReferenceParams::setTrackNewVersions(bool track_new_versions) {
    this->track_new_versions = track_new_versions;
    this->m_track_new_versions_isSet = true;
}

QString*
OAIBTAppElementReferenceParams::getTransactionId() {
    return transaction_id;
}
void
OAIBTAppElementReferenceParams::setTransactionId(QString* transaction_id) {
    this->transaction_id = transaction_id;
    this->m_transaction_id_isSet = true;
}

bool
OAIBTAppElementReferenceParams::isUpdateSketchInfo() {
    return update_sketch_info;
}
void
OAIBTAppElementReferenceParams::setUpdateSketchInfo(bool update_sketch_info) {
    this->update_sketch_info = update_sketch_info;
    this->m_update_sketch_info_isSet = true;
}


bool
OAIBTAppElementReferenceParams::isSet(){
    bool isObjectUpdated = false;
    do{
        if(m_has_document_microversions_isSet){ isObjectUpdated = true; break;}
        if(id_tag != nullptr && *id_tag != QString("")){ isObjectUpdated = true; break;}
        if(id_tag_microversion_id != nullptr && *id_tag_microversion_id != QString("")){ isObjectUpdated = true; break;}
        if(m_is_sketch_only_isSet){ isObjectUpdated = true; break;}
        if(parent_change_id != nullptr && *parent_change_id != QString("")){ isObjectUpdated = true; break;}
        if(part_number != nullptr && *part_number != QString("")){ isObjectUpdated = true; break;}
        if(m_pure_sketch_isSet){ isObjectUpdated = true; break;}
        if(m_reference_type_isSet){ isObjectUpdated = true; break;}
        if(m_return_error_isSet){ isObjectUpdated = true; break;}
        if(revision != nullptr && *revision != QString("")){ isObjectUpdated = true; break;}
        if(sketch_ids->size() > 0){ isObjectUpdated = true; break;}
        if(target_configuration != nullptr && *target_configuration != QString("")){ isObjectUpdated = true; break;}
        if(target_document_id != nullptr && *target_document_id != QString("")){ isObjectUpdated = true; break;}
        if(target_element_id != nullptr && *target_element_id != QString("")){ isObjectUpdated = true; break;}
        if(target_microversion_id != nullptr && *target_microversion_id != QString("")){ isObjectUpdated = true; break;}
        if(target_version_id != nullptr && *target_version_id != QString("")){ isObjectUpdated = true; break;}
        if(m_track_new_versions_isSet){ isObjectUpdated = true; break;}
        if(transaction_id != nullptr && *transaction_id != QString("")){ isObjectUpdated = true; break;}
        if(m_update_sketch_info_isSet){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

