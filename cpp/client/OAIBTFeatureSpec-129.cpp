/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * OpenAPI spec version: 1.111
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIBTFeatureSpec-129.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIBTFeatureSpec-129::OAIBTFeatureSpec-129(QString json) {
    init();
    this->fromJson(json);
}

OAIBTFeatureSpec-129::OAIBTFeatureSpec-129() {
    init();
}

OAIBTFeatureSpec-129::~OAIBTFeatureSpec-129() {
    this->cleanup();
}

void
OAIBTFeatureSpec-129::init() {
    additional_localized_strings = 0;
    m_additional_localized_strings_isSet = false;
    all_parameters = new QList<OAIBTParameterSpec-6*>();
    m_all_parameters_isSet = false;
    bt_type = new QString("");
    m_bt_type_isSet = false;
    editing_logic = new OAIBTEditingLogic-2350();
    m_editing_logic_isSet = false;
    feature_name_template = new QString("");
    m_feature_name_template_isSet = false;
    feature_type = new QString("");
    m_feature_type_isSet = false;
    feature_type_name = new QString("");
    m_feature_type_name_isSet = false;
    filter_selectors = new QList<QString*>();
    m_filter_selectors_isSet = false;
    full_feature_type = new QString("");
    m_full_feature_type_isSet = false;
    groups = new QList<OAIBTParameterGroupSpec-3469*>();
    m_groups_isSet = false;
    icon_uri = new QString("");
    m_icon_uri_isSet = false;
    language_version = 0;
    m_language_version_isSet = false;
    linked_location_name = new QString("");
    m_linked_location_name_isSet = false;
    localizable_name = new QString("");
    m_localizable_name_isSet = false;
    localized_name = new QString("");
    m_localized_name_isSet = false;
    location_infos = new QList<OAIBTLocationInfo-226*>();
    m_location_infos_isSet = false;
    manipulator_change_function = new QString("");
    m_manipulator_change_function_isSet = false;
    _namespace = new QString("");
    m__namespace_isSet = false;
    namespace_including_enums = new QString("");
    m_namespace_including_enums_isSet = false;
    namespace_the_source = false;
    m_namespace_the_source_isSet = false;
    parameters = new QList<OAIBTParameterSpec-6*>();
    m_parameters_isSet = false;
    signature = new QString("");
    m_signature_isSet = false;
    source_location = new OAIBTLocationInfo-226();
    m_source_location_isSet = false;
    source_microversion_id = new QString("");
    m_source_microversion_id_isSet = false;
    strings_to_localize = new QList<QString*>();
    m_strings_to_localize_isSet = false;
    table_spec = false;
    m_table_spec_isSet = false;
    ui_hints = new QList<Ui_hintsEnum*>();
    m_ui_hints_isSet = false;
}

void
OAIBTFeatureSpec-129::cleanup() {

    if(all_parameters != nullptr) { 
        auto arr = all_parameters;
        for(auto o: *arr) { 
            delete o;
        }
        delete all_parameters;
    }
    if(bt_type != nullptr) { 
        delete bt_type;
    }
    if(editing_logic != nullptr) { 
        delete editing_logic;
    }
    if(feature_name_template != nullptr) { 
        delete feature_name_template;
    }
    if(feature_type != nullptr) { 
        delete feature_type;
    }
    if(feature_type_name != nullptr) { 
        delete feature_type_name;
    }
    if(filter_selectors != nullptr) { 
        auto arr = filter_selectors;
        for(auto o: *arr) { 
            delete o;
        }
        delete filter_selectors;
    }
    if(full_feature_type != nullptr) { 
        delete full_feature_type;
    }
    if(groups != nullptr) { 
        auto arr = groups;
        for(auto o: *arr) { 
            delete o;
        }
        delete groups;
    }
    if(icon_uri != nullptr) { 
        delete icon_uri;
    }

    if(linked_location_name != nullptr) { 
        delete linked_location_name;
    }
    if(localizable_name != nullptr) { 
        delete localizable_name;
    }
    if(localized_name != nullptr) { 
        delete localized_name;
    }
    if(location_infos != nullptr) { 
        auto arr = location_infos;
        for(auto o: *arr) { 
            delete o;
        }
        delete location_infos;
    }
    if(manipulator_change_function != nullptr) { 
        delete manipulator_change_function;
    }
    if(_namespace != nullptr) { 
        delete _namespace;
    }
    if(namespace_including_enums != nullptr) { 
        delete namespace_including_enums;
    }

    if(parameters != nullptr) { 
        auto arr = parameters;
        for(auto o: *arr) { 
            delete o;
        }
        delete parameters;
    }
    if(signature != nullptr) { 
        delete signature;
    }
    if(source_location != nullptr) { 
        delete source_location;
    }
    if(source_microversion_id != nullptr) { 
        delete source_microversion_id;
    }
    if(strings_to_localize != nullptr) { 
        auto arr = strings_to_localize;
        for(auto o: *arr) { 
            delete o;
        }
        delete strings_to_localize;
    }

    if(ui_hints != nullptr) { 
        auto arr = ui_hints;
        for(auto o: *arr) { 
            delete o;
        }
        delete ui_hints;
    }
}

OAIBTFeatureSpec-129*
OAIBTFeatureSpec-129::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIBTFeatureSpec-129::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&additional_localized_strings, pJson["additionalLocalizedStrings"], "qint32", "");
    
    
    ::OpenAPI::setValue(&all_parameters, pJson["allParameters"], "QList", "OAIBTParameterSpec-6");
    ::OpenAPI::setValue(&bt_type, pJson["btType"], "QString", "QString");
    
    ::OpenAPI::setValue(&editing_logic, pJson["editingLogic"], "OAIBTEditingLogic-2350", "OAIBTEditingLogic-2350");
    
    ::OpenAPI::setValue(&feature_name_template, pJson["featureNameTemplate"], "QString", "QString");
    
    ::OpenAPI::setValue(&feature_type, pJson["featureType"], "QString", "QString");
    
    ::OpenAPI::setValue(&feature_type_name, pJson["featureTypeName"], "QString", "QString");
    
    
    ::OpenAPI::setValue(&filter_selectors, pJson["filterSelectors"], "QList", "QString");
    ::OpenAPI::setValue(&full_feature_type, pJson["fullFeatureType"], "QString", "QString");
    
    
    ::OpenAPI::setValue(&groups, pJson["groups"], "QList", "OAIBTParameterGroupSpec-3469");
    ::OpenAPI::setValue(&icon_uri, pJson["iconUri"], "QString", "QString");
    
    ::OpenAPI::setValue(&language_version, pJson["languageVersion"], "qint32", "");
    
    ::OpenAPI::setValue(&linked_location_name, pJson["linkedLocationName"], "QString", "QString");
    
    ::OpenAPI::setValue(&localizable_name, pJson["localizableName"], "QString", "QString");
    
    ::OpenAPI::setValue(&localized_name, pJson["localizedName"], "QString", "QString");
    
    
    ::OpenAPI::setValue(&location_infos, pJson["locationInfos"], "QList", "OAIBTLocationInfo-226");
    ::OpenAPI::setValue(&manipulator_change_function, pJson["manipulatorChangeFunction"], "QString", "QString");
    
    ::OpenAPI::setValue(&_namespace, pJson["namespace"], "QString", "QString");
    
    ::OpenAPI::setValue(&namespace_including_enums, pJson["namespaceIncludingEnums"], "QString", "QString");
    
    ::OpenAPI::setValue(&namespace_the_source, pJson["namespaceTheSource"], "bool", "");
    
    
    ::OpenAPI::setValue(&parameters, pJson["parameters"], "QList", "OAIBTParameterSpec-6");
    ::OpenAPI::setValue(&signature, pJson["signature"], "QString", "QString");
    
    ::OpenAPI::setValue(&source_location, pJson["sourceLocation"], "OAIBTLocationInfo-226", "OAIBTLocationInfo-226");
    
    ::OpenAPI::setValue(&source_microversion_id, pJson["sourceMicroversionId"], "QString", "QString");
    
    
    ::OpenAPI::setValue(&strings_to_localize, pJson["stringsToLocalize"], "QList", "QString");
    ::OpenAPI::setValue(&table_spec, pJson["tableSpec"], "bool", "");
    
    
    ::OpenAPI::setValue(&ui_hints, pJson["uiHints"], "QList", "QString");
}

QString
OAIBTFeatureSpec-129::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIBTFeatureSpec-129::asJsonObject() {
    QJsonObject obj;
    if(m_additional_localized_strings_isSet){
        obj.insert("additionalLocalizedStrings", QJsonValue(additional_localized_strings));
    }
    if(all_parameters->size() > 0){
        toJsonArray((QList<void*>*)all_parameters, obj, "allParameters", "OAIBTParameterSpec-6");
    }
    if(bt_type != nullptr && *bt_type != QString("")){
        toJsonValue(QString("btType"), bt_type, obj, QString("QString"));
    }
    if((editing_logic != nullptr) && (editing_logic->isSet())){
        toJsonValue(QString("editingLogic"), editing_logic, obj, QString("OAIBTEditingLogic-2350"));
    }
    if(feature_name_template != nullptr && *feature_name_template != QString("")){
        toJsonValue(QString("featureNameTemplate"), feature_name_template, obj, QString("QString"));
    }
    if(feature_type != nullptr && *feature_type != QString("")){
        toJsonValue(QString("featureType"), feature_type, obj, QString("QString"));
    }
    if(feature_type_name != nullptr && *feature_type_name != QString("")){
        toJsonValue(QString("featureTypeName"), feature_type_name, obj, QString("QString"));
    }
    if(filter_selectors->size() > 0){
        toJsonArray((QList<void*>*)filter_selectors, obj, "filterSelectors", "QString");
    }
    if(full_feature_type != nullptr && *full_feature_type != QString("")){
        toJsonValue(QString("fullFeatureType"), full_feature_type, obj, QString("QString"));
    }
    if(groups->size() > 0){
        toJsonArray((QList<void*>*)groups, obj, "groups", "OAIBTParameterGroupSpec-3469");
    }
    if(icon_uri != nullptr && *icon_uri != QString("")){
        toJsonValue(QString("iconUri"), icon_uri, obj, QString("QString"));
    }
    if(m_language_version_isSet){
        obj.insert("languageVersion", QJsonValue(language_version));
    }
    if(linked_location_name != nullptr && *linked_location_name != QString("")){
        toJsonValue(QString("linkedLocationName"), linked_location_name, obj, QString("QString"));
    }
    if(localizable_name != nullptr && *localizable_name != QString("")){
        toJsonValue(QString("localizableName"), localizable_name, obj, QString("QString"));
    }
    if(localized_name != nullptr && *localized_name != QString("")){
        toJsonValue(QString("localizedName"), localized_name, obj, QString("QString"));
    }
    if(location_infos->size() > 0){
        toJsonArray((QList<void*>*)location_infos, obj, "locationInfos", "OAIBTLocationInfo-226");
    }
    if(manipulator_change_function != nullptr && *manipulator_change_function != QString("")){
        toJsonValue(QString("manipulatorChangeFunction"), manipulator_change_function, obj, QString("QString"));
    }
    if(_namespace != nullptr && *_namespace != QString("")){
        toJsonValue(QString("namespace"), _namespace, obj, QString("QString"));
    }
    if(namespace_including_enums != nullptr && *namespace_including_enums != QString("")){
        toJsonValue(QString("namespaceIncludingEnums"), namespace_including_enums, obj, QString("QString"));
    }
    if(m_namespace_the_source_isSet){
        obj.insert("namespaceTheSource", QJsonValue(namespace_the_source));
    }
    if(parameters->size() > 0){
        toJsonArray((QList<void*>*)parameters, obj, "parameters", "OAIBTParameterSpec-6");
    }
    if(signature != nullptr && *signature != QString("")){
        toJsonValue(QString("signature"), signature, obj, QString("QString"));
    }
    if((source_location != nullptr) && (source_location->isSet())){
        toJsonValue(QString("sourceLocation"), source_location, obj, QString("OAIBTLocationInfo-226"));
    }
    if(source_microversion_id != nullptr && *source_microversion_id != QString("")){
        toJsonValue(QString("sourceMicroversionId"), source_microversion_id, obj, QString("QString"));
    }
    if(strings_to_localize->size() > 0){
        toJsonArray((QList<void*>*)strings_to_localize, obj, "stringsToLocalize", "QString");
    }
    if(m_table_spec_isSet){
        obj.insert("tableSpec", QJsonValue(table_spec));
    }
    if(ui_hints->size() > 0){
        toJsonArray((QList<void*>*)ui_hints, obj, "uiHints", "QString");
    }

    return obj;
}

qint32
OAIBTFeatureSpec-129::getAdditionalLocalizedStrings() {
    return additional_localized_strings;
}
void
OAIBTFeatureSpec-129::setAdditionalLocalizedStrings(qint32 additional_localized_strings) {
    this->additional_localized_strings = additional_localized_strings;
    this->m_additional_localized_strings_isSet = true;
}

QList<OAIBTParameterSpec-6*>*
OAIBTFeatureSpec-129::getAllParameters() {
    return all_parameters;
}
void
OAIBTFeatureSpec-129::setAllParameters(QList<OAIBTParameterSpec-6*>* all_parameters) {
    this->all_parameters = all_parameters;
    this->m_all_parameters_isSet = true;
}

QString*
OAIBTFeatureSpec-129::getBtType() {
    return bt_type;
}
void
OAIBTFeatureSpec-129::setBtType(QString* bt_type) {
    this->bt_type = bt_type;
    this->m_bt_type_isSet = true;
}

OAIBTEditingLogic-2350*
OAIBTFeatureSpec-129::getEditingLogic() {
    return editing_logic;
}
void
OAIBTFeatureSpec-129::setEditingLogic(OAIBTEditingLogic-2350* editing_logic) {
    this->editing_logic = editing_logic;
    this->m_editing_logic_isSet = true;
}

QString*
OAIBTFeatureSpec-129::getFeatureNameTemplate() {
    return feature_name_template;
}
void
OAIBTFeatureSpec-129::setFeatureNameTemplate(QString* feature_name_template) {
    this->feature_name_template = feature_name_template;
    this->m_feature_name_template_isSet = true;
}

QString*
OAIBTFeatureSpec-129::getFeatureType() {
    return feature_type;
}
void
OAIBTFeatureSpec-129::setFeatureType(QString* feature_type) {
    this->feature_type = feature_type;
    this->m_feature_type_isSet = true;
}

QString*
OAIBTFeatureSpec-129::getFeatureTypeName() {
    return feature_type_name;
}
void
OAIBTFeatureSpec-129::setFeatureTypeName(QString* feature_type_name) {
    this->feature_type_name = feature_type_name;
    this->m_feature_type_name_isSet = true;
}

QList<QString*>*
OAIBTFeatureSpec-129::getFilterSelectors() {
    return filter_selectors;
}
void
OAIBTFeatureSpec-129::setFilterSelectors(QList<QString*>* filter_selectors) {
    this->filter_selectors = filter_selectors;
    this->m_filter_selectors_isSet = true;
}

QString*
OAIBTFeatureSpec-129::getFullFeatureType() {
    return full_feature_type;
}
void
OAIBTFeatureSpec-129::setFullFeatureType(QString* full_feature_type) {
    this->full_feature_type = full_feature_type;
    this->m_full_feature_type_isSet = true;
}

QList<OAIBTParameterGroupSpec-3469*>*
OAIBTFeatureSpec-129::getGroups() {
    return groups;
}
void
OAIBTFeatureSpec-129::setGroups(QList<OAIBTParameterGroupSpec-3469*>* groups) {
    this->groups = groups;
    this->m_groups_isSet = true;
}

QString*
OAIBTFeatureSpec-129::getIconUri() {
    return icon_uri;
}
void
OAIBTFeatureSpec-129::setIconUri(QString* icon_uri) {
    this->icon_uri = icon_uri;
    this->m_icon_uri_isSet = true;
}

qint32
OAIBTFeatureSpec-129::getLanguageVersion() {
    return language_version;
}
void
OAIBTFeatureSpec-129::setLanguageVersion(qint32 language_version) {
    this->language_version = language_version;
    this->m_language_version_isSet = true;
}

QString*
OAIBTFeatureSpec-129::getLinkedLocationName() {
    return linked_location_name;
}
void
OAIBTFeatureSpec-129::setLinkedLocationName(QString* linked_location_name) {
    this->linked_location_name = linked_location_name;
    this->m_linked_location_name_isSet = true;
}

QString*
OAIBTFeatureSpec-129::getLocalizableName() {
    return localizable_name;
}
void
OAIBTFeatureSpec-129::setLocalizableName(QString* localizable_name) {
    this->localizable_name = localizable_name;
    this->m_localizable_name_isSet = true;
}

QString*
OAIBTFeatureSpec-129::getLocalizedName() {
    return localized_name;
}
void
OAIBTFeatureSpec-129::setLocalizedName(QString* localized_name) {
    this->localized_name = localized_name;
    this->m_localized_name_isSet = true;
}

QList<OAIBTLocationInfo-226*>*
OAIBTFeatureSpec-129::getLocationInfos() {
    return location_infos;
}
void
OAIBTFeatureSpec-129::setLocationInfos(QList<OAIBTLocationInfo-226*>* location_infos) {
    this->location_infos = location_infos;
    this->m_location_infos_isSet = true;
}

QString*
OAIBTFeatureSpec-129::getManipulatorChangeFunction() {
    return manipulator_change_function;
}
void
OAIBTFeatureSpec-129::setManipulatorChangeFunction(QString* manipulator_change_function) {
    this->manipulator_change_function = manipulator_change_function;
    this->m_manipulator_change_function_isSet = true;
}

QString*
OAIBTFeatureSpec-129::getNamespace() {
    return _namespace;
}
void
OAIBTFeatureSpec-129::setNamespace(QString* _namespace) {
    this->_namespace = _namespace;
    this->m__namespace_isSet = true;
}

QString*
OAIBTFeatureSpec-129::getNamespaceIncludingEnums() {
    return namespace_including_enums;
}
void
OAIBTFeatureSpec-129::setNamespaceIncludingEnums(QString* namespace_including_enums) {
    this->namespace_including_enums = namespace_including_enums;
    this->m_namespace_including_enums_isSet = true;
}

bool
OAIBTFeatureSpec-129::isNamespaceTheSource() {
    return namespace_the_source;
}
void
OAIBTFeatureSpec-129::setNamespaceTheSource(bool namespace_the_source) {
    this->namespace_the_source = namespace_the_source;
    this->m_namespace_the_source_isSet = true;
}

QList<OAIBTParameterSpec-6*>*
OAIBTFeatureSpec-129::getParameters() {
    return parameters;
}
void
OAIBTFeatureSpec-129::setParameters(QList<OAIBTParameterSpec-6*>* parameters) {
    this->parameters = parameters;
    this->m_parameters_isSet = true;
}

QString*
OAIBTFeatureSpec-129::getSignature() {
    return signature;
}
void
OAIBTFeatureSpec-129::setSignature(QString* signature) {
    this->signature = signature;
    this->m_signature_isSet = true;
}

OAIBTLocationInfo-226*
OAIBTFeatureSpec-129::getSourceLocation() {
    return source_location;
}
void
OAIBTFeatureSpec-129::setSourceLocation(OAIBTLocationInfo-226* source_location) {
    this->source_location = source_location;
    this->m_source_location_isSet = true;
}

QString*
OAIBTFeatureSpec-129::getSourceMicroversionId() {
    return source_microversion_id;
}
void
OAIBTFeatureSpec-129::setSourceMicroversionId(QString* source_microversion_id) {
    this->source_microversion_id = source_microversion_id;
    this->m_source_microversion_id_isSet = true;
}

QList<QString*>*
OAIBTFeatureSpec-129::getStringsToLocalize() {
    return strings_to_localize;
}
void
OAIBTFeatureSpec-129::setStringsToLocalize(QList<QString*>* strings_to_localize) {
    this->strings_to_localize = strings_to_localize;
    this->m_strings_to_localize_isSet = true;
}

bool
OAIBTFeatureSpec-129::isTableSpec() {
    return table_spec;
}
void
OAIBTFeatureSpec-129::setTableSpec(bool table_spec) {
    this->table_spec = table_spec;
    this->m_table_spec_isSet = true;
}

QList<QString*>*
OAIBTFeatureSpec-129::getUiHints() {
    return ui_hints;
}
void
OAIBTFeatureSpec-129::setUiHints(QList<QString*>* ui_hints) {
    this->ui_hints = ui_hints;
    this->m_ui_hints_isSet = true;
}


bool
OAIBTFeatureSpec-129::isSet(){
    bool isObjectUpdated = false;
    do{
        if(m_additional_localized_strings_isSet){ isObjectUpdated = true; break;}
        if(all_parameters->size() > 0){ isObjectUpdated = true; break;}
        if(bt_type != nullptr && *bt_type != QString("")){ isObjectUpdated = true; break;}
        if(editing_logic != nullptr && editing_logic->isSet()){ isObjectUpdated = true; break;}
        if(feature_name_template != nullptr && *feature_name_template != QString("")){ isObjectUpdated = true; break;}
        if(feature_type != nullptr && *feature_type != QString("")){ isObjectUpdated = true; break;}
        if(feature_type_name != nullptr && *feature_type_name != QString("")){ isObjectUpdated = true; break;}
        if(filter_selectors->size() > 0){ isObjectUpdated = true; break;}
        if(full_feature_type != nullptr && *full_feature_type != QString("")){ isObjectUpdated = true; break;}
        if(groups->size() > 0){ isObjectUpdated = true; break;}
        if(icon_uri != nullptr && *icon_uri != QString("")){ isObjectUpdated = true; break;}
        if(m_language_version_isSet){ isObjectUpdated = true; break;}
        if(linked_location_name != nullptr && *linked_location_name != QString("")){ isObjectUpdated = true; break;}
        if(localizable_name != nullptr && *localizable_name != QString("")){ isObjectUpdated = true; break;}
        if(localized_name != nullptr && *localized_name != QString("")){ isObjectUpdated = true; break;}
        if(location_infos->size() > 0){ isObjectUpdated = true; break;}
        if(manipulator_change_function != nullptr && *manipulator_change_function != QString("")){ isObjectUpdated = true; break;}
        if(_namespace != nullptr && *_namespace != QString("")){ isObjectUpdated = true; break;}
        if(namespace_including_enums != nullptr && *namespace_including_enums != QString("")){ isObjectUpdated = true; break;}
        if(m_namespace_the_source_isSet){ isObjectUpdated = true; break;}
        if(parameters->size() > 0){ isObjectUpdated = true; break;}
        if(signature != nullptr && *signature != QString("")){ isObjectUpdated = true; break;}
        if(source_location != nullptr && source_location->isSet()){ isObjectUpdated = true; break;}
        if(source_microversion_id != nullptr && *source_microversion_id != QString("")){ isObjectUpdated = true; break;}
        if(strings_to_localize->size() > 0){ isObjectUpdated = true; break;}
        if(m_table_spec_isSet){ isObjectUpdated = true; break;}
        if(ui_hints->size() > 0){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

