/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * OpenAPI spec version: 1.111
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIBTSpunDescription-657.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIBTSpunDescription-657::OAIBTSpunDescription-657(QString json) {
    init();
    this->fromJson(json);
}

OAIBTSpunDescription-657::OAIBTSpunDescription-657() {
    init();
}

OAIBTSpunDescription-657::~OAIBTSpunDescription-657() {
    this->cleanup();
}

void
OAIBTSpunDescription-657::init() {
    bt_type = new QString("");
    m_bt_type_isSet = false;
    type = new QString("");
    m_type_isSet = false;
    axis = new OAIBTVector3d-389();
    m_axis_isSet = false;
    origin = new OAIBTVector3d-389();
    m_origin_isSet = false;
}

void
OAIBTSpunDescription-657::cleanup() {
    if(bt_type != nullptr) { 
        delete bt_type;
    }
    if(type != nullptr) { 
        delete type;
    }
    if(axis != nullptr) { 
        delete axis;
    }
    if(origin != nullptr) { 
        delete origin;
    }
}

OAIBTSpunDescription-657*
OAIBTSpunDescription-657::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIBTSpunDescription-657::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&bt_type, pJson["btType"], "QString", "QString");
    
    ::OpenAPI::setValue(&type, pJson["type"], "QString", "QString");
    
    ::OpenAPI::setValue(&axis, pJson["axis"], "OAIBTVector3d-389", "OAIBTVector3d-389");
    
    ::OpenAPI::setValue(&origin, pJson["origin"], "OAIBTVector3d-389", "OAIBTVector3d-389");
    
}

QString
OAIBTSpunDescription-657::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIBTSpunDescription-657::asJsonObject() {
    QJsonObject obj;
    if(bt_type != nullptr && *bt_type != QString("")){
        toJsonValue(QString("btType"), bt_type, obj, QString("QString"));
    }
    if(type != nullptr && *type != QString("")){
        toJsonValue(QString("type"), type, obj, QString("QString"));
    }
    if((axis != nullptr) && (axis->isSet())){
        toJsonValue(QString("axis"), axis, obj, QString("OAIBTVector3d-389"));
    }
    if((origin != nullptr) && (origin->isSet())){
        toJsonValue(QString("origin"), origin, obj, QString("OAIBTVector3d-389"));
    }

    return obj;
}

QString*
OAIBTSpunDescription-657::getBtType() {
    return bt_type;
}
void
OAIBTSpunDescription-657::setBtType(QString* bt_type) {
    this->bt_type = bt_type;
    this->m_bt_type_isSet = true;
}

QString*
OAIBTSpunDescription-657::getType() {
    return type;
}
void
OAIBTSpunDescription-657::setType(QString* type) {
    this->type = type;
    this->m_type_isSet = true;
}

OAIBTVector3d-389*
OAIBTSpunDescription-657::getAxis() {
    return axis;
}
void
OAIBTSpunDescription-657::setAxis(OAIBTVector3d-389* axis) {
    this->axis = axis;
    this->m_axis_isSet = true;
}

OAIBTVector3d-389*
OAIBTSpunDescription-657::getOrigin() {
    return origin;
}
void
OAIBTSpunDescription-657::setOrigin(OAIBTVector3d-389* origin) {
    this->origin = origin;
    this->m_origin_isSet = true;
}


bool
OAIBTSpunDescription-657::isSet(){
    bool isObjectUpdated = false;
    do{
        if(bt_type != nullptr && *bt_type != QString("")){ isObjectUpdated = true; break;}
        if(type != nullptr && *type != QString("")){ isObjectUpdated = true; break;}
        if(axis != nullptr && axis->isSet()){ isObjectUpdated = true; break;}
        if(origin != nullptr && origin->isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

