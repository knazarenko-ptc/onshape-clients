/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * OpenAPI spec version: 1.111
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIBTTableCellParameter-2399.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIBTTableCellParameter-2399::OAIBTTableCellParameter-2399(QString json) {
    init();
    this->fromJson(json);
}

OAIBTTableCellParameter-2399::OAIBTTableCellParameter-2399() {
    init();
}

OAIBTTableCellParameter-2399::~OAIBTTableCellParameter-2399() {
    this->cleanup();
}

void
OAIBTTableCellParameter-2399::init() {
    bt_type = new QString("");
    m_bt_type_isSet = false;
    is_ever_visible = false;
    m_is_ever_visible_isSet = false;
    is_read_only = false;
    m_is_read_only_isSet = false;
    error = new QString("");
    m_error_isSet = false;
    override_spec = new OAIBTParameterSpec-6();
    m_override_spec_isSet = false;
    parameter = new OAIBTMParameter-1();
    m_parameter_isSet = false;
}

void
OAIBTTableCellParameter-2399::cleanup() {
    if(bt_type != nullptr) { 
        delete bt_type;
    }


    if(error != nullptr) { 
        delete error;
    }
    if(override_spec != nullptr) { 
        delete override_spec;
    }
    if(parameter != nullptr) { 
        delete parameter;
    }
}

OAIBTTableCellParameter-2399*
OAIBTTableCellParameter-2399::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIBTTableCellParameter-2399::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&bt_type, pJson["btType"], "QString", "QString");
    
    ::OpenAPI::setValue(&is_ever_visible, pJson["isEverVisible"], "bool", "");
    
    ::OpenAPI::setValue(&is_read_only, pJson["isReadOnly"], "bool", "");
    
    ::OpenAPI::setValue(&error, pJson["error"], "QString", "QString");
    
    ::OpenAPI::setValue(&override_spec, pJson["overrideSpec"], "OAIBTParameterSpec-6", "OAIBTParameterSpec-6");
    
    ::OpenAPI::setValue(&parameter, pJson["parameter"], "OAIBTMParameter-1", "OAIBTMParameter-1");
    
}

QString
OAIBTTableCellParameter-2399::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIBTTableCellParameter-2399::asJsonObject() {
    QJsonObject obj;
    if(bt_type != nullptr && *bt_type != QString("")){
        toJsonValue(QString("btType"), bt_type, obj, QString("QString"));
    }
    if(m_is_ever_visible_isSet){
        obj.insert("isEverVisible", QJsonValue(is_ever_visible));
    }
    if(m_is_read_only_isSet){
        obj.insert("isReadOnly", QJsonValue(is_read_only));
    }
    if(error != nullptr && *error != QString("")){
        toJsonValue(QString("error"), error, obj, QString("QString"));
    }
    if((override_spec != nullptr) && (override_spec->isSet())){
        toJsonValue(QString("overrideSpec"), override_spec, obj, QString("OAIBTParameterSpec-6"));
    }
    if((parameter != nullptr) && (parameter->isSet())){
        toJsonValue(QString("parameter"), parameter, obj, QString("OAIBTMParameter-1"));
    }

    return obj;
}

QString*
OAIBTTableCellParameter-2399::getBtType() {
    return bt_type;
}
void
OAIBTTableCellParameter-2399::setBtType(QString* bt_type) {
    this->bt_type = bt_type;
    this->m_bt_type_isSet = true;
}

bool
OAIBTTableCellParameter-2399::isIsEverVisible() {
    return is_ever_visible;
}
void
OAIBTTableCellParameter-2399::setIsEverVisible(bool is_ever_visible) {
    this->is_ever_visible = is_ever_visible;
    this->m_is_ever_visible_isSet = true;
}

bool
OAIBTTableCellParameter-2399::isIsReadOnly() {
    return is_read_only;
}
void
OAIBTTableCellParameter-2399::setIsReadOnly(bool is_read_only) {
    this->is_read_only = is_read_only;
    this->m_is_read_only_isSet = true;
}

QString*
OAIBTTableCellParameter-2399::getError() {
    return error;
}
void
OAIBTTableCellParameter-2399::setError(QString* error) {
    this->error = error;
    this->m_error_isSet = true;
}

OAIBTParameterSpec-6*
OAIBTTableCellParameter-2399::getOverrideSpec() {
    return override_spec;
}
void
OAIBTTableCellParameter-2399::setOverrideSpec(OAIBTParameterSpec-6* override_spec) {
    this->override_spec = override_spec;
    this->m_override_spec_isSet = true;
}

OAIBTMParameter-1*
OAIBTTableCellParameter-2399::getParameter() {
    return parameter;
}
void
OAIBTTableCellParameter-2399::setParameter(OAIBTMParameter-1* parameter) {
    this->parameter = parameter;
    this->m_parameter_isSet = true;
}


bool
OAIBTTableCellParameter-2399::isSet(){
    bool isObjectUpdated = false;
    do{
        if(bt_type != nullptr && *bt_type != QString("")){ isObjectUpdated = true; break;}
        if(m_is_ever_visible_isSet){ isObjectUpdated = true; break;}
        if(m_is_read_only_isSet){ isObjectUpdated = true; break;}
        if(error != nullptr && *error != QString("")){ isObjectUpdated = true; break;}
        if(override_spec != nullptr && override_spec->isSet()){ isObjectUpdated = true; break;}
        if(parameter != nullptr && parameter->isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

