/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * OpenAPI spec version: 1.111
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIBTTableResponse-1546.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIBTTableResponse-1546::OAIBTTableResponse-1546(QString json) {
    init();
    this->fromJson(json);
}

OAIBTTableResponse-1546::OAIBTTableResponse-1546() {
    init();
}

OAIBTTableResponse-1546::~OAIBTTableResponse-1546() {
    this->cleanup();
}

void
OAIBTTableResponse-1546::init() {
    source_microversion = new QString("");
    m_source_microversion_isSet = false;
    table = new OAIBTTable-1825();
    m_table_isSet = false;
}

void
OAIBTTableResponse-1546::cleanup() {
    if(source_microversion != nullptr) { 
        delete source_microversion;
    }
    if(table != nullptr) { 
        delete table;
    }
}

OAIBTTableResponse-1546*
OAIBTTableResponse-1546::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIBTTableResponse-1546::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&source_microversion, pJson["sourceMicroversion"], "QString", "QString");
    
    ::OpenAPI::setValue(&table, pJson["table"], "OAIBTTable-1825", "OAIBTTable-1825");
    
}

QString
OAIBTTableResponse-1546::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIBTTableResponse-1546::asJsonObject() {
    QJsonObject obj;
    if(source_microversion != nullptr && *source_microversion != QString("")){
        toJsonValue(QString("sourceMicroversion"), source_microversion, obj, QString("QString"));
    }
    if((table != nullptr) && (table->isSet())){
        toJsonValue(QString("table"), table, obj, QString("OAIBTTable-1825"));
    }

    return obj;
}

QString*
OAIBTTableResponse-1546::getSourceMicroversion() {
    return source_microversion;
}
void
OAIBTTableResponse-1546::setSourceMicroversion(QString* source_microversion) {
    this->source_microversion = source_microversion;
    this->m_source_microversion_isSet = true;
}

OAIBTTable-1825*
OAIBTTableResponse-1546::getTable() {
    return table;
}
void
OAIBTTableResponse-1546::setTable(OAIBTTable-1825* table) {
    this->table = table;
    this->m_table_isSet = true;
}


bool
OAIBTTableResponse-1546::isSet(){
    bool isObjectUpdated = false;
    do{
        if(source_microversion != nullptr && *source_microversion != QString("")){ isObjectUpdated = true; break;}
        if(table != nullptr && table->isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

