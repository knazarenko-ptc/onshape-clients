/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * OpenAPI spec version: 1.111
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIBTMConfiguredValue-1341.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIBTMConfiguredValue-1341::OAIBTMConfiguredValue-1341(QString json) {
    init();
    this->fromJson(json);
}

OAIBTMConfiguredValue-1341::OAIBTMConfiguredValue-1341() {
    init();
}

OAIBTMConfiguredValue-1341::~OAIBTMConfiguredValue-1341() {
    this->cleanup();
}

void
OAIBTMConfiguredValue-1341::init() {
    bt_type = new QString("");
    m_bt_type_isSet = false;
    configuration_value_string = new QString("");
    m_configuration_value_string_isSet = false;
    import_microversion = new QString("");
    m_import_microversion_isSet = false;
    node_id = new QString("");
    m_node_id_isSet = false;
    value = new OAIBTMParameter-1();
    m_value_isSet = false;
}

void
OAIBTMConfiguredValue-1341::cleanup() {
    if(bt_type != nullptr) { 
        delete bt_type;
    }
    if(configuration_value_string != nullptr) { 
        delete configuration_value_string;
    }
    if(import_microversion != nullptr) { 
        delete import_microversion;
    }
    if(node_id != nullptr) { 
        delete node_id;
    }
    if(value != nullptr) { 
        delete value;
    }
}

OAIBTMConfiguredValue-1341*
OAIBTMConfiguredValue-1341::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIBTMConfiguredValue-1341::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&bt_type, pJson["btType"], "QString", "QString");
    
    ::OpenAPI::setValue(&configuration_value_string, pJson["configurationValueString"], "QString", "QString");
    
    ::OpenAPI::setValue(&import_microversion, pJson["importMicroversion"], "QString", "QString");
    
    ::OpenAPI::setValue(&node_id, pJson["nodeId"], "QString", "QString");
    
    ::OpenAPI::setValue(&value, pJson["value"], "OAIBTMParameter-1", "OAIBTMParameter-1");
    
}

QString
OAIBTMConfiguredValue-1341::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIBTMConfiguredValue-1341::asJsonObject() {
    QJsonObject obj;
    if(bt_type != nullptr && *bt_type != QString("")){
        toJsonValue(QString("btType"), bt_type, obj, QString("QString"));
    }
    if(configuration_value_string != nullptr && *configuration_value_string != QString("")){
        toJsonValue(QString("configurationValueString"), configuration_value_string, obj, QString("QString"));
    }
    if(import_microversion != nullptr && *import_microversion != QString("")){
        toJsonValue(QString("importMicroversion"), import_microversion, obj, QString("QString"));
    }
    if(node_id != nullptr && *node_id != QString("")){
        toJsonValue(QString("nodeId"), node_id, obj, QString("QString"));
    }
    if((value != nullptr) && (value->isSet())){
        toJsonValue(QString("value"), value, obj, QString("OAIBTMParameter-1"));
    }

    return obj;
}

QString*
OAIBTMConfiguredValue-1341::getBtType() {
    return bt_type;
}
void
OAIBTMConfiguredValue-1341::setBtType(QString* bt_type) {
    this->bt_type = bt_type;
    this->m_bt_type_isSet = true;
}

QString*
OAIBTMConfiguredValue-1341::getConfigurationValueString() {
    return configuration_value_string;
}
void
OAIBTMConfiguredValue-1341::setConfigurationValueString(QString* configuration_value_string) {
    this->configuration_value_string = configuration_value_string;
    this->m_configuration_value_string_isSet = true;
}

QString*
OAIBTMConfiguredValue-1341::getImportMicroversion() {
    return import_microversion;
}
void
OAIBTMConfiguredValue-1341::setImportMicroversion(QString* import_microversion) {
    this->import_microversion = import_microversion;
    this->m_import_microversion_isSet = true;
}

QString*
OAIBTMConfiguredValue-1341::getNodeId() {
    return node_id;
}
void
OAIBTMConfiguredValue-1341::setNodeId(QString* node_id) {
    this->node_id = node_id;
    this->m_node_id_isSet = true;
}

OAIBTMParameter-1*
OAIBTMConfiguredValue-1341::getValue() {
    return value;
}
void
OAIBTMConfiguredValue-1341::setValue(OAIBTMParameter-1* value) {
    this->value = value;
    this->m_value_isSet = true;
}


bool
OAIBTMConfiguredValue-1341::isSet(){
    bool isObjectUpdated = false;
    do{
        if(bt_type != nullptr && *bt_type != QString("")){ isObjectUpdated = true; break;}
        if(configuration_value_string != nullptr && *configuration_value_string != QString("")){ isObjectUpdated = true; break;}
        if(import_microversion != nullptr && *import_microversion != QString("")){ isObjectUpdated = true; break;}
        if(node_id != nullptr && *node_id != QString("")){ isObjectUpdated = true; break;}
        if(value != nullptr && value->isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

