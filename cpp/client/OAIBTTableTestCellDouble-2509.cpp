/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * OpenAPI spec version: 1.111
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIBTTableTestCellDouble-2509.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIBTTableTestCellDouble-2509::OAIBTTableTestCellDouble-2509(QString json) {
    init();
    this->fromJson(json);
}

OAIBTTableTestCellDouble-2509::OAIBTTableTestCellDouble-2509() {
    init();
}

OAIBTTableTestCellDouble-2509::~OAIBTTableTestCellDouble-2509() {
    this->cleanup();
}

void
OAIBTTableTestCellDouble-2509::init() {
    bt_type = new QString("");
    m_bt_type_isSet = false;
    is_ever_visible = false;
    m_is_ever_visible_isSet = false;
    is_read_only = false;
    m_is_read_only_isSet = false;
    cell_value = 0.0;
    m_cell_value_isSet = false;
}

void
OAIBTTableTestCellDouble-2509::cleanup() {
    if(bt_type != nullptr) { 
        delete bt_type;
    }



}

OAIBTTableTestCellDouble-2509*
OAIBTTableTestCellDouble-2509::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIBTTableTestCellDouble-2509::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&bt_type, pJson["btType"], "QString", "QString");
    
    ::OpenAPI::setValue(&is_ever_visible, pJson["isEverVisible"], "bool", "");
    
    ::OpenAPI::setValue(&is_read_only, pJson["isReadOnly"], "bool", "");
    
    ::OpenAPI::setValue(&cell_value, pJson["cellValue"], "double", "");
    
}

QString
OAIBTTableTestCellDouble-2509::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIBTTableTestCellDouble-2509::asJsonObject() {
    QJsonObject obj;
    if(bt_type != nullptr && *bt_type != QString("")){
        toJsonValue(QString("btType"), bt_type, obj, QString("QString"));
    }
    if(m_is_ever_visible_isSet){
        obj.insert("isEverVisible", QJsonValue(is_ever_visible));
    }
    if(m_is_read_only_isSet){
        obj.insert("isReadOnly", QJsonValue(is_read_only));
    }
    if(m_cell_value_isSet){
        obj.insert("cellValue", QJsonValue(cell_value));
    }

    return obj;
}

QString*
OAIBTTableTestCellDouble-2509::getBtType() {
    return bt_type;
}
void
OAIBTTableTestCellDouble-2509::setBtType(QString* bt_type) {
    this->bt_type = bt_type;
    this->m_bt_type_isSet = true;
}

bool
OAIBTTableTestCellDouble-2509::isIsEverVisible() {
    return is_ever_visible;
}
void
OAIBTTableTestCellDouble-2509::setIsEverVisible(bool is_ever_visible) {
    this->is_ever_visible = is_ever_visible;
    this->m_is_ever_visible_isSet = true;
}

bool
OAIBTTableTestCellDouble-2509::isIsReadOnly() {
    return is_read_only;
}
void
OAIBTTableTestCellDouble-2509::setIsReadOnly(bool is_read_only) {
    this->is_read_only = is_read_only;
    this->m_is_read_only_isSet = true;
}

double
OAIBTTableTestCellDouble-2509::getCellValue() {
    return cell_value;
}
void
OAIBTTableTestCellDouble-2509::setCellValue(double cell_value) {
    this->cell_value = cell_value;
    this->m_cell_value_isSet = true;
}


bool
OAIBTTableTestCellDouble-2509::isSet(){
    bool isObjectUpdated = false;
    do{
        if(bt_type != nullptr && *bt_type != QString("")){ isObjectUpdated = true; break;}
        if(m_is_ever_visible_isSet){ isObjectUpdated = true; break;}
        if(m_is_read_only_isSet){ isObjectUpdated = true; break;}
        if(m_cell_value_isSet){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

