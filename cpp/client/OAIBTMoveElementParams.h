/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * OpenAPI spec version: 1.111
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIBTMoveElementParams.h
 *
 * 
 */

#ifndef OAIBTMoveElementParams_H_
#define OAIBTMoveElementParams_H_

#include <QJsonObject>


#include <QByteArray>
#include <QList>
#include <QMap>
#include <QString>

#include "OAIObject.h"

namespace OpenAPI {

class OAIBTMoveElementParams: public OAIObject {
public:
    OAIBTMoveElementParams();
    OAIBTMoveElementParams(QString json);
    ~OAIBTMoveElementParams();
    void init();
    void cleanup();

    QString asJson () override;
    QJsonObject asJsonObject() override;
    void fromJsonObject(QJsonObject json) override;
    OAIBTMoveElementParams* fromJson(QString jsonString) override;

    QString* getAnchorElementId();
    void setAnchorElementId(QString* anchor_element_id);

    QString* getDescription();
    void setDescription(QString* description);

    QMap<QString, QString*>* getElementOriginalToNewMap();
    void setElementOriginalToNewMap(QMap<QString, QString*>* element_original_to_new_map);

    QList<QString*>* getElements();
    void setElements(QList<QString*>* elements);

    bool isGenerateUnknownMessages();
    void setGenerateUnknownMessages(bool generate_unknown_messages);

    QList<QByteArray*>* getImportData();
    void setImportData(QList<QByteArray*>* import_data);

    bool isIsCopy();
    void setIsCopy(bool is_copy);

    bool isIsDeepCopy();
    void setIsDeepCopy(bool is_deep_copy);

    bool isIsGroupAnchor();
    void setIsGroupAnchor(bool is_group_anchor);

    bool isIsNewDocument();
    void setIsNewDocument(bool is_new_document);

    bool isIsPublic();
    void setIsPublic(bool is_public);

    bool isIsSelectivePartOut();
    void setIsSelectivePartOut(bool is_selective_part_out);

    QString* getName();
    void setName(QString* name);

    bool isNeedNewVersion();
    void setNeedNewVersion(bool need_new_version);

    QString* getOwnerEmail();
    void setOwnerEmail(QString* owner_email);

    QString* getOwnerId();
    void setOwnerId(QString* owner_id);

    qint32 getOwnerType();
    void setOwnerType(qint32 owner_type);

    QString* getParentId();
    void setParentId(QString* parent_id);

    QString* getProjectId();
    void setProjectId(QString* project_id);

    QString* getSourceDocumentId();
    void setSourceDocumentId(QString* source_document_id);

    QString* getSourceWorkspaceId();
    void setSourceWorkspaceId(QString* source_workspace_id);

    QList<QString*>* getTags();
    void setTags(QList<QString*>* tags);

    QString* getTargetDocumentId();
    void setTargetDocumentId(QString* target_document_id);

    QString* getTargetWorkspaceId();
    void setTargetWorkspaceId(QString* target_workspace_id);

    QString* getVersionName();
    void setVersionName(QString* version_name);


    virtual bool isSet() override;

private:
    QString* anchor_element_id;
    bool m_anchor_element_id_isSet;

    QString* description;
    bool m_description_isSet;

    QMap<QString, QString*>* element_original_to_new_map;
    bool m_element_original_to_new_map_isSet;

    QList<QString*>* elements;
    bool m_elements_isSet;

    bool generate_unknown_messages;
    bool m_generate_unknown_messages_isSet;

    QList<QByteArray*>* import_data;
    bool m_import_data_isSet;

    bool is_copy;
    bool m_is_copy_isSet;

    bool is_deep_copy;
    bool m_is_deep_copy_isSet;

    bool is_group_anchor;
    bool m_is_group_anchor_isSet;

    bool is_new_document;
    bool m_is_new_document_isSet;

    bool is_public;
    bool m_is_public_isSet;

    bool is_selective_part_out;
    bool m_is_selective_part_out_isSet;

    QString* name;
    bool m_name_isSet;

    bool need_new_version;
    bool m_need_new_version_isSet;

    QString* owner_email;
    bool m_owner_email_isSet;

    QString* owner_id;
    bool m_owner_id_isSet;

    qint32 owner_type;
    bool m_owner_type_isSet;

    QString* parent_id;
    bool m_parent_id_isSet;

    QString* project_id;
    bool m_project_id_isSet;

    QString* source_document_id;
    bool m_source_document_id_isSet;

    QString* source_workspace_id;
    bool m_source_workspace_id_isSet;

    QList<QString*>* tags;
    bool m_tags_isSet;

    QString* target_document_id;
    bool m_target_document_id_isSet;

    QString* target_workspace_id;
    bool m_target_workspace_id_isSet;

    QString* version_name;
    bool m_version_name_isSet;

};

}

#endif /* OAIBTMoveElementParams_H_ */
