/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * OpenAPI spec version: 1.111
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAILink.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAILink::OAILink(QString json) {
    init();
    this->fromJson(json);
}

OAILink::OAILink() {
    init();
}

OAILink::~OAILink() {
    this->cleanup();
}

void
OAILink::init() {
    description = new QString("");
    m_description_isSet = false;
    extensions = new QMap<QString, OAIObject*>();
    m_extensions_isSet = false;
    getref = new QString("");
    m_getref_isSet = false;
    headers = new QMap<QString, OAIHeader*>();
    m_headers_isSet = false;
    operation_id = new QString("");
    m_operation_id_isSet = false;
    operation_ref = new QString("");
    m_operation_ref_isSet = false;
    parameters = new QMap<QString, QString*>();
    m_parameters_isSet = false;
    request_body = NULL;
    m_request_body_isSet = false;
    server = new OAIServer();
    m_server_isSet = false;
}

void
OAILink::cleanup() {
    if(description != nullptr) { 
        delete description;
    }
    if(extensions != nullptr) { 
        auto arr = extensions;
        for(auto o: *arr) { 
            delete o;
        }
        delete extensions;
    }
    if(getref != nullptr) { 
        delete getref;
    }
    if(headers != nullptr) { 
        auto arr = headers;
        for(auto o: *arr) { 
            delete o;
        }
        delete headers;
    }
    if(operation_id != nullptr) { 
        delete operation_id;
    }
    if(operation_ref != nullptr) { 
        delete operation_ref;
    }
    if(parameters != nullptr) { 
        auto arr = parameters;
        for(auto o: *arr) { 
            delete o;
        }
        delete parameters;
    }
    if(request_body != nullptr) { 
        delete request_body;
    }
    if(server != nullptr) { 
        delete server;
    }
}

OAILink*
OAILink::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAILink::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&description, pJson["description"], "QString", "QString");
    
    
    ::OpenAPI::setValue(&extensions, pJson["extensions"], "QMap", "OAIObject");
    ::OpenAPI::setValue(&getref, pJson["get$ref"], "QString", "QString");
    
    
    ::OpenAPI::setValue(&headers, pJson["headers"], "QMap", "OAIHeader");
    ::OpenAPI::setValue(&operation_id, pJson["operationId"], "QString", "QString");
    
    ::OpenAPI::setValue(&operation_ref, pJson["operationRef"], "QString", "QString");
    
    
    ::OpenAPI::setValue(&parameters, pJson["parameters"], "QMap", "QString");
    ::OpenAPI::setValue(&request_body, pJson["requestBody"], "OAIObject", "OAIObject");
    
    ::OpenAPI::setValue(&server, pJson["server"], "OAIServer", "OAIServer");
    
}

QString
OAILink::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAILink::asJsonObject() {
    QJsonObject obj;
    if(description != nullptr && *description != QString("")){
        toJsonValue(QString("description"), description, obj, QString("QString"));
    }
    if(extensions->size() > 0){
        toJsonMap((QMap<QString, void*>*) extensions, obj, "extensions", "OAIObject");
    }
    if(getref != nullptr && *getref != QString("")){
        toJsonValue(QString("get$ref"), getref, obj, QString("QString"));
    }
    if(headers->size() > 0){
        toJsonMap((QMap<QString, void*>*) headers, obj, "headers", "OAIHeader");
    }
    if(operation_id != nullptr && *operation_id != QString("")){
        toJsonValue(QString("operationId"), operation_id, obj, QString("QString"));
    }
    if(operation_ref != nullptr && *operation_ref != QString("")){
        toJsonValue(QString("operationRef"), operation_ref, obj, QString("QString"));
    }
    if(parameters->size() > 0){
        toJsonMap((QMap<QString, void*>*) parameters, obj, "parameters", "QString");
    }
    if((request_body != nullptr) && (request_body->isSet())){
        toJsonValue(QString("requestBody"), request_body, obj, QString("OAIObject"));
    }
    if((server != nullptr) && (server->isSet())){
        toJsonValue(QString("server"), server, obj, QString("OAIServer"));
    }

    return obj;
}

QString*
OAILink::getDescription() {
    return description;
}
void
OAILink::setDescription(QString* description) {
    this->description = description;
    this->m_description_isSet = true;
}

QMap<QString, OAIObject*>*
OAILink::getExtensions() {
    return extensions;
}
void
OAILink::setExtensions(QMap<QString, OAIObject*>* extensions) {
    this->extensions = extensions;
    this->m_extensions_isSet = true;
}

QString*
OAILink::getGetref() {
    return getref;
}
void
OAILink::setGetref(QString* getref) {
    this->getref = getref;
    this->m_getref_isSet = true;
}

QMap<QString, OAIHeader*>*
OAILink::getHeaders() {
    return headers;
}
void
OAILink::setHeaders(QMap<QString, OAIHeader*>* headers) {
    this->headers = headers;
    this->m_headers_isSet = true;
}

QString*
OAILink::getOperationId() {
    return operation_id;
}
void
OAILink::setOperationId(QString* operation_id) {
    this->operation_id = operation_id;
    this->m_operation_id_isSet = true;
}

QString*
OAILink::getOperationRef() {
    return operation_ref;
}
void
OAILink::setOperationRef(QString* operation_ref) {
    this->operation_ref = operation_ref;
    this->m_operation_ref_isSet = true;
}

QMap<QString, QString*>*
OAILink::getParameters() {
    return parameters;
}
void
OAILink::setParameters(QMap<QString, QString*>* parameters) {
    this->parameters = parameters;
    this->m_parameters_isSet = true;
}

OAIObject*
OAILink::getRequestBody() {
    return request_body;
}
void
OAILink::setRequestBody(OAIObject* request_body) {
    this->request_body = request_body;
    this->m_request_body_isSet = true;
}

OAIServer*
OAILink::getServer() {
    return server;
}
void
OAILink::setServer(OAIServer* server) {
    this->server = server;
    this->m_server_isSet = true;
}


bool
OAILink::isSet(){
    bool isObjectUpdated = false;
    do{
        if(description != nullptr && *description != QString("")){ isObjectUpdated = true; break;}
        if(extensions->size() > 0){ isObjectUpdated = true; break;}
        if(getref != nullptr && *getref != QString("")){ isObjectUpdated = true; break;}
        if(headers->size() > 0){ isObjectUpdated = true; break;}
        if(operation_id != nullptr && *operation_id != QString("")){ isObjectUpdated = true; break;}
        if(operation_ref != nullptr && *operation_ref != QString("")){ isObjectUpdated = true; break;}
        if(parameters->size() > 0){ isObjectUpdated = true; break;}
        if(request_body != nullptr && request_body->isSet()){ isObjectUpdated = true; break;}
        if(server != nullptr && server->isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

