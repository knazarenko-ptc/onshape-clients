/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * OpenAPI spec version: 1.111
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIMediaType.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIMediaType::OAIMediaType(QString json) {
    init();
    this->fromJson(json);
}

OAIMediaType::OAIMediaType() {
    init();
}

OAIMediaType::~OAIMediaType() {
    this->cleanup();
}

void
OAIMediaType::init() {
    encoding = new QMap<QString, OAIEncoding*>();
    m_encoding_isSet = false;
    example = NULL;
    m_example_isSet = false;
    examples = new QMap<QString, OAIExample*>();
    m_examples_isSet = false;
    extensions = new QMap<QString, OAIObject*>();
    m_extensions_isSet = false;
    schema = new OAISchema();
    m_schema_isSet = false;
}

void
OAIMediaType::cleanup() {
    if(encoding != nullptr) { 
        auto arr = encoding;
        for(auto o: *arr) { 
            delete o;
        }
        delete encoding;
    }
    if(example != nullptr) { 
        delete example;
    }
    if(examples != nullptr) { 
        auto arr = examples;
        for(auto o: *arr) { 
            delete o;
        }
        delete examples;
    }
    if(extensions != nullptr) { 
        auto arr = extensions;
        for(auto o: *arr) { 
            delete o;
        }
        delete extensions;
    }
    if(schema != nullptr) { 
        delete schema;
    }
}

OAIMediaType*
OAIMediaType::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIMediaType::fromJsonObject(QJsonObject pJson) {
    
    ::OpenAPI::setValue(&encoding, pJson["encoding"], "QMap", "OAIEncoding");
    ::OpenAPI::setValue(&example, pJson["example"], "OAIObject", "OAIObject");
    
    
    ::OpenAPI::setValue(&examples, pJson["examples"], "QMap", "OAIExample");
    
    ::OpenAPI::setValue(&extensions, pJson["extensions"], "QMap", "OAIObject");
    ::OpenAPI::setValue(&schema, pJson["schema"], "OAISchema", "OAISchema");
    
}

QString
OAIMediaType::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIMediaType::asJsonObject() {
    QJsonObject obj;
    if(encoding->size() > 0){
        toJsonMap((QMap<QString, void*>*) encoding, obj, "encoding", "OAIEncoding");
    }
    if((example != nullptr) && (example->isSet())){
        toJsonValue(QString("example"), example, obj, QString("OAIObject"));
    }
    if(examples->size() > 0){
        toJsonMap((QMap<QString, void*>*) examples, obj, "examples", "OAIExample");
    }
    if(extensions->size() > 0){
        toJsonMap((QMap<QString, void*>*) extensions, obj, "extensions", "OAIObject");
    }
    if((schema != nullptr) && (schema->isSet())){
        toJsonValue(QString("schema"), schema, obj, QString("OAISchema"));
    }

    return obj;
}

QMap<QString, OAIEncoding*>*
OAIMediaType::getEncoding() {
    return encoding;
}
void
OAIMediaType::setEncoding(QMap<QString, OAIEncoding*>* encoding) {
    this->encoding = encoding;
    this->m_encoding_isSet = true;
}

OAIObject*
OAIMediaType::getExample() {
    return example;
}
void
OAIMediaType::setExample(OAIObject* example) {
    this->example = example;
    this->m_example_isSet = true;
}

QMap<QString, OAIExample*>*
OAIMediaType::getExamples() {
    return examples;
}
void
OAIMediaType::setExamples(QMap<QString, OAIExample*>* examples) {
    this->examples = examples;
    this->m_examples_isSet = true;
}

QMap<QString, OAIObject*>*
OAIMediaType::getExtensions() {
    return extensions;
}
void
OAIMediaType::setExtensions(QMap<QString, OAIObject*>* extensions) {
    this->extensions = extensions;
    this->m_extensions_isSet = true;
}

OAISchema*
OAIMediaType::getSchema() {
    return schema;
}
void
OAIMediaType::setSchema(OAISchema* schema) {
    this->schema = schema;
    this->m_schema_isSet = true;
}


bool
OAIMediaType::isSet(){
    bool isObjectUpdated = false;
    do{
        if(encoding->size() > 0){ isObjectUpdated = true; break;}
        if(example != nullptr && example->isSet()){ isObjectUpdated = true; break;}
        if(examples->size() > 0){ isObjectUpdated = true; break;}
        if(extensions->size() > 0){ isObjectUpdated = true; break;}
        if(schema != nullptr && schema->isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

