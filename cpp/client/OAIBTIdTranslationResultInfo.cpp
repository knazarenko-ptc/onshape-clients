/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * OpenAPI spec version: 1.111
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIBTIdTranslationResultInfo.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIBTIdTranslationResultInfo::OAIBTIdTranslationResultInfo(QString json) {
    init();
    this->fromJson(json);
}

OAIBTIdTranslationResultInfo::OAIBTIdTranslationResultInfo() {
    init();
}

OAIBTIdTranslationResultInfo::~OAIBTIdTranslationResultInfo() {
    this->cleanup();
}

void
OAIBTIdTranslationResultInfo::init() {
    source = new QString("");
    m_source_isSet = false;
    status = new QString("");
    m_status_isSet = false;
    target = new QList<QString*>();
    m_target_isSet = false;
}

void
OAIBTIdTranslationResultInfo::cleanup() {
    if(source != nullptr) { 
        delete source;
    }
    if(status != nullptr) { 
        delete status;
    }
    if(target != nullptr) { 
        auto arr = target;
        for(auto o: *arr) { 
            delete o;
        }
        delete target;
    }
}

OAIBTIdTranslationResultInfo*
OAIBTIdTranslationResultInfo::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIBTIdTranslationResultInfo::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&source, pJson["source"], "QString", "QString");
    
    ::OpenAPI::setValue(&status, pJson["status"], "QString", "QString");
    
    
    ::OpenAPI::setValue(&target, pJson["target"], "QList", "QString");
}

QString
OAIBTIdTranslationResultInfo::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIBTIdTranslationResultInfo::asJsonObject() {
    QJsonObject obj;
    if(source != nullptr && *source != QString("")){
        toJsonValue(QString("source"), source, obj, QString("QString"));
    }
    if(status != nullptr && *status != QString("")){
        toJsonValue(QString("status"), status, obj, QString("QString"));
    }
    if(target->size() > 0){
        toJsonArray((QList<void*>*)target, obj, "target", "QString");
    }

    return obj;
}

QString*
OAIBTIdTranslationResultInfo::getSource() {
    return source;
}
void
OAIBTIdTranslationResultInfo::setSource(QString* source) {
    this->source = source;
    this->m_source_isSet = true;
}

QString*
OAIBTIdTranslationResultInfo::getStatus() {
    return status;
}
void
OAIBTIdTranslationResultInfo::setStatus(QString* status) {
    this->status = status;
    this->m_status_isSet = true;
}

QList<QString*>*
OAIBTIdTranslationResultInfo::getTarget() {
    return target;
}
void
OAIBTIdTranslationResultInfo::setTarget(QList<QString*>* target) {
    this->target = target;
    this->m_target_isSet = true;
}


bool
OAIBTIdTranslationResultInfo::isSet(){
    bool isObjectUpdated = false;
    do{
        if(source != nullptr && *source != QString("")){ isObjectUpdated = true; break;}
        if(status != nullptr && *status != QString("")){ isObjectUpdated = true; break;}
        if(target->size() > 0){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

