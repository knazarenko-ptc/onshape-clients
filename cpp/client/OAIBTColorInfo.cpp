/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * OpenAPI spec version: 1.111
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIBTColorInfo.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIBTColorInfo::OAIBTColorInfo(QString json) {
    init();
    this->fromJson(json);
}

OAIBTColorInfo::OAIBTColorInfo() {
    init();
}

OAIBTColorInfo::~OAIBTColorInfo() {
    this->cleanup();
}

void
OAIBTColorInfo::init() {
    blue = 0;
    m_blue_isSet = false;
    green = 0;
    m_green_isSet = false;
    red = 0;
    m_red_isSet = false;
}

void
OAIBTColorInfo::cleanup() {



}

OAIBTColorInfo*
OAIBTColorInfo::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIBTColorInfo::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&blue, pJson["blue"], "qint32", "");
    
    ::OpenAPI::setValue(&green, pJson["green"], "qint32", "");
    
    ::OpenAPI::setValue(&red, pJson["red"], "qint32", "");
    
}

QString
OAIBTColorInfo::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIBTColorInfo::asJsonObject() {
    QJsonObject obj;
    if(m_blue_isSet){
        obj.insert("blue", QJsonValue(blue));
    }
    if(m_green_isSet){
        obj.insert("green", QJsonValue(green));
    }
    if(m_red_isSet){
        obj.insert("red", QJsonValue(red));
    }

    return obj;
}

qint32
OAIBTColorInfo::getBlue() {
    return blue;
}
void
OAIBTColorInfo::setBlue(qint32 blue) {
    this->blue = blue;
    this->m_blue_isSet = true;
}

qint32
OAIBTColorInfo::getGreen() {
    return green;
}
void
OAIBTColorInfo::setGreen(qint32 green) {
    this->green = green;
    this->m_green_isSet = true;
}

qint32
OAIBTColorInfo::getRed() {
    return red;
}
void
OAIBTColorInfo::setRed(qint32 red) {
    this->red = red;
    this->m_red_isSet = true;
}


bool
OAIBTColorInfo::isSet(){
    bool isObjectUpdated = false;
    do{
        if(m_blue_isSet){ isObjectUpdated = true; break;}
        if(m_green_isSet){ isObjectUpdated = true; break;}
        if(m_red_isSet){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

