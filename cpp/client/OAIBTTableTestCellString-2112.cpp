/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * OpenAPI spec version: 1.111
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIBTTableTestCellString-2112.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIBTTableTestCellString-2112::OAIBTTableTestCellString-2112(QString json) {
    init();
    this->fromJson(json);
}

OAIBTTableTestCellString-2112::OAIBTTableTestCellString-2112() {
    init();
}

OAIBTTableTestCellString-2112::~OAIBTTableTestCellString-2112() {
    this->cleanup();
}

void
OAIBTTableTestCellString-2112::init() {
    bt_type = new QString("");
    m_bt_type_isSet = false;
    is_ever_visible = false;
    m_is_ever_visible_isSet = false;
    is_read_only = false;
    m_is_read_only_isSet = false;
    cell_value = new QString("");
    m_cell_value_isSet = false;
}

void
OAIBTTableTestCellString-2112::cleanup() {
    if(bt_type != nullptr) { 
        delete bt_type;
    }


    if(cell_value != nullptr) { 
        delete cell_value;
    }
}

OAIBTTableTestCellString-2112*
OAIBTTableTestCellString-2112::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIBTTableTestCellString-2112::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&bt_type, pJson["btType"], "QString", "QString");
    
    ::OpenAPI::setValue(&is_ever_visible, pJson["isEverVisible"], "bool", "");
    
    ::OpenAPI::setValue(&is_read_only, pJson["isReadOnly"], "bool", "");
    
    ::OpenAPI::setValue(&cell_value, pJson["cellValue"], "QString", "QString");
    
}

QString
OAIBTTableTestCellString-2112::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIBTTableTestCellString-2112::asJsonObject() {
    QJsonObject obj;
    if(bt_type != nullptr && *bt_type != QString("")){
        toJsonValue(QString("btType"), bt_type, obj, QString("QString"));
    }
    if(m_is_ever_visible_isSet){
        obj.insert("isEverVisible", QJsonValue(is_ever_visible));
    }
    if(m_is_read_only_isSet){
        obj.insert("isReadOnly", QJsonValue(is_read_only));
    }
    if(cell_value != nullptr && *cell_value != QString("")){
        toJsonValue(QString("cellValue"), cell_value, obj, QString("QString"));
    }

    return obj;
}

QString*
OAIBTTableTestCellString-2112::getBtType() {
    return bt_type;
}
void
OAIBTTableTestCellString-2112::setBtType(QString* bt_type) {
    this->bt_type = bt_type;
    this->m_bt_type_isSet = true;
}

bool
OAIBTTableTestCellString-2112::isIsEverVisible() {
    return is_ever_visible;
}
void
OAIBTTableTestCellString-2112::setIsEverVisible(bool is_ever_visible) {
    this->is_ever_visible = is_ever_visible;
    this->m_is_ever_visible_isSet = true;
}

bool
OAIBTTableTestCellString-2112::isIsReadOnly() {
    return is_read_only;
}
void
OAIBTTableTestCellString-2112::setIsReadOnly(bool is_read_only) {
    this->is_read_only = is_read_only;
    this->m_is_read_only_isSet = true;
}

QString*
OAIBTTableTestCellString-2112::getCellValue() {
    return cell_value;
}
void
OAIBTTableTestCellString-2112::setCellValue(QString* cell_value) {
    this->cell_value = cell_value;
    this->m_cell_value_isSet = true;
}


bool
OAIBTTableTestCellString-2112::isSet(){
    bool isObjectUpdated = false;
    do{
        if(bt_type != nullptr && *bt_type != QString("")){ isObjectUpdated = true; break;}
        if(m_is_ever_visible_isSet){ isObjectUpdated = true; break;}
        if(m_is_read_only_isSet){ isObjectUpdated = true; break;}
        if(cell_value != nullptr && *cell_value != QString("")){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

