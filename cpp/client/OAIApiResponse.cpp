/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * OpenAPI spec version: 1.111
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIApiResponse.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIApiResponse::OAIApiResponse(QString json) {
    init();
    this->fromJson(json);
}

OAIApiResponse::OAIApiResponse() {
    init();
}

OAIApiResponse::~OAIApiResponse() {
    this->cleanup();
}

void
OAIApiResponse::init() {
    content = new OAIApiResponse_content();
    m_content_isSet = false;
    description = new QString("");
    m_description_isSet = false;
    extensions = new QMap<QString, OAIObject*>();
    m_extensions_isSet = false;
    getref = new QString("");
    m_getref_isSet = false;
    headers = new QMap<QString, OAIHeader*>();
    m_headers_isSet = false;
    links = new QMap<QString, OAILink*>();
    m_links_isSet = false;
}

void
OAIApiResponse::cleanup() {
    if(content != nullptr) { 
        delete content;
    }
    if(description != nullptr) { 
        delete description;
    }
    if(extensions != nullptr) { 
        auto arr = extensions;
        for(auto o: *arr) { 
            delete o;
        }
        delete extensions;
    }
    if(getref != nullptr) { 
        delete getref;
    }
    if(headers != nullptr) { 
        auto arr = headers;
        for(auto o: *arr) { 
            delete o;
        }
        delete headers;
    }
    if(links != nullptr) { 
        auto arr = links;
        for(auto o: *arr) { 
            delete o;
        }
        delete links;
    }
}

OAIApiResponse*
OAIApiResponse::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIApiResponse::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&content, pJson["content"], "OAIApiResponse_content", "OAIApiResponse_content");
    
    ::OpenAPI::setValue(&description, pJson["description"], "QString", "QString");
    
    
    ::OpenAPI::setValue(&extensions, pJson["extensions"], "QMap", "OAIObject");
    ::OpenAPI::setValue(&getref, pJson["get$ref"], "QString", "QString");
    
    
    ::OpenAPI::setValue(&headers, pJson["headers"], "QMap", "OAIHeader");
    
    ::OpenAPI::setValue(&links, pJson["links"], "QMap", "OAILink");
}

QString
OAIApiResponse::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIApiResponse::asJsonObject() {
    QJsonObject obj;
    if((content != nullptr) && (content->isSet())){
        toJsonValue(QString("content"), content, obj, QString("OAIApiResponse_content"));
    }
    if(description != nullptr && *description != QString("")){
        toJsonValue(QString("description"), description, obj, QString("QString"));
    }
    if(extensions->size() > 0){
        toJsonMap((QMap<QString, void*>*) extensions, obj, "extensions", "OAIObject");
    }
    if(getref != nullptr && *getref != QString("")){
        toJsonValue(QString("get$ref"), getref, obj, QString("QString"));
    }
    if(headers->size() > 0){
        toJsonMap((QMap<QString, void*>*) headers, obj, "headers", "OAIHeader");
    }
    if(links->size() > 0){
        toJsonMap((QMap<QString, void*>*) links, obj, "links", "OAILink");
    }

    return obj;
}

OAIApiResponse_content*
OAIApiResponse::getContent() {
    return content;
}
void
OAIApiResponse::setContent(OAIApiResponse_content* content) {
    this->content = content;
    this->m_content_isSet = true;
}

QString*
OAIApiResponse::getDescription() {
    return description;
}
void
OAIApiResponse::setDescription(QString* description) {
    this->description = description;
    this->m_description_isSet = true;
}

QMap<QString, OAIObject*>*
OAIApiResponse::getExtensions() {
    return extensions;
}
void
OAIApiResponse::setExtensions(QMap<QString, OAIObject*>* extensions) {
    this->extensions = extensions;
    this->m_extensions_isSet = true;
}

QString*
OAIApiResponse::getGetref() {
    return getref;
}
void
OAIApiResponse::setGetref(QString* getref) {
    this->getref = getref;
    this->m_getref_isSet = true;
}

QMap<QString, OAIHeader*>*
OAIApiResponse::getHeaders() {
    return headers;
}
void
OAIApiResponse::setHeaders(QMap<QString, OAIHeader*>* headers) {
    this->headers = headers;
    this->m_headers_isSet = true;
}

QMap<QString, OAILink*>*
OAIApiResponse::getLinks() {
    return links;
}
void
OAIApiResponse::setLinks(QMap<QString, OAILink*>* links) {
    this->links = links;
    this->m_links_isSet = true;
}


bool
OAIApiResponse::isSet(){
    bool isObjectUpdated = false;
    do{
        if(content != nullptr && content->isSet()){ isObjectUpdated = true; break;}
        if(description != nullptr && *description != QString("")){ isObjectUpdated = true; break;}
        if(extensions->size() > 0){ isObjectUpdated = true; break;}
        if(getref != nullptr && *getref != QString("")){ isObjectUpdated = true; break;}
        if(headers->size() > 0){ isObjectUpdated = true; break;}
        if(links->size() > 0){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

