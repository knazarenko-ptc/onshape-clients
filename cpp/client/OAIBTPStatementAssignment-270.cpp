/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * OpenAPI spec version: 1.111
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIBTPStatementAssignment-270.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIBTPStatementAssignment-270::OAIBTPStatementAssignment-270(QString json) {
    init();
    this->fromJson(json);
}

OAIBTPStatementAssignment-270::OAIBTPStatementAssignment-270() {
    init();
}

OAIBTPStatementAssignment-270::~OAIBTPStatementAssignment-270() {
    this->cleanup();
}

void
OAIBTPStatementAssignment-270::init() {
    atomic = false;
    m_atomic_isSet = false;
    bt_type = new QString("");
    m_bt_type_isSet = false;
    documentation_type = new QString("");
    m_documentation_type_isSet = false;
    end_source_location = 0;
    m_end_source_location_isSet = false;
    node_id = new QString("");
    m_node_id_isSet = false;
    short_descriptor = new QString("");
    m_short_descriptor_isSet = false;
    space_after = new OAIBTPSpace-10();
    m_space_after_isSet = false;
    space_before = new OAIBTPSpace-10();
    m_space_before_isSet = false;
    space_default = false;
    m_space_default_isSet = false;
    start_source_location = 0;
    m_start_source_location_isSet = false;
    annotation = new OAIBTPAnnotation-231();
    m_annotation_isSet = false;
    _operator = new QString("");
    m__operator_isSet = false;
    lvalue = new OAIBTPLValue-249();
    m_lvalue_isSet = false;
    rvalue = new OAIBTPExpression-9();
    m_rvalue_isSet = false;
}

void
OAIBTPStatementAssignment-270::cleanup() {

    if(bt_type != nullptr) { 
        delete bt_type;
    }
    if(documentation_type != nullptr) { 
        delete documentation_type;
    }

    if(node_id != nullptr) { 
        delete node_id;
    }
    if(short_descriptor != nullptr) { 
        delete short_descriptor;
    }
    if(space_after != nullptr) { 
        delete space_after;
    }
    if(space_before != nullptr) { 
        delete space_before;
    }


    if(annotation != nullptr) { 
        delete annotation;
    }
    if(_operator != nullptr) { 
        delete _operator;
    }
    if(lvalue != nullptr) { 
        delete lvalue;
    }
    if(rvalue != nullptr) { 
        delete rvalue;
    }
}

OAIBTPStatementAssignment-270*
OAIBTPStatementAssignment-270::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIBTPStatementAssignment-270::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&atomic, pJson["atomic"], "bool", "");
    
    ::OpenAPI::setValue(&bt_type, pJson["btType"], "QString", "QString");
    
    ::OpenAPI::setValue(&documentation_type, pJson["documentationType"], "QString", "QString");
    
    ::OpenAPI::setValue(&end_source_location, pJson["endSourceLocation"], "qint32", "");
    
    ::OpenAPI::setValue(&node_id, pJson["nodeId"], "QString", "QString");
    
    ::OpenAPI::setValue(&short_descriptor, pJson["shortDescriptor"], "QString", "QString");
    
    ::OpenAPI::setValue(&space_after, pJson["spaceAfter"], "OAIBTPSpace-10", "OAIBTPSpace-10");
    
    ::OpenAPI::setValue(&space_before, pJson["spaceBefore"], "OAIBTPSpace-10", "OAIBTPSpace-10");
    
    ::OpenAPI::setValue(&space_default, pJson["spaceDefault"], "bool", "");
    
    ::OpenAPI::setValue(&start_source_location, pJson["startSourceLocation"], "qint32", "");
    
    ::OpenAPI::setValue(&annotation, pJson["annotation"], "OAIBTPAnnotation-231", "OAIBTPAnnotation-231");
    
    ::OpenAPI::setValue(&_operator, pJson["operator"], "QString", "QString");
    
    ::OpenAPI::setValue(&lvalue, pJson["lvalue"], "OAIBTPLValue-249", "OAIBTPLValue-249");
    
    ::OpenAPI::setValue(&rvalue, pJson["rvalue"], "OAIBTPExpression-9", "OAIBTPExpression-9");
    
}

QString
OAIBTPStatementAssignment-270::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIBTPStatementAssignment-270::asJsonObject() {
    QJsonObject obj;
    if(m_atomic_isSet){
        obj.insert("atomic", QJsonValue(atomic));
    }
    if(bt_type != nullptr && *bt_type != QString("")){
        toJsonValue(QString("btType"), bt_type, obj, QString("QString"));
    }
    if(documentation_type != nullptr && *documentation_type != QString("")){
        toJsonValue(QString("documentationType"), documentation_type, obj, QString("QString"));
    }
    if(m_end_source_location_isSet){
        obj.insert("endSourceLocation", QJsonValue(end_source_location));
    }
    if(node_id != nullptr && *node_id != QString("")){
        toJsonValue(QString("nodeId"), node_id, obj, QString("QString"));
    }
    if(short_descriptor != nullptr && *short_descriptor != QString("")){
        toJsonValue(QString("shortDescriptor"), short_descriptor, obj, QString("QString"));
    }
    if((space_after != nullptr) && (space_after->isSet())){
        toJsonValue(QString("spaceAfter"), space_after, obj, QString("OAIBTPSpace-10"));
    }
    if((space_before != nullptr) && (space_before->isSet())){
        toJsonValue(QString("spaceBefore"), space_before, obj, QString("OAIBTPSpace-10"));
    }
    if(m_space_default_isSet){
        obj.insert("spaceDefault", QJsonValue(space_default));
    }
    if(m_start_source_location_isSet){
        obj.insert("startSourceLocation", QJsonValue(start_source_location));
    }
    if((annotation != nullptr) && (annotation->isSet())){
        toJsonValue(QString("annotation"), annotation, obj, QString("OAIBTPAnnotation-231"));
    }
    if(_operator != nullptr && *_operator != QString("")){
        toJsonValue(QString("operator"), _operator, obj, QString("QString"));
    }
    if((lvalue != nullptr) && (lvalue->isSet())){
        toJsonValue(QString("lvalue"), lvalue, obj, QString("OAIBTPLValue-249"));
    }
    if((rvalue != nullptr) && (rvalue->isSet())){
        toJsonValue(QString("rvalue"), rvalue, obj, QString("OAIBTPExpression-9"));
    }

    return obj;
}

bool
OAIBTPStatementAssignment-270::isAtomic() {
    return atomic;
}
void
OAIBTPStatementAssignment-270::setAtomic(bool atomic) {
    this->atomic = atomic;
    this->m_atomic_isSet = true;
}

QString*
OAIBTPStatementAssignment-270::getBtType() {
    return bt_type;
}
void
OAIBTPStatementAssignment-270::setBtType(QString* bt_type) {
    this->bt_type = bt_type;
    this->m_bt_type_isSet = true;
}

QString*
OAIBTPStatementAssignment-270::getDocumentationType() {
    return documentation_type;
}
void
OAIBTPStatementAssignment-270::setDocumentationType(QString* documentation_type) {
    this->documentation_type = documentation_type;
    this->m_documentation_type_isSet = true;
}

qint32
OAIBTPStatementAssignment-270::getEndSourceLocation() {
    return end_source_location;
}
void
OAIBTPStatementAssignment-270::setEndSourceLocation(qint32 end_source_location) {
    this->end_source_location = end_source_location;
    this->m_end_source_location_isSet = true;
}

QString*
OAIBTPStatementAssignment-270::getNodeId() {
    return node_id;
}
void
OAIBTPStatementAssignment-270::setNodeId(QString* node_id) {
    this->node_id = node_id;
    this->m_node_id_isSet = true;
}

QString*
OAIBTPStatementAssignment-270::getShortDescriptor() {
    return short_descriptor;
}
void
OAIBTPStatementAssignment-270::setShortDescriptor(QString* short_descriptor) {
    this->short_descriptor = short_descriptor;
    this->m_short_descriptor_isSet = true;
}

OAIBTPSpace-10*
OAIBTPStatementAssignment-270::getSpaceAfter() {
    return space_after;
}
void
OAIBTPStatementAssignment-270::setSpaceAfter(OAIBTPSpace-10* space_after) {
    this->space_after = space_after;
    this->m_space_after_isSet = true;
}

OAIBTPSpace-10*
OAIBTPStatementAssignment-270::getSpaceBefore() {
    return space_before;
}
void
OAIBTPStatementAssignment-270::setSpaceBefore(OAIBTPSpace-10* space_before) {
    this->space_before = space_before;
    this->m_space_before_isSet = true;
}

bool
OAIBTPStatementAssignment-270::isSpaceDefault() {
    return space_default;
}
void
OAIBTPStatementAssignment-270::setSpaceDefault(bool space_default) {
    this->space_default = space_default;
    this->m_space_default_isSet = true;
}

qint32
OAIBTPStatementAssignment-270::getStartSourceLocation() {
    return start_source_location;
}
void
OAIBTPStatementAssignment-270::setStartSourceLocation(qint32 start_source_location) {
    this->start_source_location = start_source_location;
    this->m_start_source_location_isSet = true;
}

OAIBTPAnnotation-231*
OAIBTPStatementAssignment-270::getAnnotation() {
    return annotation;
}
void
OAIBTPStatementAssignment-270::setAnnotation(OAIBTPAnnotation-231* annotation) {
    this->annotation = annotation;
    this->m_annotation_isSet = true;
}

QString*
OAIBTPStatementAssignment-270::getOperator() {
    return _operator;
}
void
OAIBTPStatementAssignment-270::setOperator(QString* _operator) {
    this->_operator = _operator;
    this->m__operator_isSet = true;
}

OAIBTPLValue-249*
OAIBTPStatementAssignment-270::getLvalue() {
    return lvalue;
}
void
OAIBTPStatementAssignment-270::setLvalue(OAIBTPLValue-249* lvalue) {
    this->lvalue = lvalue;
    this->m_lvalue_isSet = true;
}

OAIBTPExpression-9*
OAIBTPStatementAssignment-270::getRvalue() {
    return rvalue;
}
void
OAIBTPStatementAssignment-270::setRvalue(OAIBTPExpression-9* rvalue) {
    this->rvalue = rvalue;
    this->m_rvalue_isSet = true;
}


bool
OAIBTPStatementAssignment-270::isSet(){
    bool isObjectUpdated = false;
    do{
        if(m_atomic_isSet){ isObjectUpdated = true; break;}
        if(bt_type != nullptr && *bt_type != QString("")){ isObjectUpdated = true; break;}
        if(documentation_type != nullptr && *documentation_type != QString("")){ isObjectUpdated = true; break;}
        if(m_end_source_location_isSet){ isObjectUpdated = true; break;}
        if(node_id != nullptr && *node_id != QString("")){ isObjectUpdated = true; break;}
        if(short_descriptor != nullptr && *short_descriptor != QString("")){ isObjectUpdated = true; break;}
        if(space_after != nullptr && space_after->isSet()){ isObjectUpdated = true; break;}
        if(space_before != nullptr && space_before->isSet()){ isObjectUpdated = true; break;}
        if(m_space_default_isSet){ isObjectUpdated = true; break;}
        if(m_start_source_location_isSet){ isObjectUpdated = true; break;}
        if(annotation != nullptr && annotation->isSet()){ isObjectUpdated = true; break;}
        if(_operator != nullptr && *_operator != QString("")){ isObjectUpdated = true; break;}
        if(lvalue != nullptr && lvalue->isSet()){ isObjectUpdated = true; break;}
        if(rvalue != nullptr && rvalue->isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

