/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * OpenAPI spec version: 1.111
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIBTThumbnailSizeInfo.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIBTThumbnailSizeInfo::OAIBTThumbnailSizeInfo(QString json) {
    init();
    this->fromJson(json);
}

OAIBTThumbnailSizeInfo::OAIBTThumbnailSizeInfo() {
    init();
}

OAIBTThumbnailSizeInfo::~OAIBTThumbnailSizeInfo() {
    this->cleanup();
}

void
OAIBTThumbnailSizeInfo::init() {
    href = new QString("");
    m_href_isSet = false;
    media_type = new QString("");
    m_media_type_isSet = false;
    render_mode = new QString("");
    m_render_mode_isSet = false;
    sheet_name = new QString("");
    m_sheet_name_isSet = false;
    size = new QString("");
    m_size_isSet = false;
    unique_id = new QString("");
    m_unique_id_isSet = false;
    view_orientation = new QString("");
    m_view_orientation_isSet = false;
}

void
OAIBTThumbnailSizeInfo::cleanup() {
    if(href != nullptr) { 
        delete href;
    }
    if(media_type != nullptr) { 
        delete media_type;
    }
    if(render_mode != nullptr) { 
        delete render_mode;
    }
    if(sheet_name != nullptr) { 
        delete sheet_name;
    }
    if(size != nullptr) { 
        delete size;
    }
    if(unique_id != nullptr) { 
        delete unique_id;
    }
    if(view_orientation != nullptr) { 
        delete view_orientation;
    }
}

OAIBTThumbnailSizeInfo*
OAIBTThumbnailSizeInfo::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIBTThumbnailSizeInfo::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&href, pJson["href"], "QString", "QString");
    
    ::OpenAPI::setValue(&media_type, pJson["mediaType"], "QString", "QString");
    
    ::OpenAPI::setValue(&render_mode, pJson["renderMode"], "QString", "QString");
    
    ::OpenAPI::setValue(&sheet_name, pJson["sheetName"], "QString", "QString");
    
    ::OpenAPI::setValue(&size, pJson["size"], "QString", "QString");
    
    ::OpenAPI::setValue(&unique_id, pJson["uniqueId"], "QString", "QString");
    
    ::OpenAPI::setValue(&view_orientation, pJson["viewOrientation"], "QString", "QString");
    
}

QString
OAIBTThumbnailSizeInfo::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIBTThumbnailSizeInfo::asJsonObject() {
    QJsonObject obj;
    if(href != nullptr && *href != QString("")){
        toJsonValue(QString("href"), href, obj, QString("QString"));
    }
    if(media_type != nullptr && *media_type != QString("")){
        toJsonValue(QString("mediaType"), media_type, obj, QString("QString"));
    }
    if(render_mode != nullptr && *render_mode != QString("")){
        toJsonValue(QString("renderMode"), render_mode, obj, QString("QString"));
    }
    if(sheet_name != nullptr && *sheet_name != QString("")){
        toJsonValue(QString("sheetName"), sheet_name, obj, QString("QString"));
    }
    if(size != nullptr && *size != QString("")){
        toJsonValue(QString("size"), size, obj, QString("QString"));
    }
    if(unique_id != nullptr && *unique_id != QString("")){
        toJsonValue(QString("uniqueId"), unique_id, obj, QString("QString"));
    }
    if(view_orientation != nullptr && *view_orientation != QString("")){
        toJsonValue(QString("viewOrientation"), view_orientation, obj, QString("QString"));
    }

    return obj;
}

QString*
OAIBTThumbnailSizeInfo::getHref() {
    return href;
}
void
OAIBTThumbnailSizeInfo::setHref(QString* href) {
    this->href = href;
    this->m_href_isSet = true;
}

QString*
OAIBTThumbnailSizeInfo::getMediaType() {
    return media_type;
}
void
OAIBTThumbnailSizeInfo::setMediaType(QString* media_type) {
    this->media_type = media_type;
    this->m_media_type_isSet = true;
}

QString*
OAIBTThumbnailSizeInfo::getRenderMode() {
    return render_mode;
}
void
OAIBTThumbnailSizeInfo::setRenderMode(QString* render_mode) {
    this->render_mode = render_mode;
    this->m_render_mode_isSet = true;
}

QString*
OAIBTThumbnailSizeInfo::getSheetName() {
    return sheet_name;
}
void
OAIBTThumbnailSizeInfo::setSheetName(QString* sheet_name) {
    this->sheet_name = sheet_name;
    this->m_sheet_name_isSet = true;
}

QString*
OAIBTThumbnailSizeInfo::getSize() {
    return size;
}
void
OAIBTThumbnailSizeInfo::setSize(QString* size) {
    this->size = size;
    this->m_size_isSet = true;
}

QString*
OAIBTThumbnailSizeInfo::getUniqueId() {
    return unique_id;
}
void
OAIBTThumbnailSizeInfo::setUniqueId(QString* unique_id) {
    this->unique_id = unique_id;
    this->m_unique_id_isSet = true;
}

QString*
OAIBTThumbnailSizeInfo::getViewOrientation() {
    return view_orientation;
}
void
OAIBTThumbnailSizeInfo::setViewOrientation(QString* view_orientation) {
    this->view_orientation = view_orientation;
    this->m_view_orientation_isSet = true;
}


bool
OAIBTThumbnailSizeInfo::isSet(){
    bool isObjectUpdated = false;
    do{
        if(href != nullptr && *href != QString("")){ isObjectUpdated = true; break;}
        if(media_type != nullptr && *media_type != QString("")){ isObjectUpdated = true; break;}
        if(render_mode != nullptr && *render_mode != QString("")){ isObjectUpdated = true; break;}
        if(sheet_name != nullptr && *sheet_name != QString("")){ isObjectUpdated = true; break;}
        if(size != nullptr && *size != QString("")){ isObjectUpdated = true; break;}
        if(unique_id != nullptr && *unique_id != QString("")){ isObjectUpdated = true; break;}
        if(view_orientation != nullptr && *view_orientation != QString("")){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

