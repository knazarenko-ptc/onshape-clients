/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * OpenAPI spec version: 1.111
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIBTElementLocationParams.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIBTElementLocationParams::OAIBTElementLocationParams(QString json) {
    init();
    this->fromJson(json);
}

OAIBTElementLocationParams::OAIBTElementLocationParams() {
    init();
}

OAIBTElementLocationParams::~OAIBTElementLocationParams() {
    this->cleanup();
}

void
OAIBTElementLocationParams::init() {
    element_id = new QString("");
    m_element_id_isSet = false;
    group_id = new QString("");
    m_group_id_isSet = false;
    position = 0;
    m_position_isSet = false;
}

void
OAIBTElementLocationParams::cleanup() {
    if(element_id != nullptr) { 
        delete element_id;
    }
    if(group_id != nullptr) { 
        delete group_id;
    }

}

OAIBTElementLocationParams*
OAIBTElementLocationParams::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIBTElementLocationParams::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&element_id, pJson["elementId"], "QString", "QString");
    
    ::OpenAPI::setValue(&group_id, pJson["groupId"], "QString", "QString");
    
    ::OpenAPI::setValue(&position, pJson["position"], "qint32", "");
    
}

QString
OAIBTElementLocationParams::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIBTElementLocationParams::asJsonObject() {
    QJsonObject obj;
    if(element_id != nullptr && *element_id != QString("")){
        toJsonValue(QString("elementId"), element_id, obj, QString("QString"));
    }
    if(group_id != nullptr && *group_id != QString("")){
        toJsonValue(QString("groupId"), group_id, obj, QString("QString"));
    }
    if(m_position_isSet){
        obj.insert("position", QJsonValue(position));
    }

    return obj;
}

QString*
OAIBTElementLocationParams::getElementId() {
    return element_id;
}
void
OAIBTElementLocationParams::setElementId(QString* element_id) {
    this->element_id = element_id;
    this->m_element_id_isSet = true;
}

QString*
OAIBTElementLocationParams::getGroupId() {
    return group_id;
}
void
OAIBTElementLocationParams::setGroupId(QString* group_id) {
    this->group_id = group_id;
    this->m_group_id_isSet = true;
}

qint32
OAIBTElementLocationParams::getPosition() {
    return position;
}
void
OAIBTElementLocationParams::setPosition(qint32 position) {
    this->position = position;
    this->m_position_isSet = true;
}


bool
OAIBTElementLocationParams::isSet(){
    bool isObjectUpdated = false;
    do{
        if(element_id != nullptr && *element_id != QString("")){ isObjectUpdated = true; break;}
        if(group_id != nullptr && *group_id != QString("")){ isObjectUpdated = true; break;}
        if(m_position_isSet){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

