/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * OpenAPI spec version: 1.111
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIBTTranslationRequestInfo.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIBTTranslationRequestInfo::OAIBTTranslationRequestInfo(QString json) {
    init();
    this->fromJson(json);
}

OAIBTTranslationRequestInfo::OAIBTTranslationRequestInfo() {
    init();
}

OAIBTTranslationRequestInfo::~OAIBTTranslationRequestInfo() {
    this->cleanup();
}

void
OAIBTTranslationRequestInfo::init() {
    document_id = new QString("");
    m_document_id_isSet = false;
    failure_reason = new QString("");
    m_failure_reason_isSet = false;
    href = new QString("");
    m_href_isSet = false;
    id = new QString("");
    m_id_isSet = false;
    name = new QString("");
    m_name_isSet = false;
    request_element_id = new QString("");
    m_request_element_id_isSet = false;
    request_state = new QString("");
    m_request_state_isSet = false;
    result_document_id = new QString("");
    m_result_document_id_isSet = false;
    result_element_ids = new QList<QString*>();
    m_result_element_ids_isSet = false;
    result_external_data_ids = new QList<QString*>();
    m_result_external_data_ids_isSet = false;
    result_workspace_id = new QString("");
    m_result_workspace_id_isSet = false;
    version_id = new QString("");
    m_version_id_isSet = false;
    view_ref = new QString("");
    m_view_ref_isSet = false;
    workspace_id = new QString("");
    m_workspace_id_isSet = false;
}

void
OAIBTTranslationRequestInfo::cleanup() {
    if(document_id != nullptr) { 
        delete document_id;
    }
    if(failure_reason != nullptr) { 
        delete failure_reason;
    }
    if(href != nullptr) { 
        delete href;
    }
    if(id != nullptr) { 
        delete id;
    }
    if(name != nullptr) { 
        delete name;
    }
    if(request_element_id != nullptr) { 
        delete request_element_id;
    }
    if(request_state != nullptr) { 
        delete request_state;
    }
    if(result_document_id != nullptr) { 
        delete result_document_id;
    }
    if(result_element_ids != nullptr) { 
        auto arr = result_element_ids;
        for(auto o: *arr) { 
            delete o;
        }
        delete result_element_ids;
    }
    if(result_external_data_ids != nullptr) { 
        auto arr = result_external_data_ids;
        for(auto o: *arr) { 
            delete o;
        }
        delete result_external_data_ids;
    }
    if(result_workspace_id != nullptr) { 
        delete result_workspace_id;
    }
    if(version_id != nullptr) { 
        delete version_id;
    }
    if(view_ref != nullptr) { 
        delete view_ref;
    }
    if(workspace_id != nullptr) { 
        delete workspace_id;
    }
}

OAIBTTranslationRequestInfo*
OAIBTTranslationRequestInfo::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIBTTranslationRequestInfo::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&document_id, pJson["documentId"], "QString", "QString");
    
    ::OpenAPI::setValue(&failure_reason, pJson["failureReason"], "QString", "QString");
    
    ::OpenAPI::setValue(&href, pJson["href"], "QString", "QString");
    
    ::OpenAPI::setValue(&id, pJson["id"], "QString", "QString");
    
    ::OpenAPI::setValue(&name, pJson["name"], "QString", "QString");
    
    ::OpenAPI::setValue(&request_element_id, pJson["requestElementId"], "QString", "QString");
    
    ::OpenAPI::setValue(&request_state, pJson["requestState"], "QString", "QString");
    
    ::OpenAPI::setValue(&result_document_id, pJson["resultDocumentId"], "QString", "QString");
    
    
    ::OpenAPI::setValue(&result_element_ids, pJson["resultElementIds"], "QList", "QString");
    
    ::OpenAPI::setValue(&result_external_data_ids, pJson["resultExternalDataIds"], "QList", "QString");
    ::OpenAPI::setValue(&result_workspace_id, pJson["resultWorkspaceId"], "QString", "QString");
    
    ::OpenAPI::setValue(&version_id, pJson["versionId"], "QString", "QString");
    
    ::OpenAPI::setValue(&view_ref, pJson["viewRef"], "QString", "QString");
    
    ::OpenAPI::setValue(&workspace_id, pJson["workspaceId"], "QString", "QString");
    
}

QString
OAIBTTranslationRequestInfo::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIBTTranslationRequestInfo::asJsonObject() {
    QJsonObject obj;
    if(document_id != nullptr && *document_id != QString("")){
        toJsonValue(QString("documentId"), document_id, obj, QString("QString"));
    }
    if(failure_reason != nullptr && *failure_reason != QString("")){
        toJsonValue(QString("failureReason"), failure_reason, obj, QString("QString"));
    }
    if(href != nullptr && *href != QString("")){
        toJsonValue(QString("href"), href, obj, QString("QString"));
    }
    if(id != nullptr && *id != QString("")){
        toJsonValue(QString("id"), id, obj, QString("QString"));
    }
    if(name != nullptr && *name != QString("")){
        toJsonValue(QString("name"), name, obj, QString("QString"));
    }
    if(request_element_id != nullptr && *request_element_id != QString("")){
        toJsonValue(QString("requestElementId"), request_element_id, obj, QString("QString"));
    }
    if(request_state != nullptr && *request_state != QString("")){
        toJsonValue(QString("requestState"), request_state, obj, QString("QString"));
    }
    if(result_document_id != nullptr && *result_document_id != QString("")){
        toJsonValue(QString("resultDocumentId"), result_document_id, obj, QString("QString"));
    }
    if(result_element_ids->size() > 0){
        toJsonArray((QList<void*>*)result_element_ids, obj, "resultElementIds", "QString");
    }
    if(result_external_data_ids->size() > 0){
        toJsonArray((QList<void*>*)result_external_data_ids, obj, "resultExternalDataIds", "QString");
    }
    if(result_workspace_id != nullptr && *result_workspace_id != QString("")){
        toJsonValue(QString("resultWorkspaceId"), result_workspace_id, obj, QString("QString"));
    }
    if(version_id != nullptr && *version_id != QString("")){
        toJsonValue(QString("versionId"), version_id, obj, QString("QString"));
    }
    if(view_ref != nullptr && *view_ref != QString("")){
        toJsonValue(QString("viewRef"), view_ref, obj, QString("QString"));
    }
    if(workspace_id != nullptr && *workspace_id != QString("")){
        toJsonValue(QString("workspaceId"), workspace_id, obj, QString("QString"));
    }

    return obj;
}

QString*
OAIBTTranslationRequestInfo::getDocumentId() {
    return document_id;
}
void
OAIBTTranslationRequestInfo::setDocumentId(QString* document_id) {
    this->document_id = document_id;
    this->m_document_id_isSet = true;
}

QString*
OAIBTTranslationRequestInfo::getFailureReason() {
    return failure_reason;
}
void
OAIBTTranslationRequestInfo::setFailureReason(QString* failure_reason) {
    this->failure_reason = failure_reason;
    this->m_failure_reason_isSet = true;
}

QString*
OAIBTTranslationRequestInfo::getHref() {
    return href;
}
void
OAIBTTranslationRequestInfo::setHref(QString* href) {
    this->href = href;
    this->m_href_isSet = true;
}

QString*
OAIBTTranslationRequestInfo::getId() {
    return id;
}
void
OAIBTTranslationRequestInfo::setId(QString* id) {
    this->id = id;
    this->m_id_isSet = true;
}

QString*
OAIBTTranslationRequestInfo::getName() {
    return name;
}
void
OAIBTTranslationRequestInfo::setName(QString* name) {
    this->name = name;
    this->m_name_isSet = true;
}

QString*
OAIBTTranslationRequestInfo::getRequestElementId() {
    return request_element_id;
}
void
OAIBTTranslationRequestInfo::setRequestElementId(QString* request_element_id) {
    this->request_element_id = request_element_id;
    this->m_request_element_id_isSet = true;
}

QString*
OAIBTTranslationRequestInfo::getRequestState() {
    return request_state;
}
void
OAIBTTranslationRequestInfo::setRequestState(QString* request_state) {
    this->request_state = request_state;
    this->m_request_state_isSet = true;
}

QString*
OAIBTTranslationRequestInfo::getResultDocumentId() {
    return result_document_id;
}
void
OAIBTTranslationRequestInfo::setResultDocumentId(QString* result_document_id) {
    this->result_document_id = result_document_id;
    this->m_result_document_id_isSet = true;
}

QList<QString*>*
OAIBTTranslationRequestInfo::getResultElementIds() {
    return result_element_ids;
}
void
OAIBTTranslationRequestInfo::setResultElementIds(QList<QString*>* result_element_ids) {
    this->result_element_ids = result_element_ids;
    this->m_result_element_ids_isSet = true;
}

QList<QString*>*
OAIBTTranslationRequestInfo::getResultExternalDataIds() {
    return result_external_data_ids;
}
void
OAIBTTranslationRequestInfo::setResultExternalDataIds(QList<QString*>* result_external_data_ids) {
    this->result_external_data_ids = result_external_data_ids;
    this->m_result_external_data_ids_isSet = true;
}

QString*
OAIBTTranslationRequestInfo::getResultWorkspaceId() {
    return result_workspace_id;
}
void
OAIBTTranslationRequestInfo::setResultWorkspaceId(QString* result_workspace_id) {
    this->result_workspace_id = result_workspace_id;
    this->m_result_workspace_id_isSet = true;
}

QString*
OAIBTTranslationRequestInfo::getVersionId() {
    return version_id;
}
void
OAIBTTranslationRequestInfo::setVersionId(QString* version_id) {
    this->version_id = version_id;
    this->m_version_id_isSet = true;
}

QString*
OAIBTTranslationRequestInfo::getViewRef() {
    return view_ref;
}
void
OAIBTTranslationRequestInfo::setViewRef(QString* view_ref) {
    this->view_ref = view_ref;
    this->m_view_ref_isSet = true;
}

QString*
OAIBTTranslationRequestInfo::getWorkspaceId() {
    return workspace_id;
}
void
OAIBTTranslationRequestInfo::setWorkspaceId(QString* workspace_id) {
    this->workspace_id = workspace_id;
    this->m_workspace_id_isSet = true;
}


bool
OAIBTTranslationRequestInfo::isSet(){
    bool isObjectUpdated = false;
    do{
        if(document_id != nullptr && *document_id != QString("")){ isObjectUpdated = true; break;}
        if(failure_reason != nullptr && *failure_reason != QString("")){ isObjectUpdated = true; break;}
        if(href != nullptr && *href != QString("")){ isObjectUpdated = true; break;}
        if(id != nullptr && *id != QString("")){ isObjectUpdated = true; break;}
        if(name != nullptr && *name != QString("")){ isObjectUpdated = true; break;}
        if(request_element_id != nullptr && *request_element_id != QString("")){ isObjectUpdated = true; break;}
        if(request_state != nullptr && *request_state != QString("")){ isObjectUpdated = true; break;}
        if(result_document_id != nullptr && *result_document_id != QString("")){ isObjectUpdated = true; break;}
        if(result_element_ids->size() > 0){ isObjectUpdated = true; break;}
        if(result_external_data_ids->size() > 0){ isObjectUpdated = true; break;}
        if(result_workspace_id != nullptr && *result_workspace_id != QString("")){ isObjectUpdated = true; break;}
        if(version_id != nullptr && *version_id != QString("")){ isObjectUpdated = true; break;}
        if(view_ref != nullptr && *view_ref != QString("")){ isObjectUpdated = true; break;}
        if(workspace_id != nullptr && *workspace_id != QString("")){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

