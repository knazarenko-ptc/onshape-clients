/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * OpenAPI spec version: 1.111
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIParameter.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIParameter::OAIParameter(QString json) {
    init();
    this->fromJson(json);
}

OAIParameter::OAIParameter() {
    init();
}

OAIParameter::~OAIParameter() {
    this->cleanup();
}

void
OAIParameter::init() {
    allow_empty_value = false;
    m_allow_empty_value_isSet = false;
    allow_reserved = false;
    m_allow_reserved_isSet = false;
    content = new OAIApiResponse_content();
    m_content_isSet = false;
    deprecated = false;
    m_deprecated_isSet = false;
    description = new QString("");
    m_description_isSet = false;
    example = NULL;
    m_example_isSet = false;
    examples = new QMap<QString, OAIExample*>();
    m_examples_isSet = false;
    explode = false;
    m_explode_isSet = false;
    extensions = new QMap<QString, OAIObject*>();
    m_extensions_isSet = false;
    getref = new QString("");
    m_getref_isSet = false;
    in = new QString("");
    m_in_isSet = false;
    name = new QString("");
    m_name_isSet = false;
    required = false;
    m_required_isSet = false;
    schema = new OAISchema();
    m_schema_isSet = false;
    style = new QString("");
    m_style_isSet = false;
}

void
OAIParameter::cleanup() {


    if(content != nullptr) { 
        delete content;
    }

    if(description != nullptr) { 
        delete description;
    }
    if(example != nullptr) { 
        delete example;
    }
    if(examples != nullptr) { 
        auto arr = examples;
        for(auto o: *arr) { 
            delete o;
        }
        delete examples;
    }

    if(extensions != nullptr) { 
        auto arr = extensions;
        for(auto o: *arr) { 
            delete o;
        }
        delete extensions;
    }
    if(getref != nullptr) { 
        delete getref;
    }
    if(in != nullptr) { 
        delete in;
    }
    if(name != nullptr) { 
        delete name;
    }

    if(schema != nullptr) { 
        delete schema;
    }
    if(style != nullptr) { 
        delete style;
    }
}

OAIParameter*
OAIParameter::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIParameter::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&allow_empty_value, pJson["allowEmptyValue"], "bool", "");
    
    ::OpenAPI::setValue(&allow_reserved, pJson["allowReserved"], "bool", "");
    
    ::OpenAPI::setValue(&content, pJson["content"], "OAIApiResponse_content", "OAIApiResponse_content");
    
    ::OpenAPI::setValue(&deprecated, pJson["deprecated"], "bool", "");
    
    ::OpenAPI::setValue(&description, pJson["description"], "QString", "QString");
    
    ::OpenAPI::setValue(&example, pJson["example"], "OAIObject", "OAIObject");
    
    
    ::OpenAPI::setValue(&examples, pJson["examples"], "QMap", "OAIExample");
    ::OpenAPI::setValue(&explode, pJson["explode"], "bool", "");
    
    
    ::OpenAPI::setValue(&extensions, pJson["extensions"], "QMap", "OAIObject");
    ::OpenAPI::setValue(&getref, pJson["get$ref"], "QString", "QString");
    
    ::OpenAPI::setValue(&in, pJson["in"], "QString", "QString");
    
    ::OpenAPI::setValue(&name, pJson["name"], "QString", "QString");
    
    ::OpenAPI::setValue(&required, pJson["required"], "bool", "");
    
    ::OpenAPI::setValue(&schema, pJson["schema"], "OAISchema", "OAISchema");
    
    ::OpenAPI::setValue(&style, pJson["style"], "QString", "QString");
    
}

QString
OAIParameter::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIParameter::asJsonObject() {
    QJsonObject obj;
    if(m_allow_empty_value_isSet){
        obj.insert("allowEmptyValue", QJsonValue(allow_empty_value));
    }
    if(m_allow_reserved_isSet){
        obj.insert("allowReserved", QJsonValue(allow_reserved));
    }
    if((content != nullptr) && (content->isSet())){
        toJsonValue(QString("content"), content, obj, QString("OAIApiResponse_content"));
    }
    if(m_deprecated_isSet){
        obj.insert("deprecated", QJsonValue(deprecated));
    }
    if(description != nullptr && *description != QString("")){
        toJsonValue(QString("description"), description, obj, QString("QString"));
    }
    if((example != nullptr) && (example->isSet())){
        toJsonValue(QString("example"), example, obj, QString("OAIObject"));
    }
    if(examples->size() > 0){
        toJsonMap((QMap<QString, void*>*) examples, obj, "examples", "OAIExample");
    }
    if(m_explode_isSet){
        obj.insert("explode", QJsonValue(explode));
    }
    if(extensions->size() > 0){
        toJsonMap((QMap<QString, void*>*) extensions, obj, "extensions", "OAIObject");
    }
    if(getref != nullptr && *getref != QString("")){
        toJsonValue(QString("get$ref"), getref, obj, QString("QString"));
    }
    if(in != nullptr && *in != QString("")){
        toJsonValue(QString("in"), in, obj, QString("QString"));
    }
    if(name != nullptr && *name != QString("")){
        toJsonValue(QString("name"), name, obj, QString("QString"));
    }
    if(m_required_isSet){
        obj.insert("required", QJsonValue(required));
    }
    if((schema != nullptr) && (schema->isSet())){
        toJsonValue(QString("schema"), schema, obj, QString("OAISchema"));
    }
    if(style != nullptr && *style != QString("")){
        toJsonValue(QString("style"), style, obj, QString("QString"));
    }

    return obj;
}

bool
OAIParameter::isAllowEmptyValue() {
    return allow_empty_value;
}
void
OAIParameter::setAllowEmptyValue(bool allow_empty_value) {
    this->allow_empty_value = allow_empty_value;
    this->m_allow_empty_value_isSet = true;
}

bool
OAIParameter::isAllowReserved() {
    return allow_reserved;
}
void
OAIParameter::setAllowReserved(bool allow_reserved) {
    this->allow_reserved = allow_reserved;
    this->m_allow_reserved_isSet = true;
}

OAIApiResponse_content*
OAIParameter::getContent() {
    return content;
}
void
OAIParameter::setContent(OAIApiResponse_content* content) {
    this->content = content;
    this->m_content_isSet = true;
}

bool
OAIParameter::isDeprecated() {
    return deprecated;
}
void
OAIParameter::setDeprecated(bool deprecated) {
    this->deprecated = deprecated;
    this->m_deprecated_isSet = true;
}

QString*
OAIParameter::getDescription() {
    return description;
}
void
OAIParameter::setDescription(QString* description) {
    this->description = description;
    this->m_description_isSet = true;
}

OAIObject*
OAIParameter::getExample() {
    return example;
}
void
OAIParameter::setExample(OAIObject* example) {
    this->example = example;
    this->m_example_isSet = true;
}

QMap<QString, OAIExample*>*
OAIParameter::getExamples() {
    return examples;
}
void
OAIParameter::setExamples(QMap<QString, OAIExample*>* examples) {
    this->examples = examples;
    this->m_examples_isSet = true;
}

bool
OAIParameter::isExplode() {
    return explode;
}
void
OAIParameter::setExplode(bool explode) {
    this->explode = explode;
    this->m_explode_isSet = true;
}

QMap<QString, OAIObject*>*
OAIParameter::getExtensions() {
    return extensions;
}
void
OAIParameter::setExtensions(QMap<QString, OAIObject*>* extensions) {
    this->extensions = extensions;
    this->m_extensions_isSet = true;
}

QString*
OAIParameter::getGetref() {
    return getref;
}
void
OAIParameter::setGetref(QString* getref) {
    this->getref = getref;
    this->m_getref_isSet = true;
}

QString*
OAIParameter::getIn() {
    return in;
}
void
OAIParameter::setIn(QString* in) {
    this->in = in;
    this->m_in_isSet = true;
}

QString*
OAIParameter::getName() {
    return name;
}
void
OAIParameter::setName(QString* name) {
    this->name = name;
    this->m_name_isSet = true;
}

bool
OAIParameter::isRequired() {
    return required;
}
void
OAIParameter::setRequired(bool required) {
    this->required = required;
    this->m_required_isSet = true;
}

OAISchema*
OAIParameter::getSchema() {
    return schema;
}
void
OAIParameter::setSchema(OAISchema* schema) {
    this->schema = schema;
    this->m_schema_isSet = true;
}

QString*
OAIParameter::getStyle() {
    return style;
}
void
OAIParameter::setStyle(QString* style) {
    this->style = style;
    this->m_style_isSet = true;
}


bool
OAIParameter::isSet(){
    bool isObjectUpdated = false;
    do{
        if(m_allow_empty_value_isSet){ isObjectUpdated = true; break;}
        if(m_allow_reserved_isSet){ isObjectUpdated = true; break;}
        if(content != nullptr && content->isSet()){ isObjectUpdated = true; break;}
        if(m_deprecated_isSet){ isObjectUpdated = true; break;}
        if(description != nullptr && *description != QString("")){ isObjectUpdated = true; break;}
        if(example != nullptr && example->isSet()){ isObjectUpdated = true; break;}
        if(examples->size() > 0){ isObjectUpdated = true; break;}
        if(m_explode_isSet){ isObjectUpdated = true; break;}
        if(extensions->size() > 0){ isObjectUpdated = true; break;}
        if(getref != nullptr && *getref != QString("")){ isObjectUpdated = true; break;}
        if(in != nullptr && *in != QString("")){ isObjectUpdated = true; break;}
        if(name != nullptr && *name != QString("")){ isObjectUpdated = true; break;}
        if(m_required_isSet){ isObjectUpdated = true; break;}
        if(schema != nullptr && schema->isSet()){ isObjectUpdated = true; break;}
        if(style != nullptr && *style != QString("")){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

