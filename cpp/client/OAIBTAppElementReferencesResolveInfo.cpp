/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * OpenAPI spec version: 1.111
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIBTAppElementReferencesResolveInfo.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIBTAppElementReferencesResolveInfo::OAIBTAppElementReferencesResolveInfo(QString json) {
    init();
    this->fromJson(json);
}

OAIBTAppElementReferencesResolveInfo::OAIBTAppElementReferencesResolveInfo() {
    init();
}

OAIBTAppElementReferencesResolveInfo::~OAIBTAppElementReferencesResolveInfo() {
    this->cleanup();
}

void
OAIBTAppElementReferencesResolveInfo::init() {
    resolved_references = new QList<OAIBTAppElementReferenceResolveInfo*>();
    m_resolved_references_isSet = false;
    unresolved_reference_ids = new QList<QString*>();
    m_unresolved_reference_ids_isSet = false;
}

void
OAIBTAppElementReferencesResolveInfo::cleanup() {
    if(resolved_references != nullptr) { 
        auto arr = resolved_references;
        for(auto o: *arr) { 
            delete o;
        }
        delete resolved_references;
    }
    if(unresolved_reference_ids != nullptr) { 
        auto arr = unresolved_reference_ids;
        for(auto o: *arr) { 
            delete o;
        }
        delete unresolved_reference_ids;
    }
}

OAIBTAppElementReferencesResolveInfo*
OAIBTAppElementReferencesResolveInfo::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIBTAppElementReferencesResolveInfo::fromJsonObject(QJsonObject pJson) {
    
    ::OpenAPI::setValue(&resolved_references, pJson["resolvedReferences"], "QList", "OAIBTAppElementReferenceResolveInfo");
    
    ::OpenAPI::setValue(&unresolved_reference_ids, pJson["unresolvedReferenceIds"], "QList", "QString");
}

QString
OAIBTAppElementReferencesResolveInfo::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIBTAppElementReferencesResolveInfo::asJsonObject() {
    QJsonObject obj;
    if(resolved_references->size() > 0){
        toJsonArray((QList<void*>*)resolved_references, obj, "resolvedReferences", "OAIBTAppElementReferenceResolveInfo");
    }
    if(unresolved_reference_ids->size() > 0){
        toJsonArray((QList<void*>*)unresolved_reference_ids, obj, "unresolvedReferenceIds", "QString");
    }

    return obj;
}

QList<OAIBTAppElementReferenceResolveInfo*>*
OAIBTAppElementReferencesResolveInfo::getResolvedReferences() {
    return resolved_references;
}
void
OAIBTAppElementReferencesResolveInfo::setResolvedReferences(QList<OAIBTAppElementReferenceResolveInfo*>* resolved_references) {
    this->resolved_references = resolved_references;
    this->m_resolved_references_isSet = true;
}

QList<QString*>*
OAIBTAppElementReferencesResolveInfo::getUnresolvedReferenceIds() {
    return unresolved_reference_ids;
}
void
OAIBTAppElementReferencesResolveInfo::setUnresolvedReferenceIds(QList<QString*>* unresolved_reference_ids) {
    this->unresolved_reference_ids = unresolved_reference_ids;
    this->m_unresolved_reference_ids_isSet = true;
}


bool
OAIBTAppElementReferencesResolveInfo::isSet(){
    bool isObjectUpdated = false;
    do{
        if(resolved_references->size() > 0){ isObjectUpdated = true; break;}
        if(unresolved_reference_ids->size() > 0){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

